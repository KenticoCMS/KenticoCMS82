<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Core</name>
    </assembly>
    <members>
        <member name="T:CMS.Core.AppCoreSetup">
            <summary>
            Represents application startup parameters.
            </summary>
        </member>
        <member name="M:CMS.Core.AppCoreSetup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Core.AppCoreSetup"/> class.
            </summary>
        </member>
        <member name="P:CMS.Core.AppCoreSetup.DependenciesFolderPath">
            <summary>
            Gets the path of the directory containing private assemblies.
            </summary>
        </member>
        <member name="T:CMS.Core.AppCoreSetup.Builder">
            <summary>
            Builds instances of the <see cref="T:CMS.Core.AppCoreSetup"/> class.
            </summary>
        </member>
        <member name="F:CMS.Core.AppCoreSetup.Builder.mDependenciesFolderPath">
            <summary>
            The path of the directory containing private assemblies.
            </summary>
        </member>
        <member name="M:CMS.Core.AppCoreSetup.Builder.WithDependenciesFolderPath(System.String)">
            <summary>
            Configures this builder with the path of the directory containing private assemblies.
            </summary>
            <param name="dependenciesFolderPath">The path of the directory containing private assemblies.</param>
            <returns>A reference to this builder after the path of the directory containing private assemblies has been modified.</returns>
        </member>
        <member name="M:CMS.Core.AppCoreSetup.Builder.Build">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Core.AppCoreSetup"/> class and returns it.
            </summary>
            <returns>A new instance of the <see cref="T:CMS.Core.AppCoreSetup"/> class.</returns>
        </member>
        <member name="T:CMS.ContractAttribute">
            <summary>
            Marks the class with the contract using the specific interface
            </summary>
        </member>
        <member name="M:CMS.ContractAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="interfaceType">Type of the interface for the contract</param>
            <param name="includeAllPublicMembers">If true (default), all public members of the implementation are included into the contract</param>
        </member>
        <member name="P:CMS.ContractAttribute.IncludeAllPublicMembers">
            <summary>
            If true (default), all public members of the implementation are included into the contract
            </summary>
        </member>
        <member name="P:CMS.ContractAttribute.IsLocal">
            <summary>
            If true (default false), the generated files are generated into the same folder.
            </summary>
        </member>
        <member name="P:CMS.ContractAttribute.InterfaceType">
            <summary>
            Interface type
            </summary>
        </member>
        <member name="T:CMS.NotContract">
            <summary>
            Marks the member not to be included into contract
            </summary>
        </member>
        <member name="T:CMS.StaticContractAttribute">
            <summary>
            Marks the class with the contract using the specific interface
            </summary>
        </member>
        <member name="M:CMS.StaticContractAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="interfaceType">Type of the interface for the contract</param>
            <param name="includeAllPublicMembers">If true (default), all public members of the implementation are included into the contract</param>
        </member>
        <member name="T:CMS.AssemblyDiscoverableAttribute">
            <summary>
            Marks the assembly as discoverable (containing modules or implementations)
            </summary>
        </member>
        <member name="T:CMS.IDiscoverableAttribute">
            <summary>
            Interface for a discoverable attribute
            </summary>
        </member>
        <member name="T:CMS.RegisterImplementationAttribute">
            <summary>
            Marks the class as implementation of the given interface
            </summary>
        </member>
        <member name="T:CMS.ImplementationAttribute">
            <summary>
            Marks the class as implementation of the given interface
            </summary>
        </member>
        <member name="T:CMS.AbstractTypeAttribute">
            <summary>
            Marks the class as extension of the given interface
            </summary>
        </member>
        <member name="T:CMS.IPreInitAttribute">
            <summary>
            Defines an attribute with an PreInit method
            </summary>
        </member>
        <member name="M:CMS.IPreInitAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="P:CMS.IPreInitAttribute.MarkedType">
            <summary>
            Type marked with this attribute
            </summary>
        </member>
        <member name="M:CMS.AbstractTypeAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Interface type that is implemented by the class</param>
        </member>
        <member name="M:CMS.AbstractTypeAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="P:CMS.AbstractTypeAttribute.Type">
            <summary>
            Interface type
            </summary>
        </member>
        <member name="P:CMS.AbstractTypeAttribute.MarkedType">
            <summary>
            Type marked with this attribute
            </summary>
        </member>
        <member name="M:CMS.ImplementationAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="interfaceType">Interface type that is implemented by the class</param>
        </member>
        <member name="M:CMS.ImplementationAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="P:CMS.ImplementationAttribute.InterfaceType">
            <summary>
            Interface type
            </summary>
        </member>
        <member name="M:CMS.RegisterImplementationAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="interfaceType">Interface type that is implemented by the class</param>
            <param name="implementationType">Implementation type</param>
        </member>
        <member name="T:CMS.RequiredImplementationAttribute">
            <summary>
            Mark the implementation with this attribute, if two modules try to register more required implementations for same interface, the system throws exception.
            </summary>
        </member>
        <member name="T:CMS.GeneratedFromAttribute">
            <summary>
            Marks the automatically generated classes.
            </summary>
        </member>
        <member name="M:CMS.GeneratedFromAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filePath">Path to the file within the solution from which the marked class has been generated.</param>
        </member>
        <member name="P:CMS.GeneratedFromAttribute.SourceFile">
            <summary>
            Path to the file within the solution from which the marked class has been generated.
            </summary>
        </member>
        <member name="T:CMS.IInitAttribute">
            <summary>
            Defines an attribute with an Init method
            </summary>
        </member>
        <member name="M:CMS.IInitAttribute.Init">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="P:CMS.IInitAttribute.MarkedType">
            <summary>
            Parent type
            </summary>
        </member>
        <member name="T:CMS.RegisterWrapperAttribute">
            <summary>
            Attribute to mark wrapper as a prioritized implementation
            </summary>
        </member>
        <member name="M:CMS.RegisterWrapperAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="interfaceType">Type of the interface for the contract</param>
            <param name="implementationType">Implementation type</param>
        </member>
        <member name="T:CMS.Core.AppCore">
            <summary>
            Main entry point to the application
            </summary>
        </member>
        <member name="F:CMS.Core.AppCore.mLock">
            <summary>
            An object used to synchronize access to this class.
            </summary>
        </member>
        <member name="F:CMS.Core.AppCore.mSetup">
            <summary>
            Application core startup parameters.
            </summary>
        </member>
        <member name="M:CMS.Core.AppCore.PreInit">
            <summary>
            Determines whether the pre-initialization phase of the application core life-cycle is complete. If it is not, it executes it.
            </summary>
            <returns>True, the pre-initialization phase of the application core life-cycle has been executed; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Core.AppCore.Init">
            <summary>
            Determines whether the initialization phase of the application core life-cycle is complete. If it is not, it executes it.
            </summary>
            <returns>True, if the initialization phase of the application core life-cycle has been executed; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Core.AppCore.Setup(CMS.Core.AppCoreSetup)">
            <summary>
            Provides the application core with startup parameters.
            </summary>
            <param name="setup">Application core startup parameters.</param>
        </member>
        <member name="M:CMS.Core.AppCore.CreateDefaultSetup">
            <summary>
            Creates default application startup parameters and returns it.
            </summary>
            <returns>Default application startup parameters.</returns>
        </member>
        <member name="M:CMS.Core.AppCore.InitializeAssemblyResolver">
            <summary>
            Initializes resolution of private assemblies.
            </summary>
            <remarks>
            Private assemblies are located in the CMSDependencies folder and are intended for Kentico only.
            Kentico modules reference private assemblies to avoid conflict with customer's assemblies.
            </remarks>
        </member>
        <member name="P:CMS.Core.AppCore.PreInitialized">
            <summary>
            Gets a value indicating whether the application core has been pre-initialized.
            </summary>
        </member>
        <member name="P:CMS.Core.AppCore.Initialized">
            <summary>
            Gets a value indicating whether the application core has been initialized.
            </summary>
        </member>
        <member name="P:CMS.Core.AppCore.CurrentSetup">
            <summary>
            Gets current application core startup parameters.
            </summary>
        </member>
        <member name="T:CMS.RegisterModuleAttribute">
            <summary>
            Registers the module within assembly
            </summary>
        </member>
        <member name="M:CMS.RegisterModuleAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Module type</param>
        </member>
        <member name="P:CMS.RegisterModuleAttribute.Type">
            <summary>
            Module type
            </summary>
        </member>
        <member name="T:CMS.Core.DefaultAssemblyResolver">
            <summary>
            Resolves private assemblies.
            </summary>
            <remarks>
            Private assemblies are located in specific folder and are intended for Kentico only.
            Kentico modules reference private assemblies to avoid conflict with customer's assemblies in the bin folder.
            Assemblies are organized into subfolders with names that contain assembly name and version.
            As the result multiple versions of the same assembly are supported.
            </remarks>
        </member>
        <member name="F:CMS.Core.DefaultAssemblyResolver.mBaseFolderPath">
            <summary>
            The path to the folder with private assemblies.
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultAssemblyResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Core.DefaultAssemblyResolver"/> class with the specified folder path.
            </summary>
            <param name="baseFolderPath">The path to the folder with private assemblies.</param>
        </member>
        <member name="M:CMS.Core.DefaultAssemblyResolver.GetAssembly(System.Reflection.AssemblyName,System.Reflection.Assembly)">
            <summary>
            Loads the assembly into an execution context using the specified context.
            </summary>
            <param name="name">The name of the assembly to resolve.</param>
            <param name="requestingAssembly">The assembly whose dependency is being resolved.</param>
            <returns>The assembly matching the specified context; or null, if the assembly cannot be resolved.</returns>
        </member>
        <member name="M:CMS.Core.DefaultAssemblyResolver.GetAssemblyFromFile(System.String)">
            <summary>
            Loads the assembly from the specified file into an execution context.
            </summary>
            <param name="filePath">The path to the assembly.</param>
            <returns>The assembly from the specified file; or null, if the assembly does not exist or could not be loaded.</returns>
        </member>
        <member name="M:CMS.Core.DefaultAssemblyResolver.GetAssemblyFilePath(System.Reflection.AssemblyName)">
            <summary>
            Returns a path to the private assembly with the specified name.
            </summary>
            <param name="name">The name of the private assembly.</param>
            <returns>A path to the private assembly with the specified name.</returns>
        </member>
        <member name="T:CMS.Core.AssemblyDiscovery">
            <summary>
            Provides loading of application assemblies.
            </summary>
        </member>
        <member name="F:CMS.Core.AssemblyDiscovery.ASSEMBLY_DISCOVERABLE_ATTRIBUTE_FULLNAME">
            <summary>
            The full name of the AssemblyDiscoverableAttribute class.
            </summary>
        </member>
        <member name="F:CMS.Core.AssemblyDiscovery.mAssemblies">
            <summary>
            A list of application assemblies.
            </summary>
        </member>
        <member name="F:CMS.Core.AssemblyDiscovery.mDiscoverableAssemblies">
            <summary>
            A list of discoverable application assemblies.
            </summary>
        </member>
        <member name="F:CMS.Core.AssemblyDiscovery.mOnlyDiscoverable">
            <summary>
            A value indicating whether the discovery process will locate only assemblies decorated with the <see cref="T:CMS.AssemblyDiscoverableAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:CMS.Core.AssemblyDiscovery.mExcludedFileNames">
            <summary>
            A set of file names that will be excluded from discovery.
            </summary>
        </member>
        <member name="M:CMS.Core.AssemblyDiscovery.GetAssemblies">
            <summary>
            Returns an enumerable collection of application assemblies.
            </summary>
            <remarks>
            The discovery process looks for assemblies in the directories that the assembly resolver probes.
            By default, all the application assemblies are returned, but there are exceptions.
            <list type="number">
            <item><description>If the OnlyDiscoverable property is set to true, assemblies without the <see cref="T:CMS.AssemblyDiscoverableAttribute"/> attribute are excluded from discovery.</description></item>
            <item><description>If there is a file with the "exclude" extension, for example MyCustomAssembly.dll.exclude, the MyCustomAssembly.dll is excluded from discovery.</description></item>
            <item><description>Assemblies from the GAC are always excluded from discovery.</description></item>
            </list>
            </remarks>
            <returns>An enumerable collection of application assemblies.</returns>
        </member>
        <member name="M:CMS.Core.AssemblyDiscovery.GetAssembliesFilePaths">
            <summary>
            Returns an enumerable collection of file paths to all assemblies in the directories that the assembly resolver probes.
            </summary>
            <remarks>
            The assembly resolver probes for assemblies in the application directory.
            If the application setup includes a list of search paths relative to the application directory, the assembly resolver probes for assemblies only in the specified subdirectories.
            A web application is a good example as its setup includes a relative path to the bin subfolder.
            </remarks>
            <returns>An enumerable collection of file paths to all assemblies in the directories that the assembly resolver probes.</returns>
        </member>
        <member name="M:CMS.Core.AssemblyDiscovery.ExecuteGetAssemblies(System.Boolean)">
            <summary>
            Returns a read-only collection of application assemblies matching the specified criteria.
            </summary>
            <param name="onlyDiscoverable">A value indicating whether the discovery process will locate only assemblies decorated with the <see cref="T:CMS.AssemblyDiscoverableAttribute"/> attribute.</param>
            <returns>A read-only collection of application assemblies matching the specified criteria.</returns>
        </member>
        <member name="M:CMS.Core.AssemblyDiscovery.IsAssemblyDiscoverable(System.String)">
            <summary>
            Returns true if the given assembly is discoverable
            </summary>
            <param name="filePath">Assembly file path</param>
        </member>
        <member name="P:CMS.Core.AssemblyDiscovery.OnlyDiscoverable">
            <summary>
            Gets or sets a value indicating whether the discovery process will locate only assemblies decorated with the <see cref="T:CMS.AssemblyDiscoverableAttribute"/> attribute. The default value is true.
            </summary>
        </member>
        <member name="T:CMS.RegisterDecoratorAttribute">
            <summary>
            Marks the class as a decorator for the given interface
            </summary>
        </member>
        <member name="M:CMS.RegisterDecoratorAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="interfaceType">Interface type that is implemented by the class</param>
            <param name="implementationType">Implementation type</param>
        </member>
        <member name="M:CMS.RegisterDecoratorAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="P:CMS.RegisterDecoratorAttribute.InterfaceType">
            <summary>
            Interface type
            </summary>
        </member>
        <member name="P:CMS.RegisterDecoratorAttribute.ApplyAfter">
            <summary>
            If set, the extension applies after extension of the specified type
            </summary>
        </member>
        <member name="T:CMS.DefaultImplementationAttribute">
            <summary>
            Marks the class as implementation of the given interface
            </summary>
        </member>
        <member name="M:CMS.DefaultImplementationAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="implementationType">Default implementation type</param>
            <param name="canBeReplaced">If true, the default implementation can be replaced</param>
        </member>
        <member name="P:CMS.DefaultImplementationAttribute.ImplementationType">
            <summary>
            Implementation type
            </summary>
        </member>
        <member name="P:CMS.DefaultImplementationAttribute.CanBeReplaced">
            <summary>
            If true, the default implementation can be replaced
            </summary>
        </member>
        <member name="T:CMS.Core.TypeManager">
            <summary>
            Manager for object factories
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mImplementations">
            <summary>
            Dictionary of type implementations [InterfaceType -> ImplementationOfAttribute]
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mDecorators">
            <summary>
            Dictionary of type extensions [InterfaceType -> List(ExtendsAttribute)]
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mInitializedTypes">
            <summary>
            Set of interface types, that were already initialized 
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mPreInitializedAssemblies">
            <summary>
            Set of assemblies, that were already pre-initialized
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mInitializedAssemblies">
            <summary>
            Set of assemblies, that were already initialized
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mDynamicAssemblies">
            <summary>
            A set of assemblies that were compiled after the assembly discovery had finished.
            </summary>
        </member>
        <member name="F:CMS.Core.TypeManager.mLock">
            <summary>
            Object for locking the context
            </summary>
        </member>
        <member name="M:CMS.Core.TypeManager.EnsureInitialization``1">
            <summary>
            Ensures the initialization of the given interface type implementations and extensions
            </summary>
        </member>
        <member name="M:CMS.Core.TypeManager.FindImplementation(System.Type)">
            <summary>
            Finds the implementation of the given interface
            </summary>
            <param name="interfaceType">Type of the interface</param>
        </member>
        <member name="M:CMS.Core.TypeManager.FindDecorators(System.Type)">
            <summary>
            Finds the decorators of the given interface
            </summary>
            <param name="interfaceType">Type of the interface</param>
        </member>
        <member name="M:CMS.Core.TypeManager.RegisterDynamicAssembly(System.Reflection.Assembly)">
            <summary>
            Registers an assembly that was compiled after the assembly discovery had finished.
            </summary>
            <param name="assembly">The assembly to register.</param>
        </member>
        <member name="M:CMS.Core.TypeManager.RegisterDecorator(CMS.RegisterDecoratorAttribute)">
            <summary>
            Registers the decorator
            </summary>
            <param name="decorator">Decorator attribute</param>
        </member>
        <member name="M:CMS.Core.TypeManager.RegisterImplementation(CMS.ImplementationAttribute)">
            <summary>
            Registers the implementation of the given interface
            </summary>
            <param name="implementation">Implementation attribute</param>
        </member>
        <member name="M:CMS.Core.TypeManager.PreInitializeTypes">
            <summary>
            PreInitializes all types with IPreInitAttribute attributes
            </summary>
        </member>
        <member name="M:CMS.Core.TypeManager.PreInitializeTypes(System.Reflection.Assembly)">
            <summary>
            Pre-initializes types in the given assembly
            </summary>
            <param name="assembly">Assembly to Pre-initialize</param>
        </member>
        <member name="M:CMS.Core.TypeManager.InitializeTypes">
            <summary>
            PreInitializes all types with IPreInitAttribute attributes
            </summary>
        </member>
        <member name="M:CMS.Core.TypeManager.InitializeTypes(System.Reflection.Assembly)">
            <summary>
            Initializes types in the given assembly
            </summary>
            <param name="assembly">Assembly to initialize</param>
        </member>
        <member name="P:CMS.Core.TypeManager.Implementations">
            <summary>
            Dictionary of type implementations [InterfaceType -> ImplementationType]
            </summary>
        </member>
        <member name="P:CMS.Core.TypeManager.Decorators">
            <summary>
            Dictionary of type extensions [InterfaceType -> List(ExtensionType)]
            </summary>
        </member>
        <member name="P:CMS.Core.TypeManager.Initialized">
            <summary>
            If true, the types were already initialized
            </summary>
        </member>
        <member name="P:CMS.Core.TypeManager.PreInitialized">
            <summary>
            If true, the types were already pre-initialized
            </summary>
        </member>
        <member name="T:CMS.Core.SingletonStorage`2">
            <summary>
            Storage for singleton objects
            </summary>
        </member>
        <member name="P:CMS.Core.SingletonStorage`2.Singleton">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="T:CMS.Core.IMacroRoot">
            <summary>
            Represents visible root of the macro engine where root properties can be registered.
            Extend this interface with properties which you want to be resolved
            </summary>
        </member>
        <member name="T:CMS.Core.IMacroMethodParam">
            <summary>
            Represents method executable in MacroEngine.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethodParam.Type">
            <summary>
            Gets or sets a return type of the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethodParam.Comment">
            <summary>
            Gets or sets a comment for the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethodParam.Name">
            <summary>
            Gets or sets the name of the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethodParam.IsParams">
            <summary>
            If true, the parameter is declared with params keyword.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethodParam.AsExpression">
            <summary>
            If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated.
            </summary>
        </member>
        <member name="T:CMS.Core.IMacroMethod">
            <summary>
            Represents method executable in MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.Core.IMacroMethod.ExecuteMethod(System.Object[])">
            <summary>
            Executes given method with parameters.
            </summary>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Core.IMacroMethod.AddParameter(System.String,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds parameter to the method definition.
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="comment">Comment of the parameter</param>
            <param name="isParams">If true, parameter is declared with params keyword</param>
            <param name="asExpression">If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated</param>
        </member>
        <member name="P:CMS.Core.IMacroMethod.Method">
            <summary>
            Gets or sets reference to a method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.Name">
            <summary>
            Returns name of the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.Type">
            <summary>
            Gets or sets a return type of the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.Comment">
            <summary>
            Gets or sets a comment for the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.Snippet">
            <summary>
            Gets or sets a code snippet which is used in AutoCompletion when TAB is pressed (for determining the cursor position use pipe).
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.MinimumParameters">
            <summary>
            Gets or sets the minimal number of parameters needed by the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.IsHidden">
            <summary>
            If true, the method won't be visible in IntelliSense (but will be normally executed when called).
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.Parameters">
            <summary>
            Gets or sets the parameters for the method.
            </summary>
        </member>
        <member name="P:CMS.Core.IMacroMethod.SpecialParameters">
            <summary>
            Gets or sets the list of special parameters needed to be supplied by resolver.
            </summary>
        </member>
        <member name="T:CMS.Core.DefaultPerformanceCounter">
            <summary>
            Default performance counter implementation
            </summary>
        </member>
        <member name="T:CMS.Core.IPerformanceCounter">
            <summary>
            Interface for a performance counter
            </summary>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.Increment(System.String)">
            <summary>
            Increments global and site counter. If the parameter siteName is null, increments only global counter.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.Decrement(System.String)">
            <summary>
            Decrements global and site counter. If the parameter siteName is null, decrements only global counter.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.SetValue(System.Int64,System.String)">
            <summary>
            Sets raw value of global or site counter. If the parameter siteName is null, sets global counter.
            </summary>
            <param name="value">Value</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.GetValue(System.String,System.Boolean)">
            <summary>
            Gets value of global or site counter. If the parameter siteName is null, get global counter value.
            </summary>
            <param name="siteName">Site name</param>
            <param name="updateLastLog">Indicates if date time of last log value should be updated.</param>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.Clear">
            <summary>
            Clears global and sites counters.
            </summary>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.ClearLastLog">
            <summary>
            Clears last log date time.
            </summary>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.GetLastLog(System.String)">
            <summary>
            Gets time of last log.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.IPerformanceCounter.Reset(System.Boolean)">
            <summary>
            Resets global and sites values.
            </summary>
            <param name="resetSitesValues">Indicates if sites counters should be reset.</param>
        </member>
        <member name="P:CMS.Core.IPerformanceCounter.Sites">
            <summary>
            Gets collection of sites name.
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.Increment(System.String)">
            <summary>
            Increments global and site counter. If the parameter siteName is null, increments only global counter.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.Decrement(System.String)">
            <summary>
            Decrements global and site counter. If the parameter siteName is null, decrements only global counter.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.SetValue(System.Int64,System.String)">
            <summary>
            Sets raw value of global or site counter. If the parameter siteName is null, sets global counter.
            </summary>
            <param name="value">Value</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.GetValue(System.String,System.Boolean)">
            <summary>
            Gets value of global or site counter. If the parameter siteName is null, get global counter value.
            </summary>
            <param name="siteName">Site name</param>
            <param name="updateLastLog">Indicates if date time of last log value should be updated.</param>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.Clear">
            <summary>
            Clears global and sites counters.
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.ClearLastLog">
            <summary>
            Clears last log date time.
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.GetLastLog(System.String)">
            <summary>
            Gets time of last log.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Core.DefaultPerformanceCounter.Reset(System.Boolean)">
            <summary>
            Resets global and sites values.
            </summary>
            <param name="resetSitesValues">Indicates if sites counters should be reset.</param>
        </member>
        <member name="P:CMS.Core.DefaultPerformanceCounter.Sites">
            <summary>
            Gets collection of sites name.
            </summary>
        </member>
        <member name="T:CMS.IWorkerTask">
            <summary>
            Defines a common interface for simple worker tasks
            </summary>
        </member>
        <member name="M:CMS.IWorkerTask.Execute">
            <summary>
            Executes the task
            </summary>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="T:CMS.Core.DiscoveryError">
            <summary>
            Represents an error that occurred during the assembly or module discovery process.
            </summary>
        </member>
        <member name="F:CMS.Core.DiscoveryError.EVENTSOURCE">
            <summary>
            The name of the event source for the event log.
            </summary>
        </member>
        <member name="F:CMS.Core.DiscoveryError.mException">
            <summary>
            The exception that was raised during the discovery process. 
            </summary>
        </member>
        <member name="F:CMS.Core.DiscoveryError.mAssemblyNameOrFilePath">
            <summary>
            The full name of the assembly or a path to the assembly file.
            </summary>
        </member>
        <member name="M:CMS.Core.DiscoveryError.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Core.DiscoveryError"/> class with the assembly name (or a file path) and the exception that was raised during the discovery process.
            </summary>
            <param name="exception">The exception that was raised during the discovery process.</param>
            <param name="assemblyNameOrFilePath">The full name of the assembly (or a file path).</param>
        </member>
        <member name="M:CMS.Core.DiscoveryError.LogEvent">
            <summary>
            Appends this discovery error to the event log.
            </summary>
            <remarks>
            The contents of the event log entry vary depending on the error type.
            </remarks>
        </member>
        <member name="M:CMS.Core.DiscoveryError.LogReflectionTypeLoadException(System.Reflection.ReflectionTypeLoadException,System.Text.StringBuilder)">
            <summary>
            Appends the specified <see cref="T:System.Reflection.ReflectionTypeLoadException"/> to the event log.
            </summary>
            <param name="exception">The <see cref="T:System.Reflection.ReflectionTypeLoadException"/> to append to the event log.</param>
            <param name="description">The description of the event log entry.</param>
        </member>
        <member name="M:CMS.Core.DiscoveryError.LogBadImageFormatException(System.Text.StringBuilder)">
            <summary>
            Appends the specified <see cref="T:System.BadImageFormatException"/> to the event log.
            </summary>
            <param name="description">The description of the event log entry.</param>
        </member>
        <member name="M:CMS.Core.DiscoveryError.LogFileLoadException(System.Text.StringBuilder)">
            <summary>
            Appends the specified <see cref="T:System.IO.FileLoadException"/> to the event log.
            </summary>
            <param name="description">The description of the event log entry.</param>
        </member>
        <member name="M:CMS.Core.DiscoveryError.LogException(System.Text.StringBuilder)">
            <summary>
            Appends the specified <see cref="T:System.Exception"/> to the event log.
            </summary>
            <param name="description">The description of the event log entry.</param>
        </member>
        <member name="M:CMS.Core.DiscoveryError.LogEvent(System.String,System.Text.StringBuilder)">
            <summary>
            Appends this error to the event log using the specified event code and description.
            </summary>
            <param name="eventCode">The code of the event log entry.</param>
            <param name="description">The description of the event log entry.</param>
        </member>
        <member name="P:CMS.Core.DiscoveryError.IsDevelopmentMode">
            <summary>
            Gets a value indicating whether the development mode is active.
            </summary>
            <remarks>
            The development mode setting is retrieved using the ConfigurationManager class as the core services might not be available during discovery.
            </remarks>
        </member>
        <member name="T:CMS.Core.ModuleDiscovery">
            <summary>
            Provides loading of application modules.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleDiscovery.GetModules">
            <summary>
            Returns an enumerable collection of application modules.
            </summary>
            <remarks>
            The discovery process looks for modules in discoverable assemblies (see <see cref="T:CMS.Core.AssemblyDiscovery"/> for more information).
            The module type is located using the <see cref="T:CMS.RegisterModuleAttribute"/>.
            </remarks>
            <returns>An enumerable collection of application modules.</returns>
        </member>
        <member name="M:CMS.Core.ModuleDiscovery.GetModules(System.Reflection.Assembly)">
            <summary>
            Returns an enumerable collection of application modules from the specified assembly.
            </summary>
            <remarks>
            The module type is located using the <see cref="T:CMS.RegisterModuleAttribute"/>.
            </remarks>
            <param name="assembly">The assembly to retrieve modules from.</param>
            <returns>An enumerable collection of application modules from the specified assembly.</returns>
        </member>
        <member name="T:CMS.Core.ModuleEntry">
            <summary>
            Represents the standard module entry.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntry.#ctor(CMS.Core.ModuleMetadata)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntry.PreInit">
            <summary>
            Pre-initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntry.Init">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntry.OnPreInit">
            <summary>
            Handles the module pre-initialization.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntry.OnInit">
            <summary>
            Handles the module initialization.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.ModuleMetadata">
            <summary>
            Gets the module metadata.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.ModuleInfo">
            <summary>
            Gets the module info.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.Initialized">
            <summary>
            True if the module was initialized
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.PreInitialized">
            <summary>
            True if the module was pre-initialized
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.AutoInitialize">
            <summary>
            If true, the module is allowed to be initialized automatically
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.IsDiscoverable">
            <summary>
            If true, this module is automatically discoverable
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntry.ReferencedAssembliesNames">
            <summary>
            Gets a set of names of assemblies referenced by the assembly of this module entry.
            </summary>
            <remarks>
            The set performs a case-insensitive string comparison using the word comparison rules of the invariant culture.
            </remarks>
        </member>
        <member name="T:CMS.Core.ModuleEntryComparer">
            <summary>
            Represents a module entry comparison operation that uses module entry dependencies.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntryComparer.Compare(CMS.Core.ModuleEntry,CMS.Core.ModuleEntry)">
            <summary>
            Compares two module entries and returns an indication of their relative sort order.
            </summary>
            <param name="first">A module entry to compare to <paramref name="second"/>.</param>
            <param name="second">A module entry to compare to <paramref name="first"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="T:CMS.Core.ModuleMetadata">
            <summary>
            Represents the module metadata.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleMetadata.mExtends">
            <summary>
            A set of names of module dependencies.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Core.ModuleMetadata"/> class.
            </summary>
            <param name="name">The module name.</param>
        </member>
        <member name="P:CMS.Core.ModuleMetadata.Name">
            <summary>
            Gets the module name.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleMetadata.Extends">
            <summary>
            Gets a set of names of module dependencies.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleMetadata.RootPath">
            <summary>
            Gets the directory with module files.
            </summary>
        </member>
        <member name="T:CMS.Core.ModuleName">
            <summary>
            Constants for module names
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CMS">
            <summary>
            CMS.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CUSTOMSYSTEM">
            <summary>
            Custom system module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CONTENT">
            <summary>
            Content.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.EVENTLOG">
            <summary>
            Event log.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.EMAIL">
            <summary>
            Emails.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.PORTALENGINE">
            <summary>
            Portal engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CATEGORIES">
            <summary>
            Categories.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.BLOGS">
            <summary>
            Blogs.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.ECOMMERCE">
            <summary>
            Ecommerce.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.EVENTMANAGER">
            <summary>
            Event manager.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.FORUMS">
            <summary>
            Forums.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.FRIENDS">
            <summary>
            Friends.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MESSAGEBOARD">
            <summary>
            Message board.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MESSAGING">
            <summary>
            Messaging.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.NEWSLETTER">
            <summary>
            Newsletter.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.NOTIFICATIONS">
            <summary>
            Notifications.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.POLLS">
            <summary>
            Polls.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.PERMISSIONS">
            <summary>
            Permissions.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.PERSONAS">
            <summary>
            Personas (a.k.a. Persona Based Recommendations).
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.REPORTING">
            <summary>
            Reporting.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SYNCHRONIZATION">
            <summary>
            Synchronization.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SYNCHRONIZATIONENGINE">
            <summary>
            Synchronization engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SCORING">
            <summary>
            Scoring.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.STAGING">
            <summary>
            Staging.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WSE3SERVICE">
            <summary>
            Staging WSE3 communication service.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.UIPERSONALIZATION">
            <summary>
            UI Personalization.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WEBANALYTICS">
            <summary>
            Web analytics.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.GLOBALIZATION">
            <summary>
            Globalization
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SITE">
            <summary>
            Site.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CUSTOMTABLES">
            <summary>
            Custom tables.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SEARCHLUCENE3">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SEARCH">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SEARCHTEXTEXTRACTORS">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SEARCHLUCENE">
            <summary>
            Search Lucene
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MODULES">
            <summary>
            Modules
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MEMBERSHIP">
            <summary>
            Membership
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MACROENGINE">
            <summary>
            Macro engine
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.PROTECTION">
            <summary>
            Protection.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.RELATIONSHIPS">
            <summary>
            Relationships.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.BANNERMANAGEMENT">
            <summary>
            Banner management
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.TAXONOMY">
            <summary>
            Taxonomy
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WEBFARMSYNC">
            <summary>
            Web farm sync.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.COMMUNITY">
            <summary>
            Community.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MEDIALIBRARY">
            <summary>
            Media library.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.BIZFORM">
            <summary>
            Biz Forms.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.GROUPS">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.DOCUMENTENGINE">
            <summary>
            Tree engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WORKFLOWENGINE">
            <summary>
            Workflow engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.AUTOMATION">
            <summary>
            Automation engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.FORMENGINE">
            <summary>
            Form engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.FORMECONTROLS">
            <summary>
            Form controls.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SCHEDULER">
            <summary>
            Scheduler.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.BASE">
            <summary>
            Settings provider.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.FILEMANAGER">
            <summary>
            File manager.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.LOCALIZATION">
            <summary>
            Localization.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.LICENSE">
            <summary>
            Licenses.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.HELPERS">
            <summary>
            Global helper
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.DATAENGINE">
            <summary>
            Data engine.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.ONLINEMARKETING">
            <summary>
            Online marketing.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CONTACTMANAGEMENT">
            <summary>
            Contact management.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.ABTEST">
            <summary>
            A/B tests.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MVTEST">
            <summary>
            MVT tests.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CONTENTPERSONALIZATION">
            <summary>
            Content personalization.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WEBDAV">
            <summary>
            WebDAV.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.PROJECTMANAGEMENT">
            <summary>
            Project Management.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.IMPORTEXPORT">
            <summary>
            Import/export module.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.URLREWRITING">
            <summary>
            URL rewriting module.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.MVC">
            <summary>
            MVC Implementation module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.FILEIMPORT">
            <summary>
            File import module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SOCIALMEDIA">
            <summary>
            Social media module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.TRANSLATIONSERVICES">
            <summary>
            Translation services module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.CHAT">
            <summary>
            Translation services module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.ABUSEREPORT">
            <summary>
            Abuse report module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.BADWORDS">
            <summary>
            Bad words module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.UIMODULE">
            <summary>
            UI controls module
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.EXTENDEDCONTROLS">
            <summary>
            Extended controls
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.IO">
            <summary>
            IO
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.DESIGN">
            <summary>
            Design
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SOCIALMARKETING">
            <summary>
            Social marketing
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.SHAREPOINT">
            <summary>
            SharePoint
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.ONLINEFORMS">
            <summary>
            Online forms.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.STRANDSRECOMMENDER">
            <summary>
            Integration with Strands Recommender.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.OUTPUTFILTER">
            <summary>
            Output filer.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.ISSUES">
            <summary>
            Issues.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.DEVICEPROFILES">
            <summary>
            Device profiles
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WIDGETS">
            <summary>
            Widgets
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WIFINTEGRATION">
            <summary>
            Windows Identity Foundation Integration
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleName.WEBAPI">
            <summary>
            Web API
            </summary>
        </member>
        <member name="T:CMS.Core.BufferedEvent">
            <summary>
            Represents the data container for the buffered events.
            </summary>
        </member>
        <member name="F:CMS.Core.BufferedEvent.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:CMS.Core.BufferedEvent.Source">
            <summary>
            Event source
            </summary>
        </member>
        <member name="F:CMS.Core.BufferedEvent.Code">
            <summary>
            Event code
            </summary>
        </member>
        <member name="F:CMS.Core.BufferedEvent.Description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="F:CMS.Core.BufferedEvent.Exception">
            <summary>
            Exception to log
            </summary>
        </member>
        <member name="M:CMS.Core.BufferedEvent.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Event type</param>
            <param name="source">Event source</param>
            <param name="code">Event code</param>
            <param name="description">Event description</param>
        </member>
        <member name="M:CMS.Core.BufferedEvent.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="source">Event source</param>
            <param name="code">Event code</param>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:CMS.Core.BufferedEvent.LogEvent">
            <summary>
            Logs the buffered event to the event log
            </summary>
        </member>
        <member name="P:CMS.Core.BufferedEvent.AllowMultiple">
            <summary>
            If true, it is allowed to log this exception multiple times within the application run
            </summary>
        </member>
        <member name="T:CMS.Core.DefaultLogContext">
            <summary>
            Default log context
            </summary>
        </member>
        <member name="T:CMS.Core.ILogContext">
            <summary>
            Interface for the Log context
            </summary>
        </member>
        <member name="M:CMS.Core.ILogContext.AppendText(System.String,System.Boolean)">
            <summary>
            Appends the text.
            </summary>
            <param name="text">Text to append</param>
            <param name="newLine">Append as new line</param>
        </member>
        <member name="P:CMS.Core.ILogContext.Offset">
            <summary>
            Offset of a partial log in a complete log
            </summary>
        </member>
        <member name="P:CMS.Core.ILogContext.Log">
            <summary>
            Log content
            </summary>
        </member>
        <member name="P:CMS.Core.ILogContext.LogGuid">
            <summary>
            Log guid.
            </summary>
        </member>
        <member name="P:CMS.Core.ILogContext.MaxLength">
            <summary>
            Maximum length of the log
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultLogContext.AppendText(System.String,System.Boolean)">
            <summary>
            Appends the text.
            </summary>
            <param name="text">Text to append</param>
            <param name="newLine">Append as new line</param>
        </member>
        <member name="P:CMS.Core.DefaultLogContext.Offset">
            <summary>
            Offset of a partial log in a complete log
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultLogContext.MaxLength">
            <summary>
            Maximum length of the log
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultLogContext.Log">
            <summary>
            Log
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultLogContext.LogGuid">
            <summary>
            Log GUID
            </summary>
        </member>
        <member name="T:CMS.Core.DefaultWebFarmService">
            <summary>
            Default service to provide web farm synchronization
            </summary>
        </member>
        <member name="T:CMS.Core.IWebFarmService">
            <summary>
            Web farm service interface
            </summary>
        </member>
        <member name="M:CMS.Core.IWebFarmService.NotifyServers(System.Boolean)">
            <summary>
            Notifies other servers that some changes occurred
            </summary>
            <param name="forceSynchronization">If true, the synchronization is forced at this particular moment</param>
        </member>
        <member name="M:CMS.Core.IWebFarmService.NotifyWebApplication(System.String)">
            <summary>
            Notifies the application sitting under specific physical path
            </summary>
            <param name="appPath">Application path</param>
        </member>
        <member name="M:CMS.Core.IWebFarmService.RegisterTask(System.String,System.Action{System.String,System.String,CMS.Core.BinaryData},System.Func{System.Boolean})">
            <summary>
            Registers the given web farm task
            </summary>
            <param name="taskType">Task type</param>
            <param name="execute">Method executed to perform the task</param>
            <param name="condition">Condition under which the task is synchronized</param>
        </member>
        <member name="M:CMS.Core.IWebFarmService.CreateTask(System.String,System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Creates task to be synchronized to other servers
            </summary>
            <param name="taskType">Task type</param>
            <param name="taskTarget">Target</param>
            <param name="taskTextData">Task text data (such as code name, ID etc.)</param>
            <param name="taskBinaryData">Task binary data (for attachments etc.)</param>
            <returns>Returns true if the task was created (web farm is set up and task was allowed)</returns>
        </member>
        <member name="M:CMS.Core.IWebFarmService.GetEnabledServerNames">
            <summary>
            Gets the list of currently enabled servers
            </summary>
        </member>
        <member name="M:CMS.Core.IWebFarmService.GetServerNamesToUpdate">
            <summary>
            Gets the list of names of servers to be updated. Current server is excluded.
            </summary>
        </member>
        <member name="P:CMS.Core.IWebFarmService.SynchronizePhysicalFiles">
            <summary>
            Gets value that indicates whether file synchronization for physical project files is enabled.
            </summary>
        </member>
        <member name="P:CMS.Core.IWebFarmService.WebFarmEnabled">
            <summary>
            Returns true if the web farm is enabled
            </summary>
        </member>
        <member name="P:CMS.Core.IWebFarmService.ServerName">
            <summary>
            Returns unique identifier of the server
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultWebFarmService.NotifyServers(System.Boolean)">
            <summary>
            Notifies other servers that some changes occurred
            </summary>
            <param name="forceSynchronization">If true, the synchronization is forced at this particular moment</param>
        </member>
        <member name="M:CMS.Core.DefaultWebFarmService.NotifyWebApplication(System.String)">
            <summary>
            Notifies the application sitting under specific physical path
            </summary>
            <param name="appPath">Application path</param>
        </member>
        <member name="M:CMS.Core.DefaultWebFarmService.RegisterTask(System.String,System.Action{System.String,System.String,CMS.Core.BinaryData},System.Func{System.Boolean})">
            <summary>
            Registers the given web farm task
            </summary>
            <param name="taskType">Task type</param>
            <param name="execute">Method executed to perform the task</param>
            <param name="condition">Condition under which the task is synchronized</param>
        </member>
        <member name="M:CMS.Core.DefaultWebFarmService.CreateTask(System.String,System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Creates task.
            </summary>
            <param name="taskType">Task type</param>
            <param name="taskTarget">Target</param>
            <param name="taskTextData">Task text data (such as code name, ID etc.)</param>
            <param name="taskBinaryData">Task binary data (for attachments etc.)</param>
            <returns>Returns true if the task was created (web farm is set up and task was allowed)</returns>
        </member>
        <member name="M:CMS.Core.DefaultWebFarmService.GetEnabledServerNames">
            <summary>
            Gets the list of currently enabled servers
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultWebFarmService.GetServerNamesToUpdate">
            <summary>
            Gets the list of names of servers to be updated. Current server is excluded.
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultWebFarmService.SynchronizePhysicalFiles">
            <summary>
            Gets value that indicates whether file synchronization for physical project files is enabled.
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultWebFarmService.WebFarmEnabled">
            <summary>
            Returns true if the web farm is enabled
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultWebFarmService.ServerName">
            <summary>
            Returns unique identifier of the server
            </summary>
        </member>
        <member name="T:CMS.Core.BinaryData">
            <summary>
            Wrapper for the binary data of the web farm task
            </summary>
        </member>
        <member name="F:CMS.Core.BinaryData.mData">
            <summary>
            Resulting binary data
            </summary>
        </member>
        <member name="F:CMS.Core.BinaryData.mStream">
            <summary>
            Resulting stream
            </summary>
        </member>
        <member name="M:CMS.Core.BinaryData.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.Core.BinaryData.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="str">Source stream</param>
        </member>
        <member name="M:CMS.Core.BinaryData.#ctor(System.Func{System.Byte[]})">
            <summary>
            Constructor
            </summary>
            <param name="getData">Method used to get the binary data when required</param>
        </member>
        <member name="M:CMS.Core.BinaryData.op_Implicit(System.Byte[])~CMS.Core.BinaryData">
            <summary>
            Implicit operator to convert byte array to task binary data
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.Core.BinaryData.op_Implicit(System.IO.Stream)~CMS.Core.BinaryData">
            <summary>
            Implicit operator to convert stream to task binary data
            </summary>
            <param name="str">Source stream</param>
        </member>
        <member name="M:CMS.Core.BinaryData.GetByteArrayFromStream(System.IO.Stream,System.Int32,System.Int64)">
            <summary>
            Returns byte array from input stream.
            </summary>
            <param name="stream">Input stream</param>
            <param name="bufferSize">Buffer size, by default 64kB</param>
            <param name="position">Position from which the reading should start</param>
        </member>
        <member name="M:CMS.Core.BinaryData.Close">
            <summary>
            Closes the stream behind this binary data (if set)
            </summary>
        </member>
        <member name="P:CMS.Core.BinaryData.Length">
            <summary>
            Length of the binary data
            </summary>
        </member>
        <member name="P:CMS.Core.BinaryData.Data">
            <summary>
            Resulting binary data
            </summary>
        </member>
        <member name="P:CMS.Core.BinaryData.Stream">
            <summary>
            Returns SourceStream if not null, otherwise returns SourceData wrapped in the MemoryStream.
            </summary>
        </member>
        <member name="P:CMS.Core.BinaryData.SourceData">
            <summary>
            Source data
            </summary>
        </member>
        <member name="P:CMS.Core.BinaryData.SourceStream">
            <summary>
            Source stream
            </summary>
        </member>
        <member name="P:CMS.Core.BinaryData.GetData">
            <summary>
            External method used to get the binary data when required
            </summary>
        </member>
        <member name="T:CMS.Core.AbstractDecorator`2">
            <summary>
            Base class for decorators
            </summary>
        </member>
        <member name="T:CMS.Core.AbstractDecorator`1">
            <summary>
            Base class for decorators
            </summary>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.CreateBaseObject">
            <summary>
            Creates the base object for this decorator
            </summary>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.Use``1">
            <summary>
            Applies the decorator to the given interface type
            </summary>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.Use(System.Type)">
            <summary>
            Applies the decorator to the given interface type
            </summary>
            <param name="decoratorType">Decorator type</param>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.As``1">
            <summary>
            Casts this decorator to the required interface type 
            </summary>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.GetFirstFound``1(`0)">
            <summary>
            Gets the first found object of the given type in the chain
            </summary>
            <param name="start">Start of the chain</param>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.GetFirstFound``1(CMS.Core.AbstractDecorator{`0})">
            <summary>
            Gets the first found object of the given type in the chain
            </summary>
            <param name="start">Start of the chain</param>
        </member>
        <member name="M:CMS.Core.AbstractDecorator`1.ConvertTo``1(`0)">
            <summary>
            Converts the given source type to the result type
            </summary>
            <param name="source">Source to convert</param>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.OverrideBy">
            <summary>
            Parent object 
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.Overriden">
            <summary>
            Returns true if the object is overriden
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.ImmediateBase">
            <summary>
            Base object
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.IsTopMost">
            <summary>
            Returns true, if this decorator is the top most in the chain
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.TopMost">
            <summary>
            Top most object in the chain of decorators
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.ParentDecorator">
            <summary>
            Parent decorator
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.ChildDecorator">
            <summary>
            Child decorator
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`1.BaseFactories">
            <summary>
            Base object factories [DecoratorType -> IObjectFactory]
            </summary>
        </member>
        <member name="P:CMS.Core.AbstractDecorator`2.Base">
            <summary>
            Base object extended by this decorator
            </summary>
        </member>
        <member name="T:CMS.Core.Interface`1">
            <summary>
            Decorator methods
            </summary>
        </member>
        <member name="M:CMS.Core.Interface`1.UseDecorator``1">
            <summary>
            Select for which interface 
            </summary>
        </member>
        <member name="M:CMS.Core.Interface`1.UseDefaultImplementation``1">
            <summary>
            Uses the given default implementation for the interface
            </summary>
        </member>
        <member name="T:CMS.Core.IOverridable`1">
            <summary>
            Interface defining overridable object
            </summary>
        </member>
        <member name="P:CMS.Core.IOverridable`1.OverrideBy">
            <summary>
            If set, the object is overriden by this class methods
            </summary>
        </member>
        <member name="P:CMS.Core.IOverridable`1.Overriden">
            <summary>
            Returns true if the object is overriden
            </summary>
        </member>
        <member name="T:CMS.New">
            <summary>
            Entry point to the object factories
            </summary>
        </member>
        <member name="M:CMS.New.Instance``1">
            <summary>
            Creates a new instance of the object of the given type
            </summary>
        </member>
        <member name="P:CMS.New.InstanceOf">
            <summary>
            Creates a new instance of the object of the given type
            </summary>
        </member>
        <member name="T:CMS.Core.StaticServiceWrapper`2">
            <summary>
            Static wrapper for the service with default implementation specified
            </summary>
        </member>
        <member name="P:CMS.Core.StaticServiceWrapper`2.Service">
            <summary>
            Singleton object instance behind the wrapper
            </summary>
        </member>
        <member name="T:CMS.Core.StaticObjectWrapper`1">
            <summary>
            Site related context methods and variables.
            </summary>
        </member>
        <member name="P:CMS.Core.StaticObjectWrapper`1.Singleton">
            <summary>
            Singleton object instance behind the wrapper
            </summary>
        </member>
        <member name="T:CMS.Core.DefaultConversionService">
            <summary>
            Default service to provide conversion
            </summary>
        </member>
        <member name="T:CMS.Core.IConversionService">
            <summary>
            Interface for the conversion service
            </summary>
        </member>
        <member name="M:CMS.Core.IConversionService.GetInteger(System.Object,System.Int32)">
            <summary>
            Returns the integer representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetBoolean(System.Object,System.Boolean)">
            <summary>
            Returns the boolean representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetDouble(System.Object,System.Double,System.String)">
            <summary>
            Returns the double representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetGuid(System.Object,System.Guid)">
            <summary>
            Returns the Guid representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetString(System.Object,System.String)">
            <summary>
            Returns the string representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetIdentifier(System.String)">
            <summary>
            Gets the identifier created from the given name
            </summary>
            <param name="name">Display name</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetDateTime(System.Object,System.DateTime,System.String)">
            <summary>
            Returns the DateTime representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetValue``1(System.Object,``0)">
            <summary>
            Converts the value to specified type. If the value is null, default value is used.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.IConversionService.GetCodeName(System.Object,System.String)">
            <summary>
            Gets the code name created from the given string.
            </summary>
            <param name="name">Display name</param>
            <param name="replacement">Replacement string for invalid characters</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetInteger(System.Object,System.Int32)">
            <summary>
            Returns the integer representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetBoolean(System.Object,System.Boolean)">
            <summary>
            Returns the boolean representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetDouble(System.Object,System.Double,System.String)">
            <summary>
            Returns the double representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetGuid(System.Object,System.Guid)">
            <summary>
            Returns the guid representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetString(System.Object,System.String)">
            <summary>
            Returns the string representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetIdentifier(System.String)">
            <summary>
            Gets the identifier created from the given name
            </summary>
            <param name="name">Display name</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetDateTime(System.Object,System.DateTime,System.String)">
            <summary>
            Returns the DateTime representation of an object or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetValue``1(System.Object,``0)">
            <summary>
            Converts the value to specified type. If the value is null, default value is used.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.DefaultConversionService.GetCodeName(System.Object,System.String)">
            <summary>
            Gets the code name created from the given string.
            </summary>
            <param name="name">Display name</param>
            <param name="replacement">Replacement string for invalid characters</param>
        </member>
        <member name="T:CMS.Core.DefaultConnectionStringService">
            <summary>
            Default service to provide app settings
            </summary>
        </member>
        <member name="T:CMS.Core.IConnectionStringService">
            <summary>
            ConnectionString service interface
            </summary>
        </member>
        <member name="P:CMS.Core.IConnectionStringService.DefaultConnectionString">
            <summary>
            Default connection string
            </summary>
        </member>
        <member name="P:CMS.Core.IConnectionStringService.Item(System.String)">
            <summary>
            Gets the specific connection string from the app config
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultConnectionStringService.DefaultConnectionString">
            <summary>
            Default connection string
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultConnectionStringService.Item(System.String)">
            <summary>
            Returns null
            </summary>
            <param name="name">Connection string name</param>
        </member>
        <member name="T:CMS.Core.DefaultEventLogService">
            <summary>
            Represents the default event log service implementation.
            Stores the events in the buffer to be used later by the proper event log implementation.
            </summary>
        </member>
        <member name="T:CMS.Core.IEventLogService">
            <summary>
            Event log service interface
            </summary>
        </member>
        <member name="M:CMS.Core.IEventLogService.EnsureLog(System.Guid)">
            <summary>
            Ensures the log for given GUID.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.Core.IEventLogService.CloseLog(System.Guid)">
            <summary>
            Closes given log context.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.Core.IEventLogService.LogEvent(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
        </member>
        <member name="M:CMS.Core.IEventLogService.LogException(System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Writes a new error to the event log.
            </summary>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="ex">Exception to be logged</param>
            <param name="allowMultiple">If true, it is allowed to log this exception multiple times within the application run</param>
        </member>
        <member name="P:CMS.Core.IEventLogService.CurrentLogContext">
            <summary>
            Current log context
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultEventLogService.EnsureLog(System.Guid)">
            <summary>
            Ensures the log for given GUID.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.Core.DefaultEventLogService.CloseLog(System.Guid)">
            <summary>
            Closes given log context.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.Core.DefaultEventLogService.LogEvent(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
        </member>
        <member name="M:CMS.Core.DefaultEventLogService.LogException(System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Writes a new error to the event log.
            </summary>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="ex">Exception to be logged</param>
            <param name="allowMultiple">If true, it is allowed to log this exception multiple times within the application run</param>
        </member>
        <member name="M:CMS.Core.DefaultEventLogService.AddBufferedEvent(CMS.Core.BufferedEvent)">
            <summary>
            Adds the event to the buffered list.
            </summary>
            <param name="ev">Event to add</param>
        </member>
        <member name="M:CMS.Core.DefaultEventLogService.LogBufferedEvents">
            <summary>
            Logs the buffered events to the event log
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultEventLogService.CurrentLogContext">
            <summary>
            Returns current log context
            </summary>
        </member>
        <member name="T:CMS.Core.DefaultAppSettingsService">
            <summary>
            Default service to provide app settings
            </summary>
        </member>
        <member name="T:CMS.Core.IAppSettingsService">
            <summary>
            AppSettings service interface
            </summary>
        </member>
        <member name="P:CMS.Core.IAppSettingsService.Item(System.String)">
            <summary>
            Gets the specific settings from the app config
            </summary>
        </member>
        <member name="M:CMS.Core.DefaultAppSettingsService.GetSetting(System.String)">
            <summary>
            Gets the setting value based on the given key
            </summary>
            <param name="keyName">Settings key name</param>
        </member>
        <member name="P:CMS.Core.DefaultAppSettingsService.Item(System.String)">
            <summary>
            Returns null
            </summary>
            <param name="keyName">Settings key</param>
        </member>
        <member name="T:CMS.Core.DefaultLocalizationService">
            <summary>
            Default localization service
            </summary>
        </member>
        <member name="T:CMS.Core.ILocalizationService">
            <summary>
            Localization service interface
            </summary>
        </member>
        <member name="M:CMS.Core.ILocalizationService.GetString(System.String,System.String,System.Boolean)">
            <summary>
            Gets the string by the specified resource key
            </summary>
            <param name="resourceKey">Resource key</param>
            <param name="culture">Culture</param>
            <param name="useDefaultCulture">If true the default culture translation is used if translation in chosen culture doesn't exist</param>
        </member>
        <member name="M:CMS.Core.ILocalizationService.GetFileString(System.String,System.String,System.Boolean)">
            <summary>
            Gets the string by the specified resource key from resource file
            </summary>
            <param name="resourceKey">Resource key</param>
            <param name="culture">Culture</param>
            <param name="useDefaultCulture">If true the default culture translation is used if translation in chosen culture doesn't exist</param>
        </member>
        <member name="M:CMS.Core.ILocalizationService.GetAPIString(System.String,System.String,System.String)">
            <summary>
            Returns specified string.
            </summary>
            <param name="resourceKey">Key of the string</param>
            <param name="culture">Culture</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.ILocalizationService.LocalizeExpression(System.String,System.String,System.Boolean,System.Func{System.String,System.String,System.Boolean,System.String},System.Boolean)">
            <summary>
            Localizes the given expression, handles two types of expressions:
            
            stringkey - Simple localization
            
            =default string|cs-cz=localized string - advanced localization
            </summary>
            <param name="expression">Expression to localize</param>
            <param name="culture">Culture to use for localization</param>
            <param name="encode">If true, translations (replacements) are HTML encoded</param>
            <param name="getStringMethod">Method to get the resource string for localization</param>
            <param name="useDefaultCulture">If true the default culture translation is used if translation in chosen culture doesn't exist</param>
        </member>
        <member name="M:CMS.Core.ILocalizationService.ClearCache(System.Boolean)">
            <summary>
            Clears the cached resource strings and forces them to load again on next localization request.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Core.DefaultLocalizationService.GetString(System.String,System.String,System.Boolean)">
            <summary>
            Returns original resource key
            </summary>
            <param name="resourceKey">Resource key</param>
            <param name="culture">Culture</param>
            <param name="useDefaultCulture">If true the default culture translation is used if translation in chosen culture doesn't exist</param>
        </member>
        <member name="M:CMS.Core.DefaultLocalizationService.GetFileString(System.String,System.String,System.Boolean)">
            <summary>
            Returns original resource key
            </summary>
            <param name="resourceKey">Resource key</param>
            <param name="culture">Culture</param>
            <param name="useDefaultCulture">If true the default culture translation is used if translation in chosen culture doesn't exist</param>
        </member>
        <member name="M:CMS.Core.DefaultLocalizationService.GetAPIString(System.String,System.String,System.String)">
            <summary>
            Returns specified string.
            </summary>
            <param name="stringName">Key of the string</param>
            <param name="culture">Culture</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Core.DefaultLocalizationService.LocalizeExpression(System.String,System.String,System.Boolean,System.Func{System.String,System.String,System.Boolean,System.String},System.Boolean)">
            <summary>
            Localizes the given expression, handles two types of expressions:
            
            stringkey - Simple localization
            
            =default string|cs-cz=localized string - advanced localization
            </summary>
            <param name="expression">Expression to localize</param>
            <param name="culture">Culture to use for localization</param>
            <param name="encode">If true, translations (replacements) are HTML encoded</param>
            <param name="getStringMethod">Method to get the resource string for localization</param>
            <param name="useDefaultCulture">If true the default culture translation is used if translation in chosen culture doesn't exist</param>
        </member>
        <member name="M:CMS.Core.DefaultLocalizationService.ClearCache(System.Boolean)">
            <summary>
            Clears the cached resource strings and forces them to load again on next localization request.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.Core.DefaultSettingsService">
            <summary>
            Default service to provide settings
            </summary>
        </member>
        <member name="T:CMS.Core.ISettingsService">
            <summary>
            Settings service interface
            </summary>
        </member>
        <member name="P:CMS.Core.ISettingsService.IsAvailable">
            <summary>
            Returns true if the settings service is available
            </summary>
        </member>
        <member name="P:CMS.Core.ISettingsService.Item(System.String)">
            <summary>
            Gets the specific settings from the database
            </summary>
            <param name="keyName">Settings key</param>
        </member>
        <member name="P:CMS.Core.DefaultSettingsService.IsAvailable">
            <summary>
            Returns true if the settings service is available
            </summary>
        </member>
        <member name="P:CMS.Core.DefaultSettingsService.Item(System.String)">
            <summary>
            Returns null
            </summary>
            <param name="keyName">Settings key</param>
        </member>
        <member name="T:CMS.Core.ModuleInfo">
            <summary>
            Represents a module info.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleInfo.mModule">
            <summary>
            A module associated with this module info.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleInfo.#ctor(CMS.Core.ModuleEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Core.ModuleInfo"/> class using the specified module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:CMS.Core.ModuleInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Core.ModuleInfo"/> class using the specified virtual module properties.
            </summary>
            <param name="name">The name of the virtual module.</param>
            <param name="rootPath">The directory with the virtual module files.</param>
        </member>
        <member name="M:CMS.Core.ModuleInfo.ToString">
            <summary>
            Converts the value of this module info to a string.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleInfo.Name">
            <summary>
            Gets a module name.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleInfo.ModuleRootPath">
            <summary>
            Gets a directory with module files.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleInfo.Module">
            <summary>
            Gets a module associated with this module info.
            </summary>
        </member>
        <member name="T:CMS.Core.ModuleEntryManager">
            <summary>
            Provides management of module info objects in the hosting CMS application.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleEntryManager.mModules">
            <summary>
            A list of module info object.
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleEntryManager.mModuleLookup">
            <summary>
            A dictionary that provides a mapping from a module name to a module info object. 
            </summary>
        </member>
        <member name="F:CMS.Core.ModuleEntryManager.mLock">
            <summary>
            A lock that is used to manage access to the private state.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.#cctor">
            <summary>
            Initializes the <see cref="T:CMS.Core.ModuleEntryManager"/> class.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.RegisterModule(CMS.Core.ModuleInfo)">
            <summary>
            Registers a module info object.
            </summary>
            <param name="moduleInfo">The module info object to register.</param>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.GetModuleInfo(System.String)">
            <summary>
            Gets a module info object with the specified name.
            </summary>
            <param name="name">The name of the module info object to get.</param>
            <returns>The module info object with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.IsModuleLoaded(System.String)">
            <summary>
            Determines whether the module info object with the specified name is available.
            </summary>
            <param name="name">The name of the module info object to locate.</param>
            <returns>True, if the module info object with the specified name is available; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.EnsureModule``1">
            <summary>
            Ensures that a module of the specified type is registered.
            </summary>
            <typeparam name="T">The type of the module to register.</typeparam>
            <remarks>
            If a module info object with the same name is already available, the manager does nothing.
            If the application life-cycle has already started, the module initialization starts immediately to catch up.
            </remarks>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.EnsureModule(CMS.Core.ModuleEntry)">
            <summary>
            Ensures that the specified module is registered.
            </summary>
            <remarks>
            If a module info object with the same name is already available, the manager does nothing.
            If the application life-cycle has already started, the module initialization starts immediately to catch up.
            </remarks>
            <param name="module">The module to register.</param>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.GetDiscoverableModules">
            <summary>
            Returns an enumerable collection of discoverable modules sorted by module dependencies.
            </summary>
            <returns>An enumerable collection of discoverable modules sorted by module dependencies.</returns>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.InitializeModule(CMS.Core.ModuleEntry)">
            <summary>
            Initializes the specified module and types from its assembly to catch up with the application life-cycle.
            </summary>
            <param name="module">The module to initialize.</param>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.PreInit">
            <summary>
            Preinitializes modules.
            </summary>
        </member>
        <member name="M:CMS.Core.ModuleEntryManager.Init">
            <summary>
            Initializes modules.
            </summary>
        </member>
        <member name="P:CMS.Core.ModuleEntryManager.Modules">
            <summary>
            Gets an enumerable collection of module info objects.
            </summary>
        </member>
        <member name="T:CMS.Core.Service">
            <summary>
            Service entry in format Service.Entry&lt;ISomeService&gt;()...
            </summary>
        </member>
        <member name="M:CMS.Core.Service.Entry``1">
            <summary>
            Returns the service interface
            </summary>
        </member>
        <member name="T:CMS.Core.Service`1">
            <summary>
            Service entry in format Service&lt;ISomeService&gt;.Entry()...
            </summary>
        </member>
        <member name="M:CMS.Core.Service`1.TryExecute``1(System.Func{`0,``0})">
            <summary>
            Attempts to execute the given lambda expression over the service instance. If service instance is not available, does not execute and returns default value of ReturnType
            </summary>
        </member>
        <member name="M:CMS.Core.Service`1.Entry">
            <summary>
            Returns the service interface as a static singleton
            </summary>
        </member>
        <member name="M:CMS.Core.Service`1.EnsureInitialization">
            <summary>
            Ensures initialization of the service, throws exception if service is not initialized
            </summary>
        </member>
        <member name="M:CMS.Core.Service`1.ForObjectType``1">
            <summary>
            Returns service interface as a static singleton for the given object type
            </summary>
        </member>
        <member name="M:CMS.Core.Service`1.Use``1(System.Boolean,System.Boolean)">
            <summary>
            Returns the service interface
            </summary>
            <param name="canBeReplaced">If true, the service can be replaced by other service</param>
            <param name="replaceExisting">If true, the service replaces existing if service is already initialized</param>
        </member>
        <member name="P:CMS.Core.Service`1.IsAvailable">
            <summary>
            Checks whether the service is available
            </summary>
        </member>
        <member name="T:CMS.Core.CoreServices">
            <summary>
            Provides basic core services
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.Localization">
            <summary>
            Localization service
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.ConnectionStrings">
            <summary>
            Settings service for connection strings
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.AppSettings">
            <summary>
            Settings service for app settings
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.Settings">
            <summary>
            Settings service for site settings
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.Conversion">
            <summary>
            Conversion service for the data values
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.EventLog">
            <summary>
            Event log service
            </summary>
        </member>
        <member name="P:CMS.Core.CoreServices.WebFarm">
            <summary>
            Web farm service
            </summary>
        </member>
        <member name="T:CMS.Core.IObjectFactory">
            <summary>
            Object factory interface
            </summary>
        </member>
        <member name="M:CMS.Core.IObjectFactory.CanCreateObject(System.Object)">
            <summary>
            Returns true if the factory is able to create the object of the given type
            </summary>
        </member>
        <member name="M:CMS.Core.IObjectFactory.CreateNewObject">
            <summary>
            Creates and returns a new object
            </summary>
        </member>
        <member name="P:CMS.Core.IObjectFactory.CreatedType">
            <summary>
            Returns the type created by this factory
            </summary>
        </member>
        <member name="P:CMS.Core.IObjectFactory.Singleton">
            <summary>
            Singleton instance of the created object type
            </summary>
        </member>
        <member name="T:CMS.Core.ObjectFactory">
            <summary>
            Object factory based on the given type
            </summary>
        </member>
        <member name="T:CMS.Core.ObjectFactory`1">
            <summary>
            Class that provides construction of the objects of given class
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CanInstantiateObject(CMS.Core.IObjectFactory)">
            <summary>
            Returns true if the factory is capable of instantiating an object
            </summary>
            <param name="factory">Factory</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CreateNewObject">
            <summary>
            Creates and returns a new object
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CreateInstance">
            <summary>
            Creates a new instance of the object
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CreateInstance(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new instance using dependency injection with automatic parameters
            </summary>
            <param name="ctor">Constructor</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.GetConstructor">
            <summary>
            Gets the dependency injection constructor for the created type
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.GetParametersCount(System.Reflection.ConstructorInfo)">
            <summary>
            Gets the number of parameters of the given constructor
            </summary>
            <param name="ctor">Constructor</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CanProvideAllParameters(System.Reflection.ConstructorInfo)">
            <summary>
            Checks if the given constructor can fake its parameters
            </summary>
            <param name="ctor">Constructor to check</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.ParameterCanBeProvided(System.Reflection.ParameterInfo)">
            <summary>
            Returns true if the given parameter can be provided
            </summary>
            <param name="parameterInfo">Parameter info</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CreateActivator">
            <summary>
            Creates an object activator for the created type
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CanCreateObject(System.Object)">
            <summary>
            Returns true if the factory is able to create the object based on the given parameter
            </summary>
            <param name="parameter">Object parameter</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.CreateNewTypedObject">
            <summary>
            Creates and returns a new object
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.New">
            <summary>
            Creates a new object of the given type
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.SetDefaultObjectTypeTo``1(System.Boolean,System.Boolean)">
            <summary>
            Sets the default object type created by the factory to the given type
            </summary>
            <param name="canBeReplaced">If true, the given default object type can be replaced by other object type</param>
            <param name="replaceExisting">If true, the service replaces existing if service is already initialized</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.Reset">
            <summary>
            Resets the factory to a default state
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.ChangeCreatedTypeTo``1">
            <summary>
            Replaces the creation of the given original type by the new type
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.ChangeCreatedTypeTo(System.Type)">
            <summary>
            Replaces the creation of the given original type by the new type
            </summary>
            <param name="newType">New type</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.StaticSingleton">
            <summary>
            Provides a static singleton instance of the object implementing this interface
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory`1.StaticSingleton``1">
            <summary>
            Returns static singleton for the given object type
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.CanReplaceCurrent">
            <summary>
            If true, the default object factory can be replaced by other factory
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.IsInitialized">
            <summary>
            Returns true if the default factory is initialized
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.CurrentFactory">
            <summary>
            Current factory to create objects, includes initialization of the core if interface factory is not initialized 
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.CurrentFactoryInternal">
            <summary>
            Current object factory used for this object type
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.IsDefault">
            <summary>
            Returns true if the object factory is the default one (giving out the exact type that defines it)
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.CreatedType">
            <summary>
            Returns the type created by this factory
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.Initializer">
            <summary>
            Object initialization function
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.Singleton">
            <summary>
            Singleton instance of the created object type
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.ActivatorDelegate">
            <summary>
            Compiled object activator
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.UseCompiledLambda">
            <summary>
            If true, the compiled lambda expression is used to create new objects. Set to true if the factory will be creating a lot of objects
            </summary>
        </member>
        <member name="P:CMS.Core.ObjectFactory`1.Constructor">
            <summary>
            Constructor used for dependency injection
            </summary>
        </member>
        <member name="T:CMS.Core.ObjectFactory`1.ObjectActivator">
            <summary>
            Activator delegate
            </summary>
        </member>
        <member name="F:CMS.Core.ObjectFactory.mGetFactoryMethods">
            <summary>
            Dictionary of cached methods for creating objects by the given type
            </summary>
        </member>
        <member name="M:CMS.Core.ObjectFactory.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory.New(System.Type)">
            <summary>
            Creates an object of the given type
            </summary>
            <param name="type">Type of the created object</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory.GetFactory(System.Type)">
            <summary>
            Gets the factory for the given type
            </summary>
            <param name="type">Type of the requested object factory</param>
        </member>
        <member name="M:CMS.Core.ObjectFactory.GetFactoryGeneric``1">
            <summary>
            Creates an object by an external factory of the given type
            </summary>
        </member>
        <member name="T:CMS.Core.StaticWrapper`1">
            <summary>
            Static wrapper for the implementation implementing the given interface
            </summary>
        </member>
        <member name="P:CMS.Core.StaticWrapper`1.Implementation">
            <summary>
            Singleton object instance behind the wrapper
            </summary>
        </member>
    </members>
</doc>
