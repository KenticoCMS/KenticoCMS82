<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.AzureStorage</name>
    </assembly>
    <members>
        <member name="T:CMS.AzureStorage.AccountInfo">
            <summary>
            Class which represents account info for connection to cloud.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.AccountInfo.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.AccountInfo.EnsureEndPoint(System.String)">
            <summary>
            Returns endpoint with ending slash.
            </summary>
            <param name="endpoint">Endpoint.</param>        
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.AccountName">
            <summary>
            Account name.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.SharedKey">
            <summary>
            Shared key.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.BlobEndpoint">
            <summary>
            Blob storage endpoint.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.TableEndpoint">
            <summary>
            Table storage endpoint.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.QueueEndpoint">
            <summary>
            Queue storage endpoint.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.AccountConfigured">
            <summary>
            Checks if acount information is set.
            
            Returns true if account name and shared key config keys are set. False otherwise.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AccountInfo.CurrentAccount">
            <summary>
            Gets instance of current account info.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.BlobInfo">
            <summary>
            Class which represents Azure blob unit.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.#ctor(System.String)">
            <summary>
            Initializes new instance of blob info class.
            </summary>
            <param name="path">Absolute or relative file system path.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.#ctor(CMS.AzureStorage.ContainerInfo,System.String)">
            <summary>
            Initializes new instance of blob info class.
            </summary>
            <param name="container">Container object.</param>
            <param name="path">Absolute or relative file system path.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.#ctor(CMS.AzureStorage.ContainerInfo,System.String,System.Boolean)">
            <summary>
            Initializes new instance of blob info class.
            </summary>
            <param name="container">Container object.</param>
            <param name="path">Absolute or relative file system path or blob URI (in that case set <paramref name="blobUri"/> appropriately).</param>
            <param name="blobUri">Indicates whether path is blob URI</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.SetMetadata(System.String,System.String)">
            <summary>
            Sets meta data to blob.
            </summary>
            <param name="key">MetaData key.</param>
            <param name="value">Metadata value.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.SetMetadata(System.String,System.String,System.Boolean)">
            <summary>
            Sets meta data to blob.
            </summary>
            <param name="key">MetaData key.</param>
            <param name="value">Metadata value.</param>
            <param name="update">Indicates whether data are updated in the cloud.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.SetMetadata(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets meta data to blob.
            </summary>
            <param name="key">MetaData key.</param>
            <param name="value">Metadata value.</param>
            <param name="update">Indicates whether data are updated in the cloud.</param>
            <param name="log">Indicates whether is operation logged.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.GetMetadata(System.String)">
            <summary>
            Returns blob meta data.  
            </summary>
            <param name="key">Metadata key.</param>        
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.Lock">
            <summary>
            Locks current blob.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.UnLock">
            <summary>
            Unlocks current blob.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfo.FetchAttributes">
            <summary>
            Does FetchAttributes() operation. Ensures communication with blob only if it's necessary.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.BlobInfo.BlobName">
            <summary>
            Blob name.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.BlobInfo.Blob">
            <summary>
            Blob object.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.BlobInfo.Container">
            <summary>
            ContainerInfo object.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.BlobInfo.IsLocked">
            <summary>
            Returns whether current blob is locked.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.BlobInfo.ETag">
            <summary>
            Returns E-tag from blob.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.BlobInfoProvider">
            <summary>
            Class providing data from Azure blob storage.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.BlobInfoProvider.DIRECTORY_BLOB">
            <summary>
            Name of blob which represents folder.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.BlobInfoProvider.LOCK">
            <summary>
            Property name which returns if file is locked for writing.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.BlobInfoProvider.STORAGE_KEY">
            <summary>
            Storage key for Azure storage objects.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.BlobExists(CMS.AzureStorage.BlobInfo)">
            <summary>
            Whether blob exists.
            </summary>
            <param name="bi">Blob.</param>        
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.InitBlobInfo(CMS.AzureStorage.BlobInfo)">
            <summary>
            Returns reference to the blob.
            </summary>
            <param name="bi">Blob info object</param>        
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.GetBlobContent(CMS.AzureStorage.BlobInfo)">
            <summary>
            Returns stream with block blob.
            </summary>        
            <param name="bi">Blob info object.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.GetBlobContentWithOptions(CMS.AzureStorage.BlobInfo)">
            <summary>
            Returns stream with block blob.
            </summary>        
            <param name="bi">Blob info object.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.GetBlobContent(CMS.AzureStorage.BlobInfo,Microsoft.WindowsAzure.Storage.Blob.BlobRequestOptions)">
            <summary>
            Returns stream with block blob.
            </summary>        
            <param name="bi">Blob info object.</param>
            <param name="requestOptions">Blob request options.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.PutFileToBlob(CMS.AzureStorage.BlobInfo,System.String)">
            <summary>
            Puts content of file to blob.
            </summary>        
            <param name="bi">Blob info object.</param>
            <param name="pathToFile">Path to file.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.PutTextToBlob(CMS.AzureStorage.BlobInfo,System.String)">
            <summary>
            Puts text to blob.
            </summary>        
            <param name="bi">Blob.</param>
            <param name="text">Text to put.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.AppendTextToBlob(CMS.AzureStorage.BlobInfo,System.String)">
            <summary>
            Appends text to blob.
            </summary>        
            <param name="bi">Blob.</param>
            <param name="text">Text to put.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.PutByteArrayToBlob(CMS.AzureStorage.BlobInfo,System.Byte[])">
            <summary>
            Puts byte array to blob.
            </summary>       
            <param name="bi">Blob.</param>
            <param name="buffer">Buffer with data.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.PutDataFromStreamToBlob(CMS.AzureStorage.BlobInfo,CMS.IO.Stream)">
            <summary>
            Puts content of stream to blob.
            </summary>       
            <param name="bi">Blob.</param>
            <param name="stream">Stream to put.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.DeleteBlob(CMS.AzureStorage.BlobInfo)">
            <summary>
             Deletes blob. 
            </summary>        
            <param name="bi">Blob info object.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.CopyBlobs(CMS.AzureStorage.BlobInfo,CMS.AzureStorage.BlobInfo,System.Boolean)">
            <summary>
            Copy one blob to another.
            </summary>
            <param name="sourceBlob">Source blob.</param>
            <param name="destBlob">Destination blob.</param>
            <param name="async">Indicates if copy operation should be asynchronous</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.CreateEmptyBlob(CMS.AzureStorage.BlobInfo)">
            <summary>
            Creates empty blob on the cloud. Don't use this method if you want to add content to blob.
            </summary>
            <param name="bi">Blob info.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.RemoveRequestCache(CMS.AzureStorage.BlobInfo)">
            <summary>
            Removes cached blob items from request cache.
            </summary>
            <param name="bi">Blob info to clear object cache for.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.RemoveFromTemp(CMS.AzureStorage.BlobInfo)">
            <summary>
            Remove blob file from temporary local storage.
            </summary>
            <param name="bi">Blob info to be removed from temporary local storage</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.RemoveFromCache(CMS.AzureStorage.BlobInfo)">
            <summary>
            Remove blob file from cache local storage.
            </summary>
            <param name="bi">Blob info to be removed from cache local storage</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.DeleteFileFromLocalPath(System.String)">
            <summary>
            Delete file from local filesystem
            </summary>
            <param name="path">Path to the file to be deleted</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.EnsureContentType(CMS.AzureStorage.BlobInfo)">
            <summary>
            Sets correct content type to file.
            </summary>
            <param name="bi">Blob info.</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.WaitUntilBlobCopied(CMS.AzureStorage.BlobInfo)">
            <summary>
            Waits till asynchronous copy operation of blob finish.
            </summary>
            <param name="targetBlob">Target blob to which data are copied</param>
        </member>
        <member name="M:CMS.AzureStorage.BlobInfoProvider.GetBlobCacheKey(CMS.AzureStorage.BlobInfo,System.String)">
            <summary>
            Returns cache key for specified action performed on blob.  
            </summary>
            <param name="bi">Blob to obtain cache key for</param>
            <param name="blobAction">Action performed on the blob</param>
        </member>
        <member name="T:CMS.AzureStorage.ContainerInfo">
            <summary>
            Object which represents azure blob container
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfo.#ctor(CMS.AzureStorage.AccountInfo,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Initializes new instance of container info class.
            </summary>
            <param name="info">Account info.</param>
            <param name="containerName">Name of container.</param>
            <param name="referenceOnly">Sets container reference only. No existence verification, creation or permission setting.</param>
            <param name="publicContainer">Flag indicating whether the container is public or not.</param>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfo.#ctor(CMS.AzureStorage.AccountInfo,System.String)">
            <summary>
            Initializes new instance of container info class.
            </summary>
            <param name="info">Account info.</param>
            <param name="containerName">Name of container.</param>
        </member>
        <member name="P:CMS.AzureStorage.ContainerInfo.ContainerName">
            <summary>
            Container name.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.ContainerInfo.Account">
            <summary>
            Account info.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.ContainerInfo.BlobContainer">
            <summary>
            Blob container.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.ContainerInfo.BlobClient">
            <summary>
            Blob client.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.ContainerInfo.IsPublic">
            <summary>
            Indicates if this container is public.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.ContainerInfo.CaseSensitive">
            <summary>
            Gets or sets whether path should be case sensitive or not.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.ContainerInfoProvider">
            <summary>
            Blob container management.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.ContainerInfoProvider.LAST_WRITE_TIME">
            <summary>
            Last write time field name in storage metadata.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.ContainerInfoProvider.CREATION_TIME">
            <summary>
            Creation time field name in storage metadata.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.ContainerInfoProvider.ATTRIBUTES">
            <summary>
            Attributes field name in storage metadata.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.ContainerInfoProvider.CMS_ROOT">
            <summary>
            Default container name for root of filesystem - for backwards compatibility
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.ContainerInfoProvider.CMS_STORAGE">
            <summary>
            Default container name for root of filesystem
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.GetRootContainer(System.String)">
            <summary>
            Gets or sets root container name.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.IsContainerPublic(System.String)">
            <summary>
            Returns whether is container public.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.GetRootContainerInfo(System.String)">
            <summary>
            Returns container info of root container.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.DeleteContainer(CMS.AzureStorage.ContainerInfo)">
            <summary>
            Deletes container.
            </summary>
            <param name="ci">Container info object.</param>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.GetContent(CMS.AzureStorage.ContainerInfo,System.String)">
            <summary>
            Returns content of container.
            </summary>
            <param name="ci">Container info object.</param>        
            <param name="path">Path.</param>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.GetContent(CMS.AzureStorage.ContainerInfo,System.String,System.Boolean)">
            <summary>
            Returns content of container.
            </summary>
            <param name="ci">Container info object.</param>        
            <param name="path">Path.</param>
            <param name="useFlatListing">Specifies whether flat listing is used (all blobs with path prefix are used).</param>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.InitContainerInfo(CMS.AzureStorage.ContainerInfo)">
            <summary>
            Returns reference to cloud container (creates it if not exists).
            </summary>
            <param name="ci">Container info object.</param>
        </member>
        <member name="M:CMS.AzureStorage.ContainerInfoProvider.InitContainerInfo(CMS.AzureStorage.ContainerInfo,System.Boolean)">
            <summary>
            Returns reference to cloud container (creates it if not exists).
            </summary>
            <param name="ci">Container info object.</param>   
            <param name="referenceOnly">Sets container reference only. No existence verification, creation or permission setting.</param>
        </member>
        <member name="T:CMS.AzureStorage.Directory">
            <summary>
            Implementation of Directory provider for Azure.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.Directory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">Path to test.</param>  
        </member>
        <member name="M:CMS.AzureStorage.Directory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">Path to create.</param> 
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from.</param> 
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from.</param> 
            <param name="searchPattern">Search pattern.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">Path to retrieve directories from.</param> 
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">Path to retrieve directories from.</param> 
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetDirectories(System.String,System.String,CMS.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search
            pattern in the current directory, and optionally searches subdirectories.
            </summary>
            <param name="path">Path to retrieve directories from.</param> 
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Specifies whether to search the current directory, or the current directory and all subdirectories.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>  
        </member>
        <member name="M:CMS.AzureStorage.Directory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes an empty directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">Path to directory</param>
            <param name="recursive">Delete if subdirs exists.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.Move(System.String,System.String)">
            <summary>
            Moves directory.
            </summary>
            <param name="sourceDirName">Source directory name.</param>
            <param name="destDirName">Destination directory name.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.Delete(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">Path to directory</param>        
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetAccessControl(System.String)">
            <summary>
            Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file.
            </summary>
            <param name="path">Path to directory.</param>        
        </member>
        <member name="M:CMS.AzureStorage.Directory.PrepareFilesForImport(System.String)">
            <summary>
            Prepares files for import. Converts them to media library.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.DeleteDirectoryStructure(System.String)">
            <summary>
            Deletes all files in the directory structure. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full path of the directory to delete</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetValidPath(System.String,System.Nullable{System.Boolean})">
            <summary>
            Converts path to valid and lower case.
            </summary>
            <param name="path">Path to modify.</param>
            <param name="caseSensitive">Case sensitive.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetPathFromUri(System.Uri,System.Boolean,System.String)">
            <summary>
            Returns system path from URI and container name.
            </summary>
            <param name="uri">Uri.</param>
            <param name="absolute">If path should be absolute.</param>
            <param name="containerName">Container name.</param>
            <returns>Absolute path.</returns>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetBlobPathFromPath(System.String,System.Nullable{System.Boolean})">
            <summary>
            Returns blob path from given file system path. Returns relative path with slashes '/' from the root of the blob storage.
            </summary>
            <param name="path">Path</param>
            <param name="caseSensitive">Case sensitive.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.ExistsInBlobStorage(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on azure blob.
            </summary>
            <param name="path">Path to test.</param>  
        </member>
        <member name="M:CMS.AzureStorage.Directory.ExistsInFileSystem(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on filesystem
            </summary>
            <param name="path">Path to test.</param>  
        </member>
        <member name="M:CMS.AzureStorage.Directory.CreateDirectoryStructure(System.String)">
            <summary>
            Creates directory structure for given path.
            </summary>
            <param name="path">Path with temporary file.</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.GetCaseValidPath(System.String,System.Nullable{System.Boolean})">
            <summary>
            Returns lowered path if given container if not case sensitive. Otherwise method returns original path.
            </summary>
            <param name="path">Path to modify.</param>
            <param name="caseSensitive">Indicates whether path is case sensitive</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.DeleteAzureDirectory(System.String)">
            <summary>
            Deletes container and map record in database.
            </summary>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:CMS.AzureStorage.Directory.Move(System.String,System.String,System.Int32)">
            <summary>
            Moves directory.
            </summary>
            <param name="sourceDirName">Source directory name.</param>
            <param name="destDirName">Destination directory name.</param>
            <param name="level">Level.</param>
        </member>
        <member name="P:CMS.AzureStorage.Directory.CurrentDirectory">
            <summary>
            Returns current directory. Value remains the same so it can be cached. 
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.DirectoryInfo">
            <summary>
            Implementation of DirectoryInfo object for Azure.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates subdirectory.
            </summary>
            <param name="subdir">Subdirectory to create.</param>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.Delete">
            <summary>
            Deletes directory.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>        
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <param name="searchPattern">Search pattern.</param>        
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.GetDirectories(System.String,CMS.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria and using a value
            to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">Search pattern.</param>
            <param name="searchOption">Specifies whether to search the current directory, or the current directory and all subdirectories.</param>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.GetFiles">
            <summary>
            Returns files of the current directory.
            </summary>        
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns files of the current directory.
            </summary>
            <param name="searchPattern">Search pattern.</param>        
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.GetFiles(System.String,CMS.IO.SearchOption)">
            <summary>
            Returns files of the current directory.
            </summary>
            <param name="searchPattern">Search pattern.</param>
            <param name="searchOption">Whether return files from top directory or also from any subdirectories.</param>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.InitCMSValues">
            <summary>
            Initializes CMS values by System.IO values.
            </summary>     
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.InitCMSValuesFromSystemDirectory">
            <summary>
            Initializes CMS values by System.IO values.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.DirectoryInfo.InitCMSValuesFromBlob">
            <summary>
            Initializes CMS values by azure container values.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.DirectoryInfo.FullName">
            <summary>
            Full name of directory (whole path).
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.DirectoryInfo.LastWriteTime">
            <summary>
            Last write time to directory.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.DirectoryInfo.Name">
            <summary>
            Name of directory (without path).
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.DirectoryInfo.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.DirectoryInfo.Exists">
            <summary>
            Whether directory exists.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.DirectoryInfo.Parent">
            <summary>
            Parent directory.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.File">
            <summary>
            Implementation of File class for Azure.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.File.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">Path to file.</param>  
        </member>
        <member name="M:CMS.AzureStorage.File.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.AzureStorage.File.Delete(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.AzureStorage.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">Path to source file.</param>
            <param name="destFileName">Path to destination file.</param>
            <param name="overwrite">If destination file should be overwritten.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">Path to source file.</param>
            <param name="destFileName">Path to destination file.</param>        
        </member>
        <member name="M:CMS.AzureStorage.File.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">Path to file.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">Path to file.</param> 
        </member>
        <member name="M:CMS.AzureStorage.File.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destFileName">Destination file name.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file.</param> 
        </member>
        <member name="M:CMS.AzureStorage.File.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.AzureStorage.File.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.AzureStorage.File.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file. 
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file. 
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write.</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.AzureStorage.File.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file.</param>
            <param name="bytes">Bytes to write.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">Path to file.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.SetAttributes(System.String,CMS.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes  of the file on the specified path.
            </summary>
            <param name="path">Path to file.</param>
            <param name="fileAttributes">File attributes.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.Open(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Opens a FileStream  on the specified path, with the specified mode and access.
            </summary>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">Path.</param>
            <param name="lastWriteTimeUtc">Specified time.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.CreateText(System.String)">
            <summary>
            Creates or overwrites a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">Path to file.</param>      
        </member>
        <member name="M:CMS.AzureStorage.File.GetAccessControl(System.String)">
            <summary>
            Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to file.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">Path to file.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="path">Path to file.</param>
            <param name="lastWriteTime">Last write time.</param>
        </member>
        <member name="M:CMS.AzureStorage.File.GetFileUrl(System.String,System.String)">
            <summary>
            Returns URL to file. If can be accessed directly then direct URL is generated else URL with GetFile page is generated.
            </summary>
            <param name="path">Virtual path starting with ~ or absolute path.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="T:CMS.AzureStorage.FileInfo">
            <summary>
            Envelope for FileInfo classes (System.IO or Azure)
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.#ctor(System.String)">
            <summary>
            Initializes new instance of
            </summary>
            <param name="filename">File name.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.CreateText">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary> 
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.Delete">
            <summary>
            Deletes file.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.OpenRead">
            <summary>
            Creates a read-only ICMSFileStream.
            </summary> 
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.CopyTo(System.String)">
            <summary>
            Copies current file to destination. 
            </summary>
            <param name="destFileName">Destination file name.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies current file to destination. 
            </summary>
            <param name="destFileName">Destination file name.</param>
            <param name="overwrite">Indicates if existing file should be overwritten</param>        
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.MoveTo(System.String)">
            <summary>
            Moves an existing file to a new file.
            </summary>
            <param name="destFileName">Destination file name.</param>        
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>   
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.InitCMSValues">
            <summary>
            Sets values from System.IO.FileInfo to this file info
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileInfo.ToString">
            <summary>
            Converts current info to string.
            </summary>        
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.Length">
            <summary>
            Length of file.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.Extension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.FullName">
            <summary>
            Full name of file (with whole path).
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.Name">
            <summary>
            File name of file (without path).
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.LastWriteTime">
            <summary>
            Last write time to file.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.Exists">
            <summary>
            If file exists.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.CreationTime">
            <summary>
            Creation date of file.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.Directory">
            <summary>
            Directory of file.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.IsReadOnly">
            <summary>
             If is read only.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.Attributes">
            <summary>
            File attributes.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.DirectoryName">
            <summary>
            Directory name.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileInfo.LastAccessTime">
            <summary>
            Last access time.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.FileStream">
            <summary>
            Implementation of file stream for Microsoft Azure.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.#ctor(System.String,CMS.IO.FileMode)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.#ctor(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.#ctor(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>       
            <param name="share">Sharing permissions.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.#ctor(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
            <param name="bSize">Buffer size.</param>
            <param name="share">Sharing permissions.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from stream and stores them into array.
            </summary>
            <param name="array">Array where result is stored.</param>
            <param name="offset">Offset from begining of file.</param>
            <param name="count">Number of characters which are read.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.Close">
            <summary>
            Closes current stream.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes sequence of bytes to stream.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Location</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.SetLength(System.Int64)">
            <summary>
            Set length to stream.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to the stream.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.FileStream.InitFileStream">
            <summary>
            Initializes the stream
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileStream.Length">
            <summary>
            Length of stream.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileStream.Position">
            <summary>
            Gets or sets position of current stream.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.FileStream.SystemStream">
            <summary>
            Gets or sets system stream
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.AzureStorageUsageDataSource">
            <summary>
            Module usage data for Azure storage.
            </summary>
        </member>
        <member name="F:CMS.AzureStorage.AzureStorageUsageDataSource.WWAG_KEY">
            <summary>
            Identifies Windows Application Gallery Kentico package.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.AzureStorageUsageDataSource.GetData">
            <summary>
            Get Azure storage usage data.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.AzureStorageUsageDataSource.Name">
            <summary>
            Azure storage usage data source name.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.PathHelper">
            <summary>
            Contains helper members for accessing to blob storage, cache and temp.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.PathHelper.GetPathToTempDirectory(System.String,System.String)">
            <summary>
            Returns absolute path to temp. Also ensures that the directory exists.
            </summary>
            <param name="tempAbsolutePath">Absolute path to temp.</param>
            <param name="relativeDirectoryPath">Path to directory relative to default temp root.</param>
            <remarks>Relative directory path is used only when absolute path is not specified.</remarks>
        </member>
        <member name="P:CMS.AzureStorage.PathHelper.TempPath">
            <summary>
            Gets or sets path to local storage for temp.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.PathHelper.CachePath">
            <summary>
            Gets or sets path to local storage for cache.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.Queue">
            <summary>
            Provides operations with azure queue storage.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.Queue.#ctor(System.String)">
            <summary>
            Initializes new queue object.
            </summary>
            <param name="name">Queue name.</param>
        </member>
        <member name="M:CMS.AzureStorage.Queue.SendMessage(System.String)">
            <summary>
            Sends message to the queue.
            </summary>
            <param name="message">Message to send.</param>
        </member>
        <member name="M:CMS.AzureStorage.Queue.SendMessage(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Sends message to the queue.
            </summary>
            <param name="message">Message to send.</param>
            <param name="timeToLive">Message time to live.</param>
        </member>
        <member name="M:CMS.AzureStorage.Queue.GetMessage">
            <summary>
            Gets message from queue and deletes it. If queue is empty returns null.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.Queue.InitQueue">
            <summary>
            Initializes queue object.
            </summary>
        </member>
        <member name="T:CMS.AzureStorage.QueueWebFarmUpdater">
            <summary>
            Microsoft Azure queue storage web farm updater implementation.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.QueueWebFarmUpdater.#ctor">
            <summary>
            Creates new instance of QueueWebfarm updater.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.QueueWebFarmUpdater.RunReceiveThread">
            <summary>
            Starts receive thread.
            </summary>
        </member>
        <member name="M:CMS.AzureStorage.QueueWebFarmUpdater.Notify(System.String)">
            <summary>
            Notifies other servers in web farm about synchronization.
            </summary>
            <param name="url">Server URL with web farm updater page.</param>
        </member>
        <member name="P:CMS.AzureStorage.QueueWebFarmUpdater.LastUpdateDateTime">
            <summary>
            Gets or sets time when current instance was updated for the last time.
            </summary>
        </member>
        <member name="P:CMS.AzureStorage.QueueWebFarmUpdater.LastNotificationSentDateTime">
            <summary>
            Gets or sets time when current instance sent notification for the last time.
            </summary>
        </member>
    </members>
</doc>
