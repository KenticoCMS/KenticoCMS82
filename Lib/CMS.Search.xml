<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Search</name>
    </assembly>
    <members>
        <member name="T:CMS.Search.SearchEvents">
            <summary>
            Staging events
            </summary>
        </member>
        <member name="F:CMS.Search.SearchEvents.Search">
            <summary>
            Fires when the Smart search searches the results
            </summary>
        </member>
        <member name="T:CMS.Search.SearchEventArgs">
            <summary>
            Synchronization event arguments
            </summary>
        </member>
        <member name="P:CMS.Search.SearchEventArgs.Parameters">
            <summary>
            Search parameters
            </summary>
        </member>
        <member name="P:CMS.Search.SearchEventArgs.Results">
            <summary>
            Search results
            </summary>
        </member>
        <member name="T:CMS.Search.SearchHandler">
            <summary>
            Search handler
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHandler.StartEvent(CMS.Search.SearchParameters,CMS.Search.SearchResults)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="parameters">Search parameters</param>
            <param name="results">Search results</param>
        </member>
        <member name="T:CMS.Search.SearchMacroMethods">
            <summary>
            Content methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchMacroMethods.ToSearchDateTime(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns DateTime string usable in smart search.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">
            Value to convert;
            Default value
            </param>
        </member>
        <member name="M:CMS.Search.SearchMacroMethods.GetSupportedContentExtractors(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns list of the extensions (separated with colons) for which there is a content extractor registered in the system.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">No parameteres</param>
        </member>
        <member name="T:CMS.Search.SearchContext">
            <summary>
            Search context.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchContext.GetSearchValue(System.String,System.String)">
            <summary>
            Returns column value for current search result item.
            </summary>
            <param name="id">ID of the item</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Search.SearchContext.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.CurrentHighlight">
            <summary>
            Current highlight data
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.CurrentParameters">
            <summary>
            Current search parameters
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.CurrentSearchResults">
            <summary>
            Current search results
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.CurrentSearchDocuments">
            <summary>
            Current search documents
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.MoreCultures">
            <summary>
            Gets the value that indicates whether current search is performed for all cultures or combine current culture with default.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.LastError">
            <summary>
            Gets the last search error.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.Highlights">
            <summary>
            Specifies the list of highlighted words
            </summary>
        </member>
        <member name="P:CMS.Search.SearchContext.HighlightRegex">
            <summary>
            Gets the regular expression specified for highlighting.
            </summary>
        </member>
        <member name="T:CMS.Search.ExportSpecialActions">
            <summary>
            Handles special actions during the export process.
            </summary>
        </member>
        <member name="M:CMS.Search.ExportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Search.ImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.Search.ImportSpecialActions.Init">
            <summary>
            Initializes import handlers
            </summary>
        </member>
        <member name="T:CMS.Search.SearchModuleMetadata">
            <summary>
            Represents the Search module metadata.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Search.SearchSynchronization">
            <summary>
            Web farm synchronization for Forums
            </summary>
        </member>
        <member name="M:CMS.Search.SearchSynchronization.Init">
            <summary>
            Initializes the tasks for media files synchronization
            </summary>
        </member>
        <member name="M:CMS.Search.SearchSynchronization.CheckSynchronizeSmartSearch">
            <summary>
            Returns true if the synchronization of the smart search is allowed
            </summary>
        </member>
        <member name="M:CMS.Search.SearchSynchronization.RunSmartSearchIndexer(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Runs the smart search indexer
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="M:CMS.Search.SearchSynchronization.InvalidateSearcher(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Invalidates searcher.
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="P:CMS.Search.SearchSynchronization.SynchronizeSmartSearch">
            <summary>
            Gets or sets value that indicates whether smart search synchronization is enabled.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchModule">
            <summary>
            Represents the Search module.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchModule.#ctor">
            <summary>
            Module constructor
            </summary>
        </member>
        <member name="M:CMS.Search.SearchModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="M:CMS.Search.SearchModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.Search.SearchHandlers">
            <summary>
            Synchronization handlers
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHandlers.Init">
            <summary>
            Initializes the synchronization handlers
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHandlers.ProcessSearchTasks(System.Object,System.EventArgs)">
            <summary>
            Processes the search tasks
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHandlers.SiteDeletion_After(System.Object,CMS.SiteProvider.SiteDeletionEventArgs)">
            <summary>
            Executes after the site deletion process
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHandlers.CreateSearchTask(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Executes then search task is supposed to be created
            </summary>
        </member>
        <member name="T:CMS.Search.SearchTaskType">
            <summary>
            Operation type enumeration.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskType.RunSmartSearchIndexer">
            <summary>
            Runs smart search indexer.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskType.InvalidateSearcher">
            <summary>
            Invalidates searcher.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchExtensions">
            <summary>
            Extension methods for the search module
            </summary>
        </member>
        <member name="M:CMS.Search.SearchExtensions.SearchFieldChanged(CMS.DataEngine.DataClassInfo,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Returns true if any field included in the search changed (checks fields defined in Class Search Settings).
            </summary>
        </member>
        <member name="T:CMS.Search.AbstractSearchValueConverter">
            <summary>
            Base class for search value converter
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchValueConverter">
            <summary>
            Base class for search value converter
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts the 
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.ReplaceNumbers(System.String)">
            <summary>
            Replaces the number expressions within the given condition
            </summary>
            <param name="condition">Condition to process</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.IntToString(System.Int32)">
            <summary>
            Returns string representation of the integer value. Returned value has always uniform format.
            </summary>
            <param name="value">Integer value</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.StringToInt(System.String)">
            <summary>
            Converts search string to the integer value.
            </summary>
            <param name="value">String representation of integer</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.DoubleToString(System.Double)">
            <summary>
            Returns string representation of the double value. Returned value has always uniform format.
            </summary>
            <param name="value">Double value</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.StringToDouble(System.String)">
            <summary>
            Converts search string to the integer value.
            </summary>
            <param name="value">String representation of double</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.StringToDate(System.String)">
            <summary>
            Converts the string representation of the date time from searched document to a date time
            </summary>
            <param name="input">Input string</param>
        </member>
        <member name="M:CMS.Search.ISearchValueConverter.DateToString(System.DateTime)">
            <summary>
            Converts the date time from to its string representation
            </summary>
            <param name="input">Input date</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts the 
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.ReplaceNumbers(System.String)">
            <summary>
            Replaces the number expressions within the given condition
            </summary>
            <param name="condition">Condition to process</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.IntMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Converts regular integer value to search-friendly integer value.
            </summary>
            <param name="m">Regex match</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.DoubleMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Converts regular double value to search-friendly double value.
            </summary>
            <param name="m">Regex match</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.IntToString(System.Int32)">
            <summary>
            Returns string representation of the integer value. Returned value has always uniform format.
            </summary>
            <param name="value">Integer value</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.StringToInt(System.String)">
            <summary>
            Converts search string to the integer value.
            </summary>
            <param name="value">String representation of integer</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.DoubleToString(System.Double)">
            <summary>
            Returns string representation of the double value. Returned value has always uniform format.
            </summary>
            <param name="value">Double value</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.StringToDouble(System.String)">
            <summary>
            Converts search string to the integer value.
            </summary>
            <param name="value">String representation of double</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.StringToDate(System.String)">
            <summary>
            Converts the string representation of the date time from searched document to a date time
            </summary>
            <param name="input">Input string</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchValueConverter.DateToString(System.DateTime)">
            <summary>
            Converts the date time from to its string representation
            </summary>
            <param name="input">Input date</param>
        </member>
        <member name="P:CMS.Search.AbstractSearchValueConverter.IntReplacerRegex">
            <summary>
            Gets the integer replacer regular expression.
            </summary>
        </member>
        <member name="P:CMS.Search.AbstractSearchValueConverter.DoubleReplacerRegex">
            <summary>
            Gets the double replacer regular expression.
            </summary>
        </member>
        <member name="T:CMS.Search.DocumentSearchCondition">
            <summary>
            Specifies parameters for document search condition
            </summary>
        </member>
        <member name="M:CMS.Search.DocumentSearchCondition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Search.DocumentSearchCondition.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="classNames">Class names to include in the search</param>
            <param name="culture">Culture to search</param>
            <param name="defaultCulture">Default culture</param>
            <param name="combineWithDefaultCulture">Combine with default culture</param>
        </member>
        <member name="P:CMS.Search.DocumentSearchCondition.ClassNames">
            <summary>
            Class names to include in the search
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentSearchCondition.Culture">
            <summary>
            Culture to search
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentSearchCondition.DefaultCulture">
            <summary>
            Default culture
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentSearchCondition.CombineWithDefaultCulture">
            <summary>
            Combine with default culture. Default false
            </summary>
        </member>
        <member name="T:CMS.Search.SearchModeEnum">
            <summary>
            Search mode enumeration.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchModeEnum.ExactPhrase">
            <summary>
            Searches for expressions containing exact phrase.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchModeEnum.AnyWord">
            <summary>
            Searches for expressions containing any of specified words.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchModeEnum.AllWords">
            <summary>
            Searches for expressions containing all specified words.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchModeEnum.AnyWordOrSynonyms">
            <summary>
            Searches for expressions containing any of the specified words or their synonyms.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchScopeEnum">
            <summary>
            Indicates if all content or only its part should be searched.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchScopeEnum.SearchAllContent">
            <summary>
            All content search.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchScopeEnum.SearchCurrentSection">
            <summary>
            Search current section.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchException">
            <summary>
            Base for exceptions thrown during smart search operations.  
            </summary>
        </member>
        <member name="M:CMS.Search.SearchException.#ctor">
            <summary>
            Empty contructor
            </summary>
        </member>
        <member name="M:CMS.Search.SearchException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CMS.Search.SearchException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Exception that caused the current exception</param>
        </member>
        <member name="T:CMS.Search.SearchIndexException">
            <summary>
            Exception thrown during smart search operations on indexes.  
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexException.#ctor(CMS.DataEngine.ISearchIndexInfo)">
            <summary>
            Contructor
            </summary>
            <param name="indexInfo">Search index info</param>
        </member>
        <member name="M:CMS.Search.SearchIndexException.#ctor(CMS.DataEngine.ISearchIndexInfo,System.String)">
            <summary>
            Contructor
            </summary>
            <param name="indexInfo">Search index info</param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CMS.Search.SearchIndexException.#ctor(CMS.DataEngine.ISearchIndexInfo,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="indexInfo">Search index info</param>
            <param name="message">Exception message</param>
            <param name="innerException">Exception that caused the current exception</param>
        </member>
        <member name="P:CMS.Search.SearchIndexException.SearchIndexInfo">
            <summary>
            Search index info
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexException.Message">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="T:CMS.Search.SearchField">
            <summary>
            Represents search field
            </summary>
        </member>
        <member name="M:CMS.Search.SearchField.Init(System.String,System.Boolean,System.Boolean,System.Object,System.Nullable{CMS.DataEngine.SearchAnalyzerTypeEnum})">
            <summary>
            Initializes object values.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="searchable">Indicates if the search is enabled for this field</param>
            <param name="tokenizable">Indicates if field will be tokenized (processed by the analyzer)</param>
            <param name="value">Field value</param>
            <param name="analyzer">Explicit analyzer to process search field's value</param>
        </member>
        <member name="M:CMS.Search.SearchField.ToString">
            <summary>
            Converts this piece of data into a string.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchField.FieldName">
            <summary>
            Name of the field.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchField.Tokenized">
            <summary>
            True when field is tokenizable (analyzer is used to process it's value).
            </summary>
        </member>
        <member name="P:CMS.Search.SearchField.Analyzer">
            <summary>
            Explicit analyzer to process search field's value. 
            When null default analyzer is used based on search index configuration. 
            </summary>
        </member>
        <member name="P:CMS.Search.SearchField.Searchable">
            <summary>
            True when field is marked as searchable.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchField.Value">
            <summary>
            Field value. May be null when field is not initialized with it's value.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchField.InsertDirectly">
            <summary>
            When field is marked to be insert directly, it will not be processed before it's inserted into search document. 
            Will not be passed to SearchHelper.AddGeneralField method.
            </summary>
        </member>
        <member name="T:CMS.Search.Internal.FileLock">
            <summary>
            Provides instance methods locking functionality. Uses file in file system for this purpose.
            </summary>
        </member>
        <member name="M:CMS.Search.Internal.FileLock.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of FileLock class.
            </summary>
            <param name="dirPath">Path to directory.</param>
            <param name="lockName">Lock file name.</param>
        </member>
        <member name="M:CMS.Search.Internal.FileLock.IsLocked">
            <summary>
            Returns whether current file lock exists.
            </summary>
        </member>
        <member name="M:CMS.Search.Internal.FileLock.Obtain">
            <summary>
            Obtains file lock.
            </summary>
        </member>
        <member name="M:CMS.Search.Internal.FileLock.Release">
            <summary>
            Releases file lock.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchDocumentParameters">
            <summary>
            Parameters used to create new ISearchDocument
            </summary>
        </member>
        <member name="P:CMS.Search.SearchDocumentParameters.Index">
            <summary>
            Index the documents belongs to. Null when document is not result of index search. 
            </summary>
        </member>
        <member name="P:CMS.Search.SearchDocumentParameters.Type">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="P:CMS.Search.SearchDocumentParameters.Id">
            <summary>
            ID value
            </summary>
        </member>
        <member name="P:CMS.Search.SearchDocumentParameters.Created">
            <summary>
            Document created
            </summary>
        </member>
        <member name="P:CMS.Search.SearchDocumentParameters.SiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="P:CMS.Search.SearchDocumentParameters.Culture">
            <summary>
            Document culture
            </summary>
        </member>
        <member name="T:CMS.Search.ExtractionContext">
            <summary>
            Extraction context passed to the extract method.
            </summary>
        </member>
        <member name="P:CMS.Search.ExtractionContext.Culture">
            <summary>
            Culture of the document the extracted file belongs to. This information can be used to transform DateTimes and numbers to correct string representations.
            If null, EN culture is used.
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchTextExtractor">
            <summary>
            Provides base class for text extractors from binary files.
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchTextExtractor.ExtractContent(CMS.Core.BinaryData,CMS.Search.ExtractionContext)">
            <summary>
            Extracts content from given data.
            </summary>
            <param name="data">Data to extract text from</param>
            <param name="context">Extraction context (ISeachDocument, Culture, etc.)</param>
        </member>
        <member name="T:CMS.Search.SearchTextExtractorManager">
            <summary>
            Provides management over extraction of text from binary files using extension - extractor mapping.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTextExtractorManager.mExtractors">
            <summary>
            Dictionary of registered extractors [Extension -> SearchTextExtractor]
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTextExtractorManager.RegisterExtractor(System.String,CMS.Search.ISearchTextExtractor)">
            <summary>
            Registers the given extractor.
            </summary>
            <param name="extension">Extension for which this extractor should be used (you can use either ".ext" or "ext" format)</param>
            <param name="extractor">Extractor to be used</param>
        </member>
        <member name="M:CMS.Search.SearchTextExtractorManager.GetExtractor(System.String)">
            <summary>
            Returns an extractor to use for specified extension.
            </summary>
            <param name="extension">Extension of the file to the extractor (you can use either ".ext" or "ext" format)</param>
        </member>
        <member name="M:CMS.Search.SearchTextExtractorManager.ExtractData(System.String,CMS.Core.BinaryData,CMS.Search.ExtractionContext)">
            <summary>
            Extracts text content from the given data using extractor registered for given extension.
            Returns null if no extractor is found.
            </summary>
            <param name="extension">Extension type of the data (you can use either ".ext" or "ext" format)</param>
            <param name="data">Data to extract</param>
            <param name="context">Extraction context</param>
        </member>
        <member name="M:CMS.Search.SearchTextExtractorManager.GetSupportedContentExtractors">
            <summary>
            Returns list of the extensions (separated with colons) for which there is a content extractor registered in the system.
            </summary>
        </member>
        <member name="T:CMS.Search.IIndexSearcher">
            <summary>
            Interface for the index searcher
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.IsOptimized">
            <summary>
            Returns true if the index is optimized
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.Search(System.String,CMS.Search.ISearchAnalyzer,CMS.Search.ISearchFilter)">
            <summary>
            Searches the given query
            </summary>
            <param name="query">Query to search</param>
            <param name="a">Search analyzer</param>
            <param name="filter">Search filter</param>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.Delete(System.String,System.String)">
            <summary>
            Deletes the items with matching field name and value
            </summary>
            <param name="name">Field name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.Commit">
            <summary>
            Commits the changes to the searcher
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.Close">
            <summary>
            Closes the searcher
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.IsValid">
            <summary>
            Returns true if the searcher is valid
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexSearcher.NumberOfDocuments">
            <summary>
            Returns the number of documents available in the searcher
            </summary>
        </member>
        <member name="T:CMS.Search.IIndexWriter">
            <summary>
            Interface for the search index writer
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexWriter.UpdateDocument(CMS.DataEngine.ISearchDocument,System.String)">
            <summary>
            Updates the document within the index
            </summary>
            <param name="doc">Document to update</param>
            <param name="docId">Document ID</param>
        </member>
        <member name="M:CMS.Search.IIndexWriter.AddDocument(CMS.DataEngine.ISearchDocument)">
            <summary>
            Adds the document to the index
            </summary>
            <param name="doc">Document to add</param>
        </member>
        <member name="M:CMS.Search.IIndexWriter.Flush">
            <summary>
            Flushes the index buffer
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexWriter.Optimize">
            <summary>
            Optimizes the index
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexWriter.Close">
            <summary>
            Closes the index
            </summary>
        </member>
        <member name="M:CMS.Search.IIndexWriter.SetMaxFieldLength(System.Int32)">
            <summary>
            Sets the maximum field length
            </summary>
            <param name="maxFieldLength">New maximum field length</param>
        </member>
        <member name="T:CMS.Search.ISearchAnalyzer">
            <summary>
            Defines search analyzer
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchFilter">
            <summary>
            Interface for the search filter
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchHits">
            <summary>
            Interface for the search result hits
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchHits.Length">
            <summary>
            Returns the length of the hits collection
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchHits.MaxScore">
            <summary>
            Returns the maximum score value encountered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.Search.ISearchHits.Doc(System.Int32)">
            <summary>
            Returns the document at the specified index
            </summary>
            <param name="i">Index</param>
        </member>
        <member name="M:CMS.Search.ISearchHits.Score(System.Int32)">
            <summary>
            Returns the score of the document at the specified index
            </summary>
            <param name="i">Index</param>
        </member>
        <member name="T:CMS.Search.ISearchManager">
            <summary>
            Provides an interface to the search index manager
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchManager.CreateIndexWriter(System.String,CMS.Search.ISearchAnalyzer,System.Boolean)">
            <summary>
            Creates the index writer for the given path and Analyzer
            </summary>
            <param name="path">Index path</param>
            <param name="analyzer">Analyzer</param>
            <param name="create">If true, the writer is created</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.CreateIndexSearcher(System.String)">
            <summary>
            Creates the index searcher
            </summary>
            <param name="path">Index path</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.CreateAnalyzer(CMS.Search.SearchIndexInfo,System.Boolean)">
            <summary>
            Returns current object analyzer.
            </summary>
            <param name="sii">Search index info</param>
            <param name="isSearch">Indicates whether analyzer should be used for search or indexing</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.CreateAnalyzer(CMS.Search.SearchIndexInfo[])">
            <summary>
            Returns analyzer that can be used on searching over multiple indexes
            </summary>
            <param name="indexes">Search index infos</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.CreateFilter(System.String,System.String,System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Creates the defined search filter
            </summary>
            <param name="fieldName">Name of the field</param>
            <param name="match">Match value</param>
            <param name="condition">Filter condition</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.AddResults(CMS.Search.SearchParameters,CMS.Search.SearchResults)">
            <summary>
            Adds the attachment results to the search results
            </summary>
            <param name="parameters">Search parameters</param>
            <param name="results">Search results</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.Unlock(System.String)">
            <summary>
            Forcibly unlock current index.
            </summary>
            <param name="path">Index path to unlock</param>
        </member>
        <member name="M:CMS.Search.ISearchManager.GetQueryClauses(System.String)">
            <summary>
            Returns SQL Fulltext query.
            </summary>
            <param name="searchFor">Search query</param>
        </member>
        <member name="T:CMS.Search.SearchIndexProvider">
            <summary>
            Provides indexing for particular search index type
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexProvider.unlockPerformed">
            <summary>
            Indicates whether unlock on first call of GetWriter/GetSearcher method was performed
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexProvider.mCurrentAnalyzer">
            <summary>
            Indexing analyzer object.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.#ctor(CMS.Search.SearchIndexInfo)">
            <summary>
            Constructor
            </summary>
            <param name="searchIndexInfo">Search index info</param>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.IsOptimized">
            <summary>
            Returns true if the index is optimized
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetIndexStatus">
            <summary>
            Returns the search index status
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetIndexLastUpdateTime">
            <summary>
            Returns time when index files were updated based last write time of it's files. 
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetNumberOfIndexedItems">
            <summary>
            Gets the number of the indexed items
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetAnalyzer(System.Boolean)">
            <summary>
            Returns current object analyzer.
            </summary>
            <param name="isSearch">Indicates whether analyzer should be used for search or indexing</param>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetWriter(System.Boolean)">
            <summary>
            Returns IndexWriter object with dependence on current index.
            </summary>
            <param name="create">Indicates whether index should be created</param>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetSearcher">
            <summary>
            Returns IndexSearcher object with dependence on current index.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.GetSearcher(System.Boolean)">
            <summary>
            Returns IndexSearcher object with dependence on current index.
            </summary>
            <param name="readOnly">Indicates whether searcher will be used for deleting (false) or searching (true)</param>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.InvalidateAnalyzer">
            <summary>
            Invalidates cached analyzer for current index.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexProvider.Unlock">
            <summary>
            Forcibly unlock current index.
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchProvider">
            <summary>
            Interface for search provider.
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchProvider.Search(System.String,System.String,System.String,System.String,CMS.Search.SearchModeEnum,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Searches content specified by parameters.
            </summary>
            <param name="siteName">Site code name</param>
            <param name="searchNodePath">Starting alias path without %</param>
            <param name="cultureCode">Culture code</param>
            <param name="searchExpression">Expression to searched for</param>
            <param name="searchMode">Search mode - all words, any word, exact phrase</param>
            <param name="searchChildNodes">Search child nodes under the given starting path</param>
            <param name="classNames">Class names in format cms.article;cms.news</param>
            <param name="filterResultsByReadPermission">Indicates if only documents the current user is allowed to read should be displayed</param>
            <param name="searchOnlyPublished">Indicates if only published documents should be searched</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="combineWithDefaultCulture">Specifies if return the default culture document when specified culture not found</param>
        </member>
        <member name="T:CMS.Search.SearchCondition">
            <summary>
            Defines search condition parameters
            </summary>
        </member>
        <member name="M:CMS.Search.SearchCondition.#ctor(System.String,CMS.Search.SearchModeEnum,CMS.Search.SearchOptionsEnum,CMS.Search.DocumentSearchCondition,System.Boolean)">
            <param name="extraConditions">Search condition that is added to any conditions specified in the search expression. You can use special characters (+ -) and field conditions (e.g. +documentnodeid:(int)255).</param>
            <param name="searchMode">Search mode</param>
            <param name="searchOptions">Search options</param>
            <param name="documentCondition">Search condition for documents</param>
            <param name="fuzzySearch">If true, the expression is transformed to support fuzzy search</param>
        </member>
        <member name="P:CMS.Search.SearchCondition.ExtraConditions">
            <summary>
            Search condition that is added to any conditions specified in the search expression. You can use special characters (+ -) and field conditions (e.g. +documentnodeid:(int)255).
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCondition.SearchMode">
            <summary>
            Search mode
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCondition.SearchOptions">
            <summary>
            Search options
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCondition.DocumentCondition">
            <summary>
            Search condition for documents
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCondition.FuzzySearch">
            <summary>
            If true, the expression is transformed to support fuzzy search
            </summary>
        </member>
        <member name="T:CMS.Search.SearchFields">
            <summary>
            Search fields collection and field constatns
            </summary>
        </member>
        <member name="M:CMS.Search.SearchFields.#ctor">
            <summary>
            Empty contructor
            </summary>
        </member>
        <member name="M:CMS.Search.SearchFields.#ctor(System.Boolean)">
            <summary>
            Contructor
            </summary>
            <param name="storeValues">Indicates if field values will be stored in fields.</param>
        </member>
        <member name="M:CMS.Search.SearchFields.Add(System.String,System.Boolean,System.Boolean,System.Func{System.Object},System.Boolean,System.Nullable{CMS.DataEngine.SearchAnalyzerTypeEnum})">
            <summary>
            Adds new field to collection. When field already exists, it will be updated (merged with existing one). 
            When adding content field with it's value multiple times, the value is appended to existing content.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="searchable">Indicates if field can be searched</param>
            <param name="tokenized">Indicates if field will be tokenized</param>
            <param name="getValueFunc">Function that returns value of the field</param>
            <param name="insertDirectly">Indicates if field should be insert directly into search document whithout aditional processing</param>
            <param name="analyzer">Explicit analyzer to process search field's value. When null default analyzer is used</param>
            <returns>Newly added or existing field</returns>
            <exception cref="T:System.InvalidOperationException">When StoreValues is true and we try to add already existing field but with different value.</exception>
        </member>
        <member name="M:CMS.Search.SearchFields.Get(System.String)">
            <summary>
            Returns requested field. Null when field doesn't exist.
            </summary>
            <param name="fieldName">Field name</param>
        </member>
        <member name="M:CMS.Search.SearchFields.PrepareContentValue(System.Object,System.Boolean)">
            <summary>
            Prepares value to add to content field.
            </summary>
            <param name="value">Value to add</param> 
            <param name="stripTags">Indicates whether tags should be stripped</param>
        </member>
        <member name="M:CMS.Search.SearchFields.Add(CMS.DataEngine.ISearchField)">
            <summary>
            Adds new field to collection. When field already exists, it will be updated (merged with existing one). 
            When adding content field with it's value multiple times, the value is appended to existing content.
            </summary>
            <param name="field">Field to add</param>
            <returns>Newly added or existing field</returns>
            <exception cref="T:System.InvalidOperationException">When StoreValues is true and we try to add already existing field but with different value.</exception>
        </member>
        <member name="M:CMS.Search.SearchFields.InsertNewField(CMS.DataEngine.ISearchField)">
            <summary>
            Inserts new search field into collection
            </summary>
            <param name="newField">Field to insert</param>
            <returns>Insered field</returns>
        </member>
        <member name="M:CMS.Search.SearchFields.UpdateExistingField(CMS.DataEngine.ISearchField)">
            <summary>
            Updates existing search field in collection
            </summary>
            <param name="newField">Field with new data</param>
            <returns>Updated field</returns>
            <exception cref="T:System.InvalidOperationException">When StoreValues is true and we try to add already existing field but with different value.</exception>
            <exception cref="T:System.InvalidOperationException">When field with given field name doesn't exist.</exception>
        </member>
        <member name="P:CMS.Search.SearchFields.StoreValues">
            <summary>
            Indicates if field values will be retrieved and stored in collection.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchFields.Items">
            <summary>
            Search fields
            </summary>
        </member>
        <member name="T:CMS.Search.SearchManager">
            <summary>
            Provides the connection between search engine and specific search index implementation
            </summary>
        </member>
        <member name="M:CMS.Search.SearchManager.Unlock(System.String)">
            <summary>
            Forcibly unlock current index.
            </summary>
            <param name="path">Index path to unlock</param>
        </member>
        <member name="M:CMS.Search.SearchManager.GetQueryClauses(System.String)">
            <summary>
            Returns SQl Fulltext query.
            </summary>
            <param name="searchFor">Search query</param>
        </member>
        <member name="M:CMS.Search.SearchManager.CreateIndexSearcher(System.String)">
            <summary>
            Creates the index searcher
            </summary>
            <param name="path">Index path</param>
        </member>
        <member name="M:CMS.Search.SearchManager.CreateIndexWriter(System.String,CMS.Search.ISearchAnalyzer,System.Boolean)">
            <summary>
            Creates the index writer for the given path and Analyzer
            </summary>
            <param name="path">Index path</param>
            <param name="analyzer">Analyzer</param>
            <param name="create">If true, the writer is created</param>
        </member>
        <member name="M:CMS.Search.SearchManager.CreateAnalyzer(CMS.Search.SearchIndexInfo,System.Boolean)">
            <summary>
            Returns current object analyzer.
            </summary>
            <param name="sii">Search index info</param>
            <param name="isSearch">Indicates whether analyzer should be used for search or indexing</param>
        </member>
        <member name="M:CMS.Search.SearchManager.CreateAnalyzer(CMS.Search.SearchIndexInfo[])">
            <summary>
            Returns analyzer that can be used on searching over multiple indexes
            </summary>
            <param name="indexes">Search index infos</param>
        </member>
        <member name="M:CMS.Search.SearchManager.CreateFilter(System.String,System.String,System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Creates the defined search filter
            </summary>
            <param name="fieldName">Name of the field</param>
            <param name="match">Match value</param>
            <param name="condition">Filter condition</param>
        </member>
        <member name="M:CMS.Search.SearchManager.AddResults(CMS.Search.SearchParameters,CMS.Search.SearchResults)">
            <summary>
            Adds the index search results to the search result
            </summary>
            <param name="parameters">Search parameters</param>
            <param name="results">Search results</param>
        </member>
        <member name="T:CMS.Search.AbstractSearchSyntaxHelper">
            <summary>
            Helper methods for search condition syntax
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchSyntaxHelper">
            <summary>
            Helper methods for search condition syntax
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.IsEmptyCondition(System.String)">
            <summary>
            Returns true if the given search condition is empty
            </summary>
            <param name="condition">Search condition to check</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.AddSearchCondition(System.String,System.String)">
            <summary>
            Adds the given search condition to the existing condition
            </summary>
            <param name="original">Original condition</param>
            <param name="add">Condition to add</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetRange(System.Object,System.Object)">
            <summary>
            Gets the range expression
            </summary>
            <param name="from">From value</param>
            <param name="to">To value. If not specified, the range covers only the from value.</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetFieldCondition(System.String,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Gets the search condition for the given field
            </summary>
            <param name="fieldName">Field name</param>
            <param name="val">Field value</param>
            <param name="valueMatch">Defines if the condition is required. True means required, false means all except, null means default operator (typically optional)</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetFilterCondition(System.String,System.String)">
            <summary>
            Returns condition for search filter row
            </summary>
            <param name="row">Filter row</param>
            <param name="value">Filter row value</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetExactPhraseCondition(System.String)">
            <summary>
            Gets the exact phrase condition from the given phrase
            </summary>
            <param name="phrase">Phrase to convert</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetRequiredCondition(System.String)">
            <summary>
            Gets a required condition from the given condition
            </summary>
            <param name="condition">Condition to convert to required</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetNotCondition(System.String)">
            <summary>
            Gets a not (except) condition from the given condition
            </summary>
            <param name="condition">Condition to convert to required</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetGroup(System.String[])">
            <summary>
            Groups the expressions
            </summary>
            <param name="expressions">Inner group expressions</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.ExpandWithSynonyms(System.String,System.String)">
            <summary>
            Expands given search expression with synonyms. If the data base of synonyms for given language is not found, searchExpression is returned without any modifications.
            </summary>
            <param name="searchExpression">Search expression which should be expanded with synonyms</param>
            <param name="culture">Language code of the search expression (if null, en-us is used)</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.TransformToFuzzySearch(System.String)">
            <summary>
            Adds ~ signs to each term to force fuzzy search.
            </summary>
            <param name="searchExpression">Search expression to transform</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.EscapeKeyWords(System.String)">
            <summary>
            Escapes the key words to be searched
            </summary>
            <param name="keywords">Keywords</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.GetFieldCondition(System.String,System.Object,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Gets the field condition for a range of values
            </summary>
            <param name="fieldName">Field name</param>
            <param name="from">From value</param>
            <param name="to">To value</param>
            <param name="valueMatch">Defines if the condition is required. True means required, false means all except, null means default operator (typically optional)</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.CombineSearchCondition(System.String,CMS.Search.SearchCondition)">
            <summary>
            Returns string with combined search index conditions.
            </summary>
            <param name="keyWords">Search keywords, separated by space</param>
            <param name="searchCondition">Search condition</param>
        </member>
        <member name="M:CMS.Search.ISearchSyntaxHelper.ProcessSearchKeywords(System.String,CMS.Search.SearchOptionsEnum)">
            <summary>
            Returns modified keywords string based on searchOptions.
            </summary>
            <param name="keywords">String with keyword</param>
            <param name="searchOptions">Search options specifies encoding</param>
        </member>
        <member name="F:CMS.Search.AbstractSearchSyntaxHelper.mFieldNameSyntaxRegex">
            <summary>
            Regular expression for field name.
            </summary>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.IsEmptyCondition(System.String)">
            <summary>
            Returns true if the given search condition is empty
            </summary>
            <param name="condition">Search condition to check</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.AddSearchCondition(System.String,System.String)">
            <summary>
            Adds the given search condition to the existing condition
            </summary>
            <param name="original">Original condition</param>
            <param name="add">Condition to add</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetRange(System.Object,System.Object)">
            <summary>
            Gets the range expression
            </summary>
            <param name="from">From value</param>
            <param name="to">To value. If not specified, the range covers only the from value.</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetFieldCondition(System.String,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Gets the search condition for the given field
            </summary>
            <param name="fieldName">Field name</param>
            <param name="val">Field value</param>
            <param name="valueMatch">Defines if the condition is required. True means required, false means all except, null means default operator (typically optional)</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetExactPhraseCondition(System.String)">
            <summary>
            Gets the exact phrase condition from the given phrase
            </summary>
            <param name="phrase">Phrase to convert</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetRequiredCondition(System.String)">
            <summary>
            Gets a required condition from the given condition
            </summary>
            <param name="condition">Condition to convert to required</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetNotCondition(System.String)">
            <summary>
            Gets a not (except) condition from the given condition
            </summary>
            <param name="condition">Condition to convert to required</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetGroup(System.String[])">
            <summary>
            Groups the expressions
            </summary>
            <param name="expressions">Inner group expressions</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetFilterCondition(System.String,System.String)">
            <summary>
            Returns condition for search filter row
            </summary>
            <param name="row">Filter row</param>
            <param name="value">Filter row value</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.ExpandWithSynonyms(System.String,System.String)">
            <summary>
            Expands given search expression with synonyms. If the data base of synonyms for given language is not found, searchExpression is returned without any modifications.
            </summary>
            <param name="searchExpression">Search expression which should be expanded with synonyms</param>
            <param name="culture">Language code of the search expression (if null, en-us is used)</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.TransformToFuzzySearch(System.String)">
            <summary>
            Adds ~ signs to each term to force fuzzy search.
            </summary>
            <param name="searchExpression">Search expression to transform</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.EscapeKeyWords(System.String)">
            <summary>
            Escapes the key words to be searched
            </summary>
            <param name="keywords">Keywords</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.SplitKeyWords(System.String)">
            <summary>
            Splits the given list of key words separated by space
            </summary>
            <param name="keyWords">Key words</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetFieldCondition(System.String,System.Object,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Gets the field condition for a range of values
            </summary>
            <param name="fieldName">Field name</param>
            <param name="from">From value</param>
            <param name="to">To value</param>
            <param name="valueMatch">Defines if the condition is required. True means required, false means all except, null means default operator (typically optional)</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.CombineSearchCondition(System.String,CMS.Search.SearchCondition)">
            <summary>
            Returns string with combined search index conditions.
            </summary>
            <param name="keyWords">Search keywords, separated by space</param>
            <param name="searchCondition">Search condition</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.ProcessSearchKeywords(System.String,CMS.Search.SearchOptionsEnum)">
            <summary>
            Returns modified keywords string based on searchOptions.
            </summary>
            <param name="keywords">String with keyword</param>
            <param name="searchOptions">Search options specifies encoding</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.FieldNameEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Evaluator method, converts lowercase "to" to uppercase.
            </summary>
            <param name="match">Match</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.FinalizeSearchCondition(System.String)">
            <summary>
            Finalizes the search query to make sure that its syntax is consistent and valid
            </summary>
            <param name="condition">Condition to finalize</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetExtraConditions(System.String)">
            <summary>
            Gets the extra conditions based on the given expression
            </summary>
            <param name="extraConditions">Extra conditions</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetKeyWordsCondition(System.String,CMS.Search.SearchCondition)">
            <summary>
            Gets the search condition for the given key words
            </summary>
            <param name="keyWords">Key words</param>
            <param name="searchCondition">Search condition</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetCultureCondition(CMS.Search.DocumentSearchCondition)">
            <summary>
            Gets the search condition for the given culture
            </summary>
            <param name="documentCondition">Document condition</param>
        </member>
        <member name="M:CMS.Search.AbstractSearchSyntaxHelper.GetClassNameCondition(System.String)">
            <summary>
            Gets the search condition for a given list of class names
            </summary>
            <param name="classNames">List of class names separated by semicolon</param>
        </member>
        <member name="P:CMS.Search.AbstractSearchSyntaxHelper.FieldNameSyntaxRegex">
            <summary>
            Gets the regular expression for field name.
            </summary>
        </member>
        <member name="T:CMS.Search.DocumentFilterSearchResultsParameters">
            <summary>
            Settings for search index permission check for documents
            </summary>
        </member>
        <member name="M:CMS.Search.DocumentFilterSearchResultsParameters.#ctor(CMS.Base.IUserInfo,System.Boolean,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="user">User to check against</param>
            <param name="checkPermissions">Check permissions flag</param>
            <param name="culture">Culture</param>
            <param name="combineWithDefaultCulture">Combine with default culture</param>
        </member>
        <member name="P:CMS.Search.DocumentFilterSearchResultsParameters.GlobalPermissions">
            <summary>
            Dictionary of global permission flags [Sitename -> true/false]
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentFilterSearchResultsParameters.ClassIDPermissions">
            <summary>
            Dictionary of site dictionaries of class permission results [SiteName -> [ClassName -> true/false]]
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentFilterSearchResultsParameters.ACLIDPermissions">
            <summary>
            Dictionary of site dictionaries of class permission results [SiteName -> [ACLID -> AuthorizationResultEnum]]
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentFilterSearchResultsParameters.Cultures">
            <summary>
            Dictionary of already found culture versions of the same document [NodeID -> index]
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentFilterSearchResultsParameters.Culture">
            <summary>
            Current culture
            </summary>
        </member>
        <member name="P:CMS.Search.DocumentFilterSearchResultsParameters.DefaultCulture">
            <summary>
            Default culture
            </summary>
        </member>
        <member name="T:CMS.Search.SearchResults">
            <summary>
            Settings for search index permission check
            </summary>
        </member>
        <member name="M:CMS.Search.SearchResults.#ctor(CMS.Base.IUserInfo,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{CMS.Search.SearchIndexInfo})">
            <summary>
            Constructor
            </summary>
            <param name="user">User to check against</param>
            <param name="inRoles">Returns results belonging to this roles</param>
            <param name="notInRoles">Returns results not belonging to these roles</param>
            <param name="siteIds">Site IDs for search</param>
            <param name="indexes">Indexes to search</param>
        </member>
        <member name="P:CMS.Search.SearchResults.Results">
            <summary>
            List of the results
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.InRoles">
            <summary>
            Returns results belonging to this roles
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.NotInRoles">
            <summary>
            Returns results not belonging to these roles
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.SiteIDs">
            <summary>
            Site IDs for search
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.User">
            <summary>
            Current user info
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.Documents">
            <summary>
            Collection of documents ids which are present in filtered results
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.DocumentParameters">
            <summary>
            Parameters for document search filter results
            </summary>
        </member>
        <member name="P:CMS.Search.SearchResults.Indexes">
            <summary>
            Indexes to search
            </summary>
        </member>
        <member name="T:CMS.Search.ISearchFilterable">
            <summary>
            Interface for search filter.
            </summary>
        </member>
        <member name="M:CMS.Search.ISearchFilterable.ApplyFilter(System.String,System.String,System.Boolean)">
            <summary>
            Combine search condition and order value with current values. 
            </summary>
            <param name="searchCondition">Search condition</param>
            <param name="searchSort">Sorting of search</param>
            <param name="filterPostback">If true filter caused the postback which means that filter condition has been changed.</param>
        </member>
        <member name="M:CMS.Search.ISearchFilterable.AddFilterOptionsToUrl(System.String,System.String)">
            <summary>
            Add filter options (selected item) to filter. 
            </summary>
            <param name="searchWebpartID">Filter webpart id</param>
            <param name="options">Filter option</param>
        </member>
        <member name="P:CMS.Search.ISearchFilterable.FilterSearchCondition">
            <summary>
            Seach condition.
            </summary>
        </member>
        <member name="P:CMS.Search.ISearchFilterable.FilterSearchSort">
            <summary>
            Sorting of search.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchFilterModeEnum">
            <summary>
            Search filter mode enumeration.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchFilterModeEnum.DropdownList">
            <summary>
            Dropdown list.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchFilterModeEnum.Checkbox">
            <summary>
            Checkbox.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchFilterModeEnum.RadioButton">
            <summary>
            Radion button.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchFilterModeEnum.TextBox">
            <summary>
            Text box
            </summary>
        </member>
        <member name="T:CMS.Search.CustomSearchIndexer">
            <summary>
            Search indexer for custom search index
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexer">
            <summary>
            Base class for search indexer
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexer.ExecuteTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Executes the search index task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.ExecuteUpdateTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Executes the search index update task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.DocumentUpdate(System.Int32,CMS.Search.SearchTaskInfo)">
            <summary>
            Update specified document 
            </summary>
            <param name="documentId">Document id</param>
            <param name="taskInfo">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.SelectSearchDocument(System.Int32)">
            <summary>
            Selects the search document based on the given ID
            </summary>
            <param name="documentId">Document ID</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetSearchIndexes(System.String)">
            <summary>
            Returns dataset of index IDs for specific type
            </summary>
            <param name="taskType">Task type</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.ExecuteDeleteTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Executes the search index delete task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.DeleteItem(CMS.Search.SearchTaskInfo,CMS.Search.SearchIndexInfo)">
            <summary>
            Deletes specific item from the index
            </summary>
            <param name="taskInfo">Search task</param>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.ExecuteOptimizeTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Executes the search optimize task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.ExecuteRebuildTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Executes the search index rebuild task
            </summary>
            <param name="taskInfo">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.ExecuteProcessTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Processes the search index task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.Rebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Rebuilds the index
            </summary>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.PartialRebuild(CMS.Search.SearchTaskInfo)">
            <summary>
            Rebuilds part of the index
            </summary>
            <param name="taskInfo">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.CheckResultPermissions(CMS.Search.SearchResults,CMS.DataEngine.ISearchDocument,System.Int32)">
            <summary>
            Checks the permissions for the given result document
            </summary>
            <param name="settings">Check permission settings</param>
            <param name="currentDoc">Current result document</param>
            <param name="index">Current document index</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LoadResults(System.Collections.Generic.IEnumerable{CMS.DataEngine.ISearchDocument},CMS.Base.SafeDictionary{System.String,System.Data.DataRow})">
            <summary>
            Loads the results to the given result collection
            </summary>
            <param name="results">Collection of results to load</param>
            <param name="result">Dictionary of the loaded results indexed by their key</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.FillSearchResult(System.Data.DataRow,System.Data.DataRow,CMS.DataEngine.ISearchDocument)">
            <summary>
            Fills the data to the search result data row. Returns true, if the data was correctly filled
            </summary>
            <param name="dr">Result data row to be filled with post-processed results</param>
            <param name="resultDr">Source data row with raw search results</param>
            <param name="doc">Found search document</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetDataClassInfo(CMS.DataEngine.ISearchDocument)">
            <summary>
            Returns the data class info for the given search document
            </summary>
            <param name="obj">Document object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetRelevantIndexes(CMS.DataEngine.ISearchable)">
            <summary>
            Gets the list of indexes relevant to the given object
            </summary>
            <param name="searchObject">Search object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetSearchImageUrl(System.String,System.String,System.String)">
            <summary>
            Returns URL to current search result item.
            </summary>
            <param name="id">ID of the item</param>
            <param name="type">Type of the index</param>
            <param name="image">Image</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetSearchValue(System.String,System.String)">
            <summary>
            Returns column value for current search result item.
            </summary>
            <param name="id">ID of the item</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetSearchFields(CMS.Search.SearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Gets the collection of search fields. When no SearchFields colection is provided, new is created.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LogTaskStart(CMS.Search.SearchTaskInfo)">
            <summary>
            Logs task started message to the log context. 
            </summary>
            <param name="taskInfo"></param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LogMessage(System.String)">
            <summary>
            Appends line to the log context. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LogBatchStart(System.Int32,System.Int32)">
            <summary>
            Logs the start of batch processing. 
            </summary>
            <param name="batchNumber">Number of batch</param>
            <param name="lastID">ID of last item that is not present in the batch</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LogBatchEnd(System.Int32)">
            <summary>
            Logs the end of the batch processing.
            </summary>
            <param name="itemsCount"></param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LogBatchStart(System.Int32,System.Int32,System.String)">
            <summary>
            Logs start of batch processeing. 
            </summary>
            <param name="batchNumber">Number of batch.</param>
            <param name="lastID">ID of last item that is not present in the batch.</param>
            <param name="objectType">Object type of processed objects</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.LogFormBatchStart(System.Int32,System.Int32,System.String)">
            <summary>
            Logs start of batch processeing. 
            </summary>
            <param name="batchNumber">Number of batch.</param>
            <param name="lastID">ID of last item that is not present in the batch.</param>
            <param name="formDisplayName">Form name</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetObjectID(System.String)">
            <summary>
            Returns object ID from potentially compound ID.
            </summary>
            <param name="itemId">Object ID</param>
        </member>
        <member name="M:CMS.Search.SearchIndexer.GetObjectID(System.String,System.String@)">
            <summary>
            Returns object ID from potentially compound ID (Id;objecttype in case of BizForms).
            </summary>
            <param name="itemId">Object ID</param>
            <param name="objectType">Object type recieved from compound key</param>
        </member>
        <member name="M:CMS.Search.CustomSearchIndexer.Rebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Rebuilds the custom index
            </summary>
            <param name="srchInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.CustomSearchIndexer.GetSearchFields(CMS.Search.SearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Gets the collection of search fields. When no SearchFields colection is provided, new is created.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="T:CMS.Search.ICustomSearchIndex">
            <summary>
            Custom search index interface.
            </summary>
        </member>
        <member name="M:CMS.Search.ICustomSearchIndex.Rebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Rebuild custom search index.
            </summary>
            <param name="srchInfo">Current index info</param>
        </member>
        <member name="T:CMS.Search.IndexStatusEnum">
            <summary>
            Enumeration for index statuses.
            </summary>
        </member>
        <member name="F:CMS.Search.IndexStatusEnum.UNKNOWN">
            <summary>
            Unknown index status.
            </summary>
        </member>
        <member name="F:CMS.Search.IndexStatusEnum.NEW">
            <summary>
            New index status.
            </summary>
        </member>
        <member name="F:CMS.Search.IndexStatusEnum.READY">
            <summary>
            Ready index/optimize status.
            </summary>
        </member>
        <member name="F:CMS.Search.IndexStatusEnum.REBUILDING">
            <summary>
            Rebuilding index status.
            </summary>
        </member>
        <member name="F:CMS.Search.IndexStatusEnum.ERROR">
            <summary>
            Error status.
            </summary>
        </member>
        <member name="F:CMS.Search.IndexStatusEnum.OPTIMIZING">
            <summary>
            Optimizing status.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexCultureInfo">
            <summary>
            Search index culture.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexCultureInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexCultureInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfo.#ctor">
            <summary>
            Constructor - Creates an empty SearchCultureInfo object.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SearchCultureInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfo.#ctor(CMS.Search.SearchIndexCultureInfo,System.Boolean)">
            <summary>
            Constructor - Creates a new SearchIndexCultureInfo object from the given DataClass.
            </summary>
            <param name="si">Source SearchCultureInfo info</param>
            <param name="keepSourceData">If true, source data are kept in the object</param>
        </member>
        <member name="P:CMS.Search.SearchIndexCultureInfo.IndexID">
            <summary>
            Index ID.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexCultureInfo.IndexCultureID">
            <summary>
            Culture ID of index.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexCultureInfoProvider">
            <summary>
            Class providing SearchIndexCultureInfo management.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCultures">
            <summary>
            Returns all bindings between cultures and search indexes.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCultures(System.Int32)">
            <summary>
            Returns all cultures for specified search index.
            </summary>
            <param name="searchIndexId">Search index id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCultures(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all cultures for specified search index.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">TopN items</param>
            <param name="columns">List of columns to get</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCultureInfo(System.Int32,System.Int32)">
            <summary>
            Returns the SearchIndexCultureInfo structure for the specified searchIndexCulture id.
            </summary>
            <param name="indexId">SearchIndex id</param>
            <param name="cultureId">Culture id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.SetSearchIndexCultureInfo(CMS.Search.SearchIndexCultureInfo)">
            <summary>
            Sets specified searchIndexCulture.
            Doesn't update existing mItems.
            </summary>
            <param name="infoObj">SearchIndexCultureInfo to set</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.DeleteSearchIndexCultureInfo(CMS.Search.SearchIndexCultureInfo)">
            <summary>
            Deletes specified searchIndexCulture.
            </summary>
            <param name="infoObj">SearchIndexCultureInfo object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.DeleteSearchIndexCultureInfo(System.Int32,System.Int32)">
            <summary>
            Deletes specified searchIndexCulture.
            </summary>
            <param name="indexId">SearchIndex id</param>
            <param name="cultureId">Culture id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.AddSearchIndexCulture(System.Int32,System.Int32)">
            <summary>
            Adds specified sarchIndex to culture.
            </summary>
            <param name="indexId">SearchIndex id</param>
            <param name="cultureId">Culture id</param>   
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCulturesInternal">
            <summary>
            Returns all bindings between cultures and search indexes.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCulturesInternal(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns dataset with all cultures for specified search index.
            </summary>
            <param name="columns">Columns</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">TOP N Rows</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.GetSearchIndexCultureInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the SearchIndexCultureInfo structure for the specified searchIndex.
            </summary>
            <param name="indexId">SearchIndex id</param>
            <param name="cultureId">Culture id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.SetSearchIndexCultureInfoInternal(CMS.Search.SearchIndexCultureInfo)">
            <summary>
            Sets specified searchIndexCulture.
            Doesn't update existing item.
            </summary>
            <param name="searchIndexCulture">SearchIndexCultureInfo to set</param>
        </member>
        <member name="M:CMS.Search.SearchIndexCultureInfoProvider.DeleteSearchIndexCultureInfoInternal(CMS.Search.SearchIndexCultureInfo)">
            <summary>
            Deletes specified SearchIndexCultureInfo.
            </summary>
            <param name="infoObj">SearchIndexCultureInfo object</param>
        </member>
        <member name="T:CMS.Search.SearchIndexInfo">
            <summary>
            Search index.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mRebuild">
            <summary>
            Store actual index Rebuild time. [indexId -> DateTime]
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mIndexPathPrefix">
            <summary>
            Smart search index path prefix.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mIndexFilesLastUpdate">
            <summary>
            Last update of index.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mIndexSettings">
            <summary>
            Contains object with search index settings, initialized by first get of IndexSettings property.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mIndexFileSize">
            <summary>
            Size of index in file system.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mNumberOfIndexedItems">
            <summary>
            Number of indexed items.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfo.mIndexStatus">
            <summary>
            Index status.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones metafile and inserts it to DB as new object.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.#ctor">
            <summary>
            Constructor - Creates an empty SearchIndexInfo object.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SearchIndexInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.#ctor(CMS.Search.SearchIndexInfo,System.Boolean)">
            <summary>
            Constructor - Creates a new SearchIndexInfo object from the given DataClass.
            </summary>
            <param name="si">SearchIndexInfo</param>
            <param name="keepSourceData">If true, source data are kept in the object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.InvalidateIndexSizeInfo">
            <summary>
            Invalidates size of files in index and count of files in index.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfo.IsOptimized">
            <summary>
            Returns true if the index is optimized
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.Rebuild">
            <summary>
            Store actual index Rebuild time. [indexId -> DateTime]
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexBatchSize">
            <summary>
            Gets or sets the batch size for data loading.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexFilesLastUpdate">
            <summary>
            Time when index files were updated. Value is assigned to index files used by current application process.  
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexLastUpdate">
            <summary>
            Last modification of index.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.ActualRebuildTime">
            <summary>
            Gets or sets the actual Rebuild time.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexID">
            <summary>
            Index ID.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexName">
            <summary>
            Index name.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexType">
            <summary>
            Gets or sets the index type (documents, forums, etc).
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexCodeName">
            <summary>
            Gets index code name. This property is used in ISearchIndexInfo interface.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexDisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexCrawlerDomain">
            <summary>
            Domain under which the crawler scans the site.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexCrawlerUserName">
            <summary>
            Index user name - credentials for document crawler.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexCrawlerFormsUserName">
            <summary>
            Index user name - credentials for document crawler for forms authentication.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexCrawlerUserPassword">
            <summary>
            Index user password - credentials for document crawler.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexAnalyzerType">
            <summary>
            Index analyzer type.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexIsCommunityGroup">
            <summary>
            Is community group.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexSettings">
            <summary>
            Index settings.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexGUID">
            <summary>
            Index GUID.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexLastModified">
            <summary>
            Time of last modification.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexLastRebuildTime">
            <summary>
            Time of last Rebuild of index.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexFileSize">
            <summary>
            Gets or sets index file size.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.NumberOfIndexedItems">
            <summary>
            Gets or sets number of indexed documents.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexFilesStatus">
            <summary>
            Index files status.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexStatus">
            <summary>
            Gets or sets index status.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.CustomAnalyzerAssemblyName">
            <summary>
            Gets or sets the custom analyzer assembly name.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.CustomAnalyzerClassName">
            <summary>
            Gets or sets the custom analyzer class name.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.StopWordsFile">
            <summary>
            Gets or sets the filename which should be used for stop words definition.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.IndexPathPrefix">
            <summary>
            Gets the index path prefix.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.CurrentIndexPath">
            <summary>
            Returns current index path.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfo.Provider">
            <summary>
            Search index provider
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexInfoProvider">
            <summary>
            Class providing SearchIndexInfo management. 
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfoProvider.mIndexedClasses">
            <summary>
            List of class names which have a general search index set.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfoProvider.mCachedIndexCulture">
            <summary>
            Cache containing information whether search index belongs to culture, key is indexid_culturecode. [indexId + "_" + cultureCode] -> [Bool]
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfoProvider.mSiteIndexes">
            <summary>
            Cache containing information about indexes assigned to sites. Key - siteId, Value - List(indexIds). [siteId -> List[int]]
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfoProvider.mFlatIndexes">
            <summary>
            Collection of ids of indexes.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfoProvider.mGeneralIndexTypeList">
            <summary>
            Collection of index types which are handled using general indexer.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexInfoProvider.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.InvalidateIndexIDs(System.String)">
            <summary>
            Invalidates index ids collection for specified object type.
            </summary>
            <param name="type">Object type name</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.InvalidateIndexIDs(System.String,System.Boolean)">
            <summary>
            Invalidates index ids collection for specified object type.
            </summary>
            <param name="type">Object type name</param>
            <param name="logtask">Indicates whether web farm task should be logged</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetIndexIDs(System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of index ids for specified object type(s).
            </summary>
            <param name="typeCodes">Object type names (separated with semicolon)</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SearchTypeEnabled(System.String)">
            <summary>
            Returns true if smart search is enabled and exists at least one index for specified object type.
            </summary>
            <param name="type">Object type name</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexes">
            <summary>
            Returns all search indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexSites(System.Int32)">
            <summary>
            Returns all sites for specified search index.
            </summary>
            <param name="searchIndexId">Search index id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexInfo(System.Int32)">
            <summary>
            Returns the SearchIndexInfo structure for the specified searchIndex.
            </summary>
            <param name="searchIndexId">SearchIndex id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexInfo(System.String)">
            <summary>
            Returns the SearchIndexInfo structure for the specified searchIndex.
            </summary>
            <param name="searchIndexName">SearchIndex name</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetLocalizedSearchIndexInfo(System.String,System.String)">
            <summary>
            Returns the SearchIndexInfo structure for the specified searchIndex. If localized SearchIndex found, then 
            it is returned insted of regular one.
            </summary>
            <param name="searchIndexName">SearchIndex name</param>
            <param name="culture">Culture code</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexes(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all the searchIndexes filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexes(System.String,System.String,System.Int32)">
            <summary>
            Returns all the searchIndexes filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>
            <param name="topN">Number of records to return</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexes(System.String,System.String)">
            <summary>
            Returns all the searchIndexes filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>        
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SetSearchIndexInfo(CMS.Search.SearchIndexInfo)">
            <summary>
            Sets (updates or inserts) specified searchIndex.
            </summary>
            <param name="searchIndex">SearchIndex to set</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.DeleteSearchIndexInfo(CMS.Search.SearchIndexInfo)">
            <summary>
            Deletes specified searchIndex.
            </summary>
            <param name="infoObj">SearchIndex object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.DeleteSearchIndexInfo(System.Int32)">
            <summary>
            Deletes specified searchIndex.
            </summary>
            <param name="searchIndexId">SearchIndex id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.IsObjectTypeIndexed(System.String)">
            <summary>
            Determines whether the class has a general index.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.RebuildSiteIndexes(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Rebuilds all indexes which belongs to the specified site.
            </summary>
            <param name="site">ID or name of the site the indexes of which should be rebuilt</param>
            <param name="runIndexer">Indicates whether the indexer starts immediately</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SetIndexFilesLastUpdateTime(CMS.Search.SearchIndexInfo,System.DateTime)">
            <summary>
            Sets last update time of search index files that belongs to current application process.
            </summary>
            <param name="indexInfo">Search index to update</param>
            <param name="updateTime">Time when index was updated</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SetIndexFilesStatus(CMS.Search.SearchIndexInfo,CMS.Search.IndexStatusEnum)">
            <summary>
            Sets status of search index files that belongs to current application process.
            </summary>
            <param name="indexInfo">Search index to update</param>
            <param name="status">Index status</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexesInternal">
            <summary>
            Returns all search indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexInfoInternal(System.Int32)">
            <summary>
            Returns the SearchIndexInfo structure for the specified searchIndex.
            </summary>
            <param name="searchIndexId">SearchIndex id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexInfoByNameInternal(System.String)">
            <summary>
            Returns the SearchIndexInfo structure for the specified searchIndex.
            </summary>
            <param name="searchIndexName">SearchIndex id</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSearchIndexesInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all the searchIndexes filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SetSearchIndexInfoInternal(CMS.Search.SearchIndexInfo)">
            <summary>
            Sets (updates or inserts) specified searchIndex.
            </summary>
            <param name="searchIndex">SearchIndex to set</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.DeleteSearchIndexInfoInternal(CMS.Search.SearchIndexInfo)">
            <summary>
            Deletes specified searchIndex.
            </summary>
            <param name="infoObj">SearchIndex object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.RebuildSiteIndexesInternal(CMS.DataEngine.SiteInfoIdentifier,System.Nullable{System.Boolean})">
            <summary>
            Rebuilds all indexes which belongs to the specified site.
            </summary>
            <param name="site">ID or name of the site the indexes of which should be rebuilt</param>
            <param name="runIndexer">Indicates whether the indexer starts immediately. If not specified this behaviour depends on current settings.</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SetIndexFilesLastUpdateTimeInternal(CMS.Search.SearchIndexInfo,System.DateTime)">
            <summary>
            Sets last update time of search index files that belongs to current application process.
            </summary>
            <param name="indexInfo">Search index to update</param>
            <param name="updateTime">Time when index was updated</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.SetIndexFilesStatusInternal(CMS.Search.SearchIndexInfo,CMS.Search.IndexStatusEnum)">
            <summary>
            Sets status of search index files that belongs to current application process.
            </summary>
            <param name="indexInfo">Search index to update</param>
            <param name="status">Index status</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.ClearInternal(System.Boolean)">
            <summary>
            Clears hash tables.
            </summary>
            <param name="logWebFarmTask">Enables or disables webfarm task logging, if false no task is logged</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.RemoveFromIndexSiteCacheInternal(System.String,System.Boolean)">
            <summary>
            Removes key from cached site indexes.
            </summary>
            <param name="key">Cache key to be removed (site id)</param>
            <param name="logWebFarmTask">Indicates whether webfarm task should be created</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.RemoveFromIndexCultureCacheInternal(System.String,System.Boolean)">
            <summary>
            Removes key from cached index-culture relation.
            </summary>
            <param name="key">Cache key to be removed</param>
            <param name="logWebFarmTask">Indicates whether webfarm task should be created</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.InvalidateIndexIDsInternal(System.String,System.Boolean)">
            <summary>
            Invalidates index ids collection for specified object type.
            </summary>
            <param name="type">Object type name</param>
            <param name="logtask">Indicates whether web farm task should be logged</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.RemoveFromIndexSiteCache(System.String,System.Boolean)">
            <summary>
            Removes key from cached site indexes.
            </summary>
            <param name="key">Cache key to be removed (site id)</param>
            <param name="logWebFarmTask">Indicates whether webfarm task should be created</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.RemoveFromIndexCultureCache(System.String,System.Boolean)">
            <summary>
            Removes key from cached index-culture relation.
            </summary>
            <param name="key">Cache key to be removed</param>
            <param name="logWebFarmTask">Indicates whether webfarm task should be created</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.IndexIsInSite(CMS.Search.SearchIndexInfo,System.Int32)">
            <summary>
            If SearchIndex has specified site assigned returns true, otherwise false.
            The result is cached for next time usage.
            </summary>
            <param name="sii">SearchIndexInfo</param>
            <param name="siteId">Site id</param>        
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetSiteIndexes(System.Int32)">
            <summary>
            Returns search indexes of specified site. Tries to load it from cache, if not found indexes are loaded from DB.
            </summary>
            <param name="siteId">Site id</param>
            <returns>List with indexes ids. Never null, if no indexes for site, empty list is returned.</returns>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.IndexIsInCulture(CMS.Search.SearchIndexInfo,System.String)">
            <summary>
            If SearchIndex has specified culture assigned returns true, otherwise false.
            The result is cached for next time usage.
            </summary>
            <param name="sii">SearchIndexInfo</param>
            <param name="cultureCode">Culture code</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.GetRelevantIndexes(CMS.DataEngine.ISearchable)">
            <summary>
            Returns all indexes which are relevant to the specified ISearchable object. 
            Check ISearchable object type and with dependence on this type check index settings
            </summary>
            <param name="searchObject">Object implementing ISearchable interface</param>        
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.Clear">
            <summary>
            Clears hash tables.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears hash tables.
            </summary>
            <param name="logWebFarm">Enables or disables webfarm task logging, if false no task is logged</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.ClearIndexedClassesList">
            <summary>
            Clears the indexedClass list (thread safe).
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.ClearIndexFilesCachedData(System.String)">
            <summary>
            Clears meta data of index files on other instances of web farm servers if running on configuration where clear is necessary.
            Example of such meta data is last update time of index files. 
            </summary>
            <param name="indexCodeName">Code name of index</param>
        </member>
        <member name="M:CMS.Search.SearchIndexInfoProvider.MoveIndexFiles(System.String,System.String)">
            <summary>
            Moves index files from the old directory to the new one (after index code rename).
            </summary>
            <param name="oldCodeName">Old code name</param>
            <param name="newCodeName">New code name</param>
        </member>
        <member name="P:CMS.Search.SearchIndexInfoProvider.IndexedClasses">
            <summary>
            List of class names which have a general search index set.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfoProvider.GeneralIndexTypeList">
            <summary>
            Collection of index types which are handled using general indexer.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfoProvider.CachedIndexCulture">
            <summary>
            Cache containing information whether search index belongs to culture, key is indexid_culturecode. [indexId + "_" + cultureCode] -> [Bool]
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfoProvider.SiteIndexes">
            <summary>
            Cache containing information about indexes assigned to sites. Key - siteId, Value - List(indexIds). [siteId -> List[int]]
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfoProvider.FlatIndexes">
            <summary>
            Returns hashtable of flat indexes.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexInfoProvider.SearchEnabled">
            <summary>
            Gets property which indicates if Smart search is enabled.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexSiteInfo">
            <summary>
            Search index site.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexSiteInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexSiteInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfo.#ctor">
            <summary>
            Constructor - Creates an empty SearchIndexSiteInfo object.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SearchIndexSiteInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfo.#ctor(CMS.Search.SearchIndexSiteInfo,System.Boolean)">
            <summary>
            Constructor - Creates a new SearchIndexSiteInfo object from the given DataClass.
            </summary>
            <param name="si">Source SearchIndexSiteInfo info</param>
            <param name="keepSourceData">If true, source data are kept in the object</param>
        </member>
        <member name="P:CMS.Search.SearchIndexSiteInfo.IndexID">
            <summary>
            Index ID.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexSiteInfo.IndexSiteID">
            <summary>
            Site ID of index.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexSiteInfoProvider">
            <summary>
            Class providing management of the Search index - Site binding.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSearchIndexSites">
            <summary>
            Returns all search index sites bindings.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetIndexSites(System.Int32[])">
            <summary>
            Returns all sites for specified search indexes.
            </summary>
            <param name="searchIndexIds">Search index IDs</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSiteIndexes(System.Int32[])">
            <summary>
            Returns all indexes for specified sites.
            </summary>
            <param name="siteIds">Site IDs</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSiteIndexBindings(System.Int32[])">
            <summary>
            Returns search index site bindings for specified sites.
            </summary>
            <param name="siteIds">Site IDs</param>        
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetIndexSiteBindings(System.Int32[])">
            <summary>
            Returns search index site bindings for specified indexes.
            </summary>
            <param name="searchIndexIds">Search index IDs</param>        
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSearchIndexSiteInfo(System.Int32,System.Int32)">
            <summary>
            Returns search index site binding structure for the specified index and site.
            </summary>
            <param name="indexId">Search index ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.SetSearchIndexSiteInfo(CMS.Search.SearchIndexSiteInfo)">
            <summary>
            Sets specified searchIndexSite.
            </summary>
            <param name="infoObj">SearchIndexSite to set</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.DeleteSearchIndexSiteInfo(CMS.Search.SearchIndexSiteInfo)">
            <summary>
            Deletes specified search index site binding.
            </summary>
            <param name="infoObj">SearchIndexSite object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.DeleteSearchIndexSiteInfo(System.Int32,System.Int32)">
            <summary>
            Deletes specified search index site binding.
            </summary>
            <param name="indexId">Search index ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.AddSearchIndexToSite(System.Int32,System.Int32)">
            <summary>
            Creates search index site binding. 
            </summary>
            <param name="indexId">Search index ID</param>
            <param name="siteId">Site ID</param>   
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSearchIndexSitesInternal">
            <summary>
            Returns all search index sites bindings.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetIndexSitesInternal(System.Int32[])">
            <summary>
            Returns object query with all sites for specified search indexes.
            </summary>
            <param name="searchIndexIds">Search index IDs</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSiteIndexesInternal(System.Int32[])">
            <summary>
            Returns object query with all search indexes for specified sites.
            </summary>
            <param name="siteIds">Site IDs</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetIndexSiteInfosFromSitesInternal(System.Int32[])">
            <summary>
            Returns object query with search index site bindings for the specified sites.
            </summary>
            <param name="siteIds">Site IDs</param>
            <returns>Dataset with results</returns>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetIndexSiteInfosFromIndexesInternal(System.Int32[])">
            <summary>
            Returns object query with search index site bindings for the specified indexes.
            </summary>
            <param name="searchIndexIds">Search index IDs</param>
            <returns>Dataset with results</returns>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.GetSearchIndexSiteInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the SearchIndexSiteInfo structure for the specified index and site.
            Null if binding doesn't exist.
            </summary>
            <param name="indexId">Search index ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.SetSearchIndexSiteInfoInternal(CMS.Search.SearchIndexSiteInfo)">
            <summary>
            Sets specified search index site binding.
            </summary>
            <param name="searchIndexSite">SearchIndexSiteInfo object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.DeleteSearchIndexSiteInfoInternal(CMS.Search.SearchIndexSiteInfo)">
            <summary>
            Deletes specified SearchIndexSiteInfo.
            </summary>
            <param name="infoObj">SearchIndexSiteInfo object</param>
        </member>
        <member name="M:CMS.Search.SearchIndexSiteInfoProvider.AddSearchIndexToSiteInternal(System.Int32,System.Int32)">
            <summary>
            Creates search index site binding. 
            </summary>
            <param name="indexId">Search index ID</param>
            <param name="siteId">Site ID</param>   
        </member>
        <member name="T:CMS.Search.ClauseTypeEnum">
            <summary>
            Search query clause enumeration.
            </summary>
        </member>
        <member name="F:CMS.Search.ClauseTypeEnum.OR">
            <summary>
            OR clause.
            </summary>
        </member>
        <member name="F:CMS.Search.ClauseTypeEnum.AND">
            <summary>
            AND clause.
            </summary>
        </member>
        <member name="F:CMS.Search.ClauseTypeEnum.AND_NOT">
            <summary>
            AND NOT clause.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchOptionsEnum">
            <summary>
            Search task status enumeration.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchOptionsEnum.NoneSearch">
            <summary>
            No special behaviour, all special character will be escaped.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchOptionsEnum.BasicSearch">
            <summary>
            Special character ":" will be escaped.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchOptionsEnum.FullSearch">
            <summary>
            Search with all possibilities, no escaping.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchParameters">
            <summary>
            Structure to define the search parameters used for search.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.SearchFor">
            <summary>
            Search query
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.SearchSort">
            <summary>
            Search sort expression
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.ClassNames">
            <summary>
            Class names
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.CurrentCulture">
            <summary>
            Current culture
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.DefaultCulture">
            <summary>
            Default culture
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.CombineWithDefaultCulture">
            <summary>
            Whether combine with default culture
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.CheckPermissions">
            <summary>
            Indicates whether check permissions
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.SearchInAttachments">
            <summary>
            Indicates whether search in attachments
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.SearchIndexes">
            <summary>
            List of search index names to search in, separated by semicolon
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.DisplayResults">
            <summary>
            Number of results which should be displayed
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.StartingPosition">
            <summary>
            Starting position in search results (paging)
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.NumberOfProcessedResults">
            <summary>
            Number of processed results due to performance optimization
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.User">
            <summary>
            User info
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.NumberOfResults">
            <summary>
            Number of results which (for pager settings)
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.MaxScore">
            <summary>
            Returns the maximum score value encountered within the search hits (among the NumberOfResults results).
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.AttachmentWhere">
            <summary>
            Where condition for attachments search
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.AttachmentOrderBy">
            <summary>
            Order by for attachments search
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.BlockFieldOnlySearch">
            <summary>
            If true, performs the search only when the content part of the search expression is present.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchParameters.SearchAllCultures">
            <summary>
            Returns true, if the search parameters search for all cultures
            </summary>
        </member>
        <member name="T:CMS.Search.SearchQueryClauses">
            <summary>
            Class with information about clauses and keywords.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.andClauses">
            <summary>
            Collection of 'AND' clauses.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.andNotClauses">
            <summary>
            Collection of 'AND NOT' clauses.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.orClauses">
            <summary>
            Collection of 'OR' clauses.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.mParent">
            <summary>
            Parent clause object.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.mHighlightedWords">
            <summary>
            List of words which should be highlighted.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.mNonAlphaNumericRegex">
            <summary>
            Non-alpha numeric characters regex.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchQueryClauses.mExactRegex">
            <summary>
            Exact phrase regular expression.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchQueryClauses.AddClause(System.Object,CMS.Search.ClauseTypeEnum)">
            <summary>
            Add clause to current object.
            </summary>
            <param name="wordOrQueryToken">KeyWord or SearchQueryToken child</param>
            <param name="type">Clause type</param>
        </member>
        <member name="M:CMS.Search.SearchQueryClauses.GetQuery">
            <summary>
            Returns Full text SQL query.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchQueryClauses.GetQuery(System.Boolean,System.Boolean)">
            <summary>
            Returns Full text SQL query and fill collection of words which should be highlighted.
            </summary>
            <param name="generateQuery">Indicates whether query should be generated</param>
            <param name="causeType">If is true => positive cause (AND/OR), false => negative cause (NOT)</param>
        </member>
        <member name="M:CMS.Search.SearchQueryClauses.GetQuery(System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Returns Full text SQL query and fill collection of words which should be highlighted.
            </summary>
            <param name="generateQuery">Indicates whether query should be generated</param>
            <param name="causeType">If is true => positive cause (AND/OR), false => negative cause (NOT)</param>
            <param name="highligtedWords">Collection of words which should be highlighted</param>
        </member>
        <member name="M:CMS.Search.SearchQueryClauses.ProcessKeyWord(System.Object)">
            <summary>
            Returns string keyword without SQL Injection vulnerability.
            </summary>
            <param name="obj">Input object</param>
        </member>
        <member name="M:CMS.Search.SearchQueryClauses.ProcessHighlightedWord(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Adds keyword to the collection of highlighted words (with and without diacritics)
            </summary>
            <param name="obj">Input object</param>]
            <param name="collection">Collection of highlighted words</param>
        </member>
        <member name="P:CMS.Search.SearchQueryClauses.ExactRegex">
            <summary>
            Gets the regular expression for exact phrase.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchQueryClauses.NonAlphaNumericRegex">
            <summary>
            Gets the non-alpha numeric characters regex.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchQueryClauses.HighlightedWords">
            <summary>
            Gets the list of words which should be highlighted.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchQueryClauses.Parent">
            <summary>
            Gets or sets the parent of the current object.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchCrawler">
            <summary>
            Search HTML crawler for indexing content from the output of the web site
            </summary>
        </member>
        <member name="M:CMS.Search.SearchCrawler.ExtractUserDomain(System.String)">
            <summary>
            Extracts the user domain from given username
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:CMS.Search.SearchCrawler.HtmlToPlainText(System.String)">
            <summary>
            Converts html to the plain text (body part).
            </summary>
            <param name="htmlCode">HTML code</param>
        </member>
        <member name="M:CMS.Search.SearchCrawler.GetCrawlerCookieContainer(System.String,System.String)">
            <summary>
            Returns authentication cookie for specific user and url (domain) which is used for crawling.
            </summary>
            <param name="user">Username</param>
            <param name="url">Full url to get domain</param>
        </member>
        <member name="M:CMS.Search.SearchCrawler.GetCrawlerCredentials">
            <summary>
            Returns network credential for crawler.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchCrawler.CreateRequest(System.String)">
            <summary>
            Creates HttpWebRequest for specific URL.
            </summary>
            <param name="url">Target URL</param>
        </member>
        <member name="M:CMS.Search.SearchCrawler.DownloadHtmlContent(System.String)">
            <summary>
            Downloads the html code for the specified url.
            </summary>
            <param name="url">Page url</param>
        </member>
        <member name="M:CMS.Search.SearchCrawler.AddCrawlerIdToUrl(System.String)">
            <summary>
            Adds "crawlerid" parameter to given URL along with the signature of such extended URL.
            </summary>
            <param name="url">URL to add crawlerid to</param>
        </member>
        <member name="M:CMS.Search.SearchCrawler.IsCrawlerRequest">
            <summary>
            Returns true if current request was initialized by smart search crawler.
            </summary>
        </member>
        <member name="E:CMS.Search.SearchCrawler.OnHtmlToPlainText">
            <summary>
            Fires when html to plain text process is required.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerDomainName">
            <summary>
            Gets the domain specified in app keys which should be used for crawler indexer.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerUserAgent">
            <summary>
            Gets or sets the user agent which should be used within crawler search.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerAllowSiteAliasRedirect">
            <summary>
            Determines whether to allow redirection within site aliases when crawler gets redirection HTTP response from main alias.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerFormsUserName">
            <summary>
            Gets the username which should be used for crawler search.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerUserName">
            <summary>
            Gets the crawler user name which should be used for current search.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerPassword">
            <summary>
            Gets the scheduler user password.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerID">
            <summary>
             Gets or sets the crawler id which is sent within the request.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchCrawler.CrawlerDomain">
            <summary>
            Gets the crawler user domain.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchCrawler.HtmlToPlainTextHandler">
            <summary>
            Html to plain text version delegate.
            </summary>
            <param name="plainText">Plain text version</param>
            <param name="originalHtml">Original HTML version</param>
        </member>
        <member name="T:CMS.Search.SearchHelper">
            <summary>
            Provides the smart search methods.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.GENERALINDEX">
            <summary>
            General search index constant.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.ONLINEFORMINDEX">
            <summary>
            On-line forms search index constant.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.INVARIANT_FIELD_VALUE">
            <summary>
            Invariant field value.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.MAX_INDEX_PATH">
            <summary>
            Max allowed length of path for place where indexes are stored.
            260 is Windows limit, -1 for NULL, -16 for index file name, -1 for index name, -1 for slash 
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.STARTING_MARKER">
            <summary>
            Highlighting's starting tag marker.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.ENDING_MARKER">
            <summary>
            Highlighting's ending tag marker.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.CUSTOM_SEARCH_INDEX">
            <summary>
            Constant for custom search index.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.DOCUMENTS_CRAWLER_INDEX">
            <summary>
            Constant for custom search index.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.DEFAULT_SEARCH_TITLE_COLUMN">
            <summary>
            Constant for default class search title column.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.DEFAULT_SEARCH_CONTENT_COLUMN">
            <summary>
            Constant for default class search content column.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.DEFAULT_SEARCH_CREATION_DATE_COLUMN">
            <summary>
            Constant for default class search creation date column.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.SIMPLE_ITEM_ID">
            <summary>
            Guid value of the simple search setting item.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.CUSTOM_INDEX_DATA">
            <summary>
            Constant for custom index data.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mBasicEscaperRegEx">
            <summary>
            Finds only ":" special character - basic search.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mImageContentReplacer">
            <summary>
            Regular expression for Image content.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mWordRegex">
            <summary>
            Gets the regular expression for word splitting used in SubsetAnalyzer.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mSearchContentXpathValue">
            <summary>
            XPath function to specify which webparts fields should be added to the search document content.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mExcludedFieldsFromConversion">
            <summary>
            List of excluded fields from conversion, semicolon is used as separator.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mSearchOnlyWhenContentPresent">
            <summary>
            If true, performs the search only when the content part of the search expression is present.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mCustomSearchPath">
            <summary>
            Custom search path.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mMaxFieldLength">
            <summary>
            Maximal field length.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mMaxResults">
            <summary>
            Maximal number of returned results.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mMaxAttachmentSize">
            <summary>
            Gets the maximum size of an attachment (in kB) which are processed with content extractors. 0 means unlimited size (default).
            If a positive number is set, attachments the size of which exceeds the value are not processed and their content is not indexed.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mStoreContentField">
            <summary>
            Indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mRemoveDiacriticsForIndexField">
            <summary>
            Indicates whether diacritics should be removed for index field
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mSearchers">
            <summary>
            Collection of index Searchers. [key -> IndexSearcher]
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.SynonymsWeight">
            <summary>
            Gets the weight (from interval 0 - 1.0f) which is given to synonyms if the synonym expansion is used. 1.0f means the synonyms are equally important as original words.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchHelper.mIndexesInSharedStorage">
            <summary>
            Indicates if the search indexes are stored on external storage.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHelper.CreateEmptyDocument">
            <summary>
            Creates empty search document.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHelper.CreateDocument(CMS.Search.SearchDocumentParameters)">
            <summary>
            Creates search document based on given parameters
            </summary>
            <param name="parameters">Document initialization parameters</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.InitDocument(CMS.DataEngine.ISearchDocument,CMS.Search.SearchDocumentParameters)">
            <summary>
            Initializes search document.
            </summary>
            <param name="doc">Document to init</param>
            <param name="parameters">Document initialization parameters</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.AddGeneralField(CMS.DataEngine.ISearchDocument,System.String,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a general field do the search document.
            </summary>
            <param name="document">Document to which should be field added</param>
            <param name="name">Name of new field</param>
            <param name="value">Value of field</param>
            <param name="store">Should be value stored</param>
            <param name="tokenize">Should be value tokenized</param>
            <param name="valueToLower">If true, the value of the field is converted to lower case before adding to the index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.PrepareContentValue(System.Object,System.Boolean)">
            <summary>
            Prepares value to add to content field.
            </summary>
            <param name="value">Value to add</param> 
            <param name="stripTags">Indicates whether tags should be stripped</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.AddObjectDataToDocument(CMS.DataEngine.ISearchDocument,System.String,System.Data.DataSet)">
            <summary>
             Adds object data to iDocument, data for content field prepares and returns.
            </summary>
            <param name="doc">Search document</param>
            <param name="classname">Class name</param>
            <param name="ds">Dataset with data</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.CreateRebuildTask(System.Int32)">
            <summary>
            Creates rebuild task if search settings are not empty, for user index is task created always.
            </summary>
            <param name="indexID">Index ID</param>
            <returns>True if search task was created, false if not</returns>
        </member>
        <member name="M:CMS.Search.SearchHelper.IsClassSearchEnabled(System.String)">
            <summary>
            Returns true if given class allows search.
            </summary>
            <param name="className">Code name of the class</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Optimize(CMS.Search.SearchIndexInfo)">
            <summary>
            Optimize specified index.
            </summary>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.PartialRebuild(CMS.Search.SearchTaskInfo)">
            <summary>
            Rebuild part of the index with dependence on type and values.
            </summary>
            <param name="taskInfo">Search task</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Rebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Rebuild specified index.
            </summary>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.FinishRebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Finishes the rebuild of the given index by marking it as updated
            </summary>
            <param name="srchInfo">Search index info</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Update(CMS.DataEngine.ISearchDocument,CMS.Search.SearchIndexInfo)">
            <summary>
            Insert or update document for specified index.
            </summary>
            <param name="iDoc">Document</param>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Delete(System.String,System.Collections.ICollection,CMS.Search.SearchIndexInfo)">
            <summary>
            Remove document(s) with dependence on field name and field value collection for specified index.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="values">Collection of field values</param>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Delete(System.String,System.String,CMS.Search.SearchIndexInfo)">
            <summary>
            Remove document(s) with dependence on field name and field value for specified index.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="value">Field value</param>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.HighlightMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Highlighting match evaluator.
            </summary>
            <param name="m">Represents the results from a single regular expression match</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Highlight(System.String,System.String,System.String)">
            <summary>
            Highlight input text with dependence on current search key words.
            </summary>
            <param name="text">Input text</param>
            <param name="startTag">Starting HTML tag</param>
            <param name="endTag">Ending HTML tag</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetCustomSearchIndex(CMS.Search.SearchIndexInfo)">
            <summary>
            Returns ICusromSearchIndex for specified index info.
            </summary>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.Search(CMS.Search.SearchParameters)">
            <summary>
            Returns dataset with search results, if search is used for non-document index, path and class name values are ignored (can be null).
            </summary>
            <param name="parameters">Search parameters</param>
            <returns>DataSet with search results</returns>
        </member>
        <member name="M:CMS.Search.SearchHelper.SearchInternal(CMS.Search.SearchParameters)">
            <summary>
            Returns list with search results, if search is used for non-document index, path and class name values are ignored (can be null).
            </summary>
            <param name="parameters">Search parameters</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.PrepareSearchResults(CMS.Search.SearchParameters)">
            <summary>
            Adds the attachment results to the search results
            </summary>
            <param name="parameters">Search parameters</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.CollectSites(CMS.Search.SearchParameters,System.Collections.Generic.List{System.Int32})">
            <summary>
            Collects the list of sites to search
            </summary>
            <param name="parameters">Search parameters</param>
            <param name="indexIDs">List of index IDs</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetResultRange(CMS.Search.SearchParameters,System.Collections.Generic.List{CMS.DataEngine.ISearchDocument},System.Int32@,System.Int32@)">
            <summary>
            Gets the result range indexes
            </summary>
            <param name="parameters">Search parameters</param>
            <param name="filteredResults">Filtered results</param>
            <param name="fromIndex">Returns starting index</param>
            <param name="toIndex">Returns ending index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.LoadResultData(System.Collections.Generic.List{CMS.DataEngine.ISearchDocument},System.Int32,System.Int32)">
            <summary>
            Loads the result data for the search results
            </summary>
            <param name="filteredResults">Filtered search results</param>
            <param name="fromIndex">Starting index</param>
            <param name="toIndex">Ending index</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.CreateResultDataSet(System.Collections.Generic.List{CMS.DataEngine.ISearchDocument},System.Int32,System.Int32,CMS.Base.SafeDictionary{System.String,System.Data.DataRow},CMS.Base.SafeDictionary{System.String,CMS.DataEngine.ISearchDocument},System.Single)">
            <summary>
            Creates the result DataSet from the search results
            </summary>
            <param name="filteredResults">List of filtered results</param>
            <param name="fromIndex">Starting index for the results</param>
            <param name="toIndex">End index for the results</param>
            <param name="resultData">Result data</param>
            <param name="docs">Search documents for particular items</param>
            <param name="maxScore">Maximum score value encountered within the search hits</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetCustomSearchIndexResult(System.Data.DataRow,CMS.DataEngine.ISearchDocument)">
            <summary>
            Fills custom search index search result, returns data row that replaces the reference to search result in result data
            </summary>
            <param name="resultDr">Result data row</param>
            <param name="doc">Results search document</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.NewResultsTable">
            <summary>
            Creates new search results data table
            </summary>
        </member>
        <member name="M:CMS.Search.SearchHelper.FilterResults(CMS.Search.ISearchHits,CMS.Search.SearchResults,CMS.Search.SearchParameters)">
            <summary>
            Filters the search results, returns number of resulting items
            </summary>
            <param name="hits">Hits collection with search results</param>
            <param name="parameters">Search result parameters</param>
            <param name="searchParams">Search parameters</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetResultTypes(System.Collections.Generic.IList{CMS.DataEngine.ISearchDocument},System.Int32,System.Int32)">
            <summary>
            Gets the list of all types present in the given results
            </summary>
            <param name="results">List of the results</param>
            <param name="from">Index from which process the results</param>
            <param name="to">Index to process the results</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetResultsToProcess(System.Collections.Generic.IList{CMS.DataEngine.ISearchDocument},System.Int32,System.Int32,System.Func{System.String,System.Boolean})">
            <summary>
            Processes the results from the given range matching the required type
            </summary>
            <param name="results">List of the results</param>
            <param name="from">Index from which process the results</param>
            <param name="to">Index to process the results</param>
            <param name="typeLambda">Function that checks the type of the results to process</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.InvalidateSearcher(System.Guid)">
            <summary>
            Invalidates searcher for the given index.
            </summary>
            <param name="id">Searcher id</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetStopWordsFileInfo(System.String)">
            <summary>
            Returns FileInfo object of stop words file for the given path
            </summary>
            <param name="path">Path to the stop words file</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.LoadCustomAnalyzer``1(System.String,System.String)">
            <summary>
            Returns analyzer object for specified analyzer name.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.SearchFieldChanged(CMS.DataEngine.BaseInfo,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Returns true if any field included in the search changed (checks fields defined in Class Search Settings).
            </summary>
            <param name="info">Info object</param>
            <param name="changedColumns">List of changed columns, if not provided, retrieves the list from the object</param>
            <param name="checkSpecialFields">If true, the special fields like (ClassSearchTitleColumn, etc.) are checked for changes</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.IsSearchTaskCreationAllowed(System.String)">
            <summary>
            Returns true if the search task for given node should be created.
            Returns true if 
             - search is allowed on general level AND 
             - search is allowed for class of the object
            </summary>
            <param name="className">Class to check</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.SearchEnabledForClass(System.String)">
            <summary>
            Returns true if search is enabled for a given class (document type). Returns false if class not found.
            </summary>
            <param name="className">Name of the class</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetSearchFieldDefaultValue(System.String,System.Type)">
            <summary>
            Gets value which should be preselected for given column.
            </summary>
            <param name="column">Column name</param>
            <param name="formFieldDataTypeEnum">Type of field</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:CMS.Search.SearchHelper.CreateSearchSettings(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates new SearchSettingsInfo with given parameters.
            </summary>
            <param name="name">Name of the search field</param>
            <param name="content">Content flag value</param>
            <param name="searchable">Searchable flag value</param>
            <param name="tokenized">Tokenized flag value</param>
            <param name="fieldname">Field name value</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.CreateSearchSettings(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,CMS.DataEngine.SearchSettingsInfo,System.Boolean@)">
            <summary>
            Creates new SearchSettingsInfo with given parameters. Returns whether the parameters changed from the original search settings.
            </summary>
            <param name="name">Name of the search field</param>
            <param name="content">Content flag value</param>
            <param name="searchable">Searchable flag value</param>
            <param name="tokenized">Tokenized flag value</param>
            <param name="fieldname">Field name value</param>
            <param name="ssiOld">Original search settings to detect changes</param>
            <param name="fieldChanged">Will be true if any of the values changed from the original search settings</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetClassSearchFields(System.String)">
            <summary>
            Returns list of all fields of the given class (along with their types) which should be included in the search.
            </summary>
            <param name="className">Name of the class to get the search fields from</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetClassSearchFields(System.Int32)">
            <summary>
            Returns list of all fields of the given class (along with their types) which should be included in the search.
            </summary>
            <param name="classId">ID of the class to get the search fields from</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetClassSearchFields(CMS.DataEngine.DataClassInfo)">
            <summary>
            Returns list of all fields of the given class (along with their types) which should be included in the search.
            </summary>
            <param name="classInfo">Class to get the search fields from</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetClassFields(System.String)">
            <summary>
            Returns the fields of the class along with their data type.
            </summary>
            <param name="className">Name of the class where to get the fields from</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetClassFields(CMS.DataEngine.DataClassInfo)">
            <summary>
            Returns the fields of the class along with their data type.
            </summary>
            <param name="classInfo">Class where to get the fields from</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetDefaultSearchSettings(System.String)">
            <summary>
            Returns the default search settings of the class.
            </summary>
            <param name="className">Name of the class</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetDefaultSearchSettings(CMS.DataEngine.DataClassInfo)">
            <summary>
            Returns the default search settings of the class.
            </summary>
            <param name="dci">Class to process</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.CleanSearchSettings(CMS.DataEngine.DataClassInfo)">
            <summary>
            Cleans the search settings from settings which does not correspond to any fields in the class and returns the filtered definition.
            </summary>
            <param name="dci">DataClass to process</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.SetDefaultClassSearchColumns(CMS.DataEngine.DataClassInfo)">
            <summary>
            Sets default class search columns.
            </summary>
            <param name="dci">DataClass to process</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.GetBinaryDataSearchContent(CMS.DataEngine.BaseInfo,CMS.Search.ExtractionContext,System.Boolean@)">
            <summary>
            Extracts the search information from the info. Returns null by default. Should be overriden by specific info.
            </summary>
            <param name="info">Object to extract search content from</param>
            <param name="context">Extraction context passed to the extractor in case the value is not cached</param>
            <param name="cachedValueUsed">Indicates whether the cached value was used or the extractor has to be called</param>
        </member>
        <member name="M:CMS.Search.SearchHelper.IsSearchAllowedExtension(System.String,System.Int32)">
            <summary>
            Check if file extension is allowed for indexing such attachment in search index.
            </summary>
            <param name="ext">Attachment extension</param>
            <param name="siteId">ID of the node site</param>
            <returns>True if extension is allowed otherwise false</returns>
        </member>
        <member name="P:CMS.Search.SearchHelper.Searchers">
            <summary>
            Collection of index Searchers. [key -> IndexSearcher]
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.MaxAttachmentSize">
            <summary>
            Gets the maximum size of an attachment (in kB) which are processed with content extractors. 0 means unlimited size (default).
            If a positive number is set, attachments the size of which exceeds the value are not processed and their content is not indexed.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.MaxResults">
            <summary>
            Gets the value that indicates whether diacritics should be removed for index field
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.RemoveDiacriticsForIndexField">
            <summary>
            Gets the value that indicates whether diacritics should be removed for index field
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.StoreContentField">
            <summary>
            Gets the value that indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.SubsetAnalyzerWordRegex">
            <summary>
            Gets the regular expression for word splitting used in SubsetAnalyzer.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.ExcludedFieldsFromConversion">
            <summary>
            Gets or sets the fields separated by semicolon, this field will be excluded from int/double conversion
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.BasicSearchReplacer">
            <summary>
            Gets the regular expression for basic search replacement.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.ImageContentReplacer">
            <summary>
            Gets the regular expression for image content tag.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.SearchContentXpathValue">
            <summary>
            XPath function to specify which web parts fields should be added to the search document content.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.SearchOnlyWhenContentPresent">
            <summary>
            If true, performs the search only when the content part of the search expression is present.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.CustomSearchPath">
            <summary>
            Custom search path.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.SearchPath">
            <summary>
            Search path.
            File system location where Smart Search stores the indexes.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.IndexesInSharedStorage">
            <summary>
            Indicates whether Smart Search indexes are shared through external storage.
            Tasks for shared index needs to be executed only once by one instance.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchHelper.MaxFieldLength">
            <summary>
            Maximal field length.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchIndexers">
            <summary>
            Manages the search indexers used for specific object type
            </summary>
        </member>
        <member name="F:CMS.Search.SearchIndexers.mIndexers">
            <summary>
            Registered search indexer tasks by their type
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexers.Init">
            <summary>
            Initializes the system indexers
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexers.RegisterDefaultIndexer``1">
            <summary>
            Registers the default indexer which handles the search for all object types which don't have specific indexer
            </summary>
        </member>
        <member name="M:CMS.Search.SearchIndexers.RegisterIndexer``1(System.String)">
            <summary>
            Registers the given indexer for the specific object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.Search.SearchIndexers.GetIndexer(System.String)">
            <summary>
            Gets the indexer by its object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="P:CMS.Search.SearchIndexers.DefaultIndexer">
            <summary>
            Default search indexer
            </summary>
        </member>
        <member name="P:CMS.Search.SearchIndexers.IndexerTypes">
            <summary>
            Returns the collection of the indexers
            </summary>
        </member>
        <member name="T:CMS.Search.SearchTaskCreationParameters">
            <summary>
            Wrappes values required to create a new search task.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskCreationParameters.TaskType">
            <summary>
            Type of the search task
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskCreationParameters.ObjectType">
            <summary>
            Object type of the indexed object. Not required for rebuild and optimize tasks.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskCreationParameters.ObjectField">
            <summary>
            Is used for indexer to decide how to process the task and to understand the information stored in task value. 
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskCreationParameters.TaskValue">
            <summary>
            Value that indexer requires to correctly process the task. 
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskCreationParameters.RelatedObjectID">
            <summary>
            ID of the related object. With this ID we can pinpoint the object, which change caused the creation of the search task. 
            </summary>
        </member>
        <member name="T:CMS.Search.SearchTaskInfo">
            <summary>
            SearchTaskInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfo.#ctor">
            <summary>
            Constructor - Creates an empty SearchTaskInfo object.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SearchTaskInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskCreated">
            <summary>
            Gets the task creation time.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskField">
            <summary>
            Search task field.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskObjectType">
            <summary>
            Object type of search task.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskType">
            <summary>
            Search task type.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskStatus">
            <summary>
            Search task status.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskServerName">
            <summary>
            Search task server name.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskID">
            <summary>
            Search task ID.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskValue">
            <summary>
            Search task value.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskPriority">
            <summary>
            SearchTaskPriority determines which task should be processed earlier, higher value = higher priority.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskErrorMessage">
            <summary>
            Contains error message if error occured while processing the task. 
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskRelatedObjectID">
            <summary>
            ID of the object this task relates to. e.g. rebuild task - ID of an index, update task - ID of object that was changed. 
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfo.SearchTaskRelatedObjectType">
            <summary>
            Returns object type of the task related object. 
            </summary>
        </member>
        <member name="T:CMS.Search.SearchTaskInfoProvider">
            <summary>
            Class providing SearchTaskInfo management.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.EXTERNAL_REBUILD_LOCK_NAME">
            <summary>
            File name for the external lock
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.MAX_NUMBER_OF_THREAD_RESTORING">
            <summary>
            Maximal number of thread restoring.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.TASK_INDEXER_RETRIEVE_ROWS_COUNT">
            <summary>
            Task indexer will retrieve search tasks from database by count of 10.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mEnableIndexer">
            <summary>
            Indicates if the smart search indexer should start.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mEnableTasks">
            <summary>
            Indicates whether task creation is enabled.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mIsIndexThreadRunning">
            <summary>
            Indicates whether thread is running.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mIndexerThreadGuid">
            <summary>
            Contains GUID of indexter thread when indexer is running.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mWindowsIdentity">
            <summary>
            Windows identity.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mNumberOfThreadRestoring">
            <summary>
            Current number of thread restoring.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.locker">
            <summary>
            Object used for thread locking.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskInfoProvider.mProcessSearchTasksByScheduler">
            <summary>
            If true, smart search tasks are processed by scheduler.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchtasks">
            <summary>
            Returns all search tasks.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTasks">
            <summary>
            Returns all search tasks.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTaskInfo(System.Int32)">
            <summary>
            Returns the SearchTaskInfo structure for the specified searchTask.
            </summary>
            <param name="searchTaskId">SearchTask id</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTasks(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns all the search tasks filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="columns">Selects only specified columns</param>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>        
            <param name="topN">Selects only TOP N rows</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTasks(System.String,System.String)">
            <summary>
            Returns all the search tasks filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>        
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.SetSearchTaskInfo(CMS.Search.SearchTaskInfo)">
            <summary>
            Sets (updates or inserts) specified searchTask.
            </summary>
            <param name="searchTaskObj">SearchTask to set</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.DeleteSearchTaskInfo(CMS.Search.SearchTaskInfo)">
            <summary>
            Deletes specified searchTask.
            </summary>
            <param name="searchTaskObj">SearchTask object</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.DeleteSearchTaskInfo(System.Int32)">
            <summary>
            Deletes specified searchTask.
            </summary>
            <param name="searchTaskId">SearchTask id</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.CreateTask(CMS.Search.SearchTaskTypeEnum,System.String,System.String,System.String,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Creates task in the database and start indexer if it is required.
            </summary>
            <param name="taskType">Task type</param>
            <param name="objectType">Object type. Not required for rebuild or optimize tasks.</param>
            <param name="objectField">Object field</param>
            <param name="objectValue">Object value</param>
            <param name="objectID">ID of an object this task relates to, 0 if there is none</param>
            <param name="runIndexer">Whether indexer starts after creation. If not specified this behaviour depends on current settings.</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.CreateTask(CMS.Search.SearchTaskCreationParameters,System.Nullable{System.Boolean})">
            <summary>
            Creates task in the database and start indexer if it is required.
            </summary>
            <param name="parameters">Search task creation parameters</param>
            <param name="runIndexer">Whether indexer starts after creation. If not specified this behaviour depends on current settings.</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.CreateTasks(System.Collections.Generic.ICollection{CMS.Search.SearchTaskCreationParameters},System.Nullable{System.Boolean})">
            <summary>
            Creates tasks in the database and start indexer if it is required.
            </summary>
            <param name="parameters">Search task creation parameters</param>
            <param name="runIndexer">Whether indexer starts after creation. If not specified this behaviour depends on current settings.</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.ProcessTasks">
            <summary>
            Processes tasks (starts indexer).
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.ProcessTasks(System.Boolean)">
            <summary>
            Processes tasks (starts indexer).
            </summary>
            <param name="createWebFarmTask">Indicates whether web farm task should be created</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.ProcessTasks(System.Boolean,System.Boolean)">
            <summary>
            Processes tasks (starts indexer).
            </summary>
            <param name="createWebFarmTask">Indicates whether web farm task should be created</param>
            <param name="workerRole">Indicates whether process tasks are run by Azure worker role</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.RunAsync(System.Security.Principal.WindowsIdentity)">
            <summary>
            Starts thread of indexer.
            </summary>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.Run">
            <summary>
            Runs indexer in current thread.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTaskRelatedObjectType(System.String,CMS.Search.SearchTaskTypeEnum)">
            <summary>
            Returns object type of the task related object. 
            </summary>
            <param name="taskObjectType">Search task object type</param>
            <param name="taskStatus">Search task status</param>
            <returns>Search task related object's object type.</returns>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTaskToProcess">
            <summary>
            Returns batch of tasks that are ready to be processed.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.TaskIndexer">
            <summary>
            Retrieves search tasks from DB and processes them.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTasksInternal">
            <summary>
            Returns all search tasks.
            </summary>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTaskInfoInternal(System.Int32)">
            <summary>
            Returns the SearchTaskInfo structure for the specified task.
            </summary>
            <param name="searchTaskId">Country id</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.GetSearchTasksInternal(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns all the search tasks filtered by where condition and sorted by orderBy expression.
            </summary>
            <param name="columns">Specifies selected columns, null for all columns</param>
            <param name="where">The WHERE condition to use</param>
            <param name="orderBy">The ORDER BY expression to use to sort the result</param>
            <param name="topN">Number of records to return, 0 for all rows</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.SetSearchTaskInfoInternal(CMS.Search.SearchTaskInfo)">
            <summary>
            Sets (updates or inserts) specified search task.
            </summary>
            <param name="searchTask">Search task to set</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.DeleteSearchTaskInfoInternal(CMS.Search.SearchTaskInfo)">
            <summary>
            Deletes specified search task.
            </summary>
            <param name="searchTaskObj">Search task object</param>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.CreateTaskInternal(System.Collections.Generic.ICollection{CMS.Search.SearchTaskCreationParameters})">
            <summary>
            Creates search tasks in the database.
            </summary>
            <param name="parameters">Search task creation parameters</param>     
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.CreateSearchTaskInfo(CMS.Search.SearchTaskCreationParameters,CMS.Search.SearchTaskStatusEnum,System.String)">
            <summary>
            Creates new search task info object and fills it with given values.
            </summary>
            <param name="parameters">Creation parameters </param>
            <param name="status">Task status</param>
            <param name="serverName">Web farm server name</param>
            <returns>New search task info object</returns>
        </member>
        <member name="M:CMS.Search.SearchTaskInfoProvider.RunInternal">
            <summary>
            Represents indexer thread.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfoProvider.EnableIndexer">
            <summary>
            Indicates if the smart search indexer should start.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfoProvider.EnableTasks">
            <summary>
            Indicates whether task creation is enabled.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfoProvider.ProcessSearchTasksByScheduler">
            <summary>
            If true, smart search tasks are processed by scheduler.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfoProvider.IndexerThreadGuid">
            <summary>
            Contains GUID of indexter thread when indexer is running.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfoProvider.IsIndexThreadRunning">
            <summary>
            Indicates whether indexer thread is running.
            </summary>
        </member>
        <member name="P:CMS.Search.SearchTaskInfoProvider.TaskIndexerRetrieveRowsCount">
            <summary>
            Task indexer will retrieve search tasks from database by count of 10.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchTaskStatusEnum">
            <summary>
            Search task status enumeration.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskStatusEnum.Ready">
            <summary>
            Ready status.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskStatusEnum.InProgress">
            <summary>
            In progress status.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskStatusEnum.Error">
            <summary>
            Error status
            </summary>
        </member>
        <member name="T:CMS.Search.SearchTaskTypeEnum">
            <summary>
            Search task type enum.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskTypeEnum.Update">
            <summary>
            Update.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskTypeEnum.Delete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskTypeEnum.Rebuild">
            <summary>
            Rebuild.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskTypeEnum.Optimize">
            <summary>
            Optimize.
            </summary>
        </member>
        <member name="F:CMS.Search.SearchTaskTypeEnum.Process">
            <summary>
            Universal process task.
            </summary>
        </member>
        <member name="T:CMS.Search.SearchSyntaxHelper">
            <summary>
            Helper methods for search condition syntax
            </summary>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.IsEmptyCondition(System.String)">
            <summary>
            Returns true if the given search condition is empty
            </summary>
            <param name="condition">Search condition to check</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.AddSearchCondition(System.String,System.String)">
            <summary>
            Adds the given search condition to the existing condition
            </summary>
            <param name="original">Original condition</param>
            <param name="add">Condition to add</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetRange(System.Object,System.Object)">
            <summary>
            Gets the range expression
            </summary>
            <param name="from">From value</param>
            <param name="to">To value. If not specified, the range covers only the from value.</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetFieldCondition(System.String,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Gets the search condition for the given field
            </summary>
            <param name="fieldName">Field name</param>
            <param name="val">Field value</param>
            <param name="valueMatch">Defines if the condition is required. True means required, false means all except, null means default operator (typically optional)</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetFilterCondition(System.String,System.String)">
            <summary>
            Returns condition for search filter row
            </summary>
            <param name="row">Filter row</param>
            <param name="value">Filter row value</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetExactPhraseCondition(System.String)">
            <summary>
            Gets the exact phrase condition from the given phrase
            </summary>
            <param name="phrase">Phrase to convert</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetRequiredCondition(System.String)">
            <summary>
            Gets a required condition from the given condition
            </summary>
            <param name="condition">Condition to convert to required</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetNotCondition(System.String)">
            <summary>
            Gets a not (except) condition from the given condition
            </summary>
            <param name="condition">Condition to convert to required</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetGroup(System.String[])">
            <summary>
            Groups the expressions
            </summary>
            <param name="expressions">Inner group expressions</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.ExpandWithSynonyms(System.String,System.String)">
            <summary>
            Expands given search expression with synonyms. If the data base of synonyms for given language is not found, searchExpression is returned without any modifications.
            </summary>
            <param name="searchExpression">Search expression which should be expanded with synonyms</param>
            <param name="culture">Language code of the search expression (if null, en-us is used)</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.TransformToFuzzySearch(System.String)">
            <summary>
            Adds ~ signs to each term to force fuzzy search.
            </summary>
            <param name="searchExpression">Search expression to transform</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.EscapeKeyWords(System.String)">
            <summary>
            Escapes the key words to be searched
            </summary>
            <param name="keywords">Keywords</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.GetFieldCondition(System.String,System.Object,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Gets the field condition for a range of values
            </summary>
            <param name="fieldName">Field name</param>
            <param name="from">From value</param>
            <param name="to">To value</param>
            <param name="valueMatch">Defines if the condition is required. True means required, false means all except, null means default operator (typically optional)</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.CombineSearchCondition(System.String,CMS.Search.SearchCondition)">
            <summary>
            Returns string with combined search index conditions.
            </summary>
            <param name="keyWords">Search keywords, separated by space</param>
            <param name="searchCondition">Search condition</param>
        </member>
        <member name="M:CMS.Search.SearchSyntaxHelper.ProcessSearchKeywords(System.String,CMS.Search.SearchOptionsEnum)">
            <summary>
            Returns modified keywords string based on searchOptions.
            </summary>
            <param name="keywords">String with keyword</param>
            <param name="searchOptions">Search options specifies encoding</param>
        </member>
        <member name="T:CMS.Search.SearchValueConverter">
            <summary>
            Base class for search value converter
            </summary>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts the 
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.ReplaceNumbers(System.String)">
            <summary>
            Replaces the number expressions within the given condition
            </summary>
            <param name="condition">Condition to process</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.IntToString(System.Int32)">
            <summary>
            Returns string representation of the integer value. Returned value has always uniform format.
            </summary>
            <param name="value">Integer value</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.StringToInt(System.String)">
            <summary>
            Converts search string to the integer value.
            </summary>
            <param name="value">String representation of integer</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.DoubleToString(System.Double)">
            <summary>
            Returns string representation of the double value. Returned value has always uniform format.
            </summary>
            <param name="value">Double value</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.StringToDouble(System.String)">
            <summary>
            Converts search string to the integer value.
            </summary>
            <param name="value">String representation of double</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.StringToDate(System.String)">
            <summary>
            Converts the string representation of the date time from searched document to a date time
            </summary>
            <param name="input">Input string</param>
        </member>
        <member name="M:CMS.Search.SearchValueConverter.DateToString(System.DateTime)">
            <summary>
            Converts the date time from to its string representation
            </summary>
            <param name="input">Input date</param>
        </member>
    </members>
</doc>
