<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Membership</name>
    </assembly>
    <members>
        <member name="T:CMS.Membership.AuthenticationHelper">
            <summary>
            Contains method connected with user authentication
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.PASSWORD_EXPIRATION_WARNING">
            <summary>
            Setting value for displaying warning message to user with expired password
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.PASSWORD_EXPIRATION_LOCK">
            <summary>
            Setting value for locking user account to user with expired password
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.USER">
            <summary>
            Constant used for identify user.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.GROUP">
            <summary>
            Constant used for identify group.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.mUpdateLastLogonForExternalUsers">
            <summary>
            Indicates whether last logon information should be updated for external users
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.mRenewSessionAuthChange">
            <summary>
            Specifies whether new session ID is generated after user log in/out. 
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.mGlobalPublicUser">
            <summary>
            Global public user object.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.mKickUsers">
            <summary>
            Hashtable of the users which should be kicked.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.mPrincipal">
            <summary>
            Encapsulates the server or domain against which all operations are performed.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.mNetBiosDomainName">
            <summary>
            NetBios domain name.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.CloneGlobalUserInfo">
            <summary>
            Clone global user info.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.IsAuthenticated">
            <summary>
            Returns true if the current user is authenticated.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SetCurrentUser(CMS.Membership.CurrentUserInfo)">
            <summary>
            Sets the current user.
            </summary>
            <param name="uInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetCurrentUser(System.Boolean@,System.Boolean)">
            <summary>
            Gets the current user.
            </summary>
            <param name="loadUserData">True if the additional user data should be loaded (user was initialized or has changed)</param>
            <param name="cacheResult">If true, the result for the user is cached</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetPublicUser">
            <summary>
            Gets the public user info object
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOutPublicUser(CMS.Membership.UserInfo)">
            <summary>
            Sign out public user.
            </summary>
            <param name="ui">User info</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOut(System.String)">
            <summary>
            Signs the user out.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOut(System.String@)">
            <summary>
            Signs the user out.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ImpersonateUser(CMS.Membership.UserInfo,System.String,System.Boolean)">
            <summary>
            Impersonates current user.
            </summary>
            <param name="ui">User to which impersonate the current user</param>
            <param name="redirectionUrl">Custom redirection relative URL</param>
            <param name="forceRedirect">Indicates if redirect should be forced even if no redirect URL is specified</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetFormsAuthenticationUserName(System.String,System.String)">
            <summary>
            Checks whether the supplied forms authentication cookie is valid. If the cookie is valid, returns name of the authenticated user. Otherwise returns null.
            Contains check for BannedIPs Login level.
            </summary>
            <param name="authCookie">Forms authentication cookie</param>
            <param name="siteName">Name of the site for which the banned IP is checked</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUser(System.String,System.Boolean,System.Boolean)">
            <summary>
            Authenticate given user.
            </summary>
            <param name="userName">User name</param>
            <param name="createPersistentCookie">Indicates if persistent cookie should be created</param>
            <param name="loadCultures">If true, the preferred cultures of the user are loaded</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUser(System.String,System.String,System.String,System.Boolean,AuthenticationSourceEnum)">
            <summary>
            Authenticates user against the database.
            </summary>
            <param name="userName">User name to authenticate</param>
            <param name="password">Password to authenticate</param>
            <param name="siteName">Site name</param>
            <param name="login">Indicates if methods is called during user login</param>
            <param name="source">Source of calling</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.FinalizeAuthenticationProcess(CMS.Membership.UserInfo,System.Int32)">
            <summary>
            Finalizes the authentication process. Does all the actions that are needed
            after successful authentication.
            </summary>
            <param name="user">User info.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ExtendAuthenticationCookieExpiration">
            <summary>
            Sets the authentication cookie expiration
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUserAD(System.String,System.String,System.String)">
            <summary>
            Authenticates user against the database.
            </summary>
            <param name="username">User name to authenticate</param>
            <param name="password">Password to authenticate</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUserWindows(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Authenticates the external user with Windows authentication.
            </summary>
            <param name="user">User to authenticate</param>
            <param name="siteName">Site name for authentication</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SetWindowsUserCultures(System.String)">
            <summary>
            Sets preferred cultures for a windows user
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserAuthenticationUrl(CMS.Membership.UserInfo,System.String)">
            <summary>
            Prepares the user authentication GUID, adds it as a query string parameter to supplied Url.
            </summary>
            <param name="user">UserInfo of particular user</param>
            <param name="targetUrl">Target URL</param>
            <returns>Target URL with authentication GUID parameter</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateOpenIDUser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Authenticate user with provided OpenID parameters. Create new user if createNew is set to TRUE and user doesn't 
            exist in DB.
            </summary>
            <param name="claimedID">OpenID Claimed Identifier</param>
            <param name="providerUrl">OpenID provider URL</param>
            <param name="siteName">Site name</param>
            <param name="generatePassword">Indicates if random password should be generated</param>
            <param name="disableConfirmation">Indicates if e-mail confirmation of newly registered user is disabled</param>
            <param name="error">Error message which will be filled when error occurred</param>
            <returns>UserInfo with authenticated user or null if user is not found</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateLinkedInUser(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Authenticates user with LinkedID parameters. It will create new user if not found in DB.
            </summary>
            <param name="profileID">LinkedID profile identifier</param>
            <param name="firstName">User's first name</param>
            <param name="lastName">User's last name</param>
            <param name="siteName">Site name</param>
            <param name="generatePassword">Indicates if random password should be generated</param>
            <param name="disableConfirmation">Indicates if e-mail confirmation of newly registered user is disabled</param>
            <param name="error">Error message which will be filled when error occurred</param>
            <returns>UserInfo with authenticated user or null if user is not found</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateWindowsLiveUser(System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Authenticates the Windows Live user with user's LiveID. If user doesn't exists yet and createNew set
            to true, then it is created.
            </summary>
            <param name="userLiveId">User LiveID</param>
            <param name="siteName">Site name</param>
            <param name="disableConfirmation">Indicates if e-mail confirmation of newly registered user is disabled</param>
            <param name="error">Error message which will be filled when error occurred</param>
            <returns>Returns UserInfo</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateFacebookConnectUser(System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Authenticate user with provided Facebook Connect parameters. Create new user if createNew
            is set to TRUE and user doesn't exist in DB.
            </summary>
            <param name="facebookUserID">Facebook user ID</param>
            <param name="siteName">Site name</param>
            <param name="generatePassword">Indicates if random password should be generated</param>
            <param name="disableConfirmation">Indicates if e-mail confirmation of newly registered user is disabled</param>
            <param name="error">Error message which will be filled when error occurred</param>
            <returns>UserInfo with authenticated user or null if user is not found</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.LogoutUser">
            <summary>
            Signs out user and removes their shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOutUser">
            <summary>
            Signs out user and removes their shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SetAuthCookieWithUserData(System.String,System.Boolean,System.Int32,System.String[])">
            <summary>
            Creates authentication cookie of user with specified custom data.
            </summary>
            <param name="username">User name</param>
            <param name="isPersistent">Persistency of cookie</param>
            <param name="timeOut">Cookie timeout</param>
            <param name="userData">Array of user data</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserDataFromAuthCookie">
            <summary>
            Returns an array with userdata from authentication cookie.
            </summary>        
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.EnsureADUser(System.String,System.Security.Principal.SecurityIdentifier,System.String,System.String[])">
            <summary>
            Creates or updates user with given SID.
            Rises authentication event when user is ready to update/insert.
            </summary>
            <param name="userName">User to authenticate</param>
            <param name="sid">User's Active Directory SID</param>
            <param name="siteName">Site name for authentication</param>
            <param name="roles">User roles</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.HandleImpersonation(CMS.Membership.UserInfo)">
            <summary>
            Handle ongoing impersonation according to the session values.
            </summary>
            <param name="user">Current user</param>
            <returns>Impersonated user if impersonation is in progress.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateMembershipUser(CMS.Membership.UserInfo,System.Boolean,System.String,System.Boolean,System.String@)">
            <summary>
            Authenticates user. If new user is being created then analytics logs are recorded.
            </summary>
            <param name="ui">UserInfo of newly created or already existing user</param>
            <param name="isNew">Indicates if authenticated user is newly created</param>
            <param name="siteName">Site name</param>
            <param name="disableConfirmation">Indicates if email confirmation of newly registered user is disabled</param>
            <param name="error">Error which occurred during authentication process</param>
            <returns>Returns authenticated user</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetDomainSamAccountName(System.DirectoryServices.AccountManagement.Principal)">
            <summary>
            Get domain name in NetBiosDomainName\SamAccountName
            </summary>
            <param name="principal">Principal object (User or Group)</param>
            <returns>Domain name in format </returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.RegisterCustomSignOutScriptProvider(CMS.Membership.ICustomSignOutScriptProvider)">
            <summary>
            Registers a custom SignOut script provider.
            </summary>
            <param name="provider">The provider to be registered</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetSignOutOnClickScript(System.Web.UI.Page)">
            <summary>
            Gets the script that performs a SignOut of all the registered third party providers.
            </summary>
            <param name="page">Page to which helper scripts can be registered.</param>
            <returns>Script that performs a SignOut of all the registered third party providers or null if none is necessary.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.IsAuthenticationRedirect">
            <summary>
            Checks whether request is being redirected to a logon page.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.EnsureExternalUser(CMS.Membership.UserInfo)">
            <summary>
            Ensures that the external user record is present in the database.
            </summary>
            <param name="uInfo">User info object with the user data</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.CanUserLogin(System.Int32)">
            <summary>
            Checks if given user can login to system.
            </summary>
            <param name="userID">User id</param>        
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserWindowsRoles(System.String)">
            <summary>
            Gets the user roles.
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserADRoles(System.String)">
            <summary>
            Gets the user roles from AD.
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.RemoveSessionID">
            <summary>
            Removes cookie with session ID which enforces ASP.NET to generate new session ID if RenewSessionAuthChange property is set to true.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.UpdateLastLogonInformation(CMS.Membership.UserInfo)">
            <summary>
            Updates last logon information of user = last logon time, IP address and agent.
            Doesn't call SetUserInfo!!
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserADGuid(System.String,System.Security.Principal.SecurityIdentifier)">
            <summary>
            Tries to retrieve GUID from Active Directory.
            </summary>
            <param name="userName">SAM account name</param>
            <param name="sid">Security identifier</param>
            <returns>GUID of </returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SearchADForGuid(System.DirectoryServices.DirectorySearcher)">
            <summary>
            Retrieves GUID of a user specified by filter of given directory searcher.
            </summary>
            <param name="ds">Initialized directory searcher</param>
            <returns>GUID of AD user or Guid.Empty</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.FindUsersByNameOrEmail(System.String,System.String)">
            <summary>
            Find users specified by UserName or Email 
            </summary>
            <param name="userEmail">Email assigned to the user.</param>
            <param name="username">UserName for the specified user.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetResetPasswordUrl(System.String)">
            <summary>
            Returns URL of page where user can reset his password.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUnlockAccountUrl(System.String)">
            <summary>
            Returns URL of page where user can unlock her account.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.MaximumInvalidPasswordAttemps(System.String)">
            <summary>
            Gets limit of invalid password attempts before user account is locked
            </summary>
            <param name="siteName">Site name for which the check is made</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.DisplayAccountLockInformation(System.String)">
            <summary>
            Indicates if additional info about account lock should be displayed
            </summary>
            <param name="siteName">Site name for which the check is made</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.IsPasswordExpirationEnabled(System.String,System.Int32@)">
            <summary>
            Indicates if password expiration is enabled
            </summary>
            <param name="siteName">Site to check</param>
            <param name="expDays">Number of days before password expiration</param>
            <returns>True if password expiration is enabled, False otherwise</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetPolicyViolationMessage(System.String)">
            <summary>
            Returns a message that the entered password doesn't meet the defined password policy.
            </summary>
            <param name="siteName">Code name of the site that has the password policy defined.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.CheckPasswordExpiration(CMS.Membership.UserInfo,System.String,System.Boolean,System.String)">
            <summary>
            Check if user password is expired and optionally according to settings lock expired password account.
            </summary>
            <param name="ui">User account to check</param>
            <param name="siteName">Site name</param>
            <param name="lockAccount">Indicates if account should be locked if maximum invalid logon attempts was reached</param>
            <returns>Returns true if user password expired, false otherwise</returns>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.CheckInvalidPasswordAttempts(CMS.Membership.UserInfo,System.String,System.String)">
            <summary>
            Check if logging invalid password attempts is enabled and if so, invalid attempt counter is incremented and
            if user exceeded maximal number of invalid attempts, her account is locked
            </summary>
            <param name="user">User to log invalid password attempt</param>
            <param name="siteName">Site name to check invalid password attempts functionality</param>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendUnlockAccountRequest(CMS.Membership.UserInfo,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String)">
            <summary>
            Sends e-mail to user to inform her about her account was locked due to reaching maximum invalid logon attempts.
            </summary>
            <param name="user">User</param>        
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="resolver">Macro resolver</param>     
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.UnlockUserAccount(CMS.Membership.UserInfo)">
            <summary>
            Unlock specified user account
            </summary>
            <param name="user">User account to be unlocked</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.HandleAdminEmergencyReset">
            <summary>
            Handles admin emergency reset 
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ForgottenEmailRequest(System.String,System.String,System.String,System.String)">
            <summary>
            Tries to find user based on given user identifier (checks username and email) and if it finds
            the user email with forgotten password is send. It sends password directly or request for getting/regenerating password based on settings.
            </summary>
            <param name="userIdent">User identifier</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>        
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ForgottenEmailRequest(System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver)">
            <summary>
            Tries to find user based on given user identifier (checks username and email) and if it finds
            the user email with forgotten password is send. It sends password directly or request for getting/regenerating password based on settings.
            </summary>
            <param name="userIdent">User identifier</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="resolver">Macro resolver</param>        
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ForgottenEmailRequest(System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String,System.Boolean@)">
            <summary>
            Tries to find user based on given user identifier (checks username and email) and if it finds
            the user email with forgotten password is send. It sends password directly or request for getting/regenerating password based on settings.
            </summary>
            <param name="userIdent">User identifier</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="resolver">Macro resolver</param>
            <param name="requestUrl">Url which processes request.</param>
            <param name="success">Returns whether sending of request was successful.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ForgottenEmailRequest(System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String,System.Boolean@,System.String)">
            <summary>
            Tries to find user based on given user identifier (checks username and email) and if it finds
            the user email with forgotten password is send. It sends password directly or request for getting/regenerating password based on settings.
            </summary>
            <param name="userIdent">User identifier</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="resolver">Macro resolver</param>
            <param name="requestUrl">Url which processes request.</param>
            <param name="success">Returns whether sending of request was successful.</param>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendPassword(CMS.Membership.UserInfo,System.String,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver)">
            <summary>
            Sends given user an email with forgotten/new password. (If the new password isn't provided current password is used for the plain text format or new password is generated for the SHA1/SHA2 format.)
            </summary>
            <param name="user">User</param>
            <param name="newPassword">New password (optional)</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="emailTemplateName">Email template name to be used for the email</param>
            <param name="resolver">Macro resolver</param>
            <returns>Message with result description</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendPassword(CMS.Membership.UserInfo,System.String,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.Boolean@)">
            <summary>
            Sends given user an email with forgotten/new password. (If the new password isn't provided current password is used for the plain text format or new password is generated for the SHA1/SHA2 format.)
            </summary>
            <param name="user">User</param>
            <param name="newPassword">New password (optional)</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="emailTemplateName">Email template name to be used for the email</param>
            <param name="resolver">Macro resolver</param>
            <param name="success">Returns whether sending of request was successful.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendPasswordRequest(CMS.Membership.UserInfo,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String,System.Boolean@)">
            <summary>
            Sends e-mail to user for approval request of new password.
            </summary>
            <param name="user">User</param>        
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="emailTemplateName">Email template name to be used for the email</param>
            <param name="resolver">Macro resolver</param>        
            <param name="requestUrl">Url which processes request.</param>
            <param name="success">Returns whether sending of request was successful.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendPasswordRequest(CMS.Membership.UserInfo,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String,System.Boolean@,System.String)">
            <summary>
            Sends e-mail to user for approval request of new password.
            </summary>
            <param name="user">User</param>        
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="emailTemplateName">Email template name to be used for the email</param>
            <param name="resolver">Macro resolver</param>        
            <param name="requestUrl">Url which processes request.</param>
            <param name="success">Returns whether sending of request was successful.</param>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ResetPassword(System.String,System.String,System.Int32,System.Double,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.Boolean@,System.String,System.String)">
            <summary>
            Resets password for user based on his request. 
            </summary>
            <param name="hash">Request hash (identifier).</param>
            <param name="requestTime">Request time.</param>
            <param name="userID">User id.</param>
            <param name="interval">Interval in which user can reset her password.</param>
            <param name="newPassword">New password.</param>
            <param name="siteName">Site name.</param>
            <param name="sendEmailFrom">Email address of the sender</param>       
            <param name="resolver">Macro resolver</param> 
            <param name="source">Source of calling, will be used for log event</param>
            <param name="success">Returns whether sending of request was successful.</param>
            <param name="exceededTimeText">Text returned by this method if time request is exceeded.</param>
            <param name="invalidRequestText">Text returned by this method if request is invalid.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ValidateResetPassword(CMS.Membership.UserInfo,System.String,System.String,System.Double,System.String)">
            <summary>
            Validates request of password reset. 
            </summary>
            <param name="ui">User info object.</param>
            <param name="hash">Request hash (identifier).</param>
            <param name="requestTime">Request time.</param>
            <param name="interval">Interval in which user can reset her password.</param>        
            <param name="source">Source of calling, will be used for log event</param>        
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetRegistrationApprovalUrl(System.String,System.Guid,System.String,System.Boolean)">
            <summary>
            Gets URL for user registration approval page (Page where user is required to confirm his registration).
            </summary>
            <param name="customApprovalUrl">Base URL for user registration approval URL. When empty URL is taken from settings</param>
            <param name="userGuid">Registered user GUID</param>
            <param name="siteName">Site name</param>
            <param name="notifyAdmin">Indicates if admin should be notified about new user registration</param>
            <returns>Returns string with URL in absolute format. URL parameters contains hash.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetRegistrationApprovalUrl(System.String,System.Guid,System.String,System.Boolean,System.Int32)">
            <summary>
            Gets URL for user registration approval page (Page where user is required to confirm his registration).
            </summary>
            <param name="customApprovalUrl">Base URL for user registration approval URL. When empty URL is taken from settings</param>
            <param name="userGuid">Registered user GUID</param>
            <param name="siteName">Site name</param>
            <param name="notifyAdmin">Indicates if admin should be notified about new user registration</param>
            <param name="contactId">Contact ID of contact connected to new user</param>
            <returns>Returns string with URL in absolute format. URL parameters contains hash.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetRegistrationApprovalUrl(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Get URL for user registration approval page. Returns string with URL.
            </summary>
            <param name="customApprovalUrl">User registration approval url</param>
            <param name="userGuid">Registered user GUID</param>
            <param name="siteName">Site name</param>
            <param name="contactId">New contact ID</param>
            <returns>Returns user registration approval URL</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendRegistrationEmails(CMS.Membership.UserInfo,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends registration emails. Returns string with error if any exception occurred.
            </summary>
            <param name="ui">Send e-mail to this UserInfo</param>
            <param name="approvalPage">Registration approval page URL</param>
            <param name="password">User password</param>
            <param name="requiresConfirmation">Indicates if e-mail with confirmation link should be send</param>
            <param name="sendWelcomeEmail">Indicates if user welcome e-mail should be sent</param>
            <returns>Returns error if any exception occurred during sending e-mails.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.NotifyAdministrator(CMS.Membership.UserInfo,System.String,System.String)">
            <summary>
            Sends notification e-mail to administrator about user registration.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ResolveMacrosWithParameters(System.String,System.String[0:,0:],System.Boolean)">
            <summary>
            Resolves the macros within given text.
            </summary>
            <param name="inputText">Input text</param>
            <param name="sourceParameters">Source parameters (couples [Name, Value]). The data is available with macro {%Name%}</param>
            <param name="encodeResolvedValues">If true, resolved values are encoded by default</param>
            <returns>Returns input text with resolved macros.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.UserKicked(System.Int32)">
            <summary>
            Checks whether the given user is kicked or not.
            </summary>
            <param name="userID">User id</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.RemoveUserFromKicked(System.Int32)">
            <summary>
            Removes user from kicked.
            </summary>
            <param name="UserID">User id</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AddUserToKicked(System.Int32)">
            <summary>
            Adds user to kicked.
            </summary>
            <param name="userID">User id</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.RemoveExpiredKickedUsers">
            <summary>
            Removes expired records from KickUsers hashtable.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetKickedUsers">
            <summary>
            Returns ID's of kicked users in string in format: ID1,ID2 ...
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.HandleAutomaticSignIn">
            <summary>
            Check URL query string for authentication parameter and authenticate user.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ResolveUIUrl(System.String,System.String)">
            <summary>
            Resolves the UI URL. Keeps the URL in case the user is authenticated, uses the secured /cms/ prefix to ensure the authentication for already authenticated user.
            </summary>
            <param name="url">URL to resolve, it must start with ~/</param>
            <param name="prefix">URL prefix</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ResolveUIUrl(System.String)">
            <summary>
            Resolves the UI URL. Keeps the URL in case the user is authenticated, uses the secured /cms/ prefix to ensure the authentication for already authenticated user.
            </summary>
            <param name="url">URL to resolve, it must start with ~/</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ResolveDialogUrl(System.String)">
            <summary>
            Resolves the dialog URL. Keeps the URL in case the user is authenticated, uses the secured /cms/dialogs/ prefix to ensure the authentication for already authenticated user.
            </summary>
            <param name="url">URL to resolve, it must start with ~/</param>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.UpdateLastLogonForExternalUsers">
            <summary>
            Gets the value that indicates whether last logon information should be updated for external users
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.RenewSessionAuthChange">
            <summary>
            Returns whether new session ID is generated after user log in/out. 
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.UseSessionCookies">
            <summary>
            If true, the session cookies will be used for the authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.KickUsers">
            <summary>
            Hashtable of the users which should be kicked.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.GlobalPublicUser">
            <summary>
            Global public user object.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.PrincipalContext">
            <summary>
            Encapsulates the server or domain against which all operations are performed.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.NetBiosDomainName">
            <summary>
            Get domain name in NetBios format
            </summary>
            <returns>NetBiosDomainName</returns>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ImportExternalRoles">
            <summary>
            If true, the system imports the external user roles.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ImportExternalUsers">
            <summary>
            If true, the system imports the external users.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ADConnectionStringName">
            <summary>
            Name of connection string used by AD membership provider.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ADUsername">
            <summary>
            Name of user used to authenticate against AD by membership provider.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ADPassword">
            <summary>
            Password of user used to authenticate against AD by membership provider.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.SynchronizeUserGUIDs">
            <summary>
            Indicates whether to synchronize user's guid during import from Active Directory.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ImportWindowsRoles">
            <summary>
            Gets or sets whether roles are imported during the Windows/Active directory authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.FederationAuthentication">
            <summary>
            Gets or sets whether federation authentication is used.
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationResultEnum">
            <summary>
            Authentication result enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationResultEnum.OK">
            <summary>Provided credentials are valid. The user can log on.</summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationResultEnum.WrongUserNameOrPassword">
            <summary>Provided credentials are invalid. The user cannot log on.</summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationService">
            <summary>
            Authentication service
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationService.CurrentUser">
            <summary>
            Currently authenticated user
            </summary>
        </member>
        <member name="T:AuthenticationSourceEnum">
            <summary>
            Enumeration describing source of user authentication
            </summary>
        </member>
        <member name="F:AuthenticationSourceEnum.Standard">
            <summary>
            Standard authentication using UI
            </summary>
        </member>
        <member name="F:AuthenticationSourceEnum.ExternalOrAPI">
            <summary>
            Authentication using external system or API
            </summary>
        </member>
        <member name="F:AuthenticationSourceEnum.MetaWebBlogAPI">
            <summary>
            Meta web blog API
            </summary>
        </member>
        <member name="T:CMS.Membership.CurrentUserFields">
            <summary>
            Wrapper class to provide fields from System.Math namespace in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserFields.RegisterFields">
            <summary>
            Registers the math fields.
            </summary>
        </member>
        <member name="T:CMS.Membership.CurrentUserInfo">
            <summary>
            Class to hold current user information. Extends UserInfo with context specific information, and debug functionality for security debug of current request.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserInfo">
            <summary>
            UserInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.GLOBAL_ROLES_KEY">
            <summary>
            Constant for global roles in siteroles collection.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.GROUP_ADMIN">
            <summary>
            Represents the group admin status of the user
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mMembershipRoleValidity">
            <summary>
            Membership roles validity
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mUserSettings">
            <summary>
            UserSettings info object.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mSitesRoles">
            <summary>
            Table with the sites and corresponding roles.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mMemberships">
            <summary>
            Table with sites and corresponding memberships.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mMembershipsValidity">
            <summary>
            Hashtable with validity info about user's membership
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mSiteCultures">
            <summary>
            Contains allowed cultures.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mResourceUIElements">
            <summary>
            Hashtable with all UI elements within each module across all sites the user can see.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mUserLastLogonInfo">
            <summary>
            Contains information of user last logon.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mTimeZoneInfo">
            <summary>
            Time zone related to the current user.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mMembershipRoles">
            <summary>
            User membership roles.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mRolesValidity">
            <summary>
            Hashtable with temporaly roles.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mOrders">
            <summary>
            Collection of orders made by user.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mPurchasedProducts">
            <summary>
            Collection of products purchased by user.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mWishlist">
            <summary>
            Collection of users wishlist items.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mTokenId">
            <summary>
            Token id assigned to the user
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mTokenIteration">
            <summary>
            Token iteration.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mFriends">
            <summary>
            Table with user's friends.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mGroups">
            <summary>
            Table with user's groups.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.mGroupsMember">
            <summary>
            Hashtable with group names and group's membership status
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.StoreSettings">
            <summary>
            Stores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.RestoreSettings">
            <summary>
            Restores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the object in the object table.
            </summary>
            <param name="keepThisInstanceValid">If true, this object is marked as updated to behave as valid</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetChildWhereCondition(System.String,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.RegisterProperties">
            <summary>
            Registers properties of the object
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetDefaultObject">
            <summary>
            Returns default user set in the settings or Global Administrator if setting is not defined or user not found.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor(CMS.Membership.UserInfo,System.Boolean,System.Boolean)">
            <summary>
            Constructor - Creates a new UserInfo object from the given DataClass.
            </summary>
            <param name="ui">Source user info</param>
            <param name="keepSourceData">If true, source data are kept</param>
            <param name="useCachedData">Indicates if cached data like user memberships, roles, cultures, etc. should be used from source user object</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserInfo object from the given DataRow.
            </summary>
            <param name="dr">Data row with the user data</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.LoadDefaultData">
            <summary>
            Sets the object default values
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.SetPrivilegeLevel(CMS.Membership.UserPrivilegeLevelEnum)">
            <summary>
            Sets the privilege level to the user
            </summary>
            <param name="privilegeLevel">Privilege level</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckPrivilegeLevel(CMS.Membership.UserPrivilegeLevelEnum,System.String)">
            <summary>
            Returns true if user fulfils the required privilege level (the higher level contains all children: GlobalAdmin -> Admin -> Editor -> None)
            </summary>
            <param name="privilegeLevel">Required privilege level</param>
            <param name="siteName">Site name for editor assignment. If not set current site name is used</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetPrivilegeLevel(System.String)">
            <summary>
            Returns highest privilege level of user.
            </summary>
            <param name="siteName">Site name for editor assignment. If not set current site name is used</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.ResetIterationToInitial">
            <summary>
            Reset TokenID to initial value.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.IncrementIteration">
            <summary>
            Increment token Iteration.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.HasAutomaticProperty(System.String)">
            <summary>
            Returns true if the given column provides an automatic property to access it's binding.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetObjectTypeForColumn(System.String)">
            <summary>
            Gets the object type for the given column or null if the object type is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the field value (first look into CMS_User if the field is not found, set into CMS_UserSettings).
            </summary>
            <param name="columnName">Filed name</param>
            <param name="value">Value to be saved</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.FilterSearchResults(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean@)">
            <summary>
            Filters the user search results
            </summary>
            <param name="inRoles">List of roles in which the user should be</param>
            <param name="notInRoles">List of roles in which the user should not be</param>
            <param name="addToIndex">Flag if the results should be added to the index</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsPublic">
            <summary>
            Returns true if the user is public user record.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.ConvertUserDateTime(System.DateTime)">
            <summary>
            Returns current user date time in dependence on user time zone.
            </summary>
            <param name="dateTime">Date time</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.ConvertServerDateTime(System.DateTime)">
            <summary>
            Returns server date time in dependence on server time zone.
            </summary>
            <param name="dateTime">Date time</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetUserPreferredCurrencyID(System.String)">
            <summary>
            Returns ID of users preferred currency for given site or 0 when not found.
            </summary>
            <param name="siteName">Name of the site to get preference for</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetUserPreferredPaymentOptionID(System.String)">
            <summary>
            Returns ID of users preferred payment option for given site or 0 when not found.
            </summary>
            <param name="siteName">Name of the site to get preference for</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetUserPreferredShippingOptionID(System.String)">
            <summary>
            Returns ID of users preferred shipping option for given site or 0 when not found.
            </summary>
            <param name="siteName">Name of the site to get preference for</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetFormattedUserName(System.Boolean)">
            <summary>
            Returns formatted username in format: full name (nickname) if nickname specified otherwise full name (username).
            Allows you to customize how the usernames will look like throughout the admin UI. 
            </summary>
            <param name="isLiveSite">Indicates if returned username should be displayed on live site</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.Clone">
            <summary>
            Creates a clone of the object
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.UpdateUserSettings(CMS.Membership.UserSettingsInfo)">
            <summary>
            Updates user settings.
            </summary>
            <param name="settings">User settings</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetDefaultDataWhereCondition(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the where condition to filter out the default installation data
            </summary>
            <param name="recursive">Indicates whether where condition should contain further dependency conditions.</param>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CopyCachedDataTo(CMS.Membership.UserInfo)">
            <summary>
            Copies the cached data to another UserInfo object
            </summary>
            <param name="userInfo">Target user info</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.ClearCachedData">
            <summary>
            Clears the cached data of this object
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateNewRolesDictionary">
            <summary>
            Creates a new empty dictionary for storing roles
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.EnsureRolesTables">
            <summary>
            Ensures creation of role.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateMembershipsTable(System.Data.DataTable)">
            <summary>
            Creates hashtable for users's memberships
            </summary>
            <param name="userSites">Table with user's sites</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.AddMembershipsToHashTable(System.Collections.Generic.IEnumerable{System.Data.DataRow},CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}})">
            <summary>
            Add records to target hash table given in rows collection.
            </summary>
            <param name="rows">Rows with data</param>
            <param name="targetHashTable">Hash table with data</param>
            <param name="membershipValidity">Hashtable with rows with validity data for memberships</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInRole(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the user is member of the specified role on the specified site (or on global role if check global is true).
            </summary>
            <param name="roleName">Role name to check</param>
            <param name="siteName">Site name to check</param>
            <param name="checkGlobal">If true, global roles are checked</param>
            <param name="checkMembership">If true, membership roles are checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckRole(System.String,CMS.Base.SafeDictionary{System.String,CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}}},System.String,System.Boolean)">
            <summary>
            Returns true if role name is found in hashtable.
            </summary>
            <param name="roleName">Name of wanted role</param>
            <param name="table">Hashtable with roles to search in</param>
            <param name="siteName">Site name</param>
            <param name="checkGlobal">If true, global roles are checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInRole(System.String,System.String)">
            <summary>
            Returns true if the user is member of the specified role on the specified site or member of global role.
            </summary>
            <param name="roleName">Role name to check</param>
            <param name="siteName">Site name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInMembership(System.String,System.String)">
            <summary>
            Check whether current user is in membership
            </summary>
            <param name="membership">Membership name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInMembership(System.String,System.String,System.Boolean)">
            <summary>
            Check whether current user is in membership
            </summary>
            <param name="membershipName">Membership name</param>
            <param name="siteName">Site name</param>
            <param name="checkGlobal">If true global memberships are checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsCultureAllowed(System.String,System.String)">
            <summary>
            Determines whether culture is allowed for given user on given site.
            </summary>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Name of site</param>
            <returns>True if user can edit culture on site.</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInSite(System.String)">
            <summary>
            Returns true, if the user is member of the specified site (registered on it).
            </summary>
            <param name="siteName">Sitename to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetGenericRoles">
            <summary>
            Gets user generic roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateRolesTable(System.Data.DataTable,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Initializes the user sites roles HashTable by given data.
            </summary>
            <param name="userRoles">DataTable with the user roles data</param>
            <param name="userSites">DataTable with the user sites data</param>
            <param name="membershipRolesTable">DataTable with membership roles</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.AddRoleRowToHashTable(System.Collections.Generic.IEnumerable{System.Data.DataRow},CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}},CMS.Base.SafeDictionary{System.Int32,System.Boolean},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}})">
            <summary>
            Add records to target hash table given in rows collection.
            </summary>
            <param name="rows">Rows with data</param>
            <param name="targetHashTable">Hash table with data</param>
            <param name="unlimitedRoles">Hashtable with rows with no limit datetime</param>
            <param name="rolesValidity">Hashtable with rows with non permanent roles</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateSiteCulturesTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Initializes the user site cultures hashtable by given data.
            </summary>
            <param name="userSites">Site data</param>
            <param name="userCultures">Culture data</param>
            <returns>Initialized hashtable</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetRoleIdList(System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets all roles for current user.
            </summary>
            <param name="includeGlobal">If true global roles are included</param>
            <param name="includeMembership">If true membership roles are included</param>
            <param name="siteName">Current site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetRoleIdListInternal(CMS.Base.SafeDictionary{System.String,CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}}},System.String,System.Boolean)">
            <summary>
            Returns roles for user included in given hash table collection.
            </summary>
            <param name="table">Hash table with specific user roles (site roles,membership roles..)</param>
            <param name="siteName">Site name</param>
            <param name="includeGlobal">If true global roles are included</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateSiteUIElementsTable">
            <summary>
            Creates Hashtable for UIElements.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerResource(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerClassName(System.String,System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerResource(System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given resource name and permission, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerResource(System.String,System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given resource name and permission, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>        
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.Int32,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceID">Resource ID</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteName">Site code name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>        
            <param name="siteName">Site code name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String[],System.String)">
            <summary>
            Checks whether the user is authorized for given resource name and UIElements, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="elementNames">UIElement names to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerClassName(System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,System.String,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="obj">Object to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,CMS.DataEngine.BaseInfo,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="obj">Object to check</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerMetaFile(CMS.DataEngine.PermissionsEnum,System.String,System.String)">
            <summary>
            Checks whether the user is authorized per meta file for given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.UpdateFriendStatus(System.Int32,CMS.Membership.FriendshipStatusEnum)">
            <summary>
            Update user friends hashtable.
            </summary>
            <param name="userId">User id of the friend</param>
            <param name="status">Friendship status</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.HasFriend(System.Int32)">
            <summary>
            Returns friendship status for given user.
            </summary>
            <param name="userId">ID of user to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsGroupMember(System.Int32)">
            <summary>
            Returns true if the user is member of the specified group.
            </summary>
            <param name="groupId">ID of the group check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsGroupMember(System.String,System.String)">
            <summary>
            Returns true if the user is member of the specified group.
            </summary>
            <param name="groupName">Group name to test</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsGroupAdministrator(System.Int32)">
            <summary>
            Returns true if the user is administrator of the specified group.
            </summary>
            <param name="groupId">ID of the group check</param>
        </member>
        <member name="P:CMS.Membership.UserInfo.MembershipRoleValidity">
            <summary>
            Membership roles validity table
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserTokenID">
            <summary>
            Unique Id.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserTokenIteration">
            <summary>
            Token Iteration
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SitesRoles">
            <summary>
            Returns the HashTable of the user Sites and roles.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Memberships">
            <summary>
            Returns hashtable of user's membership
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.MembershipsValidity">
            <summary>
            Returns hashtable of user's membership
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.MembershipRoles">
            <summary>
            Returns the HashTable of the user Sites and roles got via membership.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.RolesValidity">
            <summary>
            Returns the HashTable of the temporary user roles.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SiteCultures">
            <summary>
            Returns the user's allowed cultures.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.ResourceUIElements">
            <summary>
            Returns UI elements within each module across all sites the user can see.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsHidden">
            <summary>
            Indicates whether user is hidden.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.FullName">
            <summary>
            Full name of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.LastLogon">
            <summary>
            Last logon of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PreferredCultureCode">
            <summary>
            Preferred culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.MiddleName">
            <summary>
            Middle name of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsGlobalAdministrator">
            <summary>
            Indicates whether user is global administrator.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PreferredUICultureCode">
            <summary>
            Preferred UI culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsExternal">
            <summary>
            Indicated whether user is external.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserEnabled">
            <summary>
            Indicates whether user is enabled.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserMFRequired">
            <summary>
            Multi-factor authentication is required for user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserGlobalAccessDisabled">
            <summary>
            Indicates whether user with global admin flag is able to manage global applications and functionality.
            This property is considered for internal purposes only and should not be used in custom code.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.FirstName">
            <summary>
            First name of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserCreated">
            <summary>
            When was user created.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordFormat">
            <summary>
            Format of user's password.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Email">
            <summary>
            E-mail address.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Enabled">
            <summary>
            Indicates if user is enabled.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PasswordFormat">
            <summary>
            Format of the user password.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserStartingAliasPath">
            <summary>
             Starting alias path of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserHasAllowedCultures">
            <summary>
            If user has allowed more than one culture.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserVisibility">
            <summary>
            Contains XML with user's custom form field visibility settings.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsDomain">
            <summary>
            Determines whether user is domain user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserAuthenticationGUID">
            <summary>
            Temporary GUID for user identification for automatic sign-in in the CMS Desk.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPicture">
            <summary>
            User picture.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserAvatarID">
            <summary>
            User avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserMessagingNotificationEmail">
            <summary>
            Messaging notification email.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSignature">
            <summary>
            User signature.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserDescription">
            <summary>
            User description.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserNickName">
            <summary>
            User nick name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserURLReferrer">
            <summary>
            URL Referrer of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserCampaign">
            <summary>
            User campaign.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserTimeZoneID">
            <summary>
            User time zone ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordRequestHash">
            <summary>
            User password change request hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserCustomData">
            <summary>
            User custom data.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserInvalidLogOnAttempts">
            <summary>
            Gets or sets number of user invalid logon attempts.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserInvalidLogOnAttemptsHash">
            <summary>
            User password change request hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordLastChanged">
            <summary>
            Gets or sets time of last password change
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserAccountLockReason">
            <summary>
            Gets or sets number representing reason for user account lock
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserLastLogonInfo">
            <summary>
             User last logon info.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSettings">
            <summary>
            Gets the UserSettigs info object for the user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.TimeZoneInfo">
            <summary>
            Gets the user's time zone information.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsDisabledManually">
            <summary>
            Indicates if user was disabled manually by admin.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordExpiration">
            <summary>
            Return number of days before user password expiration, null value means that password will never expire,
            positive values indicates number of days the password is expired and negative value indicates number of days before expiration
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.IsEditorInternal">
            <summary>
            Gets or sets the IsEditor flag. This property is considered for internal purposes only and should not be used in custom code.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.IsGlobalAdministrator">
            <summary>
            True if the user is the global administrator.
            </summary>
            <remarks>This property has the same meaning as UserIsGlobalAdministrator property.</remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.IsExternal">
            <summary>
            True if the user is external.
            </summary>
            <remarks>This property has the same meaning as UserIsExternal property.</remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.Orders">
            <summary>
            Collection or users orders made on current site.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PurchasedProducts">
            <summary>
            Collection of all products purchased by user at all sites.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Wishlist">
            <summary>
            Collection of all users wishlist items from all sites.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SearchType">
            <summary>
            Gets the type of current object.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Friends">
            <summary>
            Returns the HashTable with user's friends.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Groups">
            <summary>
            Returns the HashTable with user's groups.
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.#ctor(CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceInfo">Source user info</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.LoadDefaultData">
            <summary>
            Sets the object default values
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.Clone">
            <summary>
            Returns the cloned user info object.
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.UpdatePreferredCultures">
            <summary>
            Updates the preferred cultures of the user
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.GetRoleIdList(System.Boolean,System.Boolean)">
            <summary>
            Returns IDs of roles for current site and user.
            </summary>
            <param name="includeGlobal">If true global roles are included</param>
            <param name="includeMembership">If true membership roles are included</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.IsCultureAllowed(System.String,System.String)">
            <summary>
            Determines whether culture is allowed for given user on given site.
            </summary>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Name of site</param>
            <returns>True if user can edit culture on site.</returns>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.IsInSite(System.String)">
            <summary>
            Returns true, if the user is member of the specified site (registered on it).
            </summary>
            <param name="siteName">Name of site to check</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.IsInRole(System.String,System.String)">
            <summary>
            Returns true, if the user is member of the specified site (registered on it).
            </summary>
            <param name="roleName">Role name</param>
            <param name="siteName">Site name to check</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.IsGroupMember(System.Int32)">
            <summary>
            Returns true if the user is member of the specified group.
            </summary>
            <param name="groupId">ID of the group check</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.IsGroupAdministrator(System.Int32)">
            <summary>
            Returns true if the user is administrator of the specified group.
            </summary>
            <param name="groupId">ID of the group check</param>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.PreferredCultureCode">
            <summary>
            User preferred culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.PreferredUICultureCode">
            <summary>
            User preferred UI Culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.IsGlobalAdministrator">
            <summary>
            True if the user is the global administrator.
            </summary>
            <remarks>This property has the same meaning as UserIsGlobalAdministrator property.</remarks>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.IsVirtual">
            <summary>
            Indicates if user is initialized from virtual context
            </summary>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.URLReferrer">
            <summary>
            User URL referrer.
            </summary>
        </member>
        <member name="T:CMS.Membership.ICustomSignOutScriptProvider">
            <summary>
            Interface for objects providing third party logout scripts
            </summary>
        </member>
        <member name="M:CMS.Membership.ICustomSignOutScriptProvider.GetSignOutScript(System.String,System.Web.UI.Page)">
            <summary>
            Builds and returns a custom logout script which is obligated to call the given callback upon finish.
            </summary>
            <param name="finishCallBack">Callback method to be called when this custom script finishes</param>
            <param name="page">Page to which helper scripts can be registered</param>
            <returns>A custom logout script which is obligated to call the given callback upon finish
            or null if no script is required by this provider</returns>
        </member>
        <member name="M:CMS.Membership.SignOutRequestHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
                the System.Web.IHttpHandler interface.
            </summary>
            <param name="context">An System.Web.HttpContext object that provides references to the intrinsic
                server objects (for example, Request, Response, Session, and Server) used
                to service HTTP requests.</param>
        </member>
        <member name="M:CMS.Membership.SignOutRequestHandler.ProcessSignOutRequest(System.Web.HttpContext,System.String)">
            <summary>
            Handles SignOut request emerged from Javascript SignOut.
            Returns a URL to which user should be redirected after SignOut.
            If null is returned, no SignOut has been performed and no redirection is required.
            </summary>
            <param name="context">HTTP context</param>
            <param name="redirectUrl">URL to which signout should redirect</param>
        </member>
        <member name="P:CMS.Membership.SignOutRequestHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the System.Web.IHttpHandler instance.
            </summary>
        </member>
        <member name="T:CMS.Membership.MFAuthenticationHelper">
            <summary>
            Helper for multi-factor authentication 
            </summary>
        </member>
        <member name="F:CMS.Membership.MFAuthenticationHelper.START_ITERATION">
            <summary>
            Initial iteration for token generator.
            </summary>
        </member>
        <member name="F:CMS.Membership.MFAuthenticationHelper.MAXIMAL_SEARCH_SPREAD">
            <summary>
            Number of iteration used for comparing passcode.
            </summary>
        </member>
        <member name="F:CMS.Membership.MFAuthenticationHelper.TOKEN_LENGTH_IN_CHARACTERS">
            <summary>
            Length of Token ID.
            </summary>
        </member>
        <member name="F:CMS.Membership.MFAuthenticationHelper.mKeySize">
            <summary>
            Key size
            </summary>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.MFAuthenticateUser(System.String,System.Boolean)">
            <summary>
            Authenticate given user with multi-factor authentication.
            </summary>
            <param name="userName">User name</param>
            <param name="rememberMeSet">Indicates if persistent cookie should be created</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GenerateTokenID">
            <summary>
            Generate unique token ID
            </summary>
            <returns>Guid</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.RenewTokenForUser(CMS.Membership.UserInfo)">
            <summary>
            Regenerate Token ID for user.
            </summary>
            <param name="user">user</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.ResetTokenAndIterationForUser(CMS.Membership.UserInfo)">
            <summary>
            Reset Token ID an iteration to initial state.
            </summary>
            <param name="user">UserInfo whose Token ID and iteration going to be reseted.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GetInitialIteration">
            <summary>
            Return initial iteration for token generator.
            </summary>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IsPasscodeValid(CMS.Membership.UserInfo,System.String)">
            <summary>
            Recognize if entered passcode is valid.
            </summary>
            <param name="user">User.</param>
            <param name="passcode">Passcode.</param>
            <returns>True if passcode is valid. False otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IssuePasscode(System.String,System.String)">
            <summary>
            Gets passcode for user and fires MultiFactorAuthenticate event.
            </summary>
            <param name="username">User name.</param>
            <param name="password">Password.</param>
            <returns>Passcode for user.</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GetTokenIDForUser(CMS.Membership.UserInfo)">
            <summary>
            Retrun token id assigned to the user.
            </summary>
            <param name="ui">UserInfo</param>
            <returns>TokenID</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GetTokenIDForUser(System.String)">
            <summary>
            Retrun token id assigned to the user.
            </summary>
            <param name="username">Username</param>
            <returns>TokenID</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IsMultiFactorRequiredForUser(System.String)">
            <summary>
            Return if is required Multi Factor authentization for user.
            </summary>
            <param name="username">Username</param>
            <returns>Is multifactor authentication required.</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GetTokenFromGuid(System.Guid)">
            <summary>
            Retrun token id from the GUID.
            </summary>
            <param name="inputGuid">Input for token construction.</param>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.IsMultiFactorAutRequired">
            <summary>
            Return if is multi factor authentication required.
            </summary>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.IsMultiFactorAutEnabled">
            <summary>
            Return if is multi factor authentication required.
            </summary>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.DisplayTokenID">
            <summary>
            Is allowed pick up initial Token ID.
            </summary>
        </member>
        <member name="T:CMS.Membership.DateTimeNow">
            <summary>
            Class providing actual date-time arrangement.
            </summary>
        </member>
        <member name="T:CMS.Membership.IDateTimeNow">
            <summary>
            Interface providing actual date-time arrangement.
            </summary>
        </member>
        <member name="M:CMS.Membership.IDateTimeNow.GetUtcNow">
            <summary>
            Method providing current date time expressed as UTC. 
            </summary>
        </member>
        <member name="M:CMS.Membership.DateTimeNow.GetUtcNow">
            <summary>
            Method providing current date time expressed as UTC. 
            </summary>
        </member>
        <member name="T:CMS.Membership.ISalt">
            <summary>
            Interface providing security salt.
            </summary>
        </member>
        <member name="M:CMS.Membership.ISalt.GetSalt(System.UInt32)">
            <summary>
            Method providing salt specified by concrete iteration. 
            </summary>
            <param name="interation">Number of iteration.</param>
        </member>
        <member name="M:CMS.Membership.ISalt.GetSalt">
            <summary>
            Method providing salt specified by default iteration. 
            </summary>
        </member>
        <member name="T:CMS.Membership.ITokenValidator">
            <summary>
            Interface providing methods for passcode validation.
            </summary>
        </member>
        <member name="M:CMS.Membership.ITokenValidator.IsPasscodeValid(System.String,System.String,System.String,System.UInt32)">
            <summary>
            Compares passcode entered by user with server side computed passcode.
            </summary>
            <param name="userPasscode">Passcode entered by user.</param>
            <param name="tokenId">Unique identification for token generator.</param>
            <param name="username">Username for logging in.</param>
            <param name="iteration">Order iteration.</param>
            <returns>Returns true if passcode is valid.</returns>
        </member>
        <member name="M:CMS.Membership.ITokenValidator.GetPasscodeFromCredentials(System.String,System.String,System.UInt32)">
            <summary>
            Get passcode from entered credentials.
            </summary>
            <param name="tokenId">TokenID</param>
            <param name="username">Username</param>
            <param name="iteration">Token iteration.</param>
            <returns>Passcode</returns>
        </member>
        <member name="T:CMS.Membership.KeySizeEnum">
            <summary>
            Key size in bytes
            </summary>
        </member>
        <member name="F:CMS.Membership.KeySizeEnum.KeySize256">
            <summary>
            256 bytes key
            </summary>
        </member>
        <member name="F:CMS.Membership.KeySizeEnum.KeySize512">
            <summary>
            512 bytes key
            </summary>
        </member>
        <member name="F:CMS.Membership.KeySizeEnum.KeySize1024">
            <summary>
            1024 bytes key
            </summary>
        </member>
        <member name="T:CMS.Membership.Salt">
            <summary>
            Class providing security salt.
            </summary>
        </member>
        <member name="M:CMS.Membership.Salt.#ctor(System.String,System.UInt32)">
            <summary>
            Create new HmacSalt object with specified by token indentificator and number of iteration.
            </summary>
            <param name="tokenId">Unique identification of token generator.</param>
            <param name="iteration">Number of iteration.</param>
        </member>
        <member name="M:CMS.Membership.Salt.PrepareSalt">
            <summary>
            Compute salt is specified by token ID and iteration.  
            </summary>
            <returns>Prepare salt</returns>
        </member>
        <member name="M:CMS.Membership.Salt.LittleEndianToBigEndian(System.UInt32)">
            <summary>
            Convert number from little endian to big endian.
            </summary>
            <param name="value">Number in little endian format.</param>
            <returns>Number in big endian format.</returns>
        </member>
        <member name="M:CMS.Membership.Salt.GetSalt(System.UInt32)">
            <summary>
            Return salt for specific iteration.
            </summary>
            <param name="iteration">Number of iteration</param>
            <returns>Salt</returns>
        </member>
        <member name="M:CMS.Membership.Salt.GetSalt">
            <summary>
            Return salt for default iteration specified in constructor.
            </summary>
            <returns>Salt</returns>
        </member>
        <member name="T:CMS.Membership.TokenValidator">
            <summary>
            Class providing passcode validation.
            </summary>
        </member>
        <member name="M:CMS.Membership.TokenValidator.#ctor(CMS.Membership.KeySizeEnum)">
            <summary>
            Default constructor.
            </summary>
            <param name="keySize">Object providing key size.</param>
        </member>
        <member name="M:CMS.Membership.TokenValidator.#ctor(CMS.Membership.ISalt,CMS.Membership.KeySizeEnum)">
            <summary>
            Create new Token Validator which use specific implementation of ISalt interface.
            </summary>
            <param name="hmacSalt">Object providing security salt.</param>
            <param name="keySize">Object providing key size.</param>
        </member>
        <member name="M:CMS.Membership.TokenValidator.IsPasscodeValid(System.String,System.String,System.String,System.UInt32)">
            <summary>
            Check if entered passcode is correct.
            </summary>
            <param name="userPasscode">Passcode entered by user.</param>
            <param name="tokenID">Unique identification for token generator.</param>
            <param name="username">Username for logging in.</param>
            <param name="iteration">Number of iteration.</param>
            <returns>Returns true if passcode is valid.</returns>
        </member>
        <member name="M:CMS.Membership.TokenValidator.GetPasscodeFromCredentials(System.String,System.String,System.UInt32)">
            <summary>
            Compute server side passcodes for comparation. 
            </summary>
            <param name="tokenId">Unique identification for tooken generator.</param>
            <param name="username">Username for logging in.</param>
            <param name="iteration">Number of iteration.</param>
            <returns>Passcode computed for credentials.</returns>
        </member>
        <member name="M:CMS.Membership.TokenValidator.ArePasscodesEqual(System.String,System.String)">
            <summary>
            Compares user and serverside computed passcode.
            </summary>
            <param name="serverSidePasscode">Passcode computed on server side.</param>
            <param name="userInputPasscode">Passcode entered by user</param>
            <returns>Returns true if the two entered passcodes are equal.</returns>
        </member>
        <member name="M:CMS.Membership.TokenValidator.PrepareKeyForHashing(System.String,System.UInt32)">
            <summary>
            Prepare hashing keys for HMAC function
            </summary>
            <param name="tokenId">Unique token id</param>
            <param name="hmacSalt">HMAC salt.</param>
            <returns>Key for hash function</returns>
        </member>
        <member name="M:CMS.Membership.TokenValidator.ExpandKey(System.Byte[])">
            <summary>
            Expand cardinality of the key.
            </summary>
            <param name="key">Security key</param>
            <returns>Expanded key</returns>
        </member>
        <member name="M:CMS.Membership.TokenValidator.GetHashCodes(System.Byte[],System.Byte[])">
            <summary>
            Computes hash for specified message and keys
            </summary>
            <param name="key">Unique key.</param>
            <param name="message">Message</param>
            <returns>Hash computed for key</returns>
        </member>
        <member name="M:CMS.Membership.TokenValidator.PasscodeToStringArray(System.Byte[])">
            <summary>
            Converts passcode into string array.
            </summary>
            <param name="serverSidePasscode">Pre-generated passcode on server side.</param>
            <returns>Passcode in string format.</returns>
        </member>
        <member name="T:CMS.Membership.OpenIDUserInfo">
            <summary>
            OpenIDUser data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.OpenIDUserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.OpenIDUserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfo.#ctor">
            <summary>
            Constructor - Creates an empty OpenIDUser object.
            </summary>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OpenIDUser object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Membership.OpenIDUserInfo.OpenIDUserID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.OpenIDUserInfo.OpenID">
            <summary>
            OpenID Claimed Identifier.
            </summary>
        </member>
        <member name="P:CMS.Membership.OpenIDUserInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.OpenIDUserInfo.OpenIDProviderUrl">
            <summary>
            URL of OpenID provider.
            </summary>
        </member>
        <member name="T:CMS.Membership.OpenIDUserInfoProvider">
            <summary>
            Class providing UserOpenIDInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetOpenIDUsers">
            <summary>
            Returns the query for all relationships between OpenIDs and users.
            </summary>   
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetOpenIDUserInfo(System.String)">
            <summary>
            Returns the OpenIDUserInfo structure for the specified OpenID Claimed Identifier.
            </summary>
            <param name="openID">OpenID Claimed Identifier</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.SetOpenIDUserInfo(CMS.Membership.OpenIDUserInfo)">
            <summary>
            Sets (updates or inserts) specified openIDUser object.
            </summary>
            <param name="openIDUser">OpenIDUserInfo to set</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.DeleteOpenIDUserInfo(CMS.Membership.OpenIDUserInfo)">
            <summary>
            Deletes specified openIDUser object.
            </summary>
            <param name="infoObj">OpenIDUserInfo object</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.DeleteOpenIDUserInfo(System.String)">
            <summary>
            Deletes specified openIDUser object.
            </summary>
            <param name="openID">OpenID Claimed Identifier</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetUserInfoByOpenID(System.String)">
            <summary>
            Returns UserInfo connected to specified OpenID Claimed Identifier.
            </summary>
            <param name="openId">OpenID Claimed Identifier</param>
            <returns>UserInfo</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetOpenIDByUserID(System.Int32)">
            <summary>
            Returns OpenID Claimed Identifier connected with specified UserID.
            </summary>
            <param name="userId">UserID to look for</param>
            <returns>OpenID Claimed Identifier</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.AddOpenIDToUser(System.String,System.String,System.Int32)">
            <summary>
            Assigns OpenID Claimed Identifier to the user.
            </summary>
            <param name="openId">OpenID Claimed Identifier</param>
            <param name="openIdProviderUrl">URL of OpenID provider</param>
            <param name="userId">User ID</param>
            <returns>Returns true if user exists and OpenID Claimed Identifier is not already assigned.</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.RemoveOpenIDFromUser(System.String,System.Int32)">
            <summary>
            Deletes OpenIDUserInfo by specified OpenID Claimed Identifier and checks if given User ID is part of this object.
            </summary>
            <param name="openId">OpenID Claimed Identifier</param>
            <param name="userId">UserID for check</param>
            <returns>Returns true if OpenIDUserInfo was found by OpenID Claimed Identifier and if User ID matches to this object.</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.UpdateOpenIDUserInfo(System.String,System.String,System.Int32)">
            <summary>
            Updates OpenID Claimed Identifier for associated user. 
            </summary>
            <param name="oldOpenID">Old OpenID Claimed Identifier related to some user</param>
            <param name="newOpenID">New OpenID Claimed Identifier</param>
            <param name="userID">ID of given user</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetUserInfoByOpenIDInternal(System.String)">
            <summary>
            Returns UserInfo connected to specified OpenID Claimed Identifier.
            </summary>
            <param name="openId">OpenID Claimed Identifier</param>
            <returns>UserInfo</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetOpenIDByUserIDInternal(System.Int32)">
            <summary>
            Returns OpenID Claimed Identifier connected with specified UserID.
            </summary>
            <param name="userId">UserID to look for</param>
            <returns>OpenID Claimed Identifier</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.SetOpenIDUserInfoInternal(CMS.Membership.OpenIDUserInfo)">
            <summary>
            Sets (updates or inserts) specified openIDUser object.
            </summary>
            <param name="openIDUser">OpenIDUserInfo to set</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.DeleteOpenIDUserInfoInternal(CMS.Membership.OpenIDUserInfo)">
            <summary>
            Deletes specified openIDUser object.
            </summary>
            <param name="infoObj">OpenIDUserInfo object</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.GetOpenIDUserInfoInternal(System.String)">
            <summary>
            Returns the OpenIDUserInfo structure for the specified OpenID Claimed Identifier.
            </summary>
            <param name="openID">OpenID Claimed Identifier</param>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.AddOpenIDToUserInternal(System.String,System.String,System.Int32)">
            <summary>
            Assigns OpenID Claimed Identifier to the user.
            </summary>
            <param name="openId">OpenID Claimed Identifier</param>
            <param name="openIdProviderUrl">URL of OpenID provider</param>
            <param name="userId">User ID</param>
            <returns>Returns true if user exists and OpenID Claimed Identifier is not already assigned.</returns>
        </member>
        <member name="M:CMS.Membership.OpenIDUserInfoProvider.RemoveOpenIDFromUserInternal(System.String,System.Int32)">
            <summary>
            Deletes OpenIDUserInfo by specified OpenID Claimed Identifier and checks if given User ID is part of this object.
            </summary>
            <param name="openId">OpenID Claimed Identifier</param>
            <param name="userId">UserID for check</param>
            <returns>Returns true if OpenIDUserInfo was found by OpenID Claimed Identifier and if User ID matches to this object.</returns>
        </member>
        <member name="T:CMS.Membership.ResetPasswordResultEnum">
            <summary>
            Reset password enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.ResetPasswordResultEnum.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:CMS.Membership.ResetPasswordResultEnum.TimeExceeded">
            <summary>
            Time exceeded.
            </summary>
        </member>
        <member name="F:CMS.Membership.ResetPasswordResultEnum.ValidationFailed">
            <summary>
            Validation failed.
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarInfo">
            <summary>
            AvatarInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.mInputStreamData">
            <summary>
            Input stream avatar data.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.mStreamProcessed">
            <summary>
            Indicates whether the data from input stream were processed.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.GetDependencyCacheKeys(System.String,System.String)">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
            <param name="key">Cache key</param>
            <param name="context">Cache context</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.GetDependencyCacheKeys">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor">
            <summary>
            Constructor - Creates an empty AvatarInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AvatarInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor - Creates a new AvatarInfo object based on the file posted through the upload control.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="maxWidth">Maximal image width</param>
            <param name="maxHeight">Maximal image height</param>
            <param name="maxSideSize">Maximal side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(System.String)">
            <summary>
            Creates a new AvatarInfo object based on the file specified by given path.
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.GetBinaryData">
            <summary>
            Ensures the binary data - loads the binary data from file stream if present.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.EnsureBinaryData">
            <summary>
            Ensures the binary data - loads the binary data from file stream if present.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarLastModified">
            <summary>
            Avatar last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarBinary">
            <summary>
            Avatar binary data.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarFileName">
            <summary>
            Avatar file name.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarID">
            <summary>
            Avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarName">
            <summary>
            Avatar name.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarIsCustom">
            <summary>
            Whether avatar is custom.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarGUID">
            <summary>
            Avatar GUID.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarType">
            <summary>
            Avatar type - All,User or Group.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarFileExtension">
            <summary>
            Avatar file extension.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarMimeType">
            <summary>
            Avatar MIME type specification.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarFileSize">
            <summary>
            Avatar file size detail.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarImageHeight">
            <summary>
            Avatar image height.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarImageWidth">
            <summary>
            Avatar image height.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.DefaultUserAvatar">
            <summary>
            Gets or sets the value that indicates whether the avatar is default user avatar.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.DefaultMaleUserAvatar">
            <summary>
            Gets or sets the value that indicates whether the avatar is default male avatar.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.DefaultFemaleUserAvatar">
            <summary>
            Gets or sets the value that indicates whether the avatar is default female avatar.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.DefaultGroupAvatar">
            <summary>
            Gets or sets the value that indicates whether the avatar is default group avatar.
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarInfoProvider">
            <summary>
            Class providing AvatarInfo management.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfoProvider.AVATAR">
            <summary>
            Constant for avatar option
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfoProvider.GRAVATAR">
            <summary>
            Constant for gravatar option
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfoProvider.USERCHOICE">
            <summary>
            Constant for user choice option
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfoProvider.mDefaultAvatars">
            <summary>
            Contains default avatars, key is DefaultAvatarTypeEnum. [AvatarTypeEnum -> AvatarInfo]
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatars">
            <summary>
            Returns the query for all avatars.
            </summary>   
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatars(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with all avatars.
            </summary>
            <param name="columns">Data columns to return</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>  
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfo(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfo(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfo(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinary(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinary(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">GUID of the avatar to return</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinary(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Name of the avatar to return</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetDefaultAvatar(CMS.Membership.DefaultAvatarTypeEnum)">
            <summary>
            Returns default avatar of specified type or null if such is not set.
            </summary>
            <param name="type">Default avatar type</param>      
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.ClearDefaultAvatar(CMS.Membership.DefaultAvatarTypeEnum)">
            <summary>
            Clears specified default avatar type from all avatars.
            </summary>
            <param name="type">Default avatar type</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.ClearDefaultAvatar(CMS.Membership.DefaultAvatarTypeEnum,System.Boolean)">
            <summary>
            Clears specified default avatar type from all avatars.
            </summary>
            <param name="type">Default avatar type</param>
            <param name="onlyDefaultAvatarChahe">If true clears only default avatar cache</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.ClearDefaultAvatar(CMS.Membership.DefaultAvatarTypeEnum,System.Boolean,System.Boolean)">
            <summary>
            Clears specified default avatar type from all avatars.
            </summary>
            <param name="type">Default avatar type</param>
            <param name="onlyDefaultAvatarCache">If true clears only default avatar cache</param>
            <param name="logWebFarm">Enables or disables webfarm task logging</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.SetAvatarInfo(CMS.Membership.AvatarInfo)">
            <summary>
            Sets (updates or inserts) specified avatar.
            </summary>
            <param name="avatar">Avatar to set</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarInfo(CMS.Membership.AvatarInfo)">
            <summary>
            Deletes specified avatar.
            </summary>
            <param name="infoObj">Avatar object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarInfo(System.Int32)">
            <summary>
            Deletes specified avatar.
            </summary>
            <param name="avatarId">ID of the avatar object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete avatar file stored in the file system.
            </summary>
            <param name="avatarGuid">Guid file to delete</param>
            <param name="fileExtension">Extension of the avatar file</param>
            <param name="deleteDirectory">Determines whether delete specified directory or not</param>
            <param name="synchronization">Indicates wehther the method is called due to synchronization</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarFile(System.Guid)">
            <summary>
            Returns the avatar file from disk or (if not available on the disk) from database.
            </summary>
            <param name="guid">Guid of the avatar file to get</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarFile(CMS.Membership.AvatarInfo)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="avatarInfo">Avatar info object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarFileBinary(System.Guid)">
            <summary>
            Returns the file binary from disk.
            </summary>
            <param name="guid">Avatar guid</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetImageThumbnail(CMS.Membership.AvatarInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail (from the disk - if already exists, or create new one and save it to disk - if doesnt exist).
            </summary>
            <param name="avatarInfo">Avatar info</param>        
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetImageThumbnailFile(System.Guid,System.Int32,System.Int32)">
            <summary>
            Returns the image thumbnail from the disk.
            </summary>
            <param name="guid">Guid of the file to get</param>        
            <param name="height">Image thumbnail width</param>
            <param name="width">Image thumbnail height</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.EnsureThumbnailFile(CMS.Membership.AvatarInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures the thumbnail avatar.
            </summary>
            <param name="avatarInfo">Avatar info</param>
            <param name="width">File width</param>
            <param name="height">File height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarTypeEnum(System.String)">
            <summary>
            Returns the enum representation of avatar type based on specified string.
            </summary>
            <param name="avatarTypeString">String representation of avatar type</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarTypeString(CMS.Membership.AvatarTypeEnum)">
            <summary>
            Returns the string representation of avatar type based on specified enum value.
            </summary>
            <param name="avatarTypeEnum">Enum representation of avatar type</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarTypeString(System.Type,System.Int32)">
            <summary>
            Returns AvatarTypeEnum string code derived from type of enumeration and enum value.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.EnsureAvatarPhysicalFile(CMS.Membership.AvatarInfo)">
            <summary>
            Ensures the avatar file in the file system and returns the path to the file.
            </summary>
            <param name="avatarInfo">Avatar info</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetFileFolder(System.String,System.String)">
            <summary>
            Returns physical path to the avatar file folder (avatars files folder path + subfolder).
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">Avatar file GUID</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetFilePhysicalPath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetFilesFolderPath">
            <summary>
            Returns physical path to folder with avatar files which are associated with the specified site.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.SaveAvatarFileToDisk(System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean)">
            <summary>
            Saves avatar file to the disk.
            </summary>
            <param name="guid">File GUID</param>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="fileData">File data (byte[] or Stream)</param>   
            <param name="synchronization">Indicates if this function is called from "ProcessTask"</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.CanResizeImage(CMS.Membership.AvatarInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the image should be processed (resized) by the Image manager (if the destination size is smaller).
            </summary>
            <param name="avatarInfo">Avatar file info to check</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="maxSideSize">Max side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.StoreFilesInFileSystem">
            <summary>
            Indicates whether the files should be stored in the file system according the global settings.
            </summary>                
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.StoreFilesInDatabase">
            <summary>
            Indicates whether the files should be stored in the DB according to the global settings.
            </summary>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GenerateThumbnails">
            <summary>
            Returns the current settings whether the thumbnails should be generated.
            </summary>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.UploadAvatar(CMS.Membership.AvatarInfo,System.Web.HttpPostedFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Uploads and resizes (if needed) avatar to specified AvatarInfo and sets its properties.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetUniqueAvatarName(System.String)">
            <summary>
            Returns unique name for avatar.
            </summary>
            <param name="avatarName">Avatar name</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetGravatarDefaultParameter(CMS.Membership.UserGenderEnum,System.Int32,System.String)">
            <summary>
            Returns parameter for default gravatar image
            </summary>
            <param name="gender">User gender</param>
            <param name="maxSideSize">Maximal side size</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetDefaultAvatar(CMS.Membership.UserGenderEnum)">
            <summary>
            Gets default avatar info based on user gender
            </summary>
            <param name="gender">User gender</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.CreateGravatarLink(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates URL for gravatar image
            </summary>
            <param name="email">User e-mail</param>
            <param name="gender">User gender</param>
            <param name="maxSideSize">Max side size</param>
            <param name="siteName">Site name</param>
            <returns>URL of gravatar image</returns>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetUserAvatarImageUrl(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns avatar or gravatar image url, if it is not defined returns gender dependent avatar or user default avatar.
            </summary>
            <param name="avatarID">Avatar ID</param>
            <param name="userID">User ID, load gender avatar or user avatar for specified user if avatar given by avatar id doesn't exist</param>
            <param name="userEmail">User e-mail</param>
            <param name="maxSideSize">Max side size</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetUserAvatarImageForUser(System.Object,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Returns avatar image tag, if avatar is not defined returns gender depend avatar or user default avatar if is defined.
            </summary>
            <param name="userID">User ID, load gender avatar for specified user if avatar by avatar id doesn't exist</param>
            <param name="maxSideSize">Max side size</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="alt">Image alternate text</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetUserAvatarImage(System.Object,System.Object,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Returns avatar image tag, if avatar is not defined returns gender depend avatar or user default avatar if is defined.
            </summary>
            <param name="avatarID">Avatar ID</param>
            <param name="userID">User ID, load gender avatar for specified user if avatar by avatar id doesn't exist</param>
            <param name="maxSideSize">Max side size</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="alt">Image alternate text</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetUserAvatarImageByGUID(System.Object,System.Object,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Returns user avatar image.
            </summary>
            <param name="avatarGuid">Avatar GUID</param>
            <param name="userGender">Avatar gender</param>
            <param name="maxSideSize">Max side size</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="alt">Image alternate text</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.RegisterGravatarRoute">
            <summary>
            Ensures route for gravatars
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoInternal(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetDefaultAvatarInternal(CMS.Membership.DefaultAvatarTypeEnum)">
            <summary>
            Returns default avatar of specified type or null if such is not set.
            </summary>
            <param name="type">Default avatar type</param>        
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoInternal(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoInternal(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinaryInternal(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinaryInternal(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">GUID of the avatar to return</param>     
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinaryInternal(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.SetAvatarInfoInternal(CMS.Membership.AvatarInfo)">
            <summary>
            Sets (updates or inserts) specified avatar.
            </summary>
            <param name="avatar">Avatar to set</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarInfoInternal(CMS.Membership.AvatarInfo)">
            <summary>
            Deletes specified avatar.
            </summary>
            <param name="infoObj">Avatar object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="P:CMS.Membership.AvatarInfoProvider.DefaultAvatars">
            <summary>
            Contains default avatars, key is DefaultAvatarTypeEnum. [AvatarTypeEnum -> AvatarInfo]
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfoProvider.WebApplicationPhysicalPath">
            <summary>
            Full path to the root of the web.
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarTypeEnum">
            <summary>
            Defines type of the avatar object.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarTypeEnum.All">
            <summary>
            Global avatar, can be used anywhere.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarTypeEnum.User">
            <summary>
            User avatar, used in forums, message board, messaging, etc.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarTypeEnum.Group">
            <summary>
            Group avatar, used in groups.
            </summary>
        </member>
        <member name="T:CMS.Membership.CMSOutputAvatar">
            <summary>
            Summary description for CMSOutputAvatar.
            </summary>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.#ctor(CMS.Membership.AvatarInfo,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="ai">Avatar info</param>
            <param name="data">Output file data</param>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.EnsureData(System.Byte[])">
            <summary>
            Ensures that the object contains the output data.
            </summary>
            <param name="defaultData">Default data which should be loaded if data required</param>
            <returns>Returns true if new data has been loaded</returns>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.LoadData(System.Byte[])">
            <summary>
            Loads the data to the object.
            </summary>
            <param name="data">New data</param>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Avatar">
            <summary>
            Avatar file info without AvatarBinary.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.OutputData">
            <summary>
            Output file data.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.LastModified">
            <summary>
            Time when the avatar file was last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Width">
            <summary>
            Requested output width.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Height">
            <summary>
            Requested output Height.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.MaxSideSize">
            <summary>
            Requested output MaxSideSize.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.RedirectTo">
            <summary>
            If set, file should be redirected to the file system.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.DataLoaded">
            <summary>
            Returns true if the data is loaded to the object.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.PhysicalFile">
            <summary>
            Physical file path to the data.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Resized">
            <summary>
            If true, the file is resized version of the file.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="T:CMS.Membership.DefaultAvatarTypeEnum">
            <summary>
            Defines default avatar types.
            </summary>
        </member>
        <member name="F:CMS.Membership.DefaultAvatarTypeEnum.User">
            <summary>
            Default user avatar type.
            </summary>
        </member>
        <member name="F:CMS.Membership.DefaultAvatarTypeEnum.Male">
            <summary>
            Default male avatar type.
            </summary>
        </member>
        <member name="F:CMS.Membership.DefaultAvatarTypeEnum.Female">
            <summary>
            Default female avatar type.
            </summary>
        </member>
        <member name="F:CMS.Membership.DefaultAvatarTypeEnum.Group">
            <summary>
            Default group avatar type.
            </summary>
        </member>
        <member name="T:CMS.Membership.ActivityPointsEnum">
            <summary>
            Activity points enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.ActivityPointsEnum.ForumPost">
            <summary>
            Forum post.
            </summary>
        </member>
        <member name="F:CMS.Membership.ActivityPointsEnum.MessageBoardPost">
            <summary>
            Messsage board post.
            </summary>
        </member>
        <member name="F:CMS.Membership.ActivityPointsEnum.BlogCommentPost">
            <summary>
            Blog comment post.
            </summary>
        </member>
        <member name="F:CMS.Membership.ActivityPointsEnum.BlogPosts">
            <summary>
            Blog posts.
            </summary>
        </member>
        <member name="F:CMS.Membership.ActivityPointsEnum.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:CMS.Membership.BadgeInfo">
            <summary>
            BadgeInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.BadgeInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.BadgeInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfo.#ctor">
            <summary>
            Constructor - Creates an empty BadgeInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new BadgeInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeID">
            <summary>
            Badge id.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeImageURL">
            <summary>
            Badge image URL.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeName">
            <summary>
            Badge name.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeDisplayName">
            <summary>
            Badge display name.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeIsAutomatic">
            <summary>
            Badge is automatic.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeTopLimit">
            <summary>
            Badge top limit.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeGUID">
            <summary>
            Badge guid.
            </summary>
        </member>
        <member name="P:CMS.Membership.BadgeInfo.BadgeLastModified">
            <summary>
            Badge last modified.
            </summary>
        </member>
        <member name="T:CMS.Membership.BadgeInfoProvider">
            <summary>
            Class providing BadgeInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.GetBadgeInfo(System.Int32)">
            <summary>
            Returns the BadgeInfo structure for the specified badge.
            </summary>
            <param name="badgeId">Badge id</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.GetBadgeInfo(System.String)">
            <summary>
            Returns the BadgeInfo structure for the specified badge.
            </summary>
            <param name="badgeName">Badge name</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.SetBadgeInfo(CMS.Membership.BadgeInfo)">
            <summary>
            Sets (updates or inserts) specified badge.
            </summary>
            <param name="badge">Badge to set</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.DeleteBadgeInfo(CMS.Membership.BadgeInfo)">
            <summary>
            Deletes specified badge.
            </summary>
            <param name="infoObj">Badge object</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.DeleteBadgeInfo(System.Int32)">
            <summary>
            Deletes specified badge.
            </summary>
            <param name="badgeId">Badge id</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.UpdateActivityPointsToUser(CMS.Membership.ActivityPointsEnum,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds (subtracts) activity points to specified user.
            </summary>
            <param name="pointsType">Activity points type</param>
            <param name="userID">User ID</param>
            <param name="siteName">Site name</param>
            <param name="add">If true add points else subtract poits</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.UpdateUserBadge(System.Int32)">
            <summary>
            Udates badge to specified user.
            </summary>
            <param name="userID">User id</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.GetBadges">
            <summary>
            Returns the query for all badges.
            </summary>   
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.GetBadges(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with all badges according to WHERE condition.
            </summary>
            <param name="columns">Data columns to return</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>  
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.BadgeCollectionChanged">
            <summary>
            Re-distributes user badges according to current badge collection.
            This opperation is time-consuming for large amount of users. It's recommended
            call this method from separate thread.
            </summary>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.Clear(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, the clear tasks are logged</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.GetBadgeInfoInternal(System.Int32)">
            <summary>
            Returns the BadgeInfo structure for the specified badge.
            </summary>
            <param name="badgeId">Badge id</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.GetBadgeInfoInternal(System.String)">
            <summary>
            Returns the BadgeInfo structure for the specified badge.
            </summary>
            <param name="badgeName">Badge name</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.SetBadgeInfoInternal(CMS.Membership.BadgeInfo)">
            <summary>
            Sets (updates or inserts) specified badge.
            </summary>
            <param name="badge">Badge to set</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.DeleteBadgeInfoInternal(CMS.Membership.BadgeInfo)">
            <summary>
            Deletes specified badge.
            </summary>
            <param name="infoObj">Badge object</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.UpdateUserBadgeInternal(System.Int32)">
            <summary>
            Udates badge to specified user.
            </summary>
            <param name="userID">User id</param>
        </member>
        <member name="M:CMS.Membership.BadgeInfoProvider.BadgeCollectionChangedInternal">
            <summary>
            Re-distributes user badges according to current badge collection.
            This opperation is time-consuming for large amount of users. It's recommended
            call this method from separate thread.
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationRequestEventArgs">
            <summary>
            Authentication request event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationRequestEventArgs.RequestedUrl">
            <summary>
            Url that was requested when the event was raised
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationRequestHandler">
            <summary>
            Authentication request handler.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationRequestHandler.StartEvent(System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="requestedUrl">Url that was requested when the event was raised</param>
        </member>
        <member name="T:CMS.Membership.SignOutEventArgs">
            <summary>
            SignOut event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.SignOutEventArgs.User">
            <summary>
            Authenticated user
            </summary>
        </member>
        <member name="P:CMS.Membership.SignOutEventArgs.SignOutUrl">
            <summary>
            Gets or sets the SignOut URL
            </summary>
        </member>
        <member name="T:CMS.Membership.SignOutHandler">
            <summary>
            SignOut handler
            </summary>
        </member>
        <member name="M:CMS.Membership.SignOutHandler.StartEvent(CMS.Membership.UserInfo,System.String@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">Current info of the authenticated user</param>
            <param name="signOutUrl">Sign out URL</param>
        </member>
        <member name="T:CMS.Membership.SessionEventArgs">
            <summary>
            Session event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionEventArgs.Session">
            <summary>
            Session
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionHandler">
            <summary>
            Simple thread handler
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionHandler.StartEvent(CMS.Membership.SessionInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="session">Session info</param>
        </member>
        <member name="T:CMS.Membership.MembershipMethods">
            <summary>
            Membership methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsAuthorizedPerResource(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if given user is granted with specified permission
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsAuthorizedPerUIElement(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if current user is granted with permission to given UI element.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.CheckPrivilegeLevel(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if user fulfils the required privilege level (the higher level contains all children: GlobalAdmin -> Admin -> Editor -> None).
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsInRole(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user is in role
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsInGroup(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user is in group
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.HasAnyMembership(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user has any membership
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.HasMembership(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user has membership
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.GetFormattedUserName(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns formatted username in format: full name (nickname) if nickname specified otherwise full name (username).
            Allows you to customize how the usernames will look like throughout the admin UI. 
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Membership.MembershipUsageDataSource">
            <summary>
            Module usage data for membership.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUsageDataSource.GetData">
            <summary>
            Get membership usage data.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUsageDataSource.Name">
            <summary>
            Membership usage data source name.
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarExport">
            <summary>
            Handles special actions during the Avatar export process.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarExport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarImport">
            <summary>
            Handles special actions during the Avatar import process.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarImport.Init">
            <summary>
            Initializes import handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.ExportSpecialActions">
            <summary>
            Handles special actions during the export process.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.ImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.Membership.ImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipCounters.RegisterPerformanceCounters">
            <summary>
            Registers the performance counters
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipCounters.UpdateUserCounter(CMS.HealthMonitoring.Counter)">
            <summary>
            Updates the user counter
            </summary>
            <param name="counter">Counter to update</param>
        </member>
        <member name="M:CMS.Membership.MembershipCounters.GetUserCount(System.String,System.String)">
            <summary>
            Gets count of users (online, authorized or anonymous).
            </summary>
            <param name="counterKey">Counter key</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="T:CMS.Membership.MembershipModuleMetadata">
            <summary>
            Represents the Membership module metadata.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipResolvers">
            <summary>
            Resolvers used in e-mail templates and other macro visual components.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.MembershipChangePasswordResolver">
            <summary>
            Returns membership change password e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.PasswordResolver">
            <summary>
            Password e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.ForgottenPasswordResolver">
            <summary>
            Forgotten password e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.RegistrationResolver">
            <summary>
            Registration e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.RegistrationApprovalResolver">
            <summary>
            Registration approved e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.MembershipRegistrationResolver">
            <summary>
            Returns membership registration e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.MembershipExpirationResolver">
            <summary>
            Returns membership expiration e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipResolvers.MembershipUnlockAccountResolver">
            <summary>
            Returns membership unlock account e-mail template macro resolver.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipHandlers">
            <summary>
            Membership handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.Init">
            <summary>
            Initializes the membership handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.HandleAdminEmergencyReset(System.Object,System.EventArgs)">
            <summary>
            Handles admin emergency reset 
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.HandleAuthenticationRedirect(System.Object,System.EventArgs)">
            <summary>
            Handles the authentication redirect within current request
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.UpdateSession(System.Object,System.EventArgs)">
            <summary>
            Updates the session with current request information
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.UpdateSession">
            <summary>
            Updates the session with current request information
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.HandleAutomaticSignIn(System.Object,System.EventArgs)">
            <summary>
            Handles automatic sign-in for single sign-on
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.SessionStart(System.Object,System.EventArgs)">
            <summary>
            Session start actions
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.RemoveExpiredSessions(System.Object,System.EventArgs)">
            <summary>
            Removes the expired sessions from the database
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.DeleteUserCultures(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Deletes the user-culture bindings when the site-culture binding is deleted
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipSynchronization">
            <summary>
            Web farm synchronization for membership
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipSynchronization.Init">
            <summary>
            Initializes the tasks for media files synchronization
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipSynchronization.CheckSynchronizeAvatars">
            <summary>
            Returns true if the synchronization of the BizForm files is allowed
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipSynchronization.CheckSynchronizeDeleteAvatars">
            <summary>
            Returns true if the synchronization of the deletion of the BizForm files is allowed
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipSynchronization.UpdateAvatar(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Updates the Avatar
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="M:CMS.Membership.MembershipSynchronization.DeleteAvatar(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Deletes the Avatar
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="P:CMS.Membership.MembershipSynchronization.SynchronizeAvatars">
            <summary>
            Gets or sets value that indicates whether file synchronization for avatars is enabled.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipTaskType">
            <summary>
            Web farm tasks for membership operations
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipTaskType.UpdateAvatar">
            <summary>
            Updates (inserts) avatar.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipTaskType.DeleteAvatar">
            <summary>
            Avatar delete operation.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipContext">
            <summary>
            Membership related context methods and variables.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipContext.SHIFTED_INTERVAL_IN_MINUTES">
            <summary>
            Time interval used for creating token info.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipContext.MF_AUTHENICATION_INFO">
            <summary>
            Session key used for information about partially authentication.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.GetCurrentUserProfile">
            <summary>
            Returns information on the current user according user ID/ user name specified as an URL parameter of the current request
            </summary>        
        </member>
        <member name="M:CMS.Membership.MembershipContext.CreatePartialAuthenticationInfo(System.DateTime)">
            <summary>
            Get hash stamp which represents valid period for user.  
            </summary>
            <param name="time">DateTime.</param>
        </member>
        <member name="M:CMS.Membership.MembershipContext.SetUserPartialAuthentication">
            <summary>
            Partially authenticates the user.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.SetUserPartialAuthentication(System.DateTime)">
            <summary>
            Partially authenticates the user.
            </summary>
            <param name="dateTime">Datetime.</param>
        </member>
        <member name="M:CMS.Membership.MembershipContext.ClearUserPartialAuthentication">
            <summary>
            Clear authentication info.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.IsUserPartiallyAuthenticated">
            <summary>
            Checks if user is partially authenticated.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.IsUserPartiallyAuthenticated(System.DateTime)">
            <summary>
            Checks if user is partially authenticated.
            </summary>
            <param name="dateTime">Datetime.</param>
        </member>
        <member name="P:CMS.Membership.MembershipContext.CurrentUserProfile">
            <summary>
            Current user info object according the URL parameter of the current request. 
            It is available when the request contains parameters "userid", "username" or "userguid" with valid value of the user.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.AuthenticatedUser">
            <summary>
            Current user
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserAccountLockedDueToInvalidLogonAttempts">
            <summary>
            Indicates if user reached maximal allowed number of invalid logon attempts.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserAccountLockedDueToPasswordExpiration">
            <summary>
            Indicates if user account was locked because its password expired.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.MFAuthenticationTokenNotInitialized">
            <summary>
            Indicates if multi-factor token ID was initialized.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserAuthenticationFailedDueToInvalidPasscode">
            <summary>
            Indicates if login failed due to invalid passcode.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserIsPartiallyAuthenticated">
            <summary>
            Indicates if user is partially authenticated. Previously inserted username and password were correct.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.CurrentSession">
            <summary>
            Current session info.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.SignOutPending">
            <summary>
            If true, SignOut method was called in this method and user is figuratively signed out.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserIsBanned">
            <summary>
            Indicates whether the user is banned using BannedIP modules.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.AllowOnlyRead">
            <summary>
            Returns true if the current context allows only reading of the data
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationEventArgs">
            <summary>
            Authentication event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.User">
            <summary>
            Authenticated user.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.Passcode">
            <summary>
            Passcdoe for multifactor authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.SiteName">
            <summary>
            Name of the site to which the user tries to autenticate.
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationHandler">
            <summary>
            Authentication handler
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHandler.StartEvent(CMS.Membership.UserInfo@,System.String,System.String,System.String,System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">Current info of the authenticated user (through regular authentication)</param>
            <param name="username">Username to authenticate</param>
            <param name="password">Password to authenticate</param>
            <param name="passcode">Passcode to authenticate</param>
            <param name="siteName">Name of the site to which the user tries to autenticate. If the parameter is not set, current site name from context is used</param>
        </member>
        <member name="T:CMS.Membership.AuthorizationEventArgs">
            <summary>
            Authorization event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.User">
            <summary>
            User to check
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.PermissionName">
            <summary>
            Permission name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.ElementName">
            <summary>
            UI element name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.Authorized">
            <summary>
            Authorization result
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthorizationHandler">
            <summary>
            Authorization handler
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthorizationHandler.StartResourceEvent(CMS.Membership.UserInfo,System.String,System.String,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">User info object</param>
            <param name="resourceName">Resource name to authorize</param>
            <param name="permissionName">Permission name</param>
            <param name="authorized">Current (system) authorization status</param>
        </member>
        <member name="M:CMS.Membership.AuthorizationHandler.StartClassEvent(CMS.Membership.UserInfo,System.String,System.String,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">User info object</param>
            <param name="className">Class name to authorize</param>
            <param name="permissionName">Permission name</param>
            <param name="authorized">Current (system) authorization status</param>
        </member>
        <member name="M:CMS.Membership.AuthorizationHandler.StartUIElementEvent(CMS.Membership.UserInfo,System.String,System.String,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">User info object</param>
            <param name="resourceName">Resource name to authorize</param>
            <param name="elementName">UI element name</param>
            <param name="authorized">Current (system) authorization status</param>
        </member>
        <member name="T:CMS.Membership.SecurityEvents">
            <summary>
            Security events
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.SignOut">
            <summary>
            Fires when sign out of the user is performed
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthenticationRequested">
            <summary>
            Fires when authentication is requested
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.Authenticate">
            <summary>
            Fires when authentication of the user is performed, allows to connect the authentication process to the external authentication provider
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.MultiFactorAuthenticate">
            <summary>
            Fires when multi-factor authentication of the user is performed, allows to customize way of sending passcode
            </summary> 
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthorizeResource">
            <summary>
            Fires when resource permission authorization is requested
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthorizeClass">
            <summary>
            Fires when class permission authorization is requested
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthorizeUIElement">
            <summary>
            Fires when UI element authorization is requested
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSearchIndexer">
            <summary>
            Search indexer for users index
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.ExecuteProcessTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Processes the index task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.Rebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Rebuilds the user index
            </summary>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.CheckResultPermissions(CMS.Search.SearchResults,CMS.DataEngine.ISearchDocument,System.Int32)">
            <summary>
            Checks the permissions for the given result document
            </summary>
            <param name="settings">Check permission settings</param>
            <param name="currentDoc">Current result document</param>
            <param name="index">Current document index</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.LoadResults(System.Collections.Generic.IEnumerable{CMS.DataEngine.ISearchDocument},CMS.Base.SafeDictionary{System.String,System.Data.DataRow})">
            <summary>
            Loads the results to the given result collection
            </summary>
            <param name="results">Collection of results to load</param>
            <param name="result">Dictionary of the loaded results indexed by their key</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.GetDataClassInfo(CMS.DataEngine.ISearchDocument)">
            <summary>
            Returns the data class info for the given search document
            </summary>
            <param name="obj">Document object</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.FillSearchResult(System.Data.DataRow,System.Data.DataRow,CMS.DataEngine.ISearchDocument)">
            <summary>
            Fills the data to the search result data row
            </summary>
            <param name="dr">Result data row to be filled with postprocessed results</param>
            <param name="resultDr">Source data row with raw search results</param>
            <param name="doc">Found search document</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.GetSearchImageUrl(System.String,System.String,System.String)">
            <summary>
            Returns URL to current search result item.
            </summary>
            <param name="id">ID of the item</param>
            <param name="type">Type of the index</param>
            <param name="image">Image</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.GetSearchFields(CMS.Search.SearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Gets the collection of search fields. When no SearchFields colection is provided, new is created.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="T:CMS.Membership.OnlineUserHelper">
            <summary>
            Serves for updating on-line users.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.UpdateSessions(CMS.DataEngine.BaseInfo,System.Collections.Generic.IEnumerable{System.String},CMS.Membership.OnlineUserHelper.SessionType)">
            <summary>
            Updates all CMS_Session records which have matching foreign key ID corresponding given object type.
            </summary>
            <param name="info">Info object containing data</param>
            <param name="changedColumns">Columns which were changed in the info object</param>
            <param name="type">Type of the object</param>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.CheckPrerequisites(CMS.Membership.OnlineUserHelper.SessionType)">
            <summary>
            Check licenses and settings.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.GetUpdateParameters(CMS.DataEngine.BaseInfo,System.Collections.Generic.IEnumerable{System.String},CMS.Membership.OnlineUserHelper.SessionType)">
            <summary>
            Prepares QueryDataParameters for update all stored procedure.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.GetWhereCond(CMS.DataEngine.BaseInfo,CMS.Membership.OnlineUserHelper.SessionType)">
            <summary>
            Returns 'WhereCond' parameter for mass update.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.GetSetColumns(CMS.DataEngine.BaseInfo,System.Collections.Generic.IEnumerable{System.String},CMS.Membership.OnlineUserHelper.SessionType)">
            <summary>
            Prepares 'SetColumns' parameter for mass update.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.GetImportantColumns(CMS.Membership.OnlineUserHelper.SessionType)">
            <summary>
            Returns columns which are important when updating user or contact.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserHelper.GetContactFullName(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns contact full name.
            </summary>
        </member>
        <member name="T:CMS.Membership.OnlineUserHelper.SessionType">
            <summary>
            Type of session.
            </summary>
        </member>
        <member name="F:CMS.Membership.OnlineUserHelper.SessionType.User">
            <summary>
            Session based on user profile.
            </summary>
        </member>
        <member name="F:CMS.Membership.OnlineUserHelper.SessionType.Contact">
            <summary>
            Session based on contact profile.
            </summary>
        </member>
        <member name="T:CMS.Membership.OnlineUserInfo">
            <summary>
            On-line users info data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.OnlineUserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.OnlineUserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserInfo.#ctor">
            <summary>
            Constructor - Creates an empty OnlineUserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OnlineUserInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.OnlineUserInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="P:CMS.Membership.OnlineUserInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Membership.OnlineUserInfoProvider.GetOnlineUsers">
            <summary>
            Returns the query for all online users.
            </summary>   
        </member>
        <member name="T:CMS.Membership.MembershipInfo">
            <summary>
            Membership data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.#ctor">
            <summary>
            Constructor - Creates an empty Membership object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Membership object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipID">
            <summary>
            Membership object ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipLastModified">
            <summary>
            Date and time when the membership object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipDescription">
            <summary>
            Membership object description.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipDisplayName">
            <summary>
            Membership object display name.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipSiteID">
            <summary>
            Membership object site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipGUID">
            <summary>
            Membership object unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipName">
            <summary>
            Membership object code name.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipInfoProvider">
            <summary>
            Class providing Membership management.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMemberships">
            <summary>
            Returns the query for all memberships.
            </summary>   
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetUserMemberships(System.Int32)">
            <summary>
            Returns dataset of all valid memberships for given user
            </summary>
            <param name="userID">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfo(System.Int32)">
            <summary>
            Returns membership with specified ID.
            </summary>
            <param name="membershipId">Membership ID</param>        
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfo(System.Guid,System.Int32)">
            <summary>
            Returns membership with specified GUID.
            </summary>
            <param name="membershipGuid">Membership GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfo(System.String,System.String)">
            <summary>
            Returns membership with specified name.
            </summary>
            <param name="membershipName">Membership name</param>                
            <param name="siteName">Site name</param>                
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.SetMembershipInfo(CMS.Membership.MembershipInfo)">
            <summary>
            Sets (updates or inserts) specified membership.
            </summary>
            <param name="membershipObj">Membership to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.DeleteMembershipInfo(CMS.Membership.MembershipInfo)">
            <summary>
            Deletes specified membership.
            </summary>
            <param name="membershipObj">Membership to be deleted</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.DeleteMembershipInfo(System.Int32)">
            <summary>
            Deletes membership with specified ID.
            </summary>
            <param name="membershipId">Membership ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.InvalidateMembershipUsers(System.Int32)">
            <summary>
            Invalidates all membership users
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.CheckDependencies(System.Int32)">
            <summary>
            Checks dependencies, returns true if dependent.
            </summary>
            <param name="membershipId">ID of the membership to be checked</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetUserMembershipsInternal(System.Int32)">
            <summary>
            Returns collection with valid memberships associated to user
            </summary>
            <param name="userID">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfoInternal(System.Int32)">
            <summary>
            Returns membership with specified ID.
            </summary>
            <param name="membershipId">Membership ID</param>        
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the membership with the specified GUID.
            </summary>
            <param name="membershipGuid">Membership GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfoInternal(System.String,System.String)">
            <summary>
            Returns membership with specified name.
            </summary>
            <param name="membershipName">Membership name</param>                
            <param name="siteName">Site name</param>         
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.SetMembershipInfoInternal(CMS.Membership.MembershipInfo)">
            <summary>
            Sets (updates or inserts) specified membership.
            </summary>
            <param name="membershipObj">Membership to be set</param>        
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.DeleteMembershipInfoInternal(CMS.Membership.MembershipInfo)">
            <summary>
            Deletes specified membership.
            </summary>
            <param name="membershipObj">Membership to be deleted</param>        
        </member>
        <member name="F:CMS.Membership.MembershipListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipListInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.MembershipListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipRoleInfo">
            <summary>
            MembershipRoleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipRoleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipRoleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipRoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipRoleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="P:CMS.Membership.MembershipRoleInfo.RoleID">
            <summary>
            ID of role object.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipRoleInfo.MembershipID">
            <summary>
            ID of membership object.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipRoleInfoProvider">
            <summary>
            Class providing MembershipRoleInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetMembershipRoles">
            <summary>
            Returns the query for all relationships between memberships and roles.
            </summary>   
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetMembershipRoleInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and role.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.SetMembershipRoleInfo(CMS.Membership.MembershipRoleInfo)">
            <summary>
            Sets relationship between specified membership and role.
            </summary>
            <param name="infoObj">Membership-role relationship to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.DeleteMembershipRoleInfo(CMS.Membership.MembershipRoleInfo)">
            <summary>
            Deletes relationship between specified membership and role.
            </summary>
            <param name="infoObj">Membership-role relationship to be deleted</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.AddMembershipToRole(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified membership and role.
            </summary>	
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.RemoveMembershipFromRole(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified membership and role.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetMembershipRoleInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and role.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.SetMembershipRoleInfoInternal(CMS.Membership.MembershipRoleInfo)">
            <summary>
            Sets relationship between specified membership and role.
            </summary>
            <param name="infoObj">Membership-role relationship to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.DeleteMembershipRoleInfoInternal(CMS.Membership.MembershipRoleInfo)">
            <summary>
            Deletes relationship between specified membership and role.
            </summary>
            <param name="infoObj">Membership-role relationship to be deleted</param>
        </member>
        <member name="T:CMS.Membership.MembershipUserInfo">
            <summary>
            MembershipUserInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipUserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipUserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipUserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipUserInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.UserID">
            <summary>
            ID of User object.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.MembershipID">
            <summary>
            ID of membership object.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.ValidTo">
            <summary>
            Date to membership is valid for given user.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.SendNotification">
            <summary>
            Indicates if given user is to be notified in advance about expiration of his membership.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipUserInfoProvider">
            <summary>
            Class providing MembershipUserInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetMembershipUsers">
            <summary>
            Returns the query for all relationships between memberships and users.
            </summary>   
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetMembershipUserInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and User.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.SetMembershipUserInfo(CMS.Membership.MembershipUserInfo)">
            <summary>
            Sets relationship between specified membership and User.
            </summary>
            <param name="infoObj">Membership-User relationship to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.DeleteMembershipUserInfo(CMS.Membership.MembershipUserInfo)">
            <summary>
            Deletes relationship between specified membership and user.
            </summary>
            <param name="infoObj">Membership-user relationship to be deleted</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.AddMembershipToUser(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Sets relationship between specified membership and user.
            </summary>	
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
            <param name="validTo">Date to membership for user is valid</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.AddMembershipToUser(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Sets relationship between specified membership and user.
            </summary>	
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
            <param name="validTo">Date to membership for user is valid</param>
            <param name="sendNotification">Indicates, if notification will be send to user when membership is expiring</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.RemoveMembershipFromUser(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified membership and user.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetExpiringMemberships(System.Int32,System.Int32,System.String)">
            <summary>
            Returns dataset of all expiring memberships matching given parameters along with relevant user and membership information.
            </summary>
            <param name="days">Number of days in which the memberships will expire.</param>
            <param name="siteId">Site ID. Set to 0 for global expiring memberships.</param>
            <param name="where">Additional where condition</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetExpiringMemberships(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns dataset of all expiring memberships matching given parameters along with relevant user and membership information.
            </summary>
            <param name="days">Number of days in which the memberships will expire.</param>
            <param name="siteId">Site ID. Set to 0 for global expiring memberships.</param>
            <param name="where">Additional where condition</param>
            <param name="onlyWithSendNotification">Get only memberships with send notification flag set to true.</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetMembershipUserInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and user.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.SetMembershipUserInfoInternal(CMS.Membership.MembershipUserInfo)">
            <summary>
            Sets relationship between specified membership and user.
            </summary>
            <param name="infoObj">Membership-user relationship to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.DeleteMembershipUserInfoInternal(CMS.Membership.MembershipUserInfo)">
            <summary>
            Deletes relationship between specified membership and user.
            </summary>
            <param name="infoObj">Membership-user relationship to be deleted</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetExpiringMembershipsInternal(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns dataset of all expiring memberships matching given parameters along with relevant user and membership information.
            </summary>
            <param name="days">Number of days in which the memberships will expire.</param>
            <param name="siteId">Site ID</param>
            <param name="where">Additional where condition</param>
            <param name="onlyWithSendNotification">Get only memberships with send notification flag set to true.</param>
        </member>
        <member name="T:CMS.Membership.RoleInfo">
            <summary>
            Role info data container.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleInfo.OBJECT_TYPE">
            <summary>
            Role object type
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleInfo.OBJECT_TYPE_GROUP">
            <summary>
            Group role object type
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleInfo.TYPEINFO">
            <summary>
            Type information for standard role.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleInfo.TYPEINFOGROUP">
            <summary>
            Type information for group role.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty RoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new RoleInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.DisplayName">
            <summary>
            Role Display Name.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.Description">
            <summary>
            Role Description.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleName">
            <summary>
            Role Name.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleGUID">
            <summary>
            Role GUID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleGroupID">
            <summary>
            Role group ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleIsGroupAdministrator">
            <summary>
            Indicates whether role is group admin.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleIsDomain">
            <summary>
            Indicates whether role is domain role.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="T:CMS.Membership.RoleInfoProvider">
            <summary>
            Provides access to information about roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoByGUID(System.Guid,System.Int32)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.String,System.Int32)">
            <summary>
            Returns the role info object with specified ID.
            </summary>
            <param name="roleName">Name of role to retrieve</param>
            <param name="siteId">Site ID which the role depends to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetExistingRoleInfo(System.String,System.Int32)">
            <summary>
            Returns info object of role.
            </summary>
            <param name="roleName">Role code name</param>
            <param name="siteID">Role site ID - if zero all roles are picked</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.String,System.String,System.Boolean)">
            <summary>
            Returns the role info object with specified role name.
            </summary>
            <param name="roleName">Role name to find. Role name with dots is considered as global.</param>
            <param name="siteName">Role's site name.</param>
            <param name="globalIfNoSite">If true, global role is returned, if no site role is found </param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.String,System.String)">
            <summary>
            Returns the role info object with specified role name.
            </summary>
            <param name="roleName">Name of role to retrieve. Role name with dots is considered as global. </param>
            <param name="siteName">Site which the role depends to. If empty global role is returned.</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.Int32)">
            <summary>
            Returns the RoleInfo structure for the specified role.
            </summary>
            <param name="roleId">RoleID to use for retrieving the role data</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.SetRoleInfo(CMS.Membership.RoleInfo)">
            <summary>
            Sets (updates or inserts) specified role.
            </summary>
            <param name="roleInfoObj">Role to set</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRoleInfo(CMS.Membership.RoleInfo)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleObj">Role object</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRoleInfo(System.Int32)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleId">Role id</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoles">
            <summary>
            Returns the query for all roles.
            </summary>   
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetAllRoles(System.Int32)">
            <summary>
            Returns DataSet with roles of given site (if siteId > 0) or with all roles.
            </summary>
            <param name="siteId">SiteID of site which roles we want to return</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetAllRoles(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns DataSet with roles of given site (if siteId > 0) with option to display GroupRoles.
            </summary>
            <param name="siteId">SiteID of site which roles we want to return</param>
            <param name="includingGroups">If set to true then GroupRoles are also returned in DataSet</param>
            <param name="includingGeneric">If set to true then Generic roles are also returned in DataSet</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.RoleExists(System.String,System.String)">
            <summary>
            Returns true if role of given name exists.
            </summary>
            <param name="roleName">Name of role</param>
            <param name="siteName">Site that the role belongs to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleUsers(System.Int32)">
            <summary>
            Returns the table of the role users or null.
            </summary>
            <param name="roleId">Role ID for retrieving the table of users</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRole(System.String,System.String)">
            <summary>
            Deletes the specified Role.
            </summary>
            <param name="roleName">Role to delete</param>
            <param name="siteName">Site that role to delete depends to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetGenericRoles">
            <summary>
            Returns list of generic roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredClassRoles(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified class permission.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredResourceRoles(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoByGUIDInternal(System.Guid,System.Int32)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoInternal(System.String,System.Int32)">
            <summary>
            Returns the role info object with specified ID.
            </summary>
            <param name="roleName">Name of role to retrieve</param>
            <param name="siteId">Site ID which the role depends to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetExistingRoleInfoInternal(System.String,System.Int32)">
            <summary>
            Returns role object (not depending on sites).
            </summary>
            <param name="roleName">Role code name</param>
            <param name="siteID">Site ID - if zero all roles are picked</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoInternal(System.String,System.String,System.Boolean)">
            <summary>
            Returns the role info object with specified role name.
            </summary>
            <param name="roleName">Role name to find</param>
            <param name="siteName">Role's site name.</param>
            <param name="globalIfNoSite">If true, global role with the same codename is returned, when no site role is found</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoInternal(System.Int32)">
            <summary>
            Returns the RoleInfo structure for the specified role.
            </summary>
            <param name="roleId">RoleID to use for retrieving the role data</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.SetRoleInfoInternal(CMS.Membership.RoleInfo)">
            <summary>
            Sets (updates or inserts) specified role.
            </summary>
            <param name="roleInfoObj">Role to set</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRoleInfoInternal(CMS.Membership.RoleInfo)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleObj">Role object</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.RoleExistsInternal(System.String,System.String)">
            <summary>
            Returns true if role of given name exists.
            </summary>
            <param name="roleName">Name of role</param>
            <param name="siteName">Site that the role belongs to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleUsersInternal(System.Int32)">
            <summary>
            Returns the table of the role users or null.
            </summary>
            <param name="roleId">Role ID for retrieving the table of users</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredClassRolesInternal(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified class permission.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredResourceRolesInternal(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="T:CMS.Membership.UserRoleInfo">
            <summary>
            UserRoleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserRoleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserRoleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserRoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserRoleInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserRoleInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserRoleInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserRoleInfo.ValidTo">
            <summary>
            Date to membership is valid for given user.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserRoleInfoProvider">
            <summary>
            Class providing UserRoleInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetUserRoleInfo(System.Int32,System.Int32)">
            <summary>
            Returns the UserRoleInfo structure for the specified userRole.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetUserRoles">
            <summary>
            Returns the query for all relationships between users and roles.
            </summary>   
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.SetUserRoleInfo(CMS.Membership.UserRoleInfo)">
            <summary>
            Sets (updates or inserts) specified userRole.
            </summary>
            <param name="userRole">UserRole to set</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.DeleteUserRoleInfo(CMS.Membership.UserRoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="infoObj">UserRole object</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.RemoveUserFromRole(CMS.Membership.UserInfo,CMS.Membership.RoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="ui">UserInfo</param>
            <param name="ri">RoleInfo</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Adds specified user to the role.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
            <param name="dt">Date till user role connection is valid</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(System.Int32,System.Int32)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(CMS.Membership.UserInfo,CMS.Membership.RoleInfo)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="ui">UserInfo</param>
            <param name="ri">RoleInfo</param>        
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(CMS.Membership.UserInfo,CMS.Membership.RoleInfo,System.DateTime)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="ui">UserInfo</param>
            <param name="ri">RoleInfo</param>
            <param name="dt">Date till user role connection is valid</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.IsUserInRole(System.Int32,System.Int32)">
            <summary>
            Returns true if the user is member of specified role.
            </summary>
            <param name="userId">User ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.IsSearchRequired">
            <summary>
            Returns true if exists at least one user index with role condition
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetUserRoleInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the UserRoleInfo structure for the specified userRole.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.SetUserRoleInfoInternal(CMS.Membership.UserRoleInfo)">
            <summary>
            Sets (updates or inserts) specified userRole.
            </summary>
            <param name="userRole">UserRole to set</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.DeleteUserRoleInfoInternal(CMS.Membership.UserRoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="infoObj">UserRole object</param>
        </member>
        <member name="F:CMS.Membership.UserRoleListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserRoleListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleListInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipUserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipUserInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.UserRoleListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSecurityHelper">
            <summary>
            Helper class to check the user security
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,CMS.DataEngine.BaseInfo,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given object with given permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="obj">Object to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerMetaFile(CMS.DataEngine.PermissionsEnum,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized per meta file for given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerResource(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given resource name and permission, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsReadOnlyPermission(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Returns true if the given permission is a read-only permission
            </summary>
            <param name="permission">Permission</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsReadOnlyPermission(System.String)">
            <summary>
            Returns true if the given permission is a read-only permission
            </summary>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerUIElement(System.String,System.String,System.Boolean,System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>        
            <param name="siteName">Site code name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerUIElement(System.String,System.String[],System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized for given resource name and UIElements, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="elementNames">UIElement names to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerClassName(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Returns name of the permission specified by the enumeration value.
            </summary>
            <param name="permission">Enumeration value of the permission</param>
        </member>
        <member name="T:CMS.Membership.MembershipModule">
            <summary>
            Represents the Membership module.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.OnPreInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.OnInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.Authenticate_Execute(System.Object,CMS.Membership.AuthenticationEventArgs)">
            <summary>
            Handles BannedIPs checking.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Authentication event arguments</param>
        </member>
        <member name="M:CMS.Membership.MembershipModule.InitImportExport">
            <summary>
            Initializes import/export handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.InitMacros">
            <summary>
            Initializes the Membership macros
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.RegisterTaskAliases">
            <summary>
            Registers tasks aliases for the membership scheduled tasks
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.Membership.RoleName">
            <summary>
            Constants for system role names
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleName.EVERYONE">
            <summary>
            Special role which automatically covers all users.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleName.AUTHENTICATED">
            <summary>
            Special role which automatically covers all authenticated users.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleName.NOTAUTHENTICATED">
            <summary>
            Special role which automatically covers all not authenticated users.
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionsCachingActionEnum">
            <summary>
            Represents action performed on hash table with user sessions.
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionsCachingActionEnum.UpsertSession">
            <summary>
            Add session to hash table or update existing.
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionsCachingActionEnum.RemoveSession">
            <summary>
            Remove session from hash table.
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionsCachingActionEnum.ChangeSiteName">
            <summary>
            Update site name in hash table to re-index it.
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionsCachingActionEnum.Clear">
            <summary>
            Clear all hash tables.
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionEvents">
            <summary>
            Global CMS session events
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionEvents.UpdateSession">
            <summary>
            Fires when the session is updated
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionEvents.UpdateSessionData">
            <summary>
            Fires when the session data is updated
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionInfo">
            <summary>
            SessionInfo data container class.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.Update">
            <summary>
            Updates the record in the database.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetUpdateParameters">
            <summary>
            Prepares QueryDataParameters for update query.
            </summary>
            <returns>Returns QueryDataParameters</returns>
        </member>
        <member name="M:CMS.Membership.SessionInfo.Delete">
            <summary>
            Deletes the record from the database.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.LoadFromContext">
            <summary>
            Updates the session object with current context values.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetUserID(CMS.Base.IUserInfo)">
            <summary>
            Returns current UserID.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetCurrentContact">
            <summary>
            Returns current contact.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetContactID(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns current ContactID.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetSessionFullName(CMS.Base.IUserInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns full name.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetSessionEmail(CMS.Base.IUserInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns email.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetSessionUserName(CMS.Base.IUserInfo)">
            <summary>
            Returns user name.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetSessionNickName(CMS.Base.IUserInfo)">
            <summary>
            Returns user nickname.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionInfo.GetSessionUserCreated(CMS.Base.IUserInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns date and time of user's or contact's creation.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionIdentifier">
            <summary>
            Session identifier.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionUserID">
            <summary>
            Session user id.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionLocation">
            <summary>
            Session location.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionLastActive">
            <summary>
            Session last active.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionLastLogon">
            <summary>
            Session last logon.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionExpires">
            <summary>
            Session expires.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionExpired">
            <summary>
            Session expired.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionSiteID">
            <summary>
            Session site id.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionUserIsHidden">
            <summary>
            If User is hidden.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionFullName">
            <summary>
            On-line visitor's full name (user or contact).
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionEmail">
            <summary>
            On-line visitor's e-mail (user or contact).
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionUserName">
            <summary>
            On-line visitor's user name.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionNickName">
            <summary>
            On-line visitor's user nick name
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionUserCreated">
            <summary>
            On-line visitor's created time (user or contact).
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.SessionContactID">
            <summary>
            On-line visitor's contact ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionInfo.Updated">
            <summary>
            Indicates if record was updated.
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionManager">
            <summary>
            Class provides session management.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.UpdateCurrentSession(System.String)">
            <summary>
            Updates current user session info from the context.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveAuthenticatedUser(System.String,System.Int32,System.Boolean)">
            <summary>
            Removes authenticated user from current sessions.
            </summary>
            <param name="siteName">Site name</param>
            <param name="userId">User identifier</param>
            <param name="createTask">Indicates whether web farm task should be created</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveUser(System.Int32,System.Boolean)">
            <summary>
            Remove user from sessions hashtables.
            </summary>
            <param name="userId">User id</param>
            <param name="createTask">Indicates whether web farm task should be created</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveUser(System.Int32)">
            <summary>
            Removes user from sessions hashtables.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.ReindexSessionsInfosHashtable(System.String,System.String)">
            <summary>
            Re-indexes sessions hashtable - changes key from old site name to new site name.
            </summary>
            <param name="oldSiteName">Old site name</param>
            <param name="newSiteName">New site name</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.Clear(System.String)">
            <summary>
            Clears all information from session management about specified site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.UpdateDatabaseSession">
            <summary>
            Gets sessions from hashtables and updates in the database.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveExpiredSessions">
            <summary>
            Removes the expired sessions from the hash table.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveExpiredSessionsFromDB">
            <summary>
            Removes the expired sessions from the database.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveExpiredSessions(System.Boolean,System.Boolean)">
            <summary>
            Removes expired sessions.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.KickUser(System.Int32)">
            <summary>
            Performs the necessary actions to kick the user.
            <param name="userID">User id to kick</param>
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveUserFromKicked(System.Int32)">
            <summary>
            Removes user from kicked.
            <param name="userID">User id to kick</param>
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetKickedUsersWhere">
            <summary>
            Returns WHERE condition for kicked users.
            </summary>
            <returns>Returns WHERE condition</returns>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetOnlineUsers(System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns UserInfos of online users according to WHERE condition ordered by ORDER BY expression.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="orderBy">ORDER BY expression</param>   
            <param name="topN">TOP N expression</param>
            <param name="location">Location (alias path) of users</param>
            <param name="siteName">Site name</param>  
            <param name="includeHidden">Include hidden</param>
            <param name="includeKicked">Include kicked</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetOnlineUsers(System.String,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns UserInfos of online users according to WHERE condition ordered by ORDER BY expression.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="orderBy">ORDER BY expression</param>   
            <param name="topN">TOP N expression</param>
            <param name="columns">Columns condition</param>
            <param name="location">Location (aliaspath) of users</param>
            <param name="siteName">Site name</param>  
            <param name="includeHidden">Include hidden</param>
            <param name="includeKicked">Include kicked</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetUsersWhereCondition(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns where condition which could be used for loading online users from database.
            </summary>
            <param name="location">Location (aliaspath) of users</param>
            <param name="siteName">Site name</param>  
            <param name="includeHidden">Include hidden</param>
            <param name="includeKicked">Include kicked</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.IsUserOnline(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns true if user with specified userID is online.
            </summary>
            <param name="siteName">Site name</param>
            <param name="userID">User id</param>
            <param name="includeHidden">Include hidden</param>        
        </member>
        <member name="M:CMS.Membership.SessionManager.GetUsersNumber(System.String,System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Returns number of online users.
            </summary>
            <param name="siteName">Site name</param>
            <param name="location">Location</param>
            <param name="includeHidden">Include hidden users</param>
            <param name="includeKicked">Include kicked users - kicked users are count through all sites</param>
            <param name="publicUsers">Number of public users</param>
            <param name="authenticatedUsers">Bumber of authenticated users</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.RemoveContactDependencies(System.Int32)">
            <summary>
            Removes object dependencies.
            </summary>
            <param name="contactID">Contact being deleted</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetUsersNumberFromDB(System.String,System.String,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Gets number of users online.
            </summary>
            <param name="siteName">Name of the site</param>
            <param name="location">Location on the site</param>
            <param name="includeHidden">Include hidden users</param>
            <param name="publicUsers">Number of public users</param>
            <param name="authenticatedUsers">Number of public</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetUsersNumberFromHashTables(System.String,System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Gets number of users online.
            </summary>
            <param name="siteName">Name of the site</param>
            <param name="location">Location on the site</param>
            <param name="includeHidden">Include hidden users</param>
            <param name="includeKicked">Include kicked users</param>
            <param name="publicUsers">Number of public users</param>
            <param name="authenticatedUsers">Number of public</param>
        </member>
        <member name="M:CMS.Membership.SessionManager.GetCurrentSessionInfoFromHashtable">
            <summary>
            Returns current session info form hashtable.
            </summary>        
        </member>
        <member name="M:CMS.Membership.SessionManager.UpsertSiteSession(System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},CMS.Membership.SessionInfo)">
            <summary>
            Update or insert user's site session.
            </summary>
            <param name="siteName">Name of the site visited by user</param>
            <param name="isAuthenticated">Users has been authenticated and will be stored in collection of authenticated users</param>
            <param name="isHidden">Users is hidden and will be stored in collection of hidden users</param>
            <param name="userId">Session user identifier</param>
            <param name="session">Session info to store in memory</param>
        </member>
        <member name="P:CMS.Membership.SessionManager.PublicUsers">
            <summary>
            Returns number of public users on current site.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionManager.AuthenticatedUsers">
            <summary>
            Returns number of authenticated users on current site.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionManager.HiddenUsers">
            <summary>
            Returns number of hidden users on current site.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionManager.StoreOnlineUsersInDatabase">
            <summary>
            Gets the value that indicates whether online users should be saved in the database.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionManager.OnlineUsersEnabled">
            <summary>
            Gets the value that indicates whether online users feature is enabled.
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionsCachingAction">
            <summary>
            Represents action performed on sessions cache.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingAction.#ctor">
            <summary>
            Disable construction of caching action.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingAction.GetUpsertAction(System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},CMS.Membership.SessionInfo)">
            <summary>
            Get action that inserts or updates session in hahstables.
            </summary>
            <param name="siteName">Name of the site corresponding to the session.</param>
            <param name="isAuthenticated">The user session is authenticated.</param>
            <param name="isHidden">The user session is hidden.</param>
            <param name="userID">User identifier.</param>
            <param name="session">Session info object.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingAction.GetRemoveAction(System.Int32)">
            <summary>
            Get action that removes all sessions of given user.
            </summary>
            <param name="userId">User identifier.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingAction.GetClearAction(System.String)">
            <summary>
            Get action that clears given site in hashtables.
            </summary>
            <param name="siteName">Site name to clear</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingAction.GetRenameAction(System.String,System.String)">
            <summary>
            Get action that changes site name in hashtables.
            </summary>
            <param name="oldSiteName">Current site name.</param>
            <param name="newSiteName">New site name</param>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.Action">
            <summary>
            Action to perform on session cache.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.OldSiteName">
            <summary>
            Current session site name. Specify alongside with the site name when renaming site in hahstables.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.SiteName">
            <summary>
            Session site name.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.IsAuthenticated">
            <summary>
            User is authenticated.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.IsHidden">
            <summary>
            User is hidden.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.UserID">
            <summary>
            User identifier used to index session identifiers.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsCachingAction.Session">
            <summary>
            Session info object.
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionsCachingWorker">
            <summary>
            Provides thread-safe operations on user sessions cache by organizing operations FIFO queue.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.Finish">
            <summary>
            Triggered when worker is being finalized. This is a hash table worker, so no actions are needed.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.ProcessItem(CMS.Membership.SessionsCachingAction)">
            <summary>
            Process item in the queue.
            </summary>
            <param name="item">Queued item.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.UpsertSiteSessionAsync(System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32},CMS.Membership.SessionInfo)">
            <summary>
            Update or insert user's site session.
            </summary>
            <param name="siteName">Name of the site visited by user</param>
            <param name="isAuthenticated">Users has been authenticated and will be stored in collection of authenticated users</param>
            <param name="isHidden">Users is hidden and will be stored in collection of hidden users</param>
            <param name="userId">Session user identifier</param>
            <param name="session">Session info to store in memory</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.RemoveSessionsAsync(System.Int32)">
            <summary>
            Remove user session from all sites in sessions hashtables.
            </summary>
            <param name="userId">User identifier</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.ChangeSiteNameAsync(System.String,System.String)">
            <summary>
            Re-indexes sessions hashtable - changes key from old site name to new site name.
            </summary>
            <param name="oldSiteName">Old site name</param>
            <param name="newSiteName">New site name</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.ClearAsync(System.String)">
            <summary>
            Clears all information from session management about specified site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetSessions(System.String,System.Boolean)">
            <summary>
            Get authenticated sessions registered in hashtables.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Get session from specific site or from all sites.</param>
            <param name="onlyAuthenticated">Get only authenticated sessions</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetSession(System.String,System.String)">
            <summary>
            Get specific session info.
            This operation is not queued and not bound to a single hash table state, so it can provide invalid information.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Site name where the session resides.</param>
            <param name="sessionId">Session identifier by which it is indexed in hashtables.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetAuthenticatedUsersCount(System.String)">
            <summary>
            Get the number of authenticated users. Do not include hidden users.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Get the number for specific site or for all sites.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetHiddenUsersCount(System.String)">
            <summary>
            Get the number of hidden users.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Get the number for specific site or for all sites.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetPublicUsersCount(System.String)">
            <summary>
            Get the number of public users.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Get the number for specific site or for all sites.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetAuthenticatedUsers(System.String)">
            <summary>
            Get IDs of authenticated users on given site. Includes IDs of hidden users.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Site to check user on, or NULL if all sites shall be checked.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.IsUserAuthenticated(System.String,System.Int32,System.Boolean)">
            <summary>
            Finds out whether the user is authenticated on given site.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Name of user's site.</param>
            <param name="userId">User session identifier.</param>
            <param name="allowHidden">Look for hidden users too.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.GetHiddenUsers(System.String)">
            <summary>
            Get IDs of hiden users on given site.
            This operation is not queued and executed as soon as the current item in queue finished processing.
            It means that operations that are in the queue when executing this method may not be yet applied to hashtable.
            </summary>
            <param name="siteName">Site to check user on, or NULL if all sites shall be checked.</param>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.UpsertSiteSessionInternal(CMS.Membership.SessionsCachingAction)">
            <summary>
            Update or insert user's site session.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.RemoveSessionInternal(CMS.Membership.SessionsCachingAction)">
            <summary>
            Remove user session from all sites in sessions hashtables.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.ChangeSiteNameInternal(CMS.Membership.SessionsCachingAction)">
            <summary>
            Re-indexes sessions hashtable - changes key from old site name to new site name.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.ClearInternal(CMS.Membership.SessionsCachingAction)">
            <summary>
            Clears all information from session management about specified site.
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionsCachingWorker.ProcessSessions``1(System.String,System.Func{System.Collections.Generic.IEnumerable{CMS.Membership.SessionsInfo},``0})">
            <summary>
            Runs given function against session collections.
            </summary>
            <remarks>
            In order to keep shared sessions hashtable thread-safe, always materialize enumerable collections in <paramref name="collectionProcessor"/>.
            </remarks>
            <typeparam name="T">Return type of passed function</typeparam>
            <param name="siteName">When specified, given function is run only against session collection that belongs to specified site.</param>
            <param name="collectionProcessor">Function to process session collections.</param>
            <returns>Function result</returns>
        </member>
        <member name="P:CMS.Membership.SessionsCachingWorker.DefaultInterval">
            <summary>
            Gets the interval in milliseconds for the worker (default 100ms)
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionsInfo">
            <summary>
            Class contains hashtables for session management.
            This class serves internally for the sessions management and related on-line users feature.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.SessionsKeys">
            <summary>
            Gets the sessions collection keys.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.Sessions">
            <summary>
            Collection of sessions indexed by string session identifiers.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.AuthenticatedSessions">
            <summary>
            Collection of string session identifiers indexed by integer authenticated users identifiers.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.HiddenSessions">
            <summary>
            Collection of string session identifiers indexed by integer hidden users identifiers.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.PublicUsers">
            <summary>
            Number of public users.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.AuthenticatedUsers">
            <summary>
            Number of authenticated users.
            </summary>
        </member>
        <member name="P:CMS.Membership.SessionsInfo.HiddenUsers">
            <summary>
            Number of hidden users.
            </summary>
        </member>
        <member name="T:CMS.Membership.SessionSynchronization">
            <summary>
            Web farm synchronization for session
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionSynchronization.Init">
            <summary>
            Initializes the tasks for media files synchronization
            </summary>
        </member>
        <member name="M:CMS.Membership.SessionSynchronization.AddUserToKicked(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Adds user to the kicked users
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="M:CMS.Membership.SessionSynchronization.RemoveUserFromKicked(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Removes users from the kicked users 
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="M:CMS.Membership.SessionSynchronization.RemoveUser(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Removes the user session
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="M:CMS.Membership.SessionSynchronization.RemoveAuthenticatedUser(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Removes the authenticated user session
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="M:CMS.Membership.SessionSynchronization.UpdateDatabaseSession(System.String,System.String,CMS.Core.BinaryData)">
            <summary>
            Updates the database session
            </summary>
            <param name="target">Task target</param>
            <param name="data">Task data</param>
            <param name="binaryData">Task binary data</param>
        </member>
        <member name="T:CMS.Membership.SessionTaskType">
            <summary>
            Web farm tasks for session operations
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionTaskType.AddUserToKicked">
            <summary>
            Adds user to the kicked users
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionTaskType.RemoveUserFromKicked">
            <summary>
            Removes users from the kicked users 
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionTaskType.RemoveUser">
            <summary>
            Removes the user session
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionTaskType.RemoveAuthenticatedUser">
            <summary>
            Removes the authenticated user session
            </summary>
        </member>
        <member name="F:CMS.Membership.SessionTaskType.UpdateDatabaseSession">
            <summary>
            Updates the database session
            </summary>
        </member>
        <member name="T:CMS.Membership.DeleteNonActivatedUser">
            <summary>
            Class contains definition of delete non activated users task.
            </summary>
        </member>
        <member name="M:CMS.Membership.DeleteNonActivatedUser.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Task execution method.
            </summary>
            <param name="task">Task to execute</param>        
        </member>
        <member name="T:CMS.Membership.MembershipReminder">
            <summary>
            Provides an ITask interface to send notifications to users about their expiring memberships.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipReminder.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the task.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Membership.MembershipReminder.GetNotificationEmail(CMS.Membership.MembershipReminder.NotificationData)">
            <summary>
            Returns notification email message according to given notification data.
            </summary>
            <param name="notification">Notification data</param>
        </member>
        <member name="M:CMS.Membership.MembershipReminder.GetNotificationEmailMacroResolver(CMS.Membership.MembershipReminder.NotificationData)">
            <summary>
            Get macro resolver for expiring memberships notification email.
            </summary>
            <param name="notification">Notification data</param>
        </member>
        <member name="T:CMS.Membership.MembershipReminder.NotificationData">
            <summary>
            Represents membership expiration notification data.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipReminder.NotificationData.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipReminder.NotificationData.UserEmail">
            <summary>
            User e-mail
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipReminder.NotificationData.MembershipsTable">
            <summary>
            Table with user expiring memberhips.
            </summary>
        </member>
        <member name="T:CMS.Membership.RemoveExpiredSessions">
            <summary>
            Provides an ITask interface to update database.
            </summary>
        </member>
        <member name="M:CMS.Membership.RemoveExpiredSessions.Execute">
            <summary>
            Overload method which is executed by scheduler.
            </summary>
        </member>
        <member name="T:CMS.Membership.UpdateDatabaseSession">
            <summary>
            Provides an ITask interface to remove expired sessions form hashtables and database. 
            </summary>
        </member>
        <member name="M:CMS.Membership.UpdateDatabaseSession.Execute">
            <summary>
            Overload method which is executed by scheduler.
            </summary>
        </member>
        <member name="T:CMS.Membership.FriendshipStatusEnum">
            <summary>
            Friendship status enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.FriendshipStatusEnum.Waiting">
            <summary>
             Waiting
            </summary>
        </member>
        <member name="F:CMS.Membership.FriendshipStatusEnum.Rejected">
            <summary>
             Rejected
            </summary>
        </member>
        <member name="F:CMS.Membership.FriendshipStatusEnum.Approved">
            <summary>
             Approved
            </summary>
        </member>
        <member name="F:CMS.Membership.FriendshipStatusEnum.None">
            <summary>
             None
            </summary>
        </member>
        <member name="T:CMS.Membership.UserPrivilegeLevelEnum">
            <summary>
            User privilege level enum
            </summary>
        </member>
        <member name="F:CMS.Membership.UserPrivilegeLevelEnum.None">
            <summary>
            User has no privilege level
            </summary>
        </member>
        <member name="F:CMS.Membership.UserPrivilegeLevelEnum.Editor">
            <summary>
            User is able to use administration interface
            </summary>
        </member>
        <member name="F:CMS.Membership.UserPrivilegeLevelEnum.Admin">
            <summary>
            User can use all applications except the global applications and functionality
            </summary>
        </member>
        <member name="F:CMS.Membership.UserPrivilegeLevelEnum.GlobalAdmin">
            <summary>
            User can use all applications and functionality without any exceptions
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSettingsInfo">
            <summary>
            UserSettingsInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.MAX_RECENTLY_USED_WEBPARTS">
            <summary>
            Maximum number of recently used web parts.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.MAX_RECENTLY_USED_WIDGETS">
            <summary>
            Maximum number of recently used widgets.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserCustomData">
            <summary>
            User custom data.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserPreferences">
            <summary>
            User custom data.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserRegistrationInfo">
            <summary>
            Contains information of user registration.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserDialogsConfiguration">
            <summary>
            Contains information about user dialogs settings.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserSettingsInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserSettingsInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.LoadDefaultData">
            <summary>
            Loads the object default data
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.UpdateRecentlyUsedWebPart(System.String)">
            <summary>
            Updates information about which webparts user used recently.
            </summary>        
            <param name="webPartName">Web part name</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.UpdateRecentlyUsedWidget(System.String)">
            <summary>
            Updates information about which widgets user used recently.
            </summary>        
            <param name="widgetName">Widget codename</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.UpdateRecentlyUsedObject(System.String,System.String,System.Int32)">
            <summary>
             Returns updated version of last used object.
            </summary>
            <param name="codename">Codename of last used object</param>
            <param name="codenames">List of all used object</param>
            <param name="maxValue">Size of list with objects</param>        
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDialogsConfiguration">
            <summary>
            Gets or sets the XmlData object with information about user dialogs settings.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSettingsUserGUID">
            <summary>
            User guid.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSettingsID">
            <summary>
            User settings ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSettingsUserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserCampaign">
            <summary>
            User campaign.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserWaitingForApproval">
            <summary>
            Indicates whether user is waiting for approval.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserLogActivities">
            <summary>
            Indicates whether logging activities is enabled for this user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserActivationDate">
            <summary>
            Date of user's activation.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSignature">
            <summary>
            User signature.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPicture">
            <summary>
            User picture.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserAvatarID">
            <summary>
            User avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserAvatarType">
            <summary>
            User avatar type.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserNickName">
            <summary>
            User nick name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserActivatedByUserID">
            <summary>
            User Activated by user ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserMessagingNotificationEmail">
            <summary>
            Messaging notification email address.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserCustomData">
            <summary>
            User custom data.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserRegistrationInfo">
            <summary>
            User registration info.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPreferences">
            <summary>
            User preferences.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserTimeZoneID">
            <summary>
            User time zone ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserURLReferrer">
            <summary>
            URL Referrer of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserBadgeID">
            <summary>
            User badge ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserShowIntroductionTile">
            <summary>
            Indicates whether the introduction tile should be displayed in dashboard.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserActivityPoints">
            <summary>
            User activity points.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserForumPosts">
            <summary>
            User forum posts.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserBlogComments">
            <summary>
            User blog comments.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserMessageBoardPosts">
            <summary>
            User message board posts.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserGender">
            <summary>
            User gender.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDateOfBirth">
            <summary>
            User date of birth.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.WindowsLiveID">
            <summary>
            Windows LiveID user identification token.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserFacebookID">
            <summary>
            Facebook user identification token.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserLinkedInID">
            <summary>
            LinkedIn user id.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserBlogPosts">
            <summary>
            Total count of all user posts.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDescription">
            <summary>
            Description of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserUsedWebParts">
            <summary>
            Sets or gets user used web parts.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserUsedWidgets">
            <summary>
            Sets or gets user used widgets.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPasswordRequestHash">
            <summary>
            Gets or sets user password change request hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserInvalidLogOnAttempts">
            <summary>
            Gets or sets number of user invalid logon attempts
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserInvalidLogOnAttemptsHash">
            <summary>
            Gets or sets user invalid logon attempts hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPasswordLastChanged">
            <summary>
            Gets or sets time of last password change
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserAccountLockReason">
            <summary>
            Gets or sets number representing reason for user account lock
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDataComUser">
            <summary>
            Gets or sets username used for Data.com communication.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDataComPassword">
            <summary>
            Gets or sets password used for Data.com communication.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDashboardApplications">
            <summary>
            Gets or sets list of serialized applications guids saved for the current user. 
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSettingsInfoProvider">
            <summary>
            Class providing UserSettingsInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfoByUser(System.Int32)">
            <summary>
            Returns UserSettings info for specified user.
            </summary>
            <param name="userId">User whose Settings info is to be returned</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfo(System.Int32)">
            <summary>
            Returns the UserSettingsInfo structure for the specified userSettings.
            </summary>
            <param name="userSettingsId">UserSettings id</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettings">
            <summary>
            Returns the query for all user settings.
            </summary>   
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.SetUserSettingsInfo(CMS.Membership.UserSettingsInfo)">
            <summary>
            Sets (updates or inserts) specified userSettings.
            </summary>
            <param name="userSettings">UserSettings to set</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.DeleteUserSettingsInfo(CMS.Membership.UserSettingsInfo)">
            <summary>
            Deletes specified userSettings.
            </summary>
            <param name="infoObj">UserSettings object</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.DeleteUserSettingsInfo(System.Int32)">
            <summary>
            Deletes specified userSettings.
            </summary>
            <param name="userSettingsId">UserSettings id</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfoByUserInternal(System.Int32)">
            <summary>
            Returns UserSettings info for specified user.
            </summary>
            <param name="userId">User whose Settings info is to be returned</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfoInternal(System.Int32)">
            <summary>
            Returns the UserSettingsInfo structure for the specified userSettings.
            </summary>
            <param name="userSettingsId">UserSettings id</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.SetUserSettingsInfoInternal(CMS.Membership.UserSettingsInfo)">
            <summary>
            Sets (updates or inserts) specified userSettings.
            </summary>
            <param name="userSettings">UserSettings to set</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.DeleteUserSettingsInfoInternal(CMS.Membership.UserSettingsInfo)">
            <summary>
            Deletes specified userSettings.
            </summary>
            <param name="infoObj">UserSettings object</param>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfoProvider.DeleteCustomAvatars">
            <summary>
            Defines whether to delete custom avatar along with user settings object (if exists).
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsRoleListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsRoleListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserSettingsRoleListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserSettingsRoleListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.UserAccountLockEnum">
            <summary>
            Enum describing reason for locking user account
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockEnum.DisabledManually">
            <summary>
            User account was disabled manually.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockEnum.PasswordExpired">
            <summary>
            User account was disabled because his password expired.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockEnum.MaximumInvalidLogonAttemptsReached">
            <summary>
            User account was disabled because user reach maximum invalid logon attempts.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserAccountLockCode">
            <summary>
            Page mode code.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockCode.DisabledManually">
            <summary>
            User account was disabled manually.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockCode.PasswordExpired">
            <summary>
            User account was disabled because his password expired.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockCode.MaximumInvalidLogonAttemptsReached">
            <summary>
            User account was disabled because user reach maximum invalid logon attempts.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserAccountLockCode.GetLockEnumFromString(System.String)">
            <summary>
            Gets the user account lock enumeration from the string value.
            </summary>
            <param name="userAccountLock">User account lock string</param>
        </member>
        <member name="M:CMS.Membership.UserAccountLockCode.ToEnum(System.Int32)">
            <summary>
            Returns the enumeration representation of the user account lock code.
            </summary>
            <param name="code">User account lock code</param>
        </member>
        <member name="M:CMS.Membership.UserAccountLockCode.FromEnum(CMS.Membership.UserAccountLockEnum)">
            <summary>
            Returns the user account lock code from the enumeration value.
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="T:CMS.Membership.UserCultureInfo">
            <summary>
            UserCultureInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserCultureInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserCultureInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserCultureInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserCultureInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserCultureInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserCultureInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserCultureInfo.CultureID">
            <summary>
            Culture ID.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserCultureInfoProvider">
            <summary>
            Class providing UserCultureInfo managment.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultures">
            <summary>
            Returns the query for all relationships between users and cultures.
            </summary>   
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultureInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the UserCultureInfo structure for the specified userCulture.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromAllCultures(System.Int32)">
            <summary>
            Deletes allowed cultures on all sites for given user.
            </summary>
            <param name="userId">ID of user</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromSite(System.Int32,System.Int32)">
            <summary>
            Removes user's allowed cultures for given site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.SetUserCultureInfo(CMS.Membership.UserCultureInfo)">
            <summary>
            Sets (updates or inserts) specified userCulture.
            </summary>
            <param name="userCulture">UserCulture to set</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.DeleteUserCultureInfo(CMS.Membership.UserCultureInfo)">
            <summary>
            Deletes specified UserCulture.
            </summary>
            <param name="infoObj">UserCulture object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromCulture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes user from given culture of the given site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromCulture(CMS.Membership.UserInfo,CMS.Localization.CultureInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Removes user from given culture of the given site.
            </summary>
            <param name="user">User info object</param>
            <param name="culture">Culture info object</param>
            <param name="site">Site info object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.AddUserToCulture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds user to allowed culture of the site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.AddUserToCulture(CMS.Membership.UserInfo,CMS.Localization.CultureInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Adds user to allowed culture of the site.
            </summary>
            <param name="user">User info object</param>
            <param name="culture">Culture info object</param>
            <param name="site">Site info object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultures(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets all allowed cultures for given user and site filtered by where condition and ordered by orderBy expression.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <returns>User's allowed cultures.</returns>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultureInfoInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the UserCultureInfo structure for the specified userCulture.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromAllCulturesInternal(System.Int32)">
            <summary>
            Deletes allowed cultures on all sites for given user.
            </summary>
            <param name="userId">ID of user</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromSiteInternal(System.Int32,System.Int32)">
            <summary>
            Removes user's allowed cultures for given site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.SetUserCultureInfoInternal(CMS.Membership.UserCultureInfo)">
            <summary>
            Sets (updates or inserts) specified userCulture.
            </summary>
            <param name="userCulture">UserCulture to set</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.DeleteUserCultureInfoInternal(CMS.Membership.UserCultureInfo)">
            <summary>
            Deletes specified userCulture.
            </summary>
            <param name="infoObj">UserCulture object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCulturesInternal(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets all allowed cultures for given user and site filtered by where condition and ordered by orderBy expression.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site, 0 for all sites</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <returns>User's allowed cultures.</returns>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.DeleteSiteAllowedCultureInternal(System.Int32,System.Int32)">
            <summary>
            Deletes allowed culture for all users on given site.
            </summary>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.AddUserToCultureInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds user to allowed culture of the site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="T:CMS.Membership.UserGenderEnum">
            <summary>
            User gender enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserGenderEnum.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserGenderEnum.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserGenderEnum.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserInfoProvider">
            <summary>
            Class providing UserInfo management.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.LIVEID_USERS_PREFIX">
            <summary>
            Registred Windows Live users will have this prefix in username.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.OPENID_USERS_PREFIX">
            <summary>
            Registered OpenID users will have this prefix in username.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.OPENID_FULLNAME_PREFIX">
            <summary>
            Registered OpenID users will have this prefix in fullname.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.FACEBOOKID_USERS_PREFIX">
            <summary>
            Registered Facebook users will have this prefix in username.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.FACEBOOKID_FULLNAME_PREFIX">
            <summary>
            Registered Facebook users will have this prefix in username.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.LINKEDIN_USERS_PREFIX">
            <summary>
            Registered LinkedIn users will have this prefix in username.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.LINKEDIN_FULLNAME_PREFIX">
            <summary>
            Registered LinkedIn users will have this prefix in fullname.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.USER_ENABLED_WHERE_CONDITION">
            <summary>
            Where condition indicating that user is enabled
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.SHA2SALT">
            <summary>
            Constant for password format SHA2 with salt.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.mLicGlobalAdmins">
            <summary>
            License limitations for global admins
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.mLicSiteMembers">
            <summary>
            License limitations for site members
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.mLicEditors">
            <summary>
            License limitations for editors
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.mSitePrefixRegex">
            <summary>
            Static regex for site user prefixes
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.InvalidateUser(System.Int32)">
            <summary>
            Invalidates the specified user
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetSearchWhereCondition(CMS.Search.SearchIndexInfo)">
            <summary>
            Returns smart search where condition for indexing.
            </summary>
            <param name="srchInfo">Index info</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullName(System.String,System.String,System.String)">
            <summary>
            Returns user's full name
            </summary>
            <param name="firstName">User's first name</param>
            <param name="middleName">User's middle name</param>
            <param name="lastName">User's last name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetSearchDocuments(CMS.Search.SearchIndexInfo,System.String,System.Int32)">
            <summary>
            Returns top 15 search documents for current scope.
            </summary>
            <param name="indexInfo">Search index info</param>
            <param name="whereCondition">Additional where condition</param>
            <param name="lastUserId">Last record user id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserName">
            <summary>
            Gets currently logged user name. The user name is safe if the UseSafeUserName is enabled.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserName(System.String)">
            <summary>
            Gets currently logged user name. The user name is safe if the UseSafeUserName is enabled.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.NameIsReserved(System.String,System.String)">
            <summary>
            Returns true if specified name is defined in reserved names.
            </summary>
            <param name="siteName">SiteName</param>
            <param name="username">User name or nickname</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsEmailUnique(System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if email doesn't exist in users table. 
            Depends on 'Unique e-mails' and 'Shared user accounts' settings
            </summary>
            <param name="email">E-mail</param>
            <param name="user">Current user which should be checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsUserNamePrefixUnique(System.String,System.Int32)">
            <summary>
            Test if there is any site prefix username (f.e. 'site.{GUID}.{Name}' and '{Name}' is not allowed at the same time).
            Should be checked if site prefixes are disabled but user names with site prefixes may exist in the system.
            </summary>
            <param name="userName">User name to test. Must be without 'site.GUID' prefix</param>
            <param name="userID">ID of tested user</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsEmailUnique(System.String,System.String,System.Int32)">
            <summary>
            Returns true if email doesn't exist in users table. 
            Depends on 'Unique e-mails' and 'Shared user accounts' settings
            </summary>
            <param name="email">E-mail</param>
            <param name="siteName">One or more site names separated by semicolon</param>
            <param name="currentUserId">Current user id, if is 0 => new user</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsEmailUnique(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Returns true if email doesn't exist in users table. 
            Depends on 'Unique e-mails' and 'Shared user accounts' settings
            </summary>
            <param name="email">E-mail</param>
            <param name="siteNames">One or more site name</param>
            <param name="currentUserId">Current user id, if is 0 => new user</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoByGUID(System.Guid)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Object)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature</param>
            <param name="action">Action</param>
            <param name="currentStatus">License status</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.UpdateUserCounts(CMS.Membership.ActivityPointsEnum,System.Int32,System.Int32)">
            <summary>
            Updates user count with dependence on selected type of activity.
            </summary>
            <param name="type">Activity type</param>
            <param name="userId">User ID</param>
            <param name="points">Points</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfo(System.Int32)">
            <summary>
            Returns the UserInfo structure for the specified user.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfo(System.String)">
            <summary>
            Returns the UserInfo structure for the specified user.
            </summary>
            <param name="userName">UserName</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetUserInfo(CMS.Membership.UserInfo)">
            <summary>
            Sets (updates or inserts) specified user.
            </summary>
            <param name="user">User to set</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUser(CMS.Membership.UserInfo)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userObj">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUser(System.Int32)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUser(System.String)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRoles(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Get top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRoles(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N records</param>
            <param name="columns">Columns to get</param>
            <param name="includeMembership">If true, membership roles are added</param>
            <param name="includeGlobal">If true, global roles are added</param>
            <param name="checkValidity">If true, only valid roles are selected</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserMembershipRoles(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user roles given by membership connection.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Get top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRoles(CMS.Membership.UserInfo)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserSites(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user sites.
            </summary>
            <param name="userId">User ID for site table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Get top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserSites(System.Int32)">
            <summary>
            Returns the table of the user sites.
            </summary>
            <param name="userId">User ID for site table</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserNameById(System.Int32)">
            <summary>
            Returns the UserName by the specified user ID.
            </summary>
            <param name="id">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerClass(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if user is granted with specified permission for particular class (document type).
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name for which check the permissions</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerClass(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if user is granted with specified permission for particular class (document type).
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name for which check the permissions</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRequiredResourceUsers(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required users for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRequiredResourceUsers(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets the DataSet of the required users for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Top N items</param>
            <param name="columns">List of columns to return</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUsers">
            <summary>
            Returns the query for all users.
            </summary>   
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullUserInfo(System.Int32)">
            <summary>
            Returns the UserInfo structure for the specified user also with UserSettings.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullUserInfo(System.String)">
            <summary>
            Returns the UserInfo structure for the specified user also with UserSettings.
            </summary>
            <param name="userName">UserName</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ClearLicenseValues">
            <summary>
            Clear license values.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.TrimSitePrefix(System.String)">
            <summary>
            Trims site prefix from user name (if any prefix found)
            </summary>
            <param name="username">User name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckUserBelongsToSite(CMS.Membership.UserInfo,System.String)">
            <summary>
            Check if user belongs to specified site, considering settings key CMSSiteSharedAccounts.
            </summary>
            <param name="user">UserInfo</param>
            <param name="siteName">SiteName</param>
            <returns>Returns same userinfo if user belongs to site(if shared accounts disabled) or null if not</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPreferredCultures(CMS.Membership.UserInfo)">
            <summary>
            Sets the preferred culture codes from given user object.
            </summary>
            <param name="user">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureRolesAndSitesForWindowsAuthentication(CMS.Membership.UserInfo)">
            <summary>
            Ensures that roles and sites for the given user are present within the database. Used in case of Windows authentication.
            </summary>
            <param name="uInfo">Source user info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureRolesAndSites(CMS.Membership.UserInfo)">
            <summary>
            Ensures that roles and sites for the given user are present within the database.
            </summary>
            <param name="uInfo">Source user info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.AddUserToRole(System.String,System.String,System.String)">
            <summary>
            Adds the specified user to the role of site.
            </summary>
            <param name="userName">User name to add to role</param>
            <param name="roleName">Role name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.AddUserToRole(System.Int32,System.Int32)">
            <summary>
            Adds the specified user to the role of site.
            </summary>
            <param name="userId">User ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromRole(System.String,System.String,System.String)">
            <summary>
            Removes specified user from the role.
            </summary>
            <param name="userName">User name to remove</param>
            <param name="roleName">Role name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
            Removes specified user from the role.
            </summary>
            <param name="userId">User ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.AddUserToSite(System.String,System.String)">
            <summary>
            Adds the specfied user to the site.
            </summary>
            <param name="userName">User name to add</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromSite(System.Int32,System.Int32)">
            <summary>
            Removes the user from the specified site.
            </summary>
            <param name="userId">User ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromSite(System.String,System.String)">
            <summary>
            Removes the user from the specified site.
            </summary>
            <param name="userName">User name to remove</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerResource(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerResource(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementName">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,CMS.Membership.UserInfo)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementNames">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementNames">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="checkElementsOnly">Indicates if only UI elements will be checked, not settings or special role membership</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,CMS.Membership.UserInfo,System.Boolean,System.Boolean)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementNames">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="checkElementsOnly">Indicates if only UI elements will be checked, not settings or special role membership</param>
            <param name="checkGlobalRoles">Indicates if global roles should be checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElementInternal(System.Collections.Hashtable,System.Collections.Generic.IEnumerable{System.String},CMS.Membership.UserInfo,System.String)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="elements">Hashatable with elemenets rights</param>
            <param name="elementNames">Names of elements</param>
            <param name="userInfo">User info</param>
            <param name="resourceName">Name of resource</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerMetaFile(System.String,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(CMS.DataEngine.BaseInfo,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="info">InfoObject to check</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(CMS.DataEngine.BaseInfo,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="info">InfoObject to check</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(System.String,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(System.String,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(System.String,System.Int32,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckLicense(CMS.Membership.UserPrivilegeLevelEnum,CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="privilegeLevel">Privilege level of user to be checked</param>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUsersDataWithSettings">
            <summary>
            Returns object query for users with settings data
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullUsers(System.String,System.String)">
            <summary>
            Returns dataset with users with their settings according to WHERE condition sorted by ORDER BY expression.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="orderBy">ORDER BY expression</param>        
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullUsers(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset with users with ther settings according to WHERE condition sorted by ORDER BY expression.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="orderBy">ORDER BY expression</param> 
            <param name="topN">Top N users</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserResourcePermissions(CMS.Membership.UserInfo,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns the DataSet with user permissions for specified resource.
            </summary>
            <param name="user">User info object</param>
            <param name="siteId">Site ID</param>
            <param name="resourceId">ID of the resource</param>
            <param name="displayedOnly">Indicates if only visible permissions should be get</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserDataClassPermissions(CMS.Membership.UserInfo,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns the DataSet with user permissions for specified class.
            </summary>
            <param name="user">User info object</param>
            <param name="siteId">Site ID</param>
            <param name="classId">ID of the class</param>
            <param name="displayedOnly">Indicates if only visible permissions should be get</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureSitePrefixUserName(System.String,CMS.SiteProvider.SiteInfo)">
            <summary>
            If CMSUseSitePrefixForUserName is switched on, add site prefix to user name
            </summary>
            <param name="userName">User name</param>
            <param name="si">Site info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoForSitePrefix(System.String,CMS.SiteProvider.SiteInfo)">
            <summary>
            Return user info by codename. If Site prefix switched on - test site prefix variant of user name first
            </summary>
            <param name="userName">User name</param>
            <param name="si">Site info object</param>        
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsSitePrefixedUser(System.String)">
            <summary>
            Returns true, is user name has site prefix
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.UserNameSitePrefixEnabled(System.String)">
            <summary>
            Returns true, if site prefix for users is enabled
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(CMS.Membership.UserInfo,System.String)">
            <summary>
            Sets the password for the specified user object, saves the user object.
            </summary>
            <param name="ui">User info</param>
            <param name="userPassword">User password</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(CMS.Membership.UserInfo,System.String,System.Boolean)">
            <summary>
            Sets the password for the specified user object, does not save the user object.
            </summary>
            <param name="ui">User info</param>
            <param name="userPassword">User password</param>
            <param name="saveObject">Specifies whether object is saved into database.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckUserForHashGeneration(CMS.Membership.UserInfo)">
            <summary>
            Checks if password hash can be generated properly.
            </summary>
            <param name="ui">User info.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(System.String,System.String)">
            <summary>
            Sets the password for the specified user. Saves object to database.
            </summary>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(System.String,System.String,System.Boolean)">
            <summary>
            Sets the password for the specified user.
            </summary>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
            <param name="saveObject">Specifies whether object is saved into database.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetPasswordHash(System.String,System.String,System.String)">
            <summary>
            Returns the hashed password representation (is hashing on).
            </summary>
            <param name="password">Password to hash</param>
            <param name="passwordFormat">Format of the password</param>
            <param name="salt">Password salt</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsUserPasswordDifferent(CMS.Membership.UserInfo,System.String)">
            <summary>
            Indicates if user password differs from specified password
            </summary>
            <param name="ui">User to check password difference</param>
            <param name="password">Password to check</param>
            <returns>True if specified password differs from user password, False if the passwords are the same</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateNewPassword">
            <summary>
            Returns new 8 characters length password which contains alphanumeric characters and punctation characters.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateNewPassword(System.String)">
            <summary>
            Returns new password according to password policy.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ValidateCodeName(CMS.Membership.UserInfo)">
            <summary>
            Returns always true in this provider because user names could contain special characters.
            </summary>
            <param name="info">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFormattedUserName(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns formatted username in format: fullname (nickname) if nicname specified otherwise fullname (username).
            Allows you to customize how the usernames will look like throughout the admin UI. 
            </summary>
            <param name="username">Source user name</param>
            <param name="fullname">Source full name</param>
            <param name="nickname">Source user nick name</param>
            <param name="isLiveSite">Indicates if returned username should be displayed on live site</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoByFacebookConnectID(System.String)">
            <summary>
            Returns user with specified Facebook Connect ID.
            </summary>
            <param name="facebookUserId">Facebook Connect ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoByLinkedInID(System.String)">
            <summary>
            Returns user with specified LinkedIn ID.
            </summary>
            <param name="linkedInUserId">LinkedIn profile Id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoByWindowsLiveID(System.String)">
            <summary>
            Returns UserInfo related to WindowsLive ID.
            </summary>
            <param name="userLiveId">Windows LiveID</param>
            <returns>Returns UserInfo if found, otherwise returns NULL</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckLicenseLimitation(CMS.Membership.UserInfo,System.String@)">
            <summary>
            Checks license limitation for provider UserInfo. Checks limitations for global administrator, editor and site members.
            </summary>
            <param name="ui">UserInfo to be checked</param>
            <param name="error">Will contain error message if license check failed</param>
            <returns>Returns TRUE if limitation check is passed. Returns FALSE otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoWithSettings(System.String)">
            <summary>
            Returns user info object with settings according to where condition.
            </summary>
            <param name="where">Where condition.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoByGUIDInternal(System.Guid)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoInternal(System.Int32)">
            <summary>
            Returns the UserInfo structure for the specified user.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoInternal(System.String)">
            <summary>
            Returns the UserInfo structure for the specified user.
            </summary>
            <param name="userName">UserName</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetUserInfoInternal(CMS.Membership.UserInfo)">
            <summary>
            Sets (updates or inserts) specified user.
            </summary>
            <param name="user">User to set</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUserInternal(CMS.Membership.UserInfo)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userObj">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoForSitePrefixInternal(System.String,CMS.SiteProvider.SiteInfo)">
            <summary>
            Return user info by codename. If Site prefix switched on - test site prefix variant of user name first
            </summary>
            <param name="userName">User name</param>
            <param name="si">Site info object</param>    
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.TrimSitePrefixInternal(System.String)">
            <summary>
            Trimes site prefix from user name (if any prefix found)
            </summary>
            <param name="username">User name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsSitePrefixedUserInternal(System.String)">
            <summary>
            Returns true, is user name has site prefix
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureSitePrefixUserNameInternal(System.String,CMS.SiteProvider.SiteInfo)">
            <summary>
            If CMSUseSitePrefixForUserName is switched on, add site prefix to user name
            </summary>
            <param name="userName">User name</param>
            <param name="si">Site info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserMembershipRolesInternal(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user roles given by membership connection.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRolesInternal(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N records</param>
            <param name="columns">Columns to get</param>
            <param name="includeMembership">If true, membership roles are added</param>
            <param name="includeGlobal">If true, global roles are added</param>
            <param name="checkValidity">If true, only valid roles are selected</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserSitesInternal(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user sites.
            </summary>
            <param name="userId">User ID for site table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Get top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserNameByIdInternal(System.Int32)">
            <summary>
            Returns the UserName by the specified user ID.
            </summary>
            <param name="id">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerClassInternal(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if user is granted with specified permission for particular class.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name for which check the permissions</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRequiredResourceUsersInternal(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets the DataSet of the required users for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Top N items</param>
            <param name="columns">List of columns to return</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoWithSettingsInternal(System.String)">
            <summary>
            Returns user info object with settings according to where condition.
            </summary>
            <param name="where">Where condition.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserPermissions(CMS.Membership.UserInfo,System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Returns the DataSet of user permissions for permission type specified by ID.
            </summary>
            <param name="user">User info object</param>
            <param name="siteId">Site ID</param>
            <param name="permissionTypeId">ID identifying the permission</param>
            <param name="permissionType">Type of the permission(class or resource)</param>
            <param name="displayedOnly">Indicates if only visible permissions should be get</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetPasswordHashInternal(System.String,System.String,System.String)">
            <summary>
            Returns the hashed password representation (is hashing on).
            </summary>
            <param name="password">Password to hash</param>
            <param name="passwordFormat">Format of the password</param>
            <param name="salt">Password salt</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateNewPasswordInternal">
            <summary>
            Returns new 8 characters length password which contains alphanumeric characters and punctation characters.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateNewPasswordInternal(System.String)">
            <summary>
            Returns new password according to password policy.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.UpdateUserInHashtablesInternal(CMS.Membership.UserInfo)">
            <summary>
            Updates user object in hashtables
            </summary>
            <param name="user">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureRolesAndSitesInternal(CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Ensures that roles and sites for the given user are present within the database.
            </summary>
            <param name="user">Source user info object</param>
            <param name="isWindowsAuth">Indicates if ensuring Windows authentication roles.</param>
        </member>
        <member name="E:CMS.Membership.UserInfoProvider.OnFormattedUserName">
            <summary>
            Event for formatting user name
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.SitePrefixRegex">
            <summary>
            Get regex for detect site prefix username
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LicGlobalAdmins">
            <summary>
            License limitations for global admins
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LicSiteMembers">
            <summary>
            License limitations for site members
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LicEditors">
            <summary>
            License limitations for editors
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UserSaltColumn">
            <summary>
            User salt custom column.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LogUserCounts">
            <summary>
            Gets or sets the value that indicates whether user counts settings should be checked.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.PasswordSalt">
            <summary>
            Gets or sets password salt.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UserCountsEnabled">
            <summary>
            Gets the value that indicates whether user counts are enabled.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UseSafeUserName">
            <summary>
            Indicates whether to use safe or normal user names.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UseSafeRoleName">
            <summary>
            Indicates whether to use safe or normal role names.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.DefaultUser">
            <summary>
            Default user set in CMSDefaultUser setting.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserInfoProvider.FormattedUserNameEventHandler">
            <summary>
            Delegate used for formatting user name
            </summary>
            <param name="username">Source user name</param>
            <param name="fullname">Source full name</param>
            <param name="nickname">Source nick name</param>
            <param name="isLiveSite">Indicates if returned username should be displayed on live site</param>
        </member>
        <member name="F:CMS.Membership.UserListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserListInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.UserListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="P:CMS.Membership.UserListInfo.ColumnNames">
            <summary>
            Returns the object column names
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSiteInfo">
            <summary>
            UserSiteInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSiteInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSiteInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserSiteInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserSiteInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserSiteID">
            <summary>
            Record's site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserPreferredCurrencyID">
            <summary>
            ID of the users's preferred currency.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserPreferredPaymentOptionID">
            <summary>
            ID of the users's preferred payment option.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserPreferredShippingOptionID">
            <summary>
            ID of the users's preferred shipping option.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSiteInfoProvider">
            <summary>
            Class providing UserSiteInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetUserSiteInfo(System.Int32,System.Int32)">
            <summary>
            Returns the UserSiteInfo structure for the specified userSite.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.SetUserSiteInfo(CMS.Membership.UserSiteInfo)">
            <summary>
            Sets (updates or inserts) specified userSite.
            </summary>
            <param name="userSite">UserSite to set</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.DeleteUserSiteInfo(CMS.Membership.UserSiteInfo)">
            <summary>
            Deletes specified userSite.
            </summary>
            <param name="infoObj">UserSite object</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.RemoveUserFromSite(System.Int32,System.Int32)">
            <summary>
            Deletes specified userSite.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.AddUserToSite(System.Int32,System.Int32)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.AddUserToSite(CMS.Membership.UserInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="ui">User info</param>
            <param name="si">Site info</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetUserSites">
            <summary>
            Returns the query for all relationships between users and sites.
            </summary>   
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetUserSiteInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the UserSiteInfo structure for the specified userSite.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.SetUserSiteInfoInternal(CMS.Membership.UserSiteInfo)">
            <summary>
            Sets (updates or inserts) specified userSite.
            </summary>
            <param name="userSite">UserSite to set</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.DeleteUserSiteInfoInternal(CMS.Membership.UserSiteInfo)">
            <summary>
            Deletes specified userSite.
            </summary>
            <param name="infoObj">UserSite object</param>
        </member>
    </members>
</doc>
