<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.EventLog</name>
    </assembly>
    <members>
        <member name="T:CMS.EventLog.EventLogSourceHelper">
            <summary>
            Helper class for registering event log source name to Windows event log.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogSourceHelper.EVENT_LOG_SOURCE_NAME">
            <summary>
            User-friendly name of event log source.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.RegisterSourceName(System.String)">
            <summary>
            Creates event log registration of application in registry.
            </summary>
            <param name="sourceName">Event source name (backslash "\" in source name is not allowed).</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.UnregisterSourceName(System.String)">
            <summary>
            Removes event log registration of application from registry.
            </summary>
            <param name="sourceName">Event source name (backslash "\" in source name is not allowed).</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.IsSourceNameRegistered(System.String)">
            <summary>
            Checks if event log source name is registered.
            </summary>
            <param name="sourceName">Event source name (backslash "\" in source name is not allowed).</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.RegisterInstance(System.String)">
            <summary>
            Registers instance to Windows event log.
            </summary>
            <param name="pathToWebConfig">Path to web.config</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.UnregisterInstance(System.String)">
            <summary>
            Unregisters instance from Windows event log.
            </summary>
            <param name="pathToWebConfig">Path to web.config</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.IsInstanceRegistered(System.String)">
            <summary>
            Checks if instance is registered in Windows event log.
            </summary>
            <param name="pathToWebConfig">Path to web.config</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.RegisterDefaultEventLogListener">
            <summary>
            Registers default event log trace listener.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.UnregisterDefaultEventLogListener">
            <summary>
            Unregisters default event log trace listener.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.GetSourceName(System.Boolean,System.String)">
            <summary>
            Loads application source name from web.config.
            </summary>
            <param name="pathToWebConfig">Path to web.config.</param>
            <param name="checkWebConfigPath">Indicates if web.config path should be checked</param>
        </member>
        <member name="M:CMS.EventLog.EventLogSourceHelper.SetupDefaultEventLogListener(System.Boolean)">
            <summary>
            Setups default event log trace listener.
            </summary>
            <param name="unregister">If true listener should be unregistered.</param>
        </member>
        <member name="P:CMS.EventLog.EventLogSourceHelper.UseEventLogTraceListener">
            <summary>
            Indicates if default event log trace listener should be used.
            </summary>
        </member>
        <member name="T:CMS.EventLog.AbstractEventLogStrategy">
            <summary>
            Provides abstract class for logging strategy.
            </summary>
        </member>
        <member name="T:CMS.EventLog.IEventLogStrategy">
            <summary>
            Provides interface for logging strategy
            </summary>
        </member>
        <member name="M:CMS.EventLog.IEventLogStrategy.LogEvent(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Writes a new event to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Event message.</param>
            <param name="exception">Exception to be logged</param>
        </member>
        <member name="M:CMS.EventLog.IEventLogStrategy.LogEvent(CMS.EventLog.EventLogInfo)">
            <summary>
            Writes a new event to the event log.
            </summary>
        </member>
        <member name="F:CMS.EventLog.AbstractEventLogStrategy.mNextChainedStrategy">
            <summary>
            Following strategy
            </summary>
        </member>
        <member name="M:CMS.EventLog.AbstractEventLogStrategy.AddChainedStrategy(CMS.EventLog.AbstractEventLogStrategy)">
            <summary>
            Add chained strategy.
            </summary>
            <param name="chainedStrategy">Following strategy connected in responsibility chain</param>
        </member>
        <member name="M:CMS.EventLog.AbstractEventLogStrategy.LogEvent(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Writes a new event to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Event message.</param>
            <param name="exception">Exception to be logged</param>
        </member>
        <member name="M:CMS.EventLog.AbstractEventLogStrategy.LogEvent(CMS.EventLog.EventLogInfo)">
            <summary>
            Writes a new event to the event log.
            </summary>
        </member>
        <member name="T:CMS.EventLog.DefaultLoggingStrategy">
            <summary>
            Provides default logging strategy.
            </summary>
        </member>
        <member name="M:CMS.EventLog.DefaultLoggingStrategy.LogEvent(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Detailed description of the event.</param>
            <param name="exception">Fired exception.</param>
        </member>
        <member name="M:CMS.EventLog.DefaultLoggingStrategy.LogEvent(CMS.EventLog.EventLogInfo)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventObject">EventLogInfo object.</param>
        </member>
        <member name="T:CMS.EventLog.EventLogWorker">
            <summary>
            Asynchronous thread running in background which logs the events to the event log
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogWorker.Initialize">
            <summary>
            Initializes the worker. Runs in the worker thread before the thread processes the first iteration.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogWorker.DoMaintenance">
            <summary>
            Reports the status to the thread log
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogWorker.ProcessItems(System.Collections.Generic.IEnumerable{CMS.EventLog.EventLogInfo})">
            <summary>
            Processes the items in the queue
            </summary>
            <param name="items">Items to process</param>
        </member>
        <member name="M:CMS.EventLog.EventLogWorker.ProcessItem(CMS.EventLog.EventLogInfo)">
            <summary>
            Processes the item in the queue
            </summary>
            <param name="item">Item to process</param>
        </member>
        <member name="M:CMS.EventLog.EventLogWorker.Finish">
            <summary>
            Finishes processing all the items remaining in the worker queue
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogWorker.DefaultInterval">
            <summary>
            Gets the interval in milliseconds for the worker (default 100ms)
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogWorker.MaintenanceInterval">
            <summary>
            Gets the maintenance interval in milliseconds (default 10s)
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogWorker.UseLogContext">
            <summary>
            Use the log context to report status
            </summary>
        </member>
        <member name="T:CMS.EventLog.PreventMultipleEventsLogStrategy">
            <summary>
            Provides strategy for logging events if they reach up expiration period. 
            </summary>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.#ctor">
            <summary>
            Creates PreventMultipleEventsLogStrategy with chained default logging strategy. 
            </summary>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.#ctor(CMS.EventLog.AbstractEventLogStrategy)">
            <summary>
            Creates PreventMultipleEventsLogStrategy with chained following strategy.
            </summary>
            <param name="chainedStrategy">Following logging strategy.</param>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.LogEvent(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Writes a new event to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Event message.</param>
            <param name="exception">Exception to be logged</param>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.LogEvent(CMS.EventLog.EventLogInfo)">
            <summary>
            Writes a new event to the event log.
            </summary>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.GetKey(System.String,System.String,System.String)">
            <summary>
            Return key for event.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.GetEventLogInfo(System.String,System.String,System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Creates EventLogInfo.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Event message.</param>
            <param name="exception">Exception to be logged</param>
            <param name="allowMultiple">If true, it is allowed to log this exception multiple times within the application run</param>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.SaveToLoggedEvents(System.String,System.DateTime)">
            <summary>
            Save to logged events.
            </summary>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.IsEventExpired(System.String)">
            <summary>
            Return if logged event is expired.
            </summary>
            <param name="key">Key for finding Event in logged events.</param>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.IsEventAlreadyLogged(System.String)">
            <summary>
            Return if event was already logged.
            </summary>
            <param name="key">Key for finding Event in logged events.</param>
        </member>
        <member name="M:CMS.EventLog.PreventMultipleEventsLogStrategy.EventShouldBeLogged(System.String)">
            <summary>
            Return if logged event is invalid. 
            </summary>
            <param name="key">Key for event entry in dictionary</param>
        </member>
        <member name="P:CMS.EventLog.PreventMultipleEventsLogStrategy.EventValidityExpirationPeriod">
            <summary>
            Sets period in minutes after that event will be expired.
            </summary>
        </member>
        <member name="P:CMS.EventLog.PreventMultipleEventsLogStrategy.ComparativeDateTime">
            <summary>
            DateTime record for events validity comparison. 
            </summary>
        </member>
        <member name="T:CMS.EventLog.LogContext">
            <summary>
            Provides the context for logging asynchronous events.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.MULTIPLE_OPERATION_SUFFIX">
            <summary>
            Suffix used during multiple event logging if MultipleOperationEventCode is not supplied.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.LOG_AFTER_EVENTS">
            <summary>
            Determines how many events should be logged at once.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.mLogs">
            <summary>
            Table of existing logs [GUID] -> [LogContext]
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.mLog">
            <summary>
            Current log.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.mMultipleOperationEventCode">
            <summary>
            Explicit event log code used when LogSingleEvents is false (case of multiple logging).
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.mLogGuid">
            <summary>
            Logs GUID.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.mLogSingleEvents">
            <summary>
            Indicates whether to log events one by one to event log.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.mEvent">
            <summary>
            Info object containing event.
            </summary>
        </member>
        <member name="F:CMS.EventLog.LogContext.eventLogCounter">
            <summary>
            Counter used for logging multiple events at once.
            </summary>
        </member>
        <member name="M:CMS.EventLog.LogContext.#ctor">
            <summary>
            Constructor - Registers the context within request.
            </summary>
        </member>
        <member name="M:CMS.EventLog.LogContext.#ctor(System.Guid)">
            <summary>
            Constructor - Registers the context within request.
            </summary>
        </member>
        <member name="M:CMS.EventLog.LogContext.Close">
            <summary>
            Closes the log.
            </summary>
        </member>
        <member name="M:CMS.EventLog.LogContext.AppendLine(System.String)">
            <summary>
            Appends text to the log.
            </summary>
            <param name="text">Text to append</param>
        </member>
        <member name="M:CMS.EventLog.LogContext.Append(System.String)">
            <summary>
            Appends text to the log.
            </summary>
            <param name="text">Text to append</param>
        </member>
        <member name="M:CMS.EventLog.LogContext.CloseCurrent">
            <summary>
            Drops the current log context.
            </summary>
        </member>
        <member name="M:CMS.EventLog.LogContext.CloseLog(System.Guid)">
            <summary>
            Closes given log context.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.EventLog.LogContext.EnsureLog(System.Guid)">
            <summary>
            Ensures the log for given GUID.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.EventLog.LogContext.LogExists(System.Guid)">
            <summary>
            Returns true if the given log exists.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.EventLog.LogContext.AppendText(System.String,System.Boolean)">
            <summary>
            Appends the text.
            </summary>
            <param name="text">Text to append</param>
            <param name="newLine">Append as new line</param>
        </member>
        <member name="M:CMS.EventLog.LogContext.RaiseOnChanged">
            <summary>
            Fires the onchanged event.
            </summary>
        </member>
        <member name="M:CMS.EventLog.LogContext.LogEvent(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (Security, Update, Delete, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
            <param name="eventUrl">Event URL address</param>
            <param name="userId">ID of the user, who caused logged event</param>
            <param name="userName">Name of the user, who caused logged event</param>
            <param name="nodeId">ID value of the document</param>
            <param name="documentName">NamePath value of the document</param>
            <param name="ipAddress">IP Address of the user, who caused logged event</param>
            <param name="siteId">ID of the site</param>
            <param name="machineName">Name of machine</param>
            <param name="urlReferrer">Referrer URL</param>
            <param name="userAgent">User agent</param>
            <param name="eventTime">Date and time when the event occurs</param>
        </member>
        <member name="E:CMS.EventLog.LogContext.OnChanged">
            <summary>
            Fires when the log has changed.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.Current">
            <summary>
            Gets or sets current log context.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.MaxLength">
            <summary>
            Maximum length of the log. If the length is exceeded, the log is trimmed to half, offset is set and the log continues.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.Offset">
            <summary>
            Offset of a partial log in a complete log
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.Log">
            <summary>
            Gets the current log.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.MultipleOperationEventCode">
            <summary>
            Explicit event log code used when LogSingleEvents is false (case of multiple logging).
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.LogGuid">
            <summary>
            Logs guid.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.LogSingleEvents">
            <summary>
            Indicates whether to log events one by one to event log.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.Event">
            <summary>
            Info object of type EventLogInfo.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.MachineName">
            <summary>
            Name of machine.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.UrlReferrer">
            <summary>
            Referrer url.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.UserAgent">
            <summary>
            Browser identification.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.IPAddress">
            <summary>
            IP address of client.
            </summary>
        </member>
        <member name="P:CMS.EventLog.LogContext.EventURL">
            <summary>
            URL of event.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogStrategies">
            <summary>
            Provides strategy for logging multiple events. 
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogStrategies.CurrentEventlogStrategy">
            <summary>
            Current Loggin strategy, if no strategy is selected the default one is used.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogStrategies.LoggedEventsBuffer">
            <summary>
            Stores logged events.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogService">
            <summary>
            Service to provide logging events
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogService.EnsureLog(System.Guid)">
            <summary>
            Ensures the log for given GUID.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogService.CloseLog(System.Guid)">
            <summary>
            Closes given log context.
            </summary>
            <param name="logGuid">Log GUID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogService.LogEvent(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
        </member>
        <member name="M:CMS.EventLog.EventLogService.LogException(System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Writes a new error to the event log.
            </summary>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="ex">Exception to be logged</param>
            <param name="allowMultiple">If true, it is allowed to log this exception multiple times within the application run</param>
        </member>
        <member name="P:CMS.EventLog.EventLogService.CurrentLogContext">
            <summary>
            Current log context
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogCleaner">
            <summary>
            Thread for deleting old event logs.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogCleaner.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="siteId">Site ID</param>
            <param name="logSize">Log size</param>
        </member>
        <member name="M:CMS.EventLog.EventLogCleaner.Run">
            <summary>
            Delete older event logs.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogCleaner.RunAsync">
            <summary>
            Run async thread to delete old logs.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogHelper">
            <summary>
             Class for event helper methods
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogHelper.mLogEventsToFile">
            <summary>
            Indicates if events are logged to the file.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogHelper.mLogFile">
            <summary>
            Logs file path.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogHelper.mLogFolder">
            <summary>
            Folder where log file will be saved.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogEventToFile(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Logs the query to file.
            </summary>
            <param name="eventType">Type of the event. I = information, E = error, W = warning</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (Security, Update, Delete, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
            <param name="eventUrl">Event URL address</param>
            <param name="userId">ID of the user, who caused logged event</param>
            <param name="userName">Name of the user, who caused logged event</param>
            <param name="nodeId">ID value of the document</param>
            <param name="documentName">NamePath value of the document</param>
            <param name="ipAddress">IP Address of the user, who caused logged event</param>
            <param name="siteId">ID of the site</param>
            <param name="machineName">Name of machine</param>
            <param name="eventUrlReferrer">URL referrer</param>
            <param name="eventUserAgent">User agent</param>
            <param name="eventTime">Date and time when the event occurs</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogEventToFile(CMS.EventLog.EventLogInfo)">
            <summary>
            Logs the log object to file.
            </summary>
            <param name="eventLogInfo">Event info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.SendEmailNotification(CMS.EventLog.EventLogInfo,System.String)">
            <summary>
            Logs the query to file.
            </summary>
            <param name="eventObj">Event info object</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetEventText(CMS.EventLog.EventLogInfo)">
            <summary>
             Gets log event text from DataRow
            </summary>
            <param name="eventObj">Object containing log event data</param>
            <returns>Text of log event</returns>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetChangedFields(CMS.Base.IAdvancedDataContainer)">
            <summary>
            Gets the list of changed fields in the given object.
            </summary>
            <param name="dc">DataClass object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetFields(CMS.Base.IAdvancedDataContainer)">
            <summary>
            Gets the list of fields in the given object.
            </summary>
            <param name="dc">DataClass object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetEventTypeText(System.String)">
            <summary>
            Returns user-friendly string for the given event type.
            </summary>
            <param name="eventType">Event type string</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogInsert(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Logs insertion of an object.
            </summary>
            <param name="infoObj">Main info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogUpdate(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Logs update of an object.
            </summary>
            <param name="infoObj">Main info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogDelete(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Logs deletion of an object.
            </summary>
            <param name="infoObj">Main info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogLastApplicationError">
            <summary>
            Logs the last application error.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogEventToFileInternal(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Logs the query to file.
            </summary>
            <param name="eventType">Type of the event. I = information, E = error, W = warning</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (Security, Update, Delete, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
            <param name="eventUrl">Event URL address</param>
            <param name="userId">ID of the user, who caused logged event</param>
            <param name="userName">Name of the user, who caused logged event</param>
            <param name="nodeId">ID value of the document</param>
            <param name="documentName">NamePath value of the document</param>
            <param name="ipAddress">IP Address of the user, who caused logged event</param>
            <param name="siteId">ID of the site</param>
            <param name="machineName">Name of machine</param>
            <param name="eventUrlReferrer">URL referrer</param>
            <param name="eventUserAgent">User agent</param>
            <param name="eventTime">Date and time when the event occurs</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogEventToFileInternal(CMS.EventLog.EventLogInfo)">
            <summary>
            Logs the log object to file.
            </summary>
            <param name="eventLogInfo">Event info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.SendEmailNotificationInternal(CMS.EventLog.EventLogInfo,System.String)">
            <summary>
            Logs the query to file.
            </summary>
            <param name="eventObj">Event info object</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetEventTextInternal(CMS.EventLog.EventLogInfo)">
            <summary>
             Gets log event text from DataRow
            </summary>
            <param name="eventObj">Object containing log event data</param>
            <returns>Text of log event</returns>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetChangedFieldsInternal(CMS.Base.IAdvancedDataContainer)">
            <summary>
            Gets the list of changed fields in the given object.
            </summary>
            <param name="dc">DataClass object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetFieldsInternal(CMS.Base.IAdvancedDataContainer)">
            <summary>
            Gets the list of fields in the given object.
            </summary>
            <param name="dc">DataClass object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.GetEventTypeTextInternal(System.String)">
            <summary>
            Returns user-friendly string for the given event type.
            </summary>
            <param name="eventType">Event type string</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogInsertInternal(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Logs insertion of an object.
            </summary>
            <param name="infoObj">Main info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogUpdateInternal(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Logs update of an object.
            </summary>
            <param name="infoObj">Main info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogDeleteInternal(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Logs deletion of an object.
            </summary>
            <param name="infoObj">Main info object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogLastApplicationErrorInternal">
            <summary>
            Logs the last application error.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.SendEmailNotificationInternal(System.String,System.String,CMS.EventLog.EventLogInfo,System.String)">
            <summary>
            Logs the query to file.
            </summary>
            <param name="emailTo">E-mail address(es) to which the email should be sent to</param>
            <param name="emailFrom">E-mail address from which the email is sent</param>
            <param name="eventObj">Event log info object</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.EventLog.EventLogHelper.LogAction(CMS.DataEngine.GeneralizedInfo,System.String,System.String,System.Boolean)">
            <summary>
            Logs object action to the event log.
            </summary>
            <param name="infoObj">Main info object</param>
            <param name="eventCode">Event code</param>
            <param name="eventDescription">Event description</param>
            <param name="changedFieldsOnly">If true, only changed fields are logged</param>
        </member>
        <member name="P:CMS.EventLog.EventLogHelper.LogFolder">
            <summary>
            Physical path to folder where log file is saved.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogHelper.LogFile">
            <summary>
            Physical path to the log file.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogHelper.LogEventsToFile">
            <summary>
            Indicates if events are logged to the file.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogHelper.LogFolderInternal">
            <summary>
            Physical path to folder where log file is saved.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogHelper.LogFileInternal">
            <summary>
            Physical path to the log file.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogHelper.LogEventsToFileInternal">
            <summary>
            Indicates if events are logged to the file.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogInfo">
            <summary>
            EventLogInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogInfo.mMultipleLoggingEnabled">
            <summary>
            Enable multiple logging for this event.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.#ctor">
            <summary>
            Constructor - Creates an empty EventLogInfo object.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EventLogInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Creates a new EventLogInfo object from the given Data class.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor - Creates a new EventLogInfo object from the given Data class.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.LoadDefaultData">
            <summary>
            Loads the object default data
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Converts permissions enum to permission code name when CheckPermission() is called.
            </summary>
            <param name="permission">Permissions enum</param>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.ValidateParametres(System.String,System.String,System.String)">
            <summary>
            Validate required parametres.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.ValidateEventType(System.String)">
            <summary>
            Check if eventType is defined in EventType enum.
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="M:CMS.EventLog.EventLogInfo.SetContextProperties">
            <summary>
            Set properties to default value.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventMachineName">
            <summary>
            Name of machine on which event is being logged.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventType">
            <summary>
            Type of event, use predefined constants from EventLogProvider (or "I" for Info, "W" for Warning, "E" for Error).
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.IPAddress">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventTime">
            <summary>
            Time of event.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.SiteID">
            <summary>
            Site identifier.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventUrl">
            <summary>
            URL of event.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventDescription">
            <summary>
            Description of event.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.DocumentName">
            <summary>
            Name of document.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventUrlReferrer">
            <summary>
            Referrer URL.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.NodeID">
            <summary>
            ID of node.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventCode">
            <summary>
            Code of event.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventUserAgent">
            <summary>
            Browser identification.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.Source">
            <summary>
            Source of event.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.UserID">
            <summary>
            User identifier.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EventID">
            <summary>
            Event identifier.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.EnableMultipleLogging">
            <summary>
            Enable multiple logging for this event. By default is true.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogInfo.Exception">
            <summary>
            Store Exception caused by Event.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventType">
            <summary>
            Event type constants
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventType.INFORMATION">
            <summary>
            Info event type.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventType.WARNING">
            <summary>
            Warning event type.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventType.ERROR">
            <summary>
            Error event type.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogModule">
            <summary>
            Represents the Event Log module.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.EventLog.EventLogModuleMetadata">
            <summary>
            Represents the Event Log module metadata.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogProvider">
            <summary>
            Provides basic operations with the event log.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogProvider.MAXTODELETE">
            <summary>
            Constant used to determine maximum amount of items that can be deleted at once (value is 50.000).
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogProvider.mConnection">
            <summary>
            General database connection.
            </summary>
        </member>
        <member name="F:CMS.EventLog.EventLogProvider.mLoggedEvents">
            <summary>
            Events already logged by this application instance [type, source, code]
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.EventLog.EventLogProvider"/> class.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.ClearEventLog(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Clears entire event log and writes new event record with information about this action and the user who performed it.
            </summary>
            <param name="userId">User ID for logging purposes</param>
            <param name="userName">User name for logging purposes</param>
            <param name="ipAddress">IP address for logging purposes</param>
            <param name="siteId">Site ID for logging purposes</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetEventLogInfo(System.Int32)">
            <summary>
            Returns specified event info object from the event log.
            </summary>
            <param name="eventId">Event ID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetAllEvents(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all records from the event log which meet specified criteria.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">OrderBy SQL expression</param>
            <param name="topN">Specifies number of returned columns</param>
            <param name="columns">Columns to return</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetPreviousNext(System.Int32,System.String,System.String)">
            <summary>
            Returns the previous and next events of the given event in the order specified by ORDER BY parameter matching the WHERE criteria.
            </summary>
            <param name="eventId">ID of the event relative to which the previous and next events are returned</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.SetEventLogInfo(CMS.EventLog.EventLogInfo)">
            <summary>
            Sets event log.
            </summary>
            <param name="eventLog">Event log object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetExceptionLogMessage(System.Exception)">
            <summary>
            Gets complete log for exception with message and deep stack trace.
            </summary>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetLogItems(System.Int32)">
            <summary>
            Gets the log items count for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetLogSize(System.Int32)">
            <summary>
            Gets the log size for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogMetadata(System.String)">
            <summary>
            Returns true if the metadata should be logged.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.Clear">
            <summary>
            Clears the hashtable.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetEventLogText(CMS.EventLog.EventLogInfo)">
            <summary>
            Creates string representation of event log object.
            </summary>
            <param name="eventLogInfo">EventLogInfo object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogApplicationStart">
            <summary>
            Logs the application start event to the event log
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogApplicationEnd">
            <summary>
            Logs the application end.
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetAppName">
            <summary>
            Gets the application name for the log messages
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets a field value from the given object
            </summary>
            <param name="obj">Object</param>
            <param name="fieldName">Field name</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogEvent(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventType">Type of the event. Please use predefined constants from EventLogProvider</param>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="eventDescription">Detailed description of the event</param>
            <param name="eventUrl">Event URL address</param>
            <param name="userId">ID of the user, who caused logged event</param>
            <param name="userName">Name of the user, who caused logged event</param>
            <param name="nodeId">ID value of the document</param>
            <param name="documentName">NamePath value of the document</param>
            <param name="ipAddress">IP Address of the user, who caused logged event</param>
            <param name="siteId">ID of the site</param>
            <param name="machineName">Name of machine</param>
            <param name="urlReferrer">Referrer URL</param>
            <param name="userAgent">User agent</param>
            <param name="eventTime">Date and time when the event occurs</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogEvent(CMS.EventLog.EventLogInfo,System.Boolean,System.Boolean)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventObject">Contains event</param>
            <param name="logDirectly">If true, the event is logged directly to the database. Otherwise, the event is logged to the queue processed by background worker to optimize performance.</param>
            <param name="deleteOlder">If true, older items are deleted if the log length exceeds maximum</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogException(System.String,System.String,System.Exception,System.Int32,System.String,System.Boolean)">
            <summary>
            Writes a new error to the event log.
            </summary>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="ex">Exception to be logged</param>
            <param name="siteId">Current site ID</param>
            <param name="additionalMessage">Additional information to the exception message</param>
            <param name="allowMultiple">If true, it is allowed to log this exception multiple times within the application run</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.CannotLogEvent(System.Exception)">
            <summary>
            Executes when the event logging throws an error.
            </summary>
            <param name="ex">Exception thrown upon problem with logging</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogWarning(System.String,System.String,System.Exception,System.Int32,System.String)">
            <summary>
            Writes a new warning to the event log.
            </summary>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (UPDATEDOC, SENDEMAIL, DELETE, etc.)</param>
            <param name="ex">Exception to be logged</param>
            <param name="siteId">Current site ID</param>
            <param name="additionalMessage">Additional information to the exception message</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogInformation(System.String,System.String,System.String)">
            <summary>
            Writes a new information to the event log.
            </summary>
            <param name="source">Source of the event (Content, Administration, etc.)</param>
            <param name="eventCode">Event code (Security, Update, Delete, etc.)</param>
            <param name="eventDescription">Additional event information</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogEventInternal(CMS.EventLog.EventLogInfo,System.Boolean,System.Boolean)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventObject">Contains event</param>
            <param name="logDirectly">If true, the event is logged directly to the database. Otherwise, the event is logged to the queue processed by background worker to optimize performance.</param>
            <param name="deleteOlder">If true, older items are deleted if the log length exceeds maximum</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.MaintainLogLength(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Maintains the log length for the given site. Deletes the extra items id the configured limit plus buffer is reached.
            </summary>
            <param name="siteId">Site ID</param>
            <param name="newItems">Number of new event log items</param>
            <param name="deleteOlder">If true, older items are allowed to be deleted within call to this method.</param>
            <param name="deleteAsync">If true, the deletion process of the older items is done asynchronously</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogEventInternal(CMS.EventLog.EventLogInfo)">
            <summary>
            Writes a new record to the event log.
            </summary>
            <param name="eventObject">Contains event</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.CanLogEvent(CMS.EventLog.EventLogInfo)">
            <summary>
            Returns true if the event can be logged
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.SingleEventWasAlreadyLogged(CMS.EventLog.EventLogInfo)">
            <summary>
            Returns true if the event was already logged, and should not be logged again
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.IncrementEventCounters(CMS.EventLog.EventLogInfo)">
            <summary>
            Increments the event counters
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.EnsureEventData(CMS.EventLog.EventLogInfo)">
            <summary>
            Ensures that the event contains proper data populated from context and event settings
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.IsEventExcluded(CMS.EventLog.EventLogInfo)">
            <summary>
            Returns true if the event is excluded from logging
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.SendEmailIfRequired(CMS.EventLog.EventLogInfo)">
            <summary>
            Send email notification about logged event. 
            </summary>
            <param name="ev">Logged event</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.AddLogItems(System.Int32,System.Int32)">
            <summary>
            Adds specific amount of log items.
            </summary>
            <param name="siteId">Site ID</param>
            <param name="count">Items count to add</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.DeleteOlderItemsAsync(System.Int32)">
            <summary>
            Deletes older log items if necessary using asynchronous thread. Does not start the thread if the thread is already running.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.CanDeleteOlderItems(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns true if the older event log items can be deleted (if the system exceeded the allowed buffer)
            </summary>
            <param name="siteId">Site ID</param>
            <param name="logSize">Log size for the given site</param>
            <param name="itemsAfterDeletion">Returns the number of items after the deletion process</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.DeleteOlderItems(System.Int32,System.Int32)">
            <summary>
            Deletes the old event log events
            </summary>
            <param name="siteId">Site ID</param>
            <param name="logSize">Log size for the given site</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.DeleteOlderItems(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deletes the older items for the given list of sites
            </summary>
            <param name="siteIds">Site IDs</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetEventInfoInternal(System.Int32)">
            <summary>
            Returns specified event info object from the event log.
            </summary>
            <param name="eventId">Event identifier</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetEventLogTextInternal(CMS.EventLog.EventLogInfo)">
            <summary>
            Creates string representation of event log object.
            </summary>
            <param name="eventLogInfo">EventLogInfo object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetPreviousNextInternal(System.Int32,System.String,System.String)">
            <summary>
            Returns the previous and next events of the given event in the order specified by ORDER BY parameter matching the WHERE criteria.
            </summary>
            <param name="eventId">ID of the event relative to which the previous and next events are returned</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.ClearEventLogInternal(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Clears entire event log and writes new event record with information about this action and the user who performed it.
            </summary>
            <param name="userId">User ID for logging purposes</param>
            <param name="userName">User name for logging purposes</param>
            <param name="ipAddress">IP address for logging purposes</param>
            <param name="siteId">Site ID for logging purposes</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetLogItemsInternal(System.Int32)">
            <summary>
            Gets the log items count for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.SetEventLogInfoInternal(CMS.EventLog.EventLogInfo)">
            <summary>
            Sets event log.
            </summary>
            <param name="eventLog">Event log object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetLogSizeInternal(System.Int32)">
            <summary>
            Gets the log size for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.GetExceptionLogMessageInternal(System.Exception)">
            <summary>
            Gets complete log for exception with message and deep stack trace.
            </summary>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.AppendException(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the exception to the message
            </summary>
            <param name="message">Message</param>
            <param name="ex">Exception to append</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.AppendStackTrace(System.Text.StringBuilder,System.String)">
            <summary>
            Appends the given stack trace to the result
            </summary>
            <param name="message">Message</param>
            <param name="stack">Stack to append</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clears up hashtables of EventLogProvider.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.CheckLogAvailability(System.String)">
            <summary>
            Checks if logging mode is enabled.
            </summary>
            <param name="mode">Logging mode</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogForEventLogPopUp(CMS.EventLog.EventLogInfo)">
            <summary>
            Logs event for eventlog popup
            </summary>
            <param name="eventLogInfo">EventLogInfo object</param>
        </member>
        <member name="M:CMS.EventLog.EventLogProvider.LogToTrace(CMS.EventLog.EventLogInfo)">
            <summary>
            Logs event message to Trace.
            </summary>
            <param name="eventLogInfo">EventLogInfo object</param>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.UseEventLogPopUp">
            <summary>
            Indicates whether pop-up message module is allowed (web.config key CMSUseEventLogPopUp)
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.LogDeleteCoefficient">
            <summary>
            Coefficient for log deletion, keeps the specified number of log items percent alive and deletes the log by batch when the percents are exceeded.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.LoggingEnabled">
            <summary>
            Indicates if logging is enabled.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.LogFieldChanges">
            <summary>
            Indicates if log should contain the changes to particular fields.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.LogDocumentFieldChanges">
            <summary>
            Indicates if log should contain the changes to particular document document fields.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.DeleteOlderLogs">
            <summary>
            Delete older log items.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.LogItems">
            <summary>
            Cached log items count [siteId] -> [count]
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.LogSizes">
            <summary>
            Cached log items count [siteId] -> [logSize]
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.RegExExcludeLogSource">
            <summary>
            Regular expression for the excluded log sources - If there is a match, the event is excluded from the log.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.RegExExcludeLogCode">
            <summary>
            Regular expression for the excluded log codes - If there is a match, the event is excluded from the log.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.RegExExcludeLogDescription">
            <summary>
            Get the regular expression for the excluded log descriptions.
            If there is a match, the event is excluded from the log.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.DeleteOlderThreadRunning">
            <summary>
            Indicates if delete old logs thread is running.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.Warnings">
            <summary>
            Counter of warnings.
            </summary>
        </member>
        <member name="P:CMS.EventLog.EventLogProvider.Errors">
            <summary>
            Counter of warnings.
            </summary>
        </member>
        <member name="T:CMS.EventLog.EventLogHandlers">
            <summary>
            Event log handlers
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.Init">
            <summary>
            Initializes the synchronization handlers
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.LogApplicationStart(System.Object,System.EventArgs)">
            <summary>
            Logs the application start to event log
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.LogApplicationEnd(System.Object,System.EventArgs)">
            <summary>
            Logs the application end
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.LogApplicationError(System.Object,System.EventArgs)">
            <summary>
            Logs the last application error
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.DeleteObject(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Actions that execute upon object deletion
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.InsertObject(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Actions that execute upon object insert
            </summary>
        </member>
        <member name="M:CMS.EventLog.EventLogHandlers.UpdateObject(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Actions that execute upon object update
            </summary>
        </member>
    </members>
</doc>
