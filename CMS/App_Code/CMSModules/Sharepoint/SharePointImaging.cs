//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace CMS.SharePoint.Imaging
{
    using System;


    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "ImagingSoap", Namespace = "http://schemas.microsoft.com/sharepoint/soap/ois/")]
    public partial class Imaging : SoapHttpClientProtocol
    {
        private SendOrPostCallback ListPictureLibraryOperationCompleted;

        private SendOrPostCallback UploadOperationCompleted;

        private SendOrPostCallback GetItemsXMLDataOperationCompleted;

        private SendOrPostCallback GetItemsByIdsOperationCompleted;

        private SendOrPostCallback DeleteOperationCompleted;

        private SendOrPostCallback DownloadOperationCompleted;

        private SendOrPostCallback EditOperationCompleted;

        private SendOrPostCallback GetListItemsOperationCompleted;

        private SendOrPostCallback CheckSubwebAndListOperationCompleted;

        private SendOrPostCallback RenameOperationCompleted;

        private SendOrPostCallback CreateNewFolderOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;


        /// <remarks/>
        public Imaging(string url)
        {
            Url = url;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }


        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ListPictureLibraryCompletedEventHandler ListPictureLibraryCompleted;

        /// <remarks/>
        public event UploadCompletedEventHandler UploadCompleted;

        /// <remarks/>
        public event GetItemsXMLDataCompletedEventHandler GetItemsXMLDataCompleted;

        /// <remarks/>
        public event GetItemsByIdsCompletedEventHandler GetItemsByIdsCompleted;

        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;

        /// <remarks/>
        public event DownloadCompletedEventHandler DownloadCompleted;

        /// <remarks/>
        public event EditCompletedEventHandler EditCompleted;

        /// <remarks/>
        public event GetListItemsCompletedEventHandler GetListItemsCompleted;

        /// <remarks/>
        public event CheckSubwebAndListCompletedEventHandler CheckSubwebAndListCompleted;

        /// <remarks/>
        public event RenameCompletedEventHandler RenameCompleted;

        /// <remarks/>
        public event CreateNewFolderCompletedEventHandler CreateNewFolderCompleted;


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/ListPictureLibrary", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode ListPictureLibrary()
        {
            object[] results = Invoke("ListPictureLibrary", new object[0]);
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void ListPictureLibraryAsync()
        {
            ListPictureLibraryAsync(null);
        }


        /// <remarks/>
        public void ListPictureLibraryAsync(object userState)
        {
            if ((ListPictureLibraryOperationCompleted == null))
            {
                ListPictureLibraryOperationCompleted = new SendOrPostCallback(OnListPictureLibraryOperationCompleted);
            }
            InvokeAsync("ListPictureLibrary", new object[0], ListPictureLibraryOperationCompleted, userState);
        }


        private void OnListPictureLibraryOperationCompleted(object arg)
        {
            if ((ListPictureLibraryCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                ListPictureLibraryCompleted(this, new ListPictureLibraryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/Upload", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode Upload(string strListName, string strFolder, [XmlElement(DataType = "base64Binary")] byte[] bytes, string fileName, bool fOverWriteIfExist)
        {
            object[] results = Invoke("Upload", new object[]
                                                    {
                                                        strListName,
                                                        strFolder,
                                                        bytes,
                                                        fileName,
                                                        fOverWriteIfExist
                                                    });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void UploadAsync(string strListName, string strFolder, byte[] bytes, string fileName, bool fOverWriteIfExist)
        {
            UploadAsync(strListName, strFolder, bytes, fileName, fOverWriteIfExist, null);
        }


        /// <remarks/>
        public void UploadAsync(string strListName, string strFolder, byte[] bytes, string fileName, bool fOverWriteIfExist, object userState)
        {
            if ((UploadOperationCompleted == null))
            {
                UploadOperationCompleted = new SendOrPostCallback(OnUploadOperationCompleted);
            }
            InvokeAsync("Upload", new object[]
                                      {
                                          strListName,
                                          strFolder,
                                          bytes,
                                          fileName,
                                          fOverWriteIfExist
                                      }, UploadOperationCompleted, userState);
        }


        private void OnUploadOperationCompleted(object arg)
        {
            if ((UploadCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UploadCompleted(this, new UploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/GetItemsXMLData", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetItemsXMLData(string strListName, string strFolder, string[] itemFileNames)
        {
            object[] results = Invoke("GetItemsXMLData", new object[]
                                                             {
                                                                 strListName,
                                                                 strFolder,
                                                                 itemFileNames
                                                             });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetItemsXMLDataAsync(string strListName, string strFolder, string[] itemFileNames)
        {
            GetItemsXMLDataAsync(strListName, strFolder, itemFileNames, null);
        }


        /// <remarks/>
        public void GetItemsXMLDataAsync(string strListName, string strFolder, string[] itemFileNames, object userState)
        {
            if ((GetItemsXMLDataOperationCompleted == null))
            {
                GetItemsXMLDataOperationCompleted = new SendOrPostCallback(OnGetItemsXMLDataOperationCompleted);
            }
            InvokeAsync("GetItemsXMLData", new object[]
                                               {
                                                   strListName,
                                                   strFolder,
                                                   itemFileNames
                                               }, GetItemsXMLDataOperationCompleted, userState);
        }


        private void OnGetItemsXMLDataOperationCompleted(object arg)
        {
            if ((GetItemsXMLDataCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetItemsXMLDataCompleted(this, new GetItemsXMLDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/GetItemsByIds", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetItemsByIds(string strListName, uint[] ids)
        {
            object[] results = Invoke("GetItemsByIds", new object[]
                                                           {
                                                               strListName,
                                                               ids
                                                           });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetItemsByIdsAsync(string strListName, uint[] ids)
        {
            GetItemsByIdsAsync(strListName, ids, null);
        }


        /// <remarks/>
        public void GetItemsByIdsAsync(string strListName, uint[] ids, object userState)
        {
            if ((GetItemsByIdsOperationCompleted == null))
            {
                GetItemsByIdsOperationCompleted = new SendOrPostCallback(OnGetItemsByIdsOperationCompleted);
            }
            InvokeAsync("GetItemsByIds", new object[]
                                             {
                                                 strListName,
                                                 ids
                                             }, GetItemsByIdsOperationCompleted, userState);
        }


        private void OnGetItemsByIdsOperationCompleted(object arg)
        {
            if ((GetItemsByIdsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetItemsByIdsCompleted(this, new GetItemsByIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/Delete", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode Delete(string strListName, string strFolder, string[] itemFileNames)
        {
            object[] results = Invoke("Delete", new object[]
                                                    {
                                                        strListName,
                                                        strFolder,
                                                        itemFileNames
                                                    });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void DeleteAsync(string strListName, string strFolder, string[] itemFileNames)
        {
            DeleteAsync(strListName, strFolder, itemFileNames, null);
        }


        /// <remarks/>
        public void DeleteAsync(string strListName, string strFolder, string[] itemFileNames, object userState)
        {
            if ((DeleteOperationCompleted == null))
            {
                DeleteOperationCompleted = new SendOrPostCallback(OnDeleteOperationCompleted);
            }
            InvokeAsync("Delete", new object[]
                                      {
                                          strListName,
                                          strFolder,
                                          itemFileNames
                                      }, DeleteOperationCompleted, userState);
        }


        private void OnDeleteOperationCompleted(object arg)
        {
            if ((DeleteCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/Download", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode Download(string strListName, string strFolder, string[] itemFileNames, uint type, bool fFetchOriginalIfNotAvailable)
        {
            object[] results = Invoke("Download", new object[]
                                                      {
                                                          strListName,
                                                          strFolder,
                                                          itemFileNames,
                                                          type,
                                                          fFetchOriginalIfNotAvailable
                                                      });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void DownloadAsync(string strListName, string strFolder, string[] itemFileNames, uint type, bool fFetchOriginalIfNotAvailable)
        {
            DownloadAsync(strListName, strFolder, itemFileNames, type, fFetchOriginalIfNotAvailable, null);
        }


        /// <remarks/>
        public void DownloadAsync(string strListName, string strFolder, string[] itemFileNames, uint type, bool fFetchOriginalIfNotAvailable, object userState)
        {
            if ((DownloadOperationCompleted == null))
            {
                DownloadOperationCompleted = new SendOrPostCallback(OnDownloadOperationCompleted);
            }
            InvokeAsync("Download", new object[]
                                        {
                                            strListName,
                                            strFolder,
                                            itemFileNames,
                                            type,
                                            fFetchOriginalIfNotAvailable
                                        }, DownloadOperationCompleted, userState);
        }


        private void OnDownloadOperationCompleted(object arg)
        {
            if ((DownloadCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DownloadCompleted(this, new DownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/Edit", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode Edit(string strListName, string strFolder, string itemFileName, XmlElement recipe)
        {
            object[] results = Invoke("Edit", new object[]
                                                  {
                                                      strListName,
                                                      strFolder,
                                                      itemFileName,
                                                      recipe
                                                  });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void EditAsync(string strListName, string strFolder, string itemFileName, XmlElement recipe)
        {
            EditAsync(strListName, strFolder, itemFileName, recipe, null);
        }


        /// <remarks/>
        public void EditAsync(string strListName, string strFolder, string itemFileName, XmlElement recipe, object userState)
        {
            if ((EditOperationCompleted == null))
            {
                EditOperationCompleted = new SendOrPostCallback(OnEditOperationCompleted);
            }
            InvokeAsync("Edit", new object[]
                                    {
                                        strListName,
                                        strFolder,
                                        itemFileName,
                                        recipe
                                    }, EditOperationCompleted, userState);
        }


        private void OnEditOperationCompleted(object arg)
        {
            if ((EditCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                EditCompleted(this, new EditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/GetListItems", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListItems(string strListName, string strFolder)
        {
            object[] results = Invoke("GetListItems", new object[]
                                                          {
                                                              strListName,
                                                              strFolder
                                                          });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListItemsAsync(string strListName, string strFolder)
        {
            GetListItemsAsync(strListName, strFolder, null);
        }


        /// <remarks/>
        public void GetListItemsAsync(string strListName, string strFolder, object userState)
        {
            if ((GetListItemsOperationCompleted == null))
            {
                GetListItemsOperationCompleted = new SendOrPostCallback(OnGetListItemsOperationCompleted);
            }
            InvokeAsync("GetListItems", new object[]
                                            {
                                                strListName,
                                                strFolder
                                            }, GetListItemsOperationCompleted, userState);
        }


        private void OnGetListItemsOperationCompleted(object arg)
        {
            if ((GetListItemsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListItemsCompleted(this, new GetListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/CheckSubwebAndList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode CheckSubwebAndList(string strUrl)
        {
            object[] results = Invoke("CheckSubwebAndList", new object[]
                                                                {
                                                                    strUrl
                                                                });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void CheckSubwebAndListAsync(string strUrl)
        {
            CheckSubwebAndListAsync(strUrl, null);
        }


        /// <remarks/>
        public void CheckSubwebAndListAsync(string strUrl, object userState)
        {
            if ((CheckSubwebAndListOperationCompleted == null))
            {
                CheckSubwebAndListOperationCompleted = new SendOrPostCallback(OnCheckSubwebAndListOperationCompleted);
            }
            InvokeAsync("CheckSubwebAndList", new object[]
                                                  {
                                                      strUrl
                                                  }, CheckSubwebAndListOperationCompleted, userState);
        }


        private void OnCheckSubwebAndListOperationCompleted(object arg)
        {
            if ((CheckSubwebAndListCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CheckSubwebAndListCompleted(this, new CheckSubwebAndListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/Rename", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode Rename(string strListName, string strFolder, XmlElement request)
        {
            object[] results = Invoke("Rename", new object[]
                                                    {
                                                        strListName,
                                                        strFolder,
                                                        request
                                                    });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void RenameAsync(string strListName, string strFolder, XmlElement request)
        {
            RenameAsync(strListName, strFolder, request, null);
        }


        /// <remarks/>
        public void RenameAsync(string strListName, string strFolder, XmlElement request, object userState)
        {
            if ((RenameOperationCompleted == null))
            {
                RenameOperationCompleted = new SendOrPostCallback(OnRenameOperationCompleted);
            }
            InvokeAsync("Rename", new object[]
                                      {
                                          strListName,
                                          strFolder,
                                          request
                                      }, RenameOperationCompleted, userState);
        }


        private void OnRenameOperationCompleted(object arg)
        {
            if ((RenameCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                RenameCompleted(this, new RenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ois/CreateNewFolder", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode CreateNewFolder(string strListName, string strParentFolder)
        {
            object[] results = Invoke("CreateNewFolder", new object[]
                                                             {
                                                                 strListName,
                                                                 strParentFolder
                                                             });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void CreateNewFolderAsync(string strListName, string strParentFolder)
        {
            CreateNewFolderAsync(strListName, strParentFolder, null);
        }


        /// <remarks/>
        public void CreateNewFolderAsync(string strListName, string strParentFolder, object userState)
        {
            if ((CreateNewFolderOperationCompleted == null))
            {
                CreateNewFolderOperationCompleted = new SendOrPostCallback(OnCreateNewFolderOperationCompleted);
            }
            InvokeAsync("CreateNewFolder", new object[]
                                               {
                                                   strListName,
                                                   strParentFolder
                                               }, CreateNewFolderOperationCompleted, userState);
        }


        private void OnCreateNewFolderOperationCompleted(object arg)
        {
            if ((CreateNewFolderCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CreateNewFolderCompleted(this, new CreateNewFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }


        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void ListPictureLibraryCompletedEventHandler(object sender, ListPictureLibraryCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class ListPictureLibraryCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal ListPictureLibraryCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UploadCompletedEventHandler(object sender, UploadCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UploadCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UploadCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetItemsXMLDataCompletedEventHandler(object sender, GetItemsXMLDataCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetItemsXMLDataCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetItemsXMLDataCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetItemsByIdsCompletedEventHandler(object sender, GetItemsByIdsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetItemsByIdsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetItemsByIdsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class DeleteCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal DeleteCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void DownloadCompletedEventHandler(object sender, DownloadCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class DownloadCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal DownloadCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void EditCompletedEventHandler(object sender, EditCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class EditCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal EditCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListItemsCompletedEventHandler(object sender, GetListItemsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListItemsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListItemsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckSubwebAndListCompletedEventHandler(object sender, CheckSubwebAndListCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CheckSubwebAndListCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CheckSubwebAndListCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void RenameCompletedEventHandler(object sender, RenameCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class RenameCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal RenameCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreateNewFolderCompletedEventHandler(object sender, CreateNewFolderCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CreateNewFolderCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CreateNewFolderCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }
}

#pragma warning restore 1591