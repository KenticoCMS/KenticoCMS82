//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace CMS.SharePoint.Copy
{
    using System;


    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "CopySoap", Namespace = "http://schemas.microsoft.com/sharepoint/soap/")]
    public partial class Copy : SoapHttpClientProtocol
    {
        private SendOrPostCallback CopyIntoItemsLocalOperationCompleted;

        private SendOrPostCallback CopyIntoItemsOperationCompleted;

        private SendOrPostCallback GetItemOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;


        /// <remarks/>
        public Copy(string url)
        {
            Url = url;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }


        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event CopyIntoItemsLocalCompletedEventHandler CopyIntoItemsLocalCompleted;

        /// <remarks/>
        public event CopyIntoItemsCompletedEventHandler CopyIntoItemsCompleted;

        /// <remarks/>
        public event GetItemCompletedEventHandler GetItemCompleted;


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/CopyIntoItemsLocal", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public uint CopyIntoItemsLocal(string SourceUrl, string[] DestinationUrls, out CopyResult[] Results)
        {
            object[] results1 = Invoke("CopyIntoItemsLocal", new object[]
                                                                 {
                                                                     SourceUrl,
                                                                     DestinationUrls
                                                                 });
            Results = ((CopyResult[])(results1[1]));
            return ((uint)(results1[0]));
        }


        /// <remarks/>
        public void CopyIntoItemsLocalAsync(string SourceUrl, string[] DestinationUrls)
        {
            CopyIntoItemsLocalAsync(SourceUrl, DestinationUrls, null);
        }


        /// <remarks/>
        public void CopyIntoItemsLocalAsync(string SourceUrl, string[] DestinationUrls, object userState)
        {
            if ((CopyIntoItemsLocalOperationCompleted == null))
            {
                CopyIntoItemsLocalOperationCompleted = new SendOrPostCallback(OnCopyIntoItemsLocalOperationCompleted);
            }
            InvokeAsync("CopyIntoItemsLocal", new object[]
                                                  {
                                                      SourceUrl,
                                                      DestinationUrls
                                                  }, CopyIntoItemsLocalOperationCompleted, userState);
        }


        private void OnCopyIntoItemsLocalOperationCompleted(object arg)
        {
            if ((CopyIntoItemsLocalCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CopyIntoItemsLocalCompleted(this, new CopyIntoItemsLocalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/CopyIntoItems", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public uint CopyIntoItems(string SourceUrl, string[] DestinationUrls, FieldInformation[] Fields, [XmlElement(DataType = "base64Binary")] byte[] Stream, out CopyResult[] Results)
        {
            object[] results1 = Invoke("CopyIntoItems", new object[]
                                                            {
                                                                SourceUrl,
                                                                DestinationUrls,
                                                                Fields,
                                                                Stream
                                                            });
            Results = ((CopyResult[])(results1[1]));
            return ((uint)(results1[0]));
        }


        /// <remarks/>
        public void CopyIntoItemsAsync(string SourceUrl, string[] DestinationUrls, FieldInformation[] Fields, byte[] Stream)
        {
            CopyIntoItemsAsync(SourceUrl, DestinationUrls, Fields, Stream, null);
        }


        /// <remarks/>
        public void CopyIntoItemsAsync(string SourceUrl, string[] DestinationUrls, FieldInformation[] Fields, byte[] Stream, object userState)
        {
            if ((CopyIntoItemsOperationCompleted == null))
            {
                CopyIntoItemsOperationCompleted = new SendOrPostCallback(OnCopyIntoItemsOperationCompleted);
            }
            InvokeAsync("CopyIntoItems", new object[]
                                             {
                                                 SourceUrl,
                                                 DestinationUrls,
                                                 Fields,
                                                 Stream
                                             }, CopyIntoItemsOperationCompleted, userState);
        }


        private void OnCopyIntoItemsOperationCompleted(object arg)
        {
            if ((CopyIntoItemsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CopyIntoItemsCompleted(this, new CopyIntoItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetItem", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public uint GetItem(string Url, out FieldInformation[] Fields, [XmlElement(DataType = "base64Binary")] out byte[] Stream)
        {
            object[] results = Invoke("GetItem", new object[]
                                                     {
                                                         Url
                                                     });
            Fields = ((FieldInformation[])(results[1]));
            Stream = ((byte[])(results[2]));
            return ((uint)(results[0]));
        }


        /// <remarks/>
        public void GetItemAsync(string Url)
        {
            GetItemAsync(Url, null);
        }


        /// <remarks/>
        public void GetItemAsync(string Url, object userState)
        {
            if ((GetItemOperationCompleted == null))
            {
                GetItemOperationCompleted = new SendOrPostCallback(OnGetItemOperationCompleted);
            }
            InvokeAsync("GetItem", new object[]
                                       {
                                           Url
                                       }, GetItemOperationCompleted, userState);
        }


        private void OnGetItemOperationCompleted(object arg)
        {
            if ((GetItemCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetItemCompleted(this, new GetItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }


        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.3082")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sharepoint/soap/")]
    public partial class CopyResult
    {
        private CopyErrorCode errorCodeField;

        private string errorMessageField;

        private string destinationUrlField;

        /// <remarks/>
        [XmlAttribute()]
        public CopyErrorCode ErrorCode
        {
            get
            {
                return errorCodeField;
            }
            set
            {
                errorCodeField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string ErrorMessage
        {
            get
            {
                return errorMessageField;
            }
            set
            {
                errorMessageField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string DestinationUrl
        {
            get
            {
                return destinationUrlField;
            }
            set
            {
                destinationUrlField = value;
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.3082")]
    [Serializable()]
    [XmlType(Namespace = "http://schemas.microsoft.com/sharepoint/soap/")]
    public enum CopyErrorCode
    {
        /// <remarks/>
        Success,

        /// <remarks/>
        DestinationInvalid,

        /// <remarks/>
        DestinationMWS,

        /// <remarks/>
        SourceInvalid,

        /// <remarks/>
        DestinationCheckedOut,

        /// <remarks/>
        InvalidUrl,

        /// <remarks/>
        Unknown,
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.3082")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://schemas.microsoft.com/sharepoint/soap/")]
    public partial class FieldInformation
    {
        private FieldType typeField;

        private string displayNameField;

        private string internalNameField;

        private Guid idField;

        private string valueField;

        /// <remarks/>
        [XmlAttribute()]
        public FieldType Type
        {
            get
            {
                return typeField;
            }
            set
            {
                typeField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string DisplayName
        {
            get
            {
                return displayNameField;
            }
            set
            {
                displayNameField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string InternalName
        {
            get
            {
                return internalNameField;
            }
            set
            {
                internalNameField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public Guid Id
        {
            get
            {
                return idField;
            }
            set
            {
                idField = value;
            }
        }

        /// <remarks/>
        [XmlAttribute()]
        public string Value
        {
            get
            {
                return valueField;
            }
            set
            {
                valueField = value;
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.3082")]
    [Serializable()]
    [XmlType(Namespace = "http://schemas.microsoft.com/sharepoint/soap/")]
    public enum FieldType
    {
        /// <remarks/>
        Invalid,

        /// <remarks/>
        Integer,

        /// <remarks/>
        Text,

        /// <remarks/>
        Note,

        /// <remarks/>
        DateTime,

        /// <remarks/>
        Counter,

        /// <remarks/>
        Choice,

        /// <remarks/>
        Lookup,

        /// <remarks/>
        Boolean,

        /// <remarks/>
        Number,

        /// <remarks/>
        Currency,

        /// <remarks/>
        URL,

        /// <remarks/>
        Computed,

        /// <remarks/>
        Threading,

        /// <remarks/>
        Guid,

        /// <remarks/>
        MultiChoice,

        /// <remarks/>
        GridChoice,

        /// <remarks/>
        Calculated,

        /// <remarks/>
        File,

        /// <remarks/>
        Attachments,

        /// <remarks/>
        User,

        /// <remarks/>
        Recurrence,

        /// <remarks/>
        CrossProjectLink,

        /// <remarks/>
        ModStat,

        /// <remarks/>
        AllDayEvent,

        /// <remarks/>
        Error,
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CopyIntoItemsLocalCompletedEventHandler(object sender, CopyIntoItemsLocalCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CopyIntoItemsLocalCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CopyIntoItemsLocalCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public uint Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((uint)(results[0]));
            }
        }

        /// <remarks/>
        public CopyResult[] Results
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CopyResult[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CopyIntoItemsCompletedEventHandler(object sender, CopyIntoItemsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CopyIntoItemsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CopyIntoItemsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public uint Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((uint)(results[0]));
            }
        }

        /// <remarks/>
        public CopyResult[] Results
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CopyResult[])(results[1]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetItemCompletedEventHandler(object sender, GetItemCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetItemCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetItemCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public uint Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((uint)(results[0]));
            }
        }

        /// <remarks/>
        public FieldInformation[] Fields
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FieldInformation[])(results[1]));
            }
        }

        /// <remarks/>
        public byte[] Stream
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((byte[])(results[2]));
            }
        }
    }
}

#pragma warning restore 1591