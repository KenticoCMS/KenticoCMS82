//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace CMS.SharePoint.Lists
{
    using System;


    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "ListsSoap", Namespace = "http://schemas.microsoft.com/sharepoint/soap/")]
    public partial class Lists : SoapHttpClientProtocol
    {
        private SendOrPostCallback GetListOperationCompleted;

        private SendOrPostCallback GetListAndViewOperationCompleted;

        private SendOrPostCallback DeleteListOperationCompleted;

        private SendOrPostCallback AddListOperationCompleted;

        private SendOrPostCallback AddListFromFeatureOperationCompleted;

        private SendOrPostCallback UpdateListOperationCompleted;

        private SendOrPostCallback GetListCollectionOperationCompleted;

        private SendOrPostCallback GetListItemsOperationCompleted;

        private SendOrPostCallback GetListItemChangesOperationCompleted;

        private SendOrPostCallback GetListItemChangesSinceTokenOperationCompleted;

        private SendOrPostCallback UpdateListItemsOperationCompleted;

        private SendOrPostCallback AddDiscussionBoardItemOperationCompleted;

        private SendOrPostCallback GetVersionCollectionOperationCompleted;

        private SendOrPostCallback AddAttachmentOperationCompleted;

        private SendOrPostCallback GetAttachmentCollectionOperationCompleted;

        private SendOrPostCallback DeleteAttachmentOperationCompleted;

        private SendOrPostCallback CheckOutFileOperationCompleted;

        private SendOrPostCallback UndoCheckOutOperationCompleted;

        private SendOrPostCallback CheckInFileOperationCompleted;

        private SendOrPostCallback GetListContentTypesOperationCompleted;

        private SendOrPostCallback GetListContentTypeOperationCompleted;

        private SendOrPostCallback CreateContentTypeOperationCompleted;

        private SendOrPostCallback UpdateContentTypeOperationCompleted;

        private SendOrPostCallback DeleteContentTypeOperationCompleted;

        private SendOrPostCallback UpdateContentTypeXmlDocumentOperationCompleted;

        private SendOrPostCallback UpdateContentTypesXmlDocumentOperationCompleted;

        private SendOrPostCallback DeleteContentTypeXmlDocumentOperationCompleted;

        private SendOrPostCallback ApplyContentTypeToListOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;


        /// <remarks/>
        public Lists(string url)
        {
            Url = url;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }


        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetListCompletedEventHandler GetListCompleted;

        /// <remarks/>
        public event GetListAndViewCompletedEventHandler GetListAndViewCompleted;

        /// <remarks/>
        public event DeleteListCompletedEventHandler DeleteListCompleted;

        /// <remarks/>
        public event AddListCompletedEventHandler AddListCompleted;

        /// <remarks/>
        public event AddListFromFeatureCompletedEventHandler AddListFromFeatureCompleted;

        /// <remarks/>
        public event UpdateListCompletedEventHandler UpdateListCompleted;

        /// <remarks/>
        public event GetListCollectionCompletedEventHandler GetListCollectionCompleted;

        /// <remarks/>
        public event GetListItemsCompletedEventHandler GetListItemsCompleted;

        /// <remarks/>
        public event GetListItemChangesCompletedEventHandler GetListItemChangesCompleted;

        /// <remarks/>
        public event GetListItemChangesSinceTokenCompletedEventHandler GetListItemChangesSinceTokenCompleted;

        /// <remarks/>
        public event UpdateListItemsCompletedEventHandler UpdateListItemsCompleted;

        /// <remarks/>
        public event AddDiscussionBoardItemCompletedEventHandler AddDiscussionBoardItemCompleted;

        /// <remarks/>
        public event GetVersionCollectionCompletedEventHandler GetVersionCollectionCompleted;

        /// <remarks/>
        public event AddAttachmentCompletedEventHandler AddAttachmentCompleted;

        /// <remarks/>
        public event GetAttachmentCollectionCompletedEventHandler GetAttachmentCollectionCompleted;

        /// <remarks/>
        public event DeleteAttachmentCompletedEventHandler DeleteAttachmentCompleted;

        /// <remarks/>
        public event CheckOutFileCompletedEventHandler CheckOutFileCompleted;

        /// <remarks/>
        public event UndoCheckOutCompletedEventHandler UndoCheckOutCompleted;

        /// <remarks/>
        public event CheckInFileCompletedEventHandler CheckInFileCompleted;

        /// <remarks/>
        public event GetListContentTypesCompletedEventHandler GetListContentTypesCompleted;

        /// <remarks/>
        public event GetListContentTypeCompletedEventHandler GetListContentTypeCompleted;

        /// <remarks/>
        public event CreateContentTypeCompletedEventHandler CreateContentTypeCompleted;

        /// <remarks/>
        public event UpdateContentTypeCompletedEventHandler UpdateContentTypeCompleted;

        /// <remarks/>
        public event DeleteContentTypeCompletedEventHandler DeleteContentTypeCompleted;

        /// <remarks/>
        public event UpdateContentTypeXmlDocumentCompletedEventHandler UpdateContentTypeXmlDocumentCompleted;

        /// <remarks/>
        public event UpdateContentTypesXmlDocumentCompletedEventHandler UpdateContentTypesXmlDocumentCompleted;

        /// <remarks/>
        public event DeleteContentTypeXmlDocumentCompletedEventHandler DeleteContentTypeXmlDocumentCompleted;

        /// <remarks/>
        public event ApplyContentTypeToListCompletedEventHandler ApplyContentTypeToListCompleted;


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetList(string listName)
        {
            object[] results = Invoke("GetList", new object[]
                                                     {
                                                         listName
                                                     });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListAsync(string listName)
        {
            GetListAsync(listName, null);
        }


        /// <remarks/>
        public void GetListAsync(string listName, object userState)
        {
            if ((GetListOperationCompleted == null))
            {
                GetListOperationCompleted = new SendOrPostCallback(OnGetListOperationCompleted);
            }
            InvokeAsync("GetList", new object[]
                                       {
                                           listName
                                       }, GetListOperationCompleted, userState);
        }


        private void OnGetListOperationCompleted(object arg)
        {
            if ((GetListCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListCompleted(this, new GetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListAndView", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListAndView(string listName, string viewName)
        {
            object[] results = Invoke("GetListAndView", new object[]
                                                            {
                                                                listName,
                                                                viewName
                                                            });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListAndViewAsync(string listName, string viewName)
        {
            GetListAndViewAsync(listName, viewName, null);
        }


        /// <remarks/>
        public void GetListAndViewAsync(string listName, string viewName, object userState)
        {
            if ((GetListAndViewOperationCompleted == null))
            {
                GetListAndViewOperationCompleted = new SendOrPostCallback(OnGetListAndViewOperationCompleted);
            }
            InvokeAsync("GetListAndView", new object[]
                                              {
                                                  listName,
                                                  viewName
                                              }, GetListAndViewOperationCompleted, userState);
        }


        private void OnGetListAndViewOperationCompleted(object arg)
        {
            if ((GetListAndViewCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListAndViewCompleted(this, new GetListAndViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/DeleteList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteList(string listName)
        {
            Invoke("DeleteList", new object[]
                                     {
                                         listName
                                     });
        }


        /// <remarks/>
        public void DeleteListAsync(string listName)
        {
            DeleteListAsync(listName, null);
        }


        /// <remarks/>
        public void DeleteListAsync(string listName, object userState)
        {
            if ((DeleteListOperationCompleted == null))
            {
                DeleteListOperationCompleted = new SendOrPostCallback(OnDeleteListOperationCompleted);
            }
            InvokeAsync("DeleteList", new object[]
                                          {
                                              listName
                                          }, DeleteListOperationCompleted, userState);
        }


        private void OnDeleteListOperationCompleted(object arg)
        {
            if ((DeleteListCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteListCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/AddList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode AddList(string listName, string description, int templateID)
        {
            object[] results = Invoke("AddList", new object[]
                                                     {
                                                         listName,
                                                         description,
                                                         templateID
                                                     });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void AddListAsync(string listName, string description, int templateID)
        {
            AddListAsync(listName, description, templateID, null);
        }


        /// <remarks/>
        public void AddListAsync(string listName, string description, int templateID, object userState)
        {
            if ((AddListOperationCompleted == null))
            {
                AddListOperationCompleted = new SendOrPostCallback(OnAddListOperationCompleted);
            }
            InvokeAsync("AddList", new object[]
                                       {
                                           listName,
                                           description,
                                           templateID
                                       }, AddListOperationCompleted, userState);
        }


        private void OnAddListOperationCompleted(object arg)
        {
            if ((AddListCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                AddListCompleted(this, new AddListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/AddListFromFeature", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode AddListFromFeature(string listName, string description, Guid featureID, int templateID)
        {
            object[] results = Invoke("AddListFromFeature", new object[]
                                                                {
                                                                    listName,
                                                                    description,
                                                                    featureID,
                                                                    templateID
                                                                });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void AddListFromFeatureAsync(string listName, string description, Guid featureID, int templateID)
        {
            AddListFromFeatureAsync(listName, description, featureID, templateID, null);
        }


        /// <remarks/>
        public void AddListFromFeatureAsync(string listName, string description, Guid featureID, int templateID, object userState)
        {
            if ((AddListFromFeatureOperationCompleted == null))
            {
                AddListFromFeatureOperationCompleted = new SendOrPostCallback(OnAddListFromFeatureOperationCompleted);
            }
            InvokeAsync("AddListFromFeature", new object[]
                                                  {
                                                      listName,
                                                      description,
                                                      featureID,
                                                      templateID
                                                  }, AddListFromFeatureOperationCompleted, userState);
        }


        private void OnAddListFromFeatureOperationCompleted(object arg)
        {
            if ((AddListFromFeatureCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                AddListFromFeatureCompleted(this, new AddListFromFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/UpdateList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode UpdateList(string listName, XmlNode listProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string listVersion)
        {
            object[] results = Invoke("UpdateList", new object[]
                                                        {
                                                            listName,
                                                            listProperties,
                                                            newFields,
                                                            updateFields,
                                                            deleteFields,
                                                            listVersion
                                                        });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void UpdateListAsync(string listName, XmlNode listProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string listVersion)
        {
            UpdateListAsync(listName, listProperties, newFields, updateFields, deleteFields, listVersion, null);
        }


        /// <remarks/>
        public void UpdateListAsync(string listName, XmlNode listProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string listVersion, object userState)
        {
            if ((UpdateListOperationCompleted == null))
            {
                UpdateListOperationCompleted = new SendOrPostCallback(OnUpdateListOperationCompleted);
            }
            InvokeAsync("UpdateList", new object[]
                                          {
                                              listName,
                                              listProperties,
                                              newFields,
                                              updateFields,
                                              deleteFields,
                                              listVersion
                                          }, UpdateListOperationCompleted, userState);
        }


        private void OnUpdateListOperationCompleted(object arg)
        {
            if ((UpdateListCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateListCompleted(this, new UpdateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListCollection", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListCollection()
        {
            object[] results = Invoke("GetListCollection", new object[0]);
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListCollectionAsync()
        {
            GetListCollectionAsync(null);
        }


        /// <remarks/>
        public void GetListCollectionAsync(object userState)
        {
            if ((GetListCollectionOperationCompleted == null))
            {
                GetListCollectionOperationCompleted = new SendOrPostCallback(OnGetListCollectionOperationCompleted);
            }
            InvokeAsync("GetListCollection", new object[0], GetListCollectionOperationCompleted, userState);
        }


        private void OnGetListCollectionOperationCompleted(object arg)
        {
            if ((GetListCollectionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListCollectionCompleted(this, new GetListCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListItems", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListItems(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string webID)
        {
            object[] results = Invoke("GetListItems", new object[]
                                                          {
                                                              listName,
                                                              viewName,
                                                              query,
                                                              viewFields,
                                                              rowLimit,
                                                              queryOptions,
                                                              webID
                                                          });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListItemsAsync(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string webID)
        {
            GetListItemsAsync(listName, viewName, query, viewFields, rowLimit, queryOptions, webID, null);
        }


        /// <remarks/>
        public void GetListItemsAsync(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string webID, object userState)
        {
            if ((GetListItemsOperationCompleted == null))
            {
                GetListItemsOperationCompleted = new SendOrPostCallback(OnGetListItemsOperationCompleted);
            }
            InvokeAsync("GetListItems", new object[]
                                            {
                                                listName,
                                                viewName,
                                                query,
                                                viewFields,
                                                rowLimit,
                                                queryOptions,
                                                webID
                                            }, GetListItemsOperationCompleted, userState);
        }


        private void OnGetListItemsOperationCompleted(object arg)
        {
            if ((GetListItemsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListItemsCompleted(this, new GetListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListItemChanges", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListItemChanges(string listName, XmlNode viewFields, string since, XmlNode contains)
        {
            object[] results = Invoke("GetListItemChanges", new object[]
                                                                {
                                                                    listName,
                                                                    viewFields,
                                                                    since,
                                                                    contains
                                                                });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListItemChangesAsync(string listName, XmlNode viewFields, string since, XmlNode contains)
        {
            GetListItemChangesAsync(listName, viewFields, since, contains, null);
        }


        /// <remarks/>
        public void GetListItemChangesAsync(string listName, XmlNode viewFields, string since, XmlNode contains, object userState)
        {
            if ((GetListItemChangesOperationCompleted == null))
            {
                GetListItemChangesOperationCompleted = new SendOrPostCallback(OnGetListItemChangesOperationCompleted);
            }
            InvokeAsync("GetListItemChanges", new object[]
                                                  {
                                                      listName,
                                                      viewFields,
                                                      since,
                                                      contains
                                                  }, GetListItemChangesOperationCompleted, userState);
        }


        private void OnGetListItemChangesOperationCompleted(object arg)
        {
            if ((GetListItemChangesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListItemChangesCompleted(this, new GetListItemChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListItemChangesSinceToken", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListItemChangesSinceToken(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string changeToken, XmlNode contains)
        {
            object[] results = Invoke("GetListItemChangesSinceToken", new object[]
                                                                          {
                                                                              listName,
                                                                              viewName,
                                                                              query,
                                                                              viewFields,
                                                                              rowLimit,
                                                                              queryOptions,
                                                                              changeToken,
                                                                              contains
                                                                          });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListItemChangesSinceTokenAsync(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string changeToken, XmlNode contains)
        {
            GetListItemChangesSinceTokenAsync(listName, viewName, query, viewFields, rowLimit, queryOptions, changeToken, contains, null);
        }


        /// <remarks/>
        public void GetListItemChangesSinceTokenAsync(string listName, string viewName, XmlNode query, XmlNode viewFields, string rowLimit, XmlNode queryOptions, string changeToken, XmlNode contains, object userState)
        {
            if ((GetListItemChangesSinceTokenOperationCompleted == null))
            {
                GetListItemChangesSinceTokenOperationCompleted = new SendOrPostCallback(OnGetListItemChangesSinceTokenOperationCompleted);
            }
            InvokeAsync("GetListItemChangesSinceToken", new object[]
                                                            {
                                                                listName,
                                                                viewName,
                                                                query,
                                                                viewFields,
                                                                rowLimit,
                                                                queryOptions,
                                                                changeToken,
                                                                contains
                                                            }, GetListItemChangesSinceTokenOperationCompleted, userState);
        }


        private void OnGetListItemChangesSinceTokenOperationCompleted(object arg)
        {
            if ((GetListItemChangesSinceTokenCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListItemChangesSinceTokenCompleted(this, new GetListItemChangesSinceTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/UpdateListItems", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode UpdateListItems(string listName, XmlNode updates)
        {
            object[] results = Invoke("UpdateListItems", new object[]
                                                             {
                                                                 listName,
                                                                 updates
                                                             });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void UpdateListItemsAsync(string listName, XmlNode updates)
        {
            UpdateListItemsAsync(listName, updates, null);
        }


        /// <remarks/>
        public void UpdateListItemsAsync(string listName, XmlNode updates, object userState)
        {
            if ((UpdateListItemsOperationCompleted == null))
            {
                UpdateListItemsOperationCompleted = new SendOrPostCallback(OnUpdateListItemsOperationCompleted);
            }
            InvokeAsync("UpdateListItems", new object[]
                                               {
                                                   listName,
                                                   updates
                                               }, UpdateListItemsOperationCompleted, userState);
        }


        private void OnUpdateListItemsOperationCompleted(object arg)
        {
            if ((UpdateListItemsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateListItemsCompleted(this, new UpdateListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/AddDiscussionBoardItem", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode AddDiscussionBoardItem(string listName, [XmlElement(DataType = "base64Binary")] byte[] message)
        {
            object[] results = Invoke("AddDiscussionBoardItem", new object[]
                                                                    {
                                                                        listName,
                                                                        message
                                                                    });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void AddDiscussionBoardItemAsync(string listName, byte[] message)
        {
            AddDiscussionBoardItemAsync(listName, message, null);
        }


        /// <remarks/>
        public void AddDiscussionBoardItemAsync(string listName, byte[] message, object userState)
        {
            if ((AddDiscussionBoardItemOperationCompleted == null))
            {
                AddDiscussionBoardItemOperationCompleted = new SendOrPostCallback(OnAddDiscussionBoardItemOperationCompleted);
            }
            InvokeAsync("AddDiscussionBoardItem", new object[]
                                                      {
                                                          listName,
                                                          message
                                                      }, AddDiscussionBoardItemOperationCompleted, userState);
        }


        private void OnAddDiscussionBoardItemOperationCompleted(object arg)
        {
            if ((AddDiscussionBoardItemCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                AddDiscussionBoardItemCompleted(this, new AddDiscussionBoardItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetVersionCollection", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetVersionCollection(string strlistID, string strlistItemID, string strFieldName)
        {
            object[] results = Invoke("GetVersionCollection", new object[]
                                                                  {
                                                                      strlistID,
                                                                      strlistItemID,
                                                                      strFieldName
                                                                  });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetVersionCollectionAsync(string strlistID, string strlistItemID, string strFieldName)
        {
            GetVersionCollectionAsync(strlistID, strlistItemID, strFieldName, null);
        }


        /// <remarks/>
        public void GetVersionCollectionAsync(string strlistID, string strlistItemID, string strFieldName, object userState)
        {
            if ((GetVersionCollectionOperationCompleted == null))
            {
                GetVersionCollectionOperationCompleted = new SendOrPostCallback(OnGetVersionCollectionOperationCompleted);
            }
            InvokeAsync("GetVersionCollection", new object[]
                                                    {
                                                        strlistID,
                                                        strlistItemID,
                                                        strFieldName
                                                    }, GetVersionCollectionOperationCompleted, userState);
        }


        private void OnGetVersionCollectionOperationCompleted(object arg)
        {
            if ((GetVersionCollectionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetVersionCollectionCompleted(this, new GetVersionCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/AddAttachment", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string AddAttachment(string listName, string listItemID, string fileName, [XmlElement(DataType = "base64Binary")] byte[] attachment)
        {
            object[] results = Invoke("AddAttachment", new object[]
                                                           {
                                                               listName,
                                                               listItemID,
                                                               fileName,
                                                               attachment
                                                           });
            return ((string)(results[0]));
        }


        /// <remarks/>
        public void AddAttachmentAsync(string listName, string listItemID, string fileName, byte[] attachment)
        {
            AddAttachmentAsync(listName, listItemID, fileName, attachment, null);
        }


        /// <remarks/>
        public void AddAttachmentAsync(string listName, string listItemID, string fileName, byte[] attachment, object userState)
        {
            if ((AddAttachmentOperationCompleted == null))
            {
                AddAttachmentOperationCompleted = new SendOrPostCallback(OnAddAttachmentOperationCompleted);
            }
            InvokeAsync("AddAttachment", new object[]
                                             {
                                                 listName,
                                                 listItemID,
                                                 fileName,
                                                 attachment
                                             }, AddAttachmentOperationCompleted, userState);
        }


        private void OnAddAttachmentOperationCompleted(object arg)
        {
            if ((AddAttachmentCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                AddAttachmentCompleted(this, new AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetAttachmentCollection", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetAttachmentCollection(string listName, string listItemID)
        {
            object[] results = Invoke("GetAttachmentCollection", new object[]
                                                                     {
                                                                         listName,
                                                                         listItemID
                                                                     });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetAttachmentCollectionAsync(string listName, string listItemID)
        {
            GetAttachmentCollectionAsync(listName, listItemID, null);
        }


        /// <remarks/>
        public void GetAttachmentCollectionAsync(string listName, string listItemID, object userState)
        {
            if ((GetAttachmentCollectionOperationCompleted == null))
            {
                GetAttachmentCollectionOperationCompleted = new SendOrPostCallback(OnGetAttachmentCollectionOperationCompleted);
            }
            InvokeAsync("GetAttachmentCollection", new object[]
                                                       {
                                                           listName,
                                                           listItemID
                                                       }, GetAttachmentCollectionOperationCompleted, userState);
        }


        private void OnGetAttachmentCollectionOperationCompleted(object arg)
        {
            if ((GetAttachmentCollectionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetAttachmentCollectionCompleted(this, new GetAttachmentCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/DeleteAttachment", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void DeleteAttachment(string listName, string listItemID, string url)
        {
            Invoke("DeleteAttachment", new object[]
                                           {
                                               listName,
                                               listItemID,
                                               url
                                           });
        }


        /// <remarks/>
        public void DeleteAttachmentAsync(string listName, string listItemID, string url)
        {
            DeleteAttachmentAsync(listName, listItemID, url, null);
        }


        /// <remarks/>
        public void DeleteAttachmentAsync(string listName, string listItemID, string url, object userState)
        {
            if ((DeleteAttachmentOperationCompleted == null))
            {
                DeleteAttachmentOperationCompleted = new SendOrPostCallback(OnDeleteAttachmentOperationCompleted);
            }
            InvokeAsync("DeleteAttachment", new object[]
                                                {
                                                    listName,
                                                    listItemID,
                                                    url
                                                }, DeleteAttachmentOperationCompleted, userState);
        }


        private void OnDeleteAttachmentOperationCompleted(object arg)
        {
            if ((DeleteAttachmentCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteAttachmentCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/CheckOutFile", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public bool CheckOutFile(string pageUrl, string checkoutToLocal, string lastmodified)
        {
            object[] results = Invoke("CheckOutFile", new object[]
                                                          {
                                                              pageUrl,
                                                              checkoutToLocal,
                                                              lastmodified
                                                          });
            return ((bool)(results[0]));
        }


        /// <remarks/>
        public void CheckOutFileAsync(string pageUrl, string checkoutToLocal, string lastmodified)
        {
            CheckOutFileAsync(pageUrl, checkoutToLocal, lastmodified, null);
        }


        /// <remarks/>
        public void CheckOutFileAsync(string pageUrl, string checkoutToLocal, string lastmodified, object userState)
        {
            if ((CheckOutFileOperationCompleted == null))
            {
                CheckOutFileOperationCompleted = new SendOrPostCallback(OnCheckOutFileOperationCompleted);
            }
            InvokeAsync("CheckOutFile", new object[]
                                            {
                                                pageUrl,
                                                checkoutToLocal,
                                                lastmodified
                                            }, CheckOutFileOperationCompleted, userState);
        }


        private void OnCheckOutFileOperationCompleted(object arg)
        {
            if ((CheckOutFileCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CheckOutFileCompleted(this, new CheckOutFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/UndoCheckOut", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public bool UndoCheckOut(string pageUrl)
        {
            object[] results = Invoke("UndoCheckOut", new object[]
                                                          {
                                                              pageUrl
                                                          });
            return ((bool)(results[0]));
        }


        /// <remarks/>
        public void UndoCheckOutAsync(string pageUrl)
        {
            UndoCheckOutAsync(pageUrl, null);
        }


        /// <remarks/>
        public void UndoCheckOutAsync(string pageUrl, object userState)
        {
            if ((UndoCheckOutOperationCompleted == null))
            {
                UndoCheckOutOperationCompleted = new SendOrPostCallback(OnUndoCheckOutOperationCompleted);
            }
            InvokeAsync("UndoCheckOut", new object[]
                                            {
                                                pageUrl
                                            }, UndoCheckOutOperationCompleted, userState);
        }


        private void OnUndoCheckOutOperationCompleted(object arg)
        {
            if ((UndoCheckOutCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UndoCheckOutCompleted(this, new UndoCheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/CheckInFile", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public bool CheckInFile(string pageUrl, string comment, string CheckinType)
        {
            object[] results = Invoke("CheckInFile", new object[]
                                                         {
                                                             pageUrl,
                                                             comment,
                                                             CheckinType
                                                         });
            return ((bool)(results[0]));
        }


        /// <remarks/>
        public void CheckInFileAsync(string pageUrl, string comment, string CheckinType)
        {
            CheckInFileAsync(pageUrl, comment, CheckinType, null);
        }


        /// <remarks/>
        public void CheckInFileAsync(string pageUrl, string comment, string CheckinType, object userState)
        {
            if ((CheckInFileOperationCompleted == null))
            {
                CheckInFileOperationCompleted = new SendOrPostCallback(OnCheckInFileOperationCompleted);
            }
            InvokeAsync("CheckInFile", new object[]
                                           {
                                               pageUrl,
                                               comment,
                                               CheckinType
                                           }, CheckInFileOperationCompleted, userState);
        }


        private void OnCheckInFileOperationCompleted(object arg)
        {
            if ((CheckInFileCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CheckInFileCompleted(this, new CheckInFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListContentTypes", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListContentTypes(string listName, string contentTypeId)
        {
            object[] results = Invoke("GetListContentTypes", new object[]
                                                                 {
                                                                     listName,
                                                                     contentTypeId
                                                                 });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListContentTypesAsync(string listName, string contentTypeId)
        {
            GetListContentTypesAsync(listName, contentTypeId, null);
        }


        /// <remarks/>
        public void GetListContentTypesAsync(string listName, string contentTypeId, object userState)
        {
            if ((GetListContentTypesOperationCompleted == null))
            {
                GetListContentTypesOperationCompleted = new SendOrPostCallback(OnGetListContentTypesOperationCompleted);
            }
            InvokeAsync("GetListContentTypes", new object[]
                                                   {
                                                       listName,
                                                       contentTypeId
                                                   }, GetListContentTypesOperationCompleted, userState);
        }


        private void OnGetListContentTypesOperationCompleted(object arg)
        {
            if ((GetListContentTypesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListContentTypesCompleted(this, new GetListContentTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/GetListContentType", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode GetListContentType(string listName, string contentTypeId)
        {
            object[] results = Invoke("GetListContentType", new object[]
                                                                {
                                                                    listName,
                                                                    contentTypeId
                                                                });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void GetListContentTypeAsync(string listName, string contentTypeId)
        {
            GetListContentTypeAsync(listName, contentTypeId, null);
        }


        /// <remarks/>
        public void GetListContentTypeAsync(string listName, string contentTypeId, object userState)
        {
            if ((GetListContentTypeOperationCompleted == null))
            {
                GetListContentTypeOperationCompleted = new SendOrPostCallback(OnGetListContentTypeOperationCompleted);
            }
            InvokeAsync("GetListContentType", new object[]
                                                  {
                                                      listName,
                                                      contentTypeId
                                                  }, GetListContentTypeOperationCompleted, userState);
        }


        private void OnGetListContentTypeOperationCompleted(object arg)
        {
            if ((GetListContentTypeCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetListContentTypeCompleted(this, new GetListContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/CreateContentType", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public string CreateContentType(string listName, string displayName, string parentType, XmlNode fields, XmlNode contentTypeProperties, string addToView)
        {
            object[] results = Invoke("CreateContentType", new object[]
                                                               {
                                                                   listName,
                                                                   displayName,
                                                                   parentType,
                                                                   fields,
                                                                   contentTypeProperties,
                                                                   addToView
                                                               });
            return ((string)(results[0]));
        }


        /// <remarks/>
        public void CreateContentTypeAsync(string listName, string displayName, string parentType, XmlNode fields, XmlNode contentTypeProperties, string addToView)
        {
            CreateContentTypeAsync(listName, displayName, parentType, fields, contentTypeProperties, addToView, null);
        }


        /// <remarks/>
        public void CreateContentTypeAsync(string listName, string displayName, string parentType, XmlNode fields, XmlNode contentTypeProperties, string addToView, object userState)
        {
            if ((CreateContentTypeOperationCompleted == null))
            {
                CreateContentTypeOperationCompleted = new SendOrPostCallback(OnCreateContentTypeOperationCompleted);
            }
            InvokeAsync("CreateContentType", new object[]
                                                 {
                                                     listName,
                                                     displayName,
                                                     parentType,
                                                     fields,
                                                     contentTypeProperties,
                                                     addToView
                                                 }, CreateContentTypeOperationCompleted, userState);
        }


        private void OnCreateContentTypeOperationCompleted(object arg)
        {
            if ((CreateContentTypeCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                CreateContentTypeCompleted(this, new CreateContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/UpdateContentType", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode UpdateContentType(string listName, string contentTypeId, XmlNode contentTypeProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string addToView)
        {
            object[] results = Invoke("UpdateContentType", new object[]
                                                               {
                                                                   listName,
                                                                   contentTypeId,
                                                                   contentTypeProperties,
                                                                   newFields,
                                                                   updateFields,
                                                                   deleteFields,
                                                                   addToView
                                                               });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void UpdateContentTypeAsync(string listName, string contentTypeId, XmlNode contentTypeProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string addToView)
        {
            UpdateContentTypeAsync(listName, contentTypeId, contentTypeProperties, newFields, updateFields, deleteFields, addToView, null);
        }


        /// <remarks/>
        public void UpdateContentTypeAsync(string listName, string contentTypeId, XmlNode contentTypeProperties, XmlNode newFields, XmlNode updateFields, XmlNode deleteFields, string addToView, object userState)
        {
            if ((UpdateContentTypeOperationCompleted == null))
            {
                UpdateContentTypeOperationCompleted = new SendOrPostCallback(OnUpdateContentTypeOperationCompleted);
            }
            InvokeAsync("UpdateContentType", new object[]
                                                 {
                                                     listName,
                                                     contentTypeId,
                                                     contentTypeProperties,
                                                     newFields,
                                                     updateFields,
                                                     deleteFields,
                                                     addToView
                                                 }, UpdateContentTypeOperationCompleted, userState);
        }


        private void OnUpdateContentTypeOperationCompleted(object arg)
        {
            if ((UpdateContentTypeCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateContentTypeCompleted(this, new UpdateContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/DeleteContentType", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode DeleteContentType(string listName, string contentTypeId)
        {
            object[] results = Invoke("DeleteContentType", new object[]
                                                               {
                                                                   listName,
                                                                   contentTypeId
                                                               });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void DeleteContentTypeAsync(string listName, string contentTypeId)
        {
            DeleteContentTypeAsync(listName, contentTypeId, null);
        }


        /// <remarks/>
        public void DeleteContentTypeAsync(string listName, string contentTypeId, object userState)
        {
            if ((DeleteContentTypeOperationCompleted == null))
            {
                DeleteContentTypeOperationCompleted = new SendOrPostCallback(OnDeleteContentTypeOperationCompleted);
            }
            InvokeAsync("DeleteContentType", new object[]
                                                 {
                                                     listName,
                                                     contentTypeId
                                                 }, DeleteContentTypeOperationCompleted, userState);
        }


        private void OnDeleteContentTypeOperationCompleted(object arg)
        {
            if ((DeleteContentTypeCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteContentTypeCompleted(this, new DeleteContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/UpdateContentTypeXmlDocument", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode UpdateContentTypeXmlDocument(string listName, string contentTypeId, XmlNode newDocument)
        {
            object[] results = Invoke("UpdateContentTypeXmlDocument", new object[]
                                                                          {
                                                                              listName,
                                                                              contentTypeId,
                                                                              newDocument
                                                                          });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void UpdateContentTypeXmlDocumentAsync(string listName, string contentTypeId, XmlNode newDocument)
        {
            UpdateContentTypeXmlDocumentAsync(listName, contentTypeId, newDocument, null);
        }


        /// <remarks/>
        public void UpdateContentTypeXmlDocumentAsync(string listName, string contentTypeId, XmlNode newDocument, object userState)
        {
            if ((UpdateContentTypeXmlDocumentOperationCompleted == null))
            {
                UpdateContentTypeXmlDocumentOperationCompleted = new SendOrPostCallback(OnUpdateContentTypeXmlDocumentOperationCompleted);
            }
            InvokeAsync("UpdateContentTypeXmlDocument", new object[]
                                                            {
                                                                listName,
                                                                contentTypeId,
                                                                newDocument
                                                            }, UpdateContentTypeXmlDocumentOperationCompleted, userState);
        }


        private void OnUpdateContentTypeXmlDocumentOperationCompleted(object arg)
        {
            if ((UpdateContentTypeXmlDocumentCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateContentTypeXmlDocumentCompleted(this, new UpdateContentTypeXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/UpdateContentTypesXmlDocument", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode UpdateContentTypesXmlDocument(string listName, XmlNode newDocument)
        {
            object[] results = Invoke("UpdateContentTypesXmlDocument", new object[]
                                                                           {
                                                                               listName,
                                                                               newDocument
                                                                           });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void UpdateContentTypesXmlDocumentAsync(string listName, XmlNode newDocument)
        {
            UpdateContentTypesXmlDocumentAsync(listName, newDocument, null);
        }


        /// <remarks/>
        public void UpdateContentTypesXmlDocumentAsync(string listName, XmlNode newDocument, object userState)
        {
            if ((UpdateContentTypesXmlDocumentOperationCompleted == null))
            {
                UpdateContentTypesXmlDocumentOperationCompleted = new SendOrPostCallback(OnUpdateContentTypesXmlDocumentOperationCompleted);
            }
            InvokeAsync("UpdateContentTypesXmlDocument", new object[]
                                                             {
                                                                 listName,
                                                                 newDocument
                                                             }, UpdateContentTypesXmlDocumentOperationCompleted, userState);
        }


        private void OnUpdateContentTypesXmlDocumentOperationCompleted(object arg)
        {
            if ((UpdateContentTypesXmlDocumentCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                UpdateContentTypesXmlDocumentCompleted(this, new UpdateContentTypesXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/DeleteContentTypeXmlDocument", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode DeleteContentTypeXmlDocument(string listName, string contentTypeId, string documentUri)
        {
            object[] results = Invoke("DeleteContentTypeXmlDocument", new object[]
                                                                          {
                                                                              listName,
                                                                              contentTypeId,
                                                                              documentUri
                                                                          });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void DeleteContentTypeXmlDocumentAsync(string listName, string contentTypeId, string documentUri)
        {
            DeleteContentTypeXmlDocumentAsync(listName, contentTypeId, documentUri, null);
        }


        /// <remarks/>
        public void DeleteContentTypeXmlDocumentAsync(string listName, string contentTypeId, string documentUri, object userState)
        {
            if ((DeleteContentTypeXmlDocumentOperationCompleted == null))
            {
                DeleteContentTypeXmlDocumentOperationCompleted = new SendOrPostCallback(OnDeleteContentTypeXmlDocumentOperationCompleted);
            }
            InvokeAsync("DeleteContentTypeXmlDocument", new object[]
                                                            {
                                                                listName,
                                                                contentTypeId,
                                                                documentUri
                                                            }, DeleteContentTypeXmlDocumentOperationCompleted, userState);
        }


        private void OnDeleteContentTypeXmlDocumentOperationCompleted(object arg)
        {
            if ((DeleteContentTypeXmlDocumentCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                DeleteContentTypeXmlDocumentCompleted(this, new DeleteContentTypeXmlDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [SoapDocumentMethod("http://schemas.microsoft.com/sharepoint/soap/ApplyContentTypeToList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public XmlNode ApplyContentTypeToList(string webUrl, string contentTypeId, string listName)
        {
            object[] results = Invoke("ApplyContentTypeToList", new object[]
                                                                    {
                                                                        webUrl,
                                                                        contentTypeId,
                                                                        listName
                                                                    });
            return ((XmlNode)(results[0]));
        }


        /// <remarks/>
        public void ApplyContentTypeToListAsync(string webUrl, string contentTypeId, string listName)
        {
            ApplyContentTypeToListAsync(webUrl, contentTypeId, listName, null);
        }


        /// <remarks/>
        public void ApplyContentTypeToListAsync(string webUrl, string contentTypeId, string listName, object userState)
        {
            if ((ApplyContentTypeToListOperationCompleted == null))
            {
                ApplyContentTypeToListOperationCompleted = new SendOrPostCallback(OnApplyContentTypeToListOperationCompleted);
            }
            InvokeAsync("ApplyContentTypeToList", new object[]
                                                      {
                                                          webUrl,
                                                          contentTypeId,
                                                          listName
                                                      }, ApplyContentTypeToListOperationCompleted, userState);
        }


        private void OnApplyContentTypeToListOperationCompleted(object arg)
        {
            if ((ApplyContentTypeToListCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                ApplyContentTypeToListCompleted(this, new ApplyContentTypeToListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }


        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListCompletedEventHandler(object sender, GetListCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListAndViewCompletedEventHandler(object sender, GetListAndViewCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListAndViewCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListAndViewCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteListCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddListCompletedEventHandler(object sender, AddListCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class AddListCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal AddListCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddListFromFeatureCompletedEventHandler(object sender, AddListFromFeatureCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class AddListFromFeatureCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal AddListFromFeatureCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateListCompletedEventHandler(object sender, UpdateListCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateListCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UpdateListCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListCollectionCompletedEventHandler(object sender, GetListCollectionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListCollectionCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListCollectionCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListItemsCompletedEventHandler(object sender, GetListItemsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListItemsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListItemsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListItemChangesCompletedEventHandler(object sender, GetListItemChangesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListItemChangesCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListItemChangesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListItemChangesSinceTokenCompletedEventHandler(object sender, GetListItemChangesSinceTokenCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListItemChangesSinceTokenCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListItemChangesSinceTokenCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateListItemsCompletedEventHandler(object sender, UpdateListItemsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateListItemsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UpdateListItemsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddDiscussionBoardItemCompletedEventHandler(object sender, AddDiscussionBoardItemCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class AddDiscussionBoardItemCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal AddDiscussionBoardItemCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetVersionCollectionCompletedEventHandler(object sender, GetVersionCollectionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetVersionCollectionCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetVersionCollectionCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddAttachmentCompletedEventHandler(object sender, AddAttachmentCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class AddAttachmentCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal AddAttachmentCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAttachmentCollectionCompletedEventHandler(object sender, GetAttachmentCollectionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetAttachmentCollectionCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetAttachmentCollectionCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteAttachmentCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckOutFileCompletedEventHandler(object sender, CheckOutFileCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CheckOutFileCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CheckOutFileCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public bool Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UndoCheckOutCompletedEventHandler(object sender, UndoCheckOutCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UndoCheckOutCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UndoCheckOutCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public bool Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckInFileCompletedEventHandler(object sender, CheckInFileCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CheckInFileCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CheckInFileCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public bool Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((bool)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListContentTypesCompletedEventHandler(object sender, GetListContentTypesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListContentTypesCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListContentTypesCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListContentTypeCompletedEventHandler(object sender, GetListContentTypeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class GetListContentTypeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal GetListContentTypeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreateContentTypeCompletedEventHandler(object sender, CreateContentTypeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class CreateContentTypeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal CreateContentTypeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateContentTypeCompletedEventHandler(object sender, UpdateContentTypeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateContentTypeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UpdateContentTypeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteContentTypeCompletedEventHandler(object sender, DeleteContentTypeCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class DeleteContentTypeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal DeleteContentTypeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateContentTypeXmlDocumentCompletedEventHandler(object sender, UpdateContentTypeXmlDocumentCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateContentTypeXmlDocumentCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UpdateContentTypeXmlDocumentCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateContentTypesXmlDocumentCompletedEventHandler(object sender, UpdateContentTypesXmlDocumentCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UpdateContentTypesXmlDocumentCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal UpdateContentTypesXmlDocumentCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteContentTypeXmlDocumentCompletedEventHandler(object sender, DeleteContentTypeXmlDocumentCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class DeleteContentTypeXmlDocumentCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal DeleteContentTypeXmlDocumentCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    public delegate void ApplyContentTypeToListCompletedEventHandler(object sender, ApplyContentTypeToListCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.3053")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class ApplyContentTypeToListCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;


        internal ApplyContentTypeToListCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }


        /// <remarks/>
        public XmlNode Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((XmlNode)(results[0]));
            }
        }
    }
}

#pragma warning restore 1591