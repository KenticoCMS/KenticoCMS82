<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.IO</name>
    </assembly>
    <members>
        <member name="T:CMS.IO.FileDebug">
            <summary>
            File debug methods
            </summary>
        </member>
        <member name="M:CMS.IO.FileDebug.GetDebugSettings">
            <summary>
            Gets the debug settings
            </summary>
        </member>
        <member name="M:CMS.IO.FileDebug.FinalizeData(System.Data.DataTable)">
            <summary>
            Groups read/write data in the table.
            </summary>
            <param name="dt">DataTable to process</param>
        </member>
        <member name="M:CMS.IO.FileDebug.LogFileOperation(System.String,System.String,System.String)">
            <summary>
            Logs the file operation. Logs the file operation to the file and to current request log for debugging.
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="fileOperation">Operation with file (open, close, read, write)</param>
            <param name="providerName">Provider name</param>
        </member>
        <member name="M:CMS.IO.FileDebug.LogFileOperation(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Logs the file operation. Logs the file operation to the file and to current request log for debugging.
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="fileOperation">Operation with file (open, close, read, write)</param>
            <param name="size">Size of the read / write operation in bytes</param>
            <param name="text">Text written to the file</param>
            <param name="parameters">Parameters of the operation (i.e. access mode of open operation)</param>
            <param name="providerName">Provider name</param>
        </member>
        <member name="M:CMS.IO.FileDebug.GetProviderName(System.String)">
            <summary>
            Gets the provider name for the given path
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:CMS.IO.FileDebug.LogReadEnd(System.Int32)">
            <summary>
            Logs end of the read operation (logs the total size).
            </summary>
            <param name="size">Size to log</param>
        </member>
        <member name="M:CMS.IO.FileDebug.LogToFile(System.String,System.String)">
            <summary>
            Logs the file operation to the log file.
            </summary>
            <param name="filePath">Path of the file the operation of which is logged</param>
            <param name="fileOperation">Operation with file (open, close, read, write)</param>
        </member>
        <member name="M:CMS.IO.FileDebug.NewLogTable">
            <summary>
            Creates a new table for the cache log.
            </summary>
        </member>
        <member name="M:CMS.IO.FileDebug.GetFileOperationRecordIndex(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Gets the index of file operation record from table based on file path and operation.
            </summary>
            <param name="path">File path</param>
            <param name="operation">Operation performed on the file</param>
            <param name="fileOperationsMapping">File operations mapping table</param>
            <returns>Index of file operation record or -1 if index was not found in mapping table</returns>
        </member>
        <member name="M:CMS.IO.FileDebug.AddFileOperationRecordIndex(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Adds index of file operation into the mapping table. 
            When file operation index mapping is already present, it is overridden with new index value.
            </summary>
            <param name="path">File path</param>
            <param name="operation">Operation performed on the file</param>
            <param name="index">Index of operation</param>
            <param name="fileOperationsMapping">File operations mapping table</param>
        </member>
        <member name="P:CMS.IO.FileDebug.Settings">
            <summary>
            Debug settings
            </summary>
        </member>
        <member name="P:CMS.IO.FileDebug.CurrentRequestLog">
            <summary>
            Current request log.
            </summary>
        </member>
        <member name="P:CMS.IO.FileDebug.DebugCurrentRequest">
            <summary>
            Debug current request files access.
            </summary>
        </member>
        <member name="T:CMS.IO.IOModule">
            <summary>
            Represents the IO module.
            </summary>
        </member>
        <member name="M:CMS.IO.IOModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.IO.IOModule.OnPreInit">
            <summary>
            Pre-initializes the module
            </summary>
        </member>
        <member name="T:CMS.IO.IOModuleMetadata">
            <summary>
            Represents the IO module metadata.
            </summary>
        </member>
        <member name="M:CMS.IO.IOModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.IO.AbstractStorageProvider">
            <summary>
            Abstract storage provider
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.DIRECTORY_INFO">
            <summary>
            Directory info suffix.
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.DIRECTORY">
            <summary>
            Directory suffix.
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.FILE_INFO">
            <summary>
            File info suffix.
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.FILE">
            <summary>
            File suffix.
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.FILE_STREAM">
            <summary>
            File stream suffix.
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.DIRECTORY_LOCK">
            <summary>
            Directory lock suffix.
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.mDefaultProvider">
            <summary>
            Default storage provider
            </summary>
        </member>
        <member name="F:CMS.IO.AbstractStorageProvider.mSystemProvider">
            <summary>
            System.IO storage provider
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.CreateDefaultProvider">
            <summary>
            Creates the default storage provider
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetStorageProvider(System.String)">
            <summary>
            Gets the storage provider based on the given path, updates the path so it matches the provider internal structure
            </summary>
            <param name="path">Input path</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetInternalProvider(System.String)">
            <summary>
            Gets the storage provider based on the given path
            </summary>
            <param name="path">Input path</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetStorageProviderInternal(System.String)">
            <summary>
            Gets the storage provider based on the given path
            </summary>
            <param name="path">Input path</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.TryZipProviderSafe(System.String,System.Int32)">
            <summary>
            Ensures the zip provider for the given path
            </summary>
            <remarks>
            If path is not mapped (start index is 0), mapping is set to the application root 
            </remarks>
            <param name="path">Path</param>
            <param name="startIndex">Start index to analyze zip files</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.TryZipProvider(System.String,System.Int32)">
            <summary>
            Ensures the zip provider for the given path
            </summary>
            <param name="path">Path</param>
            <param name="startIndex">Start index to analyze zip files</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.FindMappedProvider(System.String)">
            <summary>
            Attempts to find a provider mapped to the given path
            </summary>
            <param name="path">Path to map</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetFullPath(System.String)">
            <summary>
            Converts the external mapped path to the internal path of the provider
            </summary>
            <param name="path">Path to convert</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.UnMapStoragePath(System.String)">
            <summary>
            Removes the mapping to a storage provider
            </summary>
            <param name="path">Path to unmap</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.RemoveMappedProvider(System.String)">
            <summary>
            Removes a mapped provider from the mapped collection
            </summary>
            <param name="path">Provider to remove</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.MapStoragePath(System.String,CMS.IO.AbstractStorageProvider)">
            <summary>
            Maps the given storage path to a specific provider
            </summary>
            <param name="path">Path to map</param>
            <param name="provider">Provider to use for the given path and sub paths</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetVirtualPhysicalPath(CMS.IO.AbstractStorageProvider,System.String)">
            <summary>
            Maps target file system path to virtual path. Remaps only paths inside the web application path structure.
            </summary>
            <param name="provider">Storage provider</param>
            <param name="targetPath">Target path</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetTargetPhysicalPath(System.String)">
            <summary>
            Maps virtual file system path to the target one. Remaps only paths inside the web application path structure.
            </summary>
            <param name="virtualPath">Virtual path</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.EnsureMappedProviders">
            <summary>
            Ensures the mapped providers list
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.CreateFileProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.CreateDirectoryProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetFileInfo(System.String)">
            <summary>
            Returns new instance of FileInfo object.
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetDirectoryInfo(System.String)">
            <summary>
            Returns new instance of directory info.
            </summary>
            <param name="path">Path</param>        
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetFileStream(System.String,CMS.IO.FileMode)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>        
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>        
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.AbstractStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
            <param name="bufferSize">Buffer size</param>
            <param name="share">Sharing permissions</param>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.Name">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.ExternalStorageName">
            <summary>
            Returns name of external storage (if current instance running on external storage).
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.IsExternalStorage">
            <summary>
            Returns whether current instance running on external storage.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.DirectoryProviderObject">
            <summary>
            Returns CMSDirectoryProvider object.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.FileProviderObject">
            <summary>
            Returns AbstractFile object.
            </summary> 
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.DefaultProvider">
            <summary>
            Default storage provider
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.SystemProvider">
            <summary>
            System.IO storage provider
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.CustomRootPath">
            <summary>
            Gets or sets Custom path where files should be stored.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.HasCustomRootPath">
            <summary>
            Returns whether provider has custom root path.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.PublicExternalFolderObject">
            <summary>
            Gets or sets whether external storage folder object (i.e. Container for WA blob storage) has public access or not.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.CustomRootUrl">
            <summary>
            Specifies custom root URL for provider.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.ParentStorageProvider">
            <summary>
            Parent storage provider
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.MappedPath">
            <summary>
            Mapped path
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.StartingPath">
            <summary>
            Starting path that the provider will use as prefix in case it is used
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.ProviderAssemblyName">
            <summary>
            Custom Provider library assembly.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.ProviderAssembly">
            <summary>
            Custom Provider library assembly.
            </summary>
        </member>
        <member name="P:CMS.IO.AbstractStorageProvider.DefaultExternalStorageName">
            <summary>
            Name of the default external storage provider.
            </summary>
        </member>
        <member name="T:CMS.IO.AbstractDirectory">
            <summary>
            Abstract class for directory providers.
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">Path to test</param>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">Path to create</param>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from</param>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from</param> 
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">Path to retrieve directories from</param>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes an empty directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">Path to directory</param>
            <param name="recursive">If delete if subdirs exists</param>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">Path to directory</param>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">Source directory name</param>
            <param name="destDirName">Destination directory name</param>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>        
            <param name="path">Path to directory</param>
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetDirectories(System.String,System.String,CMS.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory,
            and optionally searches subdirectories.
            </summary>        
            <param name="path">Path to directory</param>
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.GetAccessControl(System.String)">
            <summary>
            Gets a DirectorySecurity  object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to directory</param>        
        </member>
        <member name="M:CMS.IO.AbstractDirectory.PrepareFilesForImport(System.String)">
            <summary>
            Prepares files for import. Converts them to media library.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CMS.IO.AbstractDirectory.DeleteDirectoryStructure(System.String)">
            <summary>
            Deletes all files in the directory structure. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full path of the directory to delete</param>
        </member>
        <member name="T:CMS.IO.IOProviderName">
            <summary>
            Type of the IO operation (provider enumeration).
            </summary>
        </member>
        <member name="F:CMS.IO.IOProviderName.FileSystem">
            <summary>
            General IO operations.
            </summary>
        </member>
        <member name="F:CMS.IO.IOProviderName.Zip">
            <summary>
            Zip file operations
            </summary>
        </member>
        <member name="F:CMS.IO.IOProviderName.Azure">
            <summary>
            Azure blob operations.
            </summary>
        </member>
        <member name="F:CMS.IO.IOProviderName.Amazon">
            <summary>
            Amazon S3 operations.
            </summary>
        </member>
        <member name="T:CMS.IO.AbstractFile">
            <summary>
            Abstract class for file providers.
            </summary>
        </member>
        <member name="M:CMS.IO.AbstractFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">Path to file</param>  
        </member>
        <member name="M:CMS.IO.AbstractFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.Delete(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">Path to source file</param>
            <param name="destFileName">Path to destination file</param>        
        </member>
        <member name="M:CMS.IO.AbstractFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">Path to source file</param>
            <param name="destFileName">Path to destination file</param>
            <param name="overwrite">If destination file should be overwritten</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">Path to file</param> 
        </member>
        <member name="M:CMS.IO.AbstractFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">Source file name</param>
            <param name="destFileName">Destination file name</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
        </member>
        <member name="M:CMS.IO.AbstractFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file. 
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file. 
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="bytes">Bytes to write</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.SetAttributes(System.String,CMS.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes  of the file on the specified path.
            </summary>
            <param name="path">Path to file</param>
            <param name="fileAttributes">File attributes</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.Open(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Opens a FileStream  on the specified path, with the specified mode and access.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">Path</param>
            <param name="lastWriteTimeUtc">Specified time</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">Path to file</param>        
        </member>
        <member name="M:CMS.IO.AbstractFile.GetAccessControl(System.String)">
            <summary>
            Gets a DirectorySecurity  object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="path">Path to file</param>
            <param name="lastWriteTime">Last write time</param>
        </member>
        <member name="M:CMS.IO.AbstractFile.GetFileUrl(System.String,System.String)">
            <summary>
            Returns URL to file. If can be accessed directly then direct URL is generated else URL with GetFile page is generated.
            </summary>
            <param name="path">Virtual path starting with ~ or absolute path.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="T:CMS.IO.Compression.CompressionMode">
            <summary>
            Specifies whether to compress or decompress the underlying stream.
            </summary>
        </member>
        <member name="F:CMS.IO.Compression.CompressionMode.Decompress">
            <summary>
            Decompresses the underlying stream.
            </summary>
        </member>
        <member name="F:CMS.IO.Compression.CompressionMode.Compress">
            <summary>
            Compresses the underlying stream.
            </summary>
        </member>
        <member name="T:CMS.IO.Compression.DeflateStream">
            <summary>
            Provides methods and properties for compressing and decompressing streams using the Deflate algorithm.
            </summary>
        </member>
        <member name="T:CMS.IO.Stream">
            <summary>
            Provides a generic view of a sequence of bytes.
            </summary>
        </member>
        <member name="M:CMS.IO.Stream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Location</param>
        </member>
        <member name="M:CMS.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.Stream.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:CMS.IO.Stream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>
        </member>
        <member name="M:CMS.IO.Stream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.Stream.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.Stream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:CMS.IO.Stream.op_Implicit(CMS.IO.Stream)~CMS.Core.BinaryData">
            <summary>
            Implicit operator to convert CMS.IO stream to binary data
            </summary>
            <param name="str">Stream to convert</param>
        </member>
        <member name="P:CMS.IO.Stream.SystemStream">
            <summary>
            Gets or sets system stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Stream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Stream.Position">
            <summary>
             Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.#ctor(System.IO.Compression.DeflateStream)">
            <summary>
            Initializes a new instance with an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.New(CMS.IO.Stream,CMS.IO.Compression.CompressionMode,System.Boolean)">
            <summary>
            Returns new instance of stream reader class.
            </summary>       
            <param name="s">Stream object</param>
            <param name="compression">Compression mode</param>
            <param name="leaveOpen">Whether leave stream open</param>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.New(CMS.IO.Stream,CMS.IO.Compression.CompressionMode)">
            <summary>
            Returns new instance of stream reader class.
            </summary>     
            <param name="s">Stream object</param>
            <param name="compression">Compression mode</param>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Location</param>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.Compression.DeflateStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="P:CMS.IO.Compression.DeflateStream.SystemStream">
            <summary>
            Gets or sets System.IO stream object.
            </summary>
        </member>
        <member name="P:CMS.IO.Compression.DeflateStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Compression.DeflateStream.Position">
            <summary>
            Position of stream.
            </summary>
        </member>
        <member name="T:CMS.IO.Compression.GZipStream">
            <summary>
            Provides methods and properties for compressing and decompressing streams using the GZip algorithm.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.#ctor(System.IO.Compression.GZipStream)">
            <summary>
            Initializes a new instance with an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.New(CMS.IO.Stream,CMS.IO.Compression.CompressionMode,System.Boolean)">
            <summary>
            Returns new instance of stream reader class.
            </summary>       
            <param name="s">Stream object</param>
            <param name="compression">Compression mode</param>
            <param name="leaveOpen">Whether leave stream open</param>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.New(CMS.IO.Stream,CMS.IO.Compression.CompressionMode)">
            <summary>
            Returns new instance of stream reader class.
            </summary>     
            <param name="s">Stream object</param>
            <param name="compression">Compression mode</param>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Location</param>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.Compression.GZipStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="P:CMS.IO.Compression.GZipStream.SystemStream">
            <summary>
            Gets or sets System.IO stream object.
            </summary>
        </member>
        <member name="P:CMS.IO.Compression.GZipStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Compression.GZipStream.Position">
            <summary>
            Position of stream.
            </summary>
        </member>
        <member name="T:CMS.IO.Directory">
            <summary>
            Envelope for Directory classes
            </summary>
        </member>
        <member name="M:CMS.IO.Directory.GetDirectoryObject(System.String@)">
            <summary>
            Gets the directory provider object for given path
            </summary>
            <param name="path">Input path, output is path relative to the returned storage provider</param>
        </member>
        <member name="M:CMS.IO.Directory.ExistsRelative(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">Path to file</param>  
        </member>
        <member name="M:CMS.IO.Directory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">Path to test</param>  
        </member>
        <member name="M:CMS.IO.Directory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">Path to create</param> 
        </member>
        <member name="M:CMS.IO.Directory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from</param> 
        </member>
        <member name="M:CMS.IO.Directory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from</param> 
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.Directory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">Path to retrieve directories from</param> 
        </member>
        <member name="M:CMS.IO.Directory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>  
        </member>
        <member name="M:CMS.IO.Directory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes an empty directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">Path to directory</param>
            <param name="recursive">If delete if subdirs exists</param>
        </member>
        <member name="M:CMS.IO.Directory.Delete(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">Path to directory</param>        
        </member>
        <member name="M:CMS.IO.Directory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">Source directory name</param>
            <param name="destDirName">Destination directory name</param>
        </member>
        <member name="M:CMS.IO.Directory.GetDirectories(System.String,System.String)">
            <summary>
            Returns the names of subdirectories (including their paths) in the specified directory.
            </summary>        
            <param name="path">Path to directory</param>
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.Directory.GetDirectories(System.String,System.String,CMS.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern
            in the current directory, and optionally searches subdirectories.
            </summary>        
            <param name="path">Path to directory</param>
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Specifies whether to search the current directory, or the current directory and all subdirectories.</param>
        </member>
        <member name="M:CMS.IO.Directory.GetAccessControl(System.String)">
            <summary>
            Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.Directory.PrepareFilesForImport(System.String)">
            <summary>
            Prepares files for import. Converts them to media library.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CMS.IO.Directory.DeleteDirectoryStructure(System.String)">
            <summary>
            Deletes all files in the directory structure. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full path of the directory to delete</param>
        </member>
        <member name="M:CMS.IO.Directory.LogDirectoryOperation(System.String,System.String)">
            <summary>
            Logs the directory operation to a current request log for debugging.
            </summary>
            <param name="path">Path of the directory</param>
            <param name="operation">Operation with directory</param>
        </member>
        <member name="M:CMS.IO.Directory.LogDirectoryOperation(System.String,System.String,System.String)">
            <summary>
            Logs the directory operation to a current request log for debugging.
            </summary>
            <param name="path">Path to the file</param>
            <param name="operation">Operation with file (open, close, read, write)</param>
            <param name="providerName">Provider name</param>
        </member>
        <member name="T:CMS.IO.DirectoryHelper">
            <summary>
            Directory management methods.
            </summary>
        </member>
        <member name="F:CMS.IO.DirectoryHelper.mAllowCheckIOPermissions">
            <summary>
            Whether IO permissions are checked.
            </summary>
        </member>
        <member name="F:CMS.IO.DirectoryHelper.mIsWebRootWritable">
            <summary>
            Whether web root is writable.
            </summary>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CreateDirectory(System.String)">
            <summary>
            Creates directory. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the new directory</param>
            <returns>Returns DirectoryInfo representing the new directory.</returns>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the directory to delete</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the directory. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the directory to delete</param>
            <param name="recursive">If true, the directory is deleted recursively</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.MoveDirectory(System.String,System.String)">
            <summary>
            Moves specified directory to new path.
            </summary>
            <param name="sourcePath">Full disk path of the source folder</param>
            <param name="targetPath">New full disk path of the moved folder including its name</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CopyDirectory(System.String,System.String)">
            <summary>
            Copies specified directory including its subdirectories and all underlying files.
            </summary>
            <param name="sourcePath">Full disk path of the source directory</param>
            <param name="targetPath">Full disk path of the new copy of the directory including its name</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CopyFile(System.String,System.String)">
            <summary>
            Copies the file.
            </summary>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">Target directory</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.DeleteDirectoryStructure(System.String)">
            <summary>
            Deletes the directory structure. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the directory to delete</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.EnsureDiskPath(System.String,System.String)">
            <summary>
            Checks if all folders of the given path exist and if not, it creates them.
            </summary>
            <param name="path">Full disk path of the file including file name</param>
            <param name="startingPath">Starting path (subset of file path) that will not be checked</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CheckPermissions(System.String)">
            <summary>
            Check permissions (checks read and write permissions).
            </summary>
            <param name="path">Directory path</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CheckPermissions(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check write permissions.
            </summary>
            <param name="path">Directory path</param>
            <param name="checkRead">If read permissions should be checked</param>
            <param name="checkWrite">If write permissions should be checked</param>
            <param name="checkModify">If modify permissions should be checked</param>
            <param name="checkDelete">If delete permissions should be checked</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CombinePath(System.String[])">
            <summary>
            Combines parts of one path together, handles back slashes. Path ends without backslash.
            </summary>
            <param name="paths">Parts to combine</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.EnsurePathBackSlash(System.String)">
            <summary>
            This method ensures that path will end with one backslash.
            </summary>
            <param name="path">Path to ensure</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.Contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Test if the right exists within the given rights.
            </summary>
            <param name="right">Right to check</param>
            <param name="rule">File access rule</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CreateDirectoryInternal(System.String)">
            <summary>
            Creates directory. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the new directory</param>
            <returns>Returns DirectoryInfo representing the new directory.</returns>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.DeleteDirectoryInternal(System.String)">
            <summary>
            Deletes the directory. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the directory to delete</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.DeleteDirectoryInternal(System.String,System.Boolean)">
            <summary>
            Deletes the directory. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the directory to delete</param>
            <param name="recursive">If true, the directory is deleted recursively</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.MoveDirectoryInternal(System.String,System.String)">
            <summary>
            Moves specified directory to new path.
            </summary>
            <param name="sourcePath">Full disk path of the source folder</param>
            <param name="targetPath">New full disk path of the moved folder including its name</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CopyDirectoryInternal(System.String,System.String)">
            <summary>
            Copies specified directory including its subdirectories and all underlying files.
            </summary>
            <param name="sourcePath">Full disk path of the source directory</param>
            <param name="targetPath">Full disk path of the new copy of the directory including its name</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CopyFileInternal(System.String,System.String)">
            <summary>
            Copies the file.
            </summary>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">Target directory</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.DeleteDirectoryStructureInternal(System.String)">
            <summary>
            Deletes the directory structure. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full disk path of the directory to delete</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.EnsureDiskPathInternal(System.String,System.String)">
            <summary>
            Checks if all folders of the given path exist and if not, it creates them.
            </summary>
            <param name="path">Full disk path of the file including file name</param>
            <param name="startingPath">Starting path (subset of file path) that will not be checked</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CheckPermissionsInternal(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check write permissions.
            </summary>
            <param name="path">Directory path</param>
            <param name="checkRead">If read permissions should be checked</param>
            <param name="checkWrite">If write permissions should be checked</param>
            <param name="checkModify">If modify permissions should be checked</param>
            <param name="checkDelete">If delete permissions should be checked</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.CombinePathInternal(System.String[])">
            <summary>
            Combines parts of one path together, handles back slashes.
            </summary>
            <param name="paths">Parts to combine</param>
        </member>
        <member name="M:CMS.IO.DirectoryHelper.EnsurePathBackSlashInternal(System.String)">
            <summary>
            This method ensures that path will end with one backslash.
            </summary>
            <param name="path">Path to ensure</param>
        </member>
        <member name="P:CMS.IO.DirectoryHelper.AllowCheckIOPermissions">
            <summary>
            Allow checking IO permissions?
            </summary>
        </member>
        <member name="P:CMS.IO.DirectoryHelper.IsWebRootWritable">
            <summary>
            Returns whether web root is writable.
            </summary>
        </member>
        <member name="T:CMS.IO.DirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="M:CMS.IO.DirectoryInfo.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:CMS.IO.DirectoryInfo.New(System.String)">
            <summary>
            Creates new instance of directory info object.
            </summary>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:CMS.IO.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates subdirectory.
            </summary>
            <param name="subdir">Subdirectory to create</param>
        </member>
        <member name="M:CMS.IO.DirectoryInfo.Delete">
            <summary>
            Deletes directory.
            </summary>
        </member>
        <member name="M:CMS.IO.DirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>        
        </member>
        <member name="M:CMS.IO.DirectoryInfo.GetFiles(System.String,CMS.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Search options</param>        
        </member>
        <member name="M:CMS.IO.DirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <param name="searchPattern">Search pattern</param>               
        </member>
        <member name="M:CMS.IO.DirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>        
        </member>
        <member name="M:CMS.IO.DirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>        
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.DirectoryInfo.GetDirectories(System.String,CMS.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria and using a value
            to determine whether to search subdirectories.
            </summary>        
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Specifies whether to search the current directory, or the current directory and all subdirectories.</param>
        </member>
        <member name="P:CMS.IO.DirectoryInfo.FullName">
            <summary>
            Full name of directory (whole path).
            </summary>
        </member>
        <member name="P:CMS.IO.DirectoryInfo.LastWriteTime">
            <summary>
            Last write time to directory.
            </summary>
        </member>
        <member name="P:CMS.IO.DirectoryInfo.Name">
            <summary>
            Name of directory (without path).
            </summary>
        </member>
        <member name="P:CMS.IO.DirectoryInfo.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:CMS.IO.DirectoryInfo.Exists">
            <summary>
            Whether directory exists.
            </summary>
        </member>
        <member name="P:CMS.IO.DirectoryInfo.Parent">
            <summary>
            Parent directory.
            </summary>
        </member>
        <member name="T:CMS.IO.StorageProvider">
            <summary>
            Storage provider
            </summary>
        </member>
        <member name="F:CMS.IO.StorageProvider.DEFAULT_STORAGE">
            <summary>
            Assembly name of the default storage provider
            </summary>
        </member>
        <member name="M:CMS.IO.StorageProvider.#ctor">
            <summary>
            Constructor - Default file system provider
            </summary>
        </member>
        <member name="M:CMS.IO.StorageProvider.#ctor(System.String)">
            <summary>
            Constructor - File system provider with starting path
            </summary>
            <param name="startingPath">Starting path</param>
        </member>
        <member name="M:CMS.IO.StorageProvider.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="externalStorageName">External storage name</param>
            <param name="providerAssemblyName">Provider assembly name</param>
        </member>
        <member name="M:CMS.IO.StorageProvider.CreateFileProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.StorageProvider.CreateDirectoryProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.StorageProvider.GetFileInfo(System.String)">
            <summary>
            Returns new instance of FileInfo object.
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.StorageProvider.GetDirectoryInfo(System.String)">
            <summary>
            Returns new instance of directory info.
            </summary>
            <param name="path">Path</param>        
        </member>
        <member name="M:CMS.IO.StorageProvider.GetFileStream(System.String,CMS.IO.FileMode)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>        
        </member>
        <member name="M:CMS.IO.StorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.StorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>        
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.StorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
            <param name="bufferSize">Buffer size</param>
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.StorageProvider.CreateInstance``1(System.String,System.Object[])">
            <summary>
            Creates an instance of the given class using the provider
            </summary>
            <param name="fullName">Class full name</param>
            <param name="parameters">Constructor parameters</param>
        </member>
        <member name="T:CMS.IO.IVirtualFileObject">
            <summary>
            Virtual file object interface, represents object used for DbVirtualFile logic
            </summary>
        </member>
        <member name="P:CMS.IO.IVirtualFileObject.Content">
            <summary>
            Gets virtual file content for current object
            </summary>
        </member>
        <member name="P:CMS.IO.IVirtualFileObject.IsStoredExternally">
            <summary>
            Indicates whether file content is stored externally (e.g. file system)
            </summary>
        </member>
        <member name="P:CMS.IO.IVirtualFileObject.ObjectHash">
            <summary>
            Gets object hash string used for identification of compiled version in .NET cache
            </summary>
        </member>
        <member name="P:CMS.IO.IVirtualFileObject.PhysicalFilePath">
            <summary>
            Gets the physical file path if exists
            </summary>
        </member>
        <member name="T:CMS.IO.IVirtualPathProvider">
            <summary>
            Virtual path provider interface.
            </summary>
        </member>
        <member name="M:CMS.IO.IVirtualPathProvider.Register">
            <summary>
            Registers the provider object.
            </summary>
        </member>
        <member name="T:CMS.IO.VirtualPathHelper">
            <summary>
            Virtual path provider helper.
            </summary>
        </member>
        <member name="F:CMS.IO.VirtualPathHelper.VERSION_GUID_PREFIX">
            <summary>
            Version guid prefix used in control path
            </summary>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.RegisterVirtualPath(System.String,CMS.IO.VirtualPathHelper.GetVirtualFileObjectHandler)">
            <summary>
            Register callback method for specified virtual path. 
            </summary>
            <param name="relativePath">Relative path</param>
            <param name="getObjectCallback">GetVirtualFileObjectHandler callback method</param>
            <returns>Returns true if path was registered successfully</returns>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.RegisterVirtualPath(System.String,CMS.IO.VirtualPathHelper.GetVirtualFileObjectHandler,System.Boolean,CMS.IO.VirtualPathHelper.GetVirtualFileObjectHandler@)">
            <summary>
            Register callback method for specified virtual path
            </summary>
            <param name="relativePath">Relative path</param>
            <param name="getObjectCallback">GetVirtualFileObjectHandler callback method</param>
            <param name="overrideExisting">Indicates whether current path should override existing</param>
            <param name="existingCallbackMethod">Returns existing callback method if current override the path registration</param>
            <returns>Returns true if path was registered successfully</returns>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.GetVirtualFileObject(System.String)">
            <summary>
            Returns IVirtualFileObject for specified virtual path
            </summary>
            <param name="virtualPath">Virtual path</param>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.GetVirtualFileRelativePath(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns virtual relative for required parameters
            </summary>
            <param name="codeName">Object code name</param>
            <param name="extension">Required extension starting with dot character</param>
            <param name="directory">Starting directory</param>
            <param name="prefix">Optional codename prefix. Prefix is delimited by "=" directory.</param>
            <param name="versionGuid">Version GUID value</param>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.GetVirtualObjectName(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Returns virtual object name and prefixes if available
            </summary>
            <param name="relativeUrl">Current relative URL</param>
            <param name="relatedDirPath">Required relative directory path</param>
            <param name="prefixes">List of prefixes</param>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.RegisterVirtualPathProvider">
            <summary>
            Creates the virtual path provider object and registers the object within the system.
            </summary>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.RegisterManagedCompilationPath(System.String,System.Boolean)">
            <summary>
            Registers path to the part of the system which should be managed for single file or batch compilation
            </summary>
            <param name="relativePath">Relative path of the folder</param>
            <param name="provideFolderContent">If true, the folder content is provided for this path to allow batch compilation</param>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.IsSingleFileCompilationPath(System.String)">
            <summary>
            Returns true if current path is registered for single file compilation
            </summary>
            <param name="virtualPath">Virtual path</param>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.RemoveFirstPart(System.String,System.String)">
            <summary>
            Returns the string with first selector removed.
            </summary>
            <param name="expression">Expression</param>
            <param name="delimiter">Selector delimiter</param>
        </member>
        <member name="M:CMS.IO.VirtualPathHelper.RemoveDirectives(System.String,System.String[])">
            <summary>
            Removes the default layout directives from the layout code.
            </summary>
            <param name="code">Code to process</param>
            <param name="defaultDirectives">Default directives to be removed</param>
        </member>
        <member name="P:CMS.IO.VirtualPathHelper.UsingVirtualPathProvider">
            <summary>
            Indicates whether system is using virtual path provider.
            </summary>
        </member>
        <member name="P:CMS.IO.VirtualPathHelper.URLParametersSeparator">
            <summary>
            URL parameters separator.
            </summary>
        </member>
        <member name="P:CMS.IO.VirtualPathHelper.ProviderAssemblyName">
            <summary>
            Provider library assembly.
            </summary>
        </member>
        <member name="P:CMS.IO.VirtualPathHelper.ProviderObject">
            <summary>
            Returns the helper object.
            </summary>
        </member>
        <member name="T:CMS.IO.VirtualPathHelper.GetVirtualFileObjectHandler">
            <summary>
            Delegate used for registered path callback method
            </summary>
            <param name="virtualPath">Virtual path</param>
        </member>
        <member name="T:CMS.IO.VirtualPathLog">
            <summary>
            Helper class used for logging virtual path operations
            </summary>
        </member>
        <member name="F:CMS.IO.VirtualPathLog.mCurrentLogIndent">
            Indentation level within the current virtual file log
        </member>
        <member name="M:CMS.IO.VirtualPathLog.RemoveLogFile">
            <summary>
            Removes log file from system and reset class settings
            </summary>
        </member>
        <member name="M:CMS.IO.VirtualPathLog.Log(System.String,System.Boolean,System.Boolean)">
            <summary>
            Logs load control or load virtual file to the ~/App_Data/logVirtualFiles.log file
            </summary>
            <param name="virtualPath">Virtual path</param>
            <param name="isPhysical">Indicates whether current file is physical</param>
            <param name="loadControl">Indicates whether log context is from load control method</param>
        </member>
        <member name="M:CMS.IO.VirtualPathLog.LogToFile(System.String,System.Boolean)">
            <summary>
            Logs the virtual file request to the file.
            </summary>
            <param name="virtualPath">Virtual path</param>
            <param name="physicalFile">Indicates whether current path is physical</param>
        </member>
        <member name="M:CMS.IO.VirtualPathLog.AppendllTextThreadSafe(System.String,System.String)">
            <summary>
            Ensures thread-safe append all text method
            </summary>
        </member>
        <member name="M:CMS.IO.VirtualPathLog.LogVirtualToFile(System.String,System.Boolean)">
            <summary>
            Logs the virtual file request to the file.
            </summary>
            <param name="virtualPath">Virtual path</param>
            <param name="physicalFile">Indicates whether current path is physical</param>
        </member>
        <member name="M:CMS.IO.VirtualPathLog.HandleFolderLog(System.String,System.Boolean,System.Boolean)">
            <summary>
            Handles the folder within the log
            </summary>
            <param name="virtualPath">Virtual path to log</param>
            <param name="physicalFile">Indicates whether current file is physical</param>
            <param name="isLoadControl">If true, current log item is a load control item</param>
        </member>
        <member name="M:CMS.IO.VirtualPathLog.GetIndent(System.Int32)">
            <summary>
            Gets the indent for the given count
            </summary>
            <param name="indentCount">Indent count</param>
        </member>
        <member name="P:CMS.IO.VirtualPathLog.LogVirtualFiles">
            <summary>
            Indicates whether virtual files operation should be logged. Uses CMSLogVirtualFiles app setting key.
            </summary>
        </member>
        <member name="P:CMS.IO.VirtualPathLog.LogFile">
            <summary>
            Logs file full path
            </summary>
        </member>
        <member name="T:CMS.IO.StorageTaskType">
            <summary>
            Web farm task types for IO operations
            </summary>
        </member>
        <member name="F:CMS.IO.StorageTaskType.DeleteFolder">
            <summary>
            Delete physical folder.
            </summary>
        </member>
        <member name="F:CMS.IO.StorageTaskType.UpdatePhysicalFile">
            <summary>
            Update physical file
            </summary>
        </member>
        <member name="F:CMS.IO.StorageTaskType.DeletePhysicalFile">
            <summary>
            Delete physical file
            </summary>
        </member>
        <member name="T:CMS.IO.StorageSynchronization">
            <summary>
            Storage task logging
            </summary>
        </member>
        <member name="F:CMS.IO.StorageSynchronization.mWebFarmSynchronizedFolders">
            <summary>
            Lookup table for physical folders that are automatically synchronized over the web farm
            </summary>
        </member>
        <member name="M:CMS.IO.StorageSynchronization.IsWebFarmSynchronizedPath(System.String)">
            <summary>
            Returns true if the given relative path is synchronized for web farm
            </summary>
        </member>
        <member name="M:CMS.IO.StorageSynchronization.LogDirectoryDeleteTask(System.String)">
            <summary>
            Logs the directory delete task for the web farm server
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StorageSynchronization.LogDeleteFileTask(System.String)">
            <summary>
            Logs the file delete task for the web farm server
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StorageSynchronization.LogUpdateFileTask(System.String)">
            <summary>
            Logs the file update task for the web farm server
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="P:CMS.IO.StorageSynchronization.WebFarmSynchronizedFolders">
            <summary>
            Lookup table for physical folders that are automatically synchronized over the web farm
            </summary>
        </member>
        <member name="T:CMS.IO.GeneralStream">
            <summary>
            Envelope for CMS.IO stream objects. It can be used in third party libraries as standard System.IO.Stream but with CMS.IO.Stream behaviour. 
            </summary>
        </member>
        <member name="M:CMS.IO.GeneralStream.#ctor(CMS.IO.Stream)">
            <summary>
            Initializes new instance of system stream object.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:CMS.IO.GeneralStream.New(CMS.IO.Stream)">
            <summary>
            Initializes new instance of system stream object.
            </summary>
            <param name="stream">Stream object</param>        
        </member>
        <member name="M:CMS.IO.GeneralStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="buffer">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.GeneralStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="origin">Location</param>
        </member>
        <member name="M:CMS.IO.GeneralStream.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.GeneralStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>
        </member>
        <member name="M:CMS.IO.GeneralStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.GeneralStream.Close">
            <summary>
            Closes stream.
            </summary>
        </member>
        <member name="M:CMS.IO.GeneralStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="P:CMS.IO.GeneralStream.CanRead">
            <summary>
            Whether stream can read from underlying source.
            </summary>
        </member>
        <member name="P:CMS.IO.GeneralStream.CanSeek">
            <summary>
            Whether stream can seek on underlying source.
            </summary>
        </member>
        <member name="P:CMS.IO.GeneralStream.CanWrite">
            <summary>
            Whether stream can write to underlying source.
            </summary>
        </member>
        <member name="P:CMS.IO.GeneralStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.GeneralStream.Position">
            <summary>
             Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CMS.IO.StreamWrapper">
            <summary>
            Envelope for System.IO.Stream object.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance with an expandable capacity initialized to zero.
            </summary>
            <param name="s">System stream object</param>
        </member>
        <member name="M:CMS.IO.StreamWrapper.New(System.IO.Stream)">
            <summary>
            Returns new instance of stream reader class.
            </summary>      
            <param name="s">System stream object</param>
        </member>
        <member name="M:CMS.IO.StreamWrapper.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWrapper.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Begin of seeking</param>        
        </member>
        <member name="M:CMS.IO.StreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from stream.
            </summary>
            <param name="Array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.StreamWrapper.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>        
        </member>
        <member name="M:CMS.IO.StreamWrapper.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.StreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="P:CMS.IO.StreamWrapper.SystemStream">
            <summary>
            Returns MemoryStream instance from System.IO.
            </summary>
        </member>
        <member name="P:CMS.IO.StreamWrapper.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.StreamWrapper.Position">
            <summary>
             Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CMS.IO.File">
            <summary>
            Envelope for File classes
            </summary>
        </member>
        <member name="M:CMS.IO.File.GetFileObject(System.String)">
            <summary>
            Gets the file provider object for given path
            </summary>
            <param name="path">Input path, output is path relative to the returned storage provider</param>
        </member>
        <member name="M:CMS.IO.File.ExistsRelative(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">Path to file</param>  
        </member>
        <member name="M:CMS.IO.File.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">Path to file</param>  
        </member>
        <member name="M:CMS.IO.File.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.File.Delete(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">Path to source file</param>
            <param name="destFileName">Path to destination file</param>
            <param name="overwrite">If destination file should be overwritten</param>
        </member>
        <member name="M:CMS.IO.File.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">Path to source file</param>
            <param name="destFileName">Path to destination file</param>        
        </member>
        <member name="M:CMS.IO.File.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.File.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">Path to file</param> 
        </member>
        <member name="M:CMS.IO.File.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">Source file name</param>
            <param name="destFileName">Destination file name</param>
        </member>
        <member name="M:CMS.IO.File.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
        </member>
        <member name="M:CMS.IO.File.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.File.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
        </member>
        <member name="M:CMS.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.File.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
        </member>
        <member name="M:CMS.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.File.AppendAllText(System.String,System.String,System.Boolean)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
            <param name="logOperation">If true file operation is logged to File log</param>
        </member>
        <member name="M:CMS.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
            <param name="logOperation">If true file operation is logged to File log</param>
        </member>
        <member name="M:CMS.IO.File.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="bytes">Bytes to write</param>
        </member>
        <member name="M:CMS.IO.File.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.File.SetAttributes(System.String,CMS.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">Path to file</param>
            <param name="fileAttributes">File attributes</param>
        </member>
        <member name="M:CMS.IO.File.Open(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Opens a FileStream  on the specified path, with the specified mode and access.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">Path</param>
            <param name="lastWriteTimeUtc">Specified time</param>
        </member>
        <member name="M:CMS.IO.File.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">Path to file</param>        
        </member>
        <member name="M:CMS.IO.File.GetAccessControl(System.String)">
            <summary>
            Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.File.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.File.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="path">Path to file</param>
            <param name="lastWriteTime">Last write time</param>
        </member>
        <member name="M:CMS.IO.File.GetActualUrl(System.String)">
            <summary>
            Returns actual URL of given absolute path.
            </summary>
            <param name="absolutePath">Absolute path</param> 
        </member>
        <member name="M:CMS.IO.File.GetFileUrl(System.String,System.String)">
            <summary>
            Returns URL to file. If can be accessed directly then direct URL is generated else URL with GetFile page is generated.
            </summary>
            <param name="path">Virtual path starting with ~ or absolute path.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="T:CMS.IO.FileAccess">
            <summary>
            File access options.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAccess.Read">
            <summary>
            Read access to the file. Data can be read from the file. Combine with Write
            for read/write access.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAccess.Write">
            <summary>
            Write access to the file. Data can be written to the file. Combine with Read
            for read/write access.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAccess.ReadWrite">
            <summary>
            Read and write access to the file. Data can be written to and read from the
            file.
            </summary>
        </member>
        <member name="T:CMS.IO.FileAttributes">
            <summary>
            Provides attributes for files and directories.      
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.ReadOnly">
            <summary>
            The file is read-only.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Hidden">
            <summary>
            The file is hidden, and thus is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.System">
            <summary>
            The file is a system file. The file is part of the operating system or is
            used exclusively by the operating system.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Directory">
            <summary>
            The file is a directory.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Archive">
            <summary>
            The file's archive status. Applications use this attribute to mark files
            for backup or removal.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Device">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Normal">
            <summary>
            The file is normal and has no other attributes set. This attribute is valid
            only if used alone.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Temporary">
            <summary>
            The file is temporary. File systems attempt to keep all of the data in memory
            for quicker access rather than flushing the data back to mass storage. A
            temporary file should be deleted by the application as soon as it is no longer
            needed.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.SparseFile">
            <summary>
            The file is a sparse file. Sparse files are typically large files whose data
            are mostly zeros. 
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.ReparsePoint">
            <summary>
            The file contains a reparse point, which is a block of user-defined data
            associated with a file or a directory.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Compressed">
            <summary>
            The file is compressed.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Offline">
            <summary>
            The file is offline. The data of the file is not immediately available.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.NotContentIndexed">
            <summary>
            The file will not be indexed by the operating system's content indexing service.
            </summary>
        </member>
        <member name="F:CMS.IO.FileAttributes.Encrypted">
            <summary>
            The file or directory is encrypted. For a file, this means that all data
            in the file is encrypted. For a directory, this means that encryption is
            the default for newly created files and directories.
            </summary>
        </member>
        <member name="T:CMS.IO.FileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of FileStream  objects.
            </summary>
        </member>
        <member name="F:CMS.IO.FileInfo.mSystemInfo">
            <summary>
            System.IO file info object corresponding to this file
            </summary>
        </member>
        <member name="M:CMS.IO.FileInfo.#ctor">
            <summary>
            Creates new instance of FileInfo object.
            </summary>
        </member>
        <member name="M:CMS.IO.FileInfo.New(System.String)">
            <summary>
            Initializes new instance of file info object.
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.FileInfo.CreateText">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary> 
        </member>
        <member name="M:CMS.IO.FileInfo.Delete">
            <summary>
            Deletes file.
            </summary>
        </member>
        <member name="M:CMS.IO.FileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary> 
        </member>
        <member name="M:CMS.IO.FileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>        
        </member>
        <member name="M:CMS.IO.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">Destination file name</param>
            <param name="overwrite">Whether overwriting is allowed</param>
        </member>
        <member name="M:CMS.IO.FileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="destFileName">Destination file name</param>        
        </member>
        <member name="M:CMS.IO.FileInfo.MoveTo(System.String)">
            <summary>
            Moves an existing file to a new file.
            </summary>
            <param name="destFileName">Destination file name</param>        
        </member>
        <member name="M:CMS.IO.FileInfo.ToString">
            <summary>
            Converts FileInfo object to string.
            </summary>        
        </member>
        <member name="P:CMS.IO.FileInfo.Length">
            <summary>
            Length of file.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.Extension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.FullName">
            <summary>
            Full name of file (with whole path).
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.Name">
            <summary>
            File name of file (without path).
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.LastWriteTime">
            <summary>
            Last write time to file.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.Exists">
            <summary>
            If file exists.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.CreationTime">
            <summary>
            Creation date of file.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.LastAccessTime">
            <summary>
            Last access time of file.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.Directory">
            <summary>
            Directory of file.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.IsReadOnly">
            <summary>
             If is read only.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.Attributes">
            <summary>
            File attributes.
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.DirectoryName">
            <summary>
            Directory name of file (without path).
            </summary>
        </member>
        <member name="P:CMS.IO.FileInfo.SystemInfo">
            <summary>
            System.IO file info object corresponding to this file
            </summary>
        </member>
        <member name="T:CMS.IO.FileMode">
            <summary>
            Specifies how the operating system should open a file.    
            </summary>
        </member>
        <member name="F:CMS.IO.FileMode.CreateNew">
            <summary>
            Specifies that the operating system should create a new file. This requires
            System.Security.Permissions.FileIOPermissionAccess.Write. If the file already
            exists, an System.IO.IOException is thrown.
            </summary>
        </member>
        <member name="F:CMS.IO.FileMode.Create">
            <summary>
            Specifies that the operating system should create a new file. If the file
            already exists, it will be overwritten. This requires System.Security.Permissions.FileIOPermissionAccess.Write.
            System.IO.FileMode.Create is equivalent to requesting that if the file does
            not exist, use System.IO.FileMode.CreateNew; otherwise, use System.IO.FileMode.Truncate.
            </summary>
        </member>
        <member name="F:CMS.IO.FileMode.Open">
            <summary>
            Specifies that the operating system should open an existing file. The ability
            to open the file is dependent on the value specified by System.IO.FileAccess.
            A System.IO.FileNotFoundException is thrown if the file does not exist.
            </summary>
        </member>
        <member name="F:CMS.IO.FileMode.OpenOrCreate">
            <summary>
            Specifies that the operating system should open a file if it exists; otherwise,
            a new file should be created. If the file is opened with FileAccess.Read,
            System.Security.Permissions.FileIOPermissionAccess.Read is required. If the
            file access is FileAccess.Write then System.Security.Permissions.FileIOPermissionAccess.Write
            is required. If the file is opened with FileAccess.ReadWrite, both System.Security.Permissions.FileIOPermissionAccess.Read
            and System.Security.Permissions.FileIOPermissionAccess.Write are required.
            If the file access is FileAccess.Append, then System.Security.Permissions.FileIOPermissionAccess.Append
            is required.
            </summary>
        </member>
        <member name="F:CMS.IO.FileMode.Truncate">
            <summary>
            Specifies that the operating system should open an existing file. Once opened,
            the file should be truncated so that its size is zero bytes. This requires
            System.Security.Permissions.FileIOPermissionAccess.Write. Attempts to read
            from a file opened with Truncate cause an exception.
            </summary>
        </member>
        <member name="F:CMS.IO.FileMode.Append">
            <summary>
            Opens the file if it exists and seeks to the end of the file, or creates
            a new file. FileMode.Append can only be used in conjunction with FileAccess.Write.
            Attempting to seek to a position before the end of the file will throw an
            System.IO.IOException and any attempt to read fails and throws an System.NotSupportedException.
            </summary>
        </member>
        <member name="T:CMS.IO.FileShare">
            <summary>
            Enumeration for file sharing options.
            </summary>
        </member>
        <member name="F:CMS.IO.FileShare.None">
            <summary>
            Declines sharing of the current file. Any request to open the file (by this
            process or another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:CMS.IO.FileShare.Read">
            <summary>
            Allows subsequent opening of the file for reading. If this flag is not specified,
            any request to open the file for reading (by this process or another process)
            will fail until the file is closed. However, even if this flag is specified,
            additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:CMS.IO.FileShare.Write">
            <summary>
            Allows subsequent opening of the file for writing. If this flag is not specified,
            any request to open the file for writing (by this process or another process)
            will fail until the file is closed. However, even if this flag is specified,
            additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:CMS.IO.FileShare.ReadWrite">
            <summary>
            Allows subsequent opening of the file for reading or writing. If this flag
            is not specified, any request to open the file for reading or writing (by
            this process or another process) will fail until the file is closed. However,
            even if this flag is specified, additional permissions might still be needed
            to access the file.
            </summary>
        </member>
        <member name="F:CMS.IO.FileShare.Delete">
            <summary>
            Allows subsequent deleting of a file.
            </summary>
        </member>
        <member name="F:CMS.IO.FileShare.Inheritable">
            <summary>
            Makes the file handle inheritable by child processes. This is not directly
            supported by Win32.
            </summary>
        </member>
        <member name="T:CMS.IO.FileStream">
            <summary>
            Exposes a stream around a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="M:CMS.IO.FileStream.#ctor(System.String)">
            <summary>
            Creates new instance of FileStream object.
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:CMS.IO.FileStream.New(System.String,CMS.IO.FileMode)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
        </member>
        <member name="M:CMS.IO.FileStream.New(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.FileStream.New(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
            <param name="access">File access</param>
            <param name="share">Sharing permissions</param>     
        </member>
        <member name="M:CMS.IO.FileStream.New(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Initializes new instance and intializes new system file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
            <param name="access">File access</param>
            <param name="share">Sharing permissions</param>
            <param name="bufferSize">Buffer size</param>
        </member>
        <member name="M:CMS.IO.FileStream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Location</param>
        </member>
        <member name="M:CMS.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.FileStream.Dispose">
            <summary>
            Releases all resources.
            </summary>        
        </member>
        <member name="M:CMS.IO.FileStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>
        </member>
        <member name="M:CMS.IO.FileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.FileStream.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.FileStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:CMS.IO.FileStream.LogFileOperation(System.String,System.String,System.Int32)">
            <summary>
            Logs the file operation. Logs the file operation to the file and to current request log for debugging.
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="fileOperation">Operation with file (open, close, read, write)</param>
            <param name="size">Size of the read / write operation in bytes</param>
        </member>
        <member name="P:CMS.IO.FileStream.Path">
            <summary>
            Stream path
            </summary>
        </member>
        <member name="P:CMS.IO.FileStream.SystemStream">
            <summary>
            Gets or sets system stream.
            </summary>
        </member>
        <member name="P:CMS.IO.FileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.FileStream.Position">
            <summary>
             Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CMS.IO.MemoryStream">
            <summary>
            Envelope for System.IO.MemoryStream.
            </summary>
        </member>
        <member name="M:CMS.IO.MemoryStream.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance with an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:CMS.IO.MemoryStream.New">
            <summary>
            Returns new instance of memory stream class.
            </summary>       
        </member>
        <member name="M:CMS.IO.MemoryStream.New(System.Byte[])">
            <summary>
            Returns new instance of memory stream class.
            </summary>        
            <param name="buffer">Byte data</param>
        </member>
        <member name="M:CMS.IO.MemoryStream.New(System.Int32)">
            <summary>
            Returns new instance of stream reader class.
            </summary>        
            <param name="capacity">Byte data</param>
        </member>
        <member name="M:CMS.IO.MemoryStream.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:CMS.IO.MemoryStream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value.
            </summary>
            <param name="offset">Offset</param>
            <param name="loc">Begin of seeking</param>        
        </member>
        <member name="M:CMS.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from stream.
            </summary>
            <param name="Array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.MemoryStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.MemoryStream.ToArray">
            <summary>
            Writes the stream contents to a byte array.
            </summary>        
        </member>
        <member name="M:CMS.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>        
        </member>
        <member name="M:CMS.IO.MemoryStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.MemoryStream.SetLength(System.Int64)">
            <summary>
            Sets length to stream.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.IO.MemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:CMS.IO.MemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire contents of this memory stream to another stream.
            </summary>
            <param name="stream">The stream to wrote this memory stream to</param>
        </member>
        <member name="P:CMS.IO.MemoryStream.SystemStream">
            <summary>
            Returns MemoryStream instance from System.IO.
            </summary>
        </member>
        <member name="P:CMS.IO.MemoryStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.MemoryStream.Position">
            <summary>
             Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CMS.IO.Path">
            <summary>
            Performs operations on String  instances that contain file or directory path information.
            </summary>
        </member>
        <member name="F:CMS.IO.Path.mSlashes">
            <summary>
            Valid slashes
            </summary>
        </member>
        <member name="F:CMS.IO.Path.mMappedPaths">
            <summary>
            List of registered mapped folders
            </summary>
        </member>
        <member name="F:CMS.IO.Path.lockObject">
            <summary>
            Locking object
            </summary>
        </member>
        <member name="M:CMS.IO.Path.GetPhysicalPath(System.String)">
            <summary>
            Returns the physical file path that corresponds to the specified virtual path on the web server.
            </summary>
            <param name="path">File virtual path</param>
        </member>
        <member name="M:CMS.IO.Path.CheckPath(System.String)">
            <summary>
            Checks the given path whether it is supported by the mapping
            </summary>
            <param name="path">Path to check</param>
        </member>
        <member name="M:CMS.IO.Path.FindExistingDirectory(System.String@,System.Boolean)">
            <summary>
            Finds the existing folder based on the given relative path
            </summary>
            <param name="path">Relative path to folder</param>  
            <param name="tryMappedPath">If true, the check tries also the mapped path</param>
        </member>
        <member name="M:CMS.IO.Path.FindExistingFile(System.String@,System.Boolean)">
            <summary>
            Finds the existing file based on the given relative path
            </summary>
            <param name="path">Relative path to file</param>  
            <param name="tryMappedPath">If true, the check tries also the mapped path</param>
        </member>
        <member name="M:CMS.IO.Path.RegisterMappedZippedFolder(System.String,System.String)">
            <summary>
            Registers folder which is mapped to a zip file
            </summary>
            <param name="path">Folder path to map to a zip file</param>
            <param name="zipFileName">Zip file name stored in the folder containing the folder contents</param>
        </member>
        <member name="M:CMS.IO.Path.RegisterMappedPath(System.String,System.String)">
            <summary>
            Maps the folder to another folder
            </summary>
            <param name="path">Mapped folder</param>
            <param name="targetPath">Target folder</param>
        </member>
        <member name="M:CMS.IO.Path.IsPathMapped(System.String)">
            <summary>
            Returns true, if the given path is a mapped path
            </summary>
            <param name="path">Path to check</param>
        </member>
        <member name="M:CMS.IO.Path.GetMappedPath(System.String@)">
            <summary>
            Gets the mapped path for the given path. Returns true if the path was mapped
            </summary>
            <param name="path">Path to convert</param>
        </member>
        <member name="M:CMS.IO.Path.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.Path.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">Path</param> 
        </member>
        <member name="M:CMS.IO.Path.GetFileName(System.String)">
            <summary>
            Gets the file name from the given path
            </summary>
            <param name="path">Input path</param>
        </member>
        <member name="M:CMS.IO.Path.GetDirectoryName(System.String)">
            <summary>
            Gets the directory name from the given path
            </summary>
            <param name="path">Input path</param>
        </member>
        <member name="M:CMS.IO.Path.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a path.
            </summary>
            <param name="path1">First path</param>
            <param name="path2">Second path</param>
        </member>
        <member name="M:CMS.IO.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">Path</param> 
        </member>
        <member name="M:CMS.IO.Path.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.Path.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">Path</param>        
        </member>
        <member name="M:CMS.IO.Path.EnsureBackslashes(System.String,System.Boolean)">
            <summary>
            Ensures that path contains backslashes '\'
            </summary>
            <param name="path">Path to convert</param>
            <param name="trimEnd">If true, the end of path is trimmed for backslash</param>
        </member>
        <member name="M:CMS.IO.Path.EnsureEndBackslash(System.String)">
            <summary>
            Ensures that path ends with backslash '\'
            </summary>
            <param name="path">Path to convert</param>
        </member>
        <member name="M:CMS.IO.Path.EnsureSlashes(System.String,System.Boolean)">
            <summary>
            Ensures that path contains slashes '/'
            </summary>
            <param name="path">Path to convert</param>
            <param name="trimEnd">If true, the end of path is trimmed for slash</param>
        </member>
        <member name="T:CMS.IO.SearchOption">
            <summary>
            Enum of options for IO search capabilities.
            </summary>
        </member>
        <member name="F:CMS.IO.SearchOption.TopDirectoryOnly">
            <summary>
            Includes only the current directory in a search.
            </summary>
        </member>
        <member name="F:CMS.IO.SearchOption.AllDirectories">
            <summary>
            Includes the current directory and all the subdirectories in a search operation.
            This option includes reparse points like mounted drives and symbolic links
            in the search.
            </summary>
        </member>
        <member name="T:CMS.IO.SeekOrigin">
            <summary>
            Provides the fields that represent reference points in streams for seeking.    
            </summary>
        </member>
        <member name="F:CMS.IO.SeekOrigin.Begin">
            <summary>
            Specifies the beginning of a stream.
            </summary>
        </member>
        <member name="F:CMS.IO.SeekOrigin.Current">
            <summary>
            Specifies the current position within a stream.
            </summary>
        </member>
        <member name="F:CMS.IO.SeekOrigin.End">
            <summary>
            Specifies the end of a stream.
            </summary>
        </member>
        <member name="T:CMS.IO.StorageHelper">
            <summary>
            Class for.
            </summary>
        </member>
        <member name="F:CMS.IO.StorageHelper.BUFFER_SIZE">
            <summary>
            Buffer size 64 kB.
            </summary>
        </member>
        <member name="F:CMS.IO.StorageHelper.DEFAULT_IMAGES_PATH">
            <summary>
            Default path to the images folder
            </summary>
        </member>
        <member name="F:CMS.IO.StorageHelper.mUseZippedResources">
            <summary>
            If true, the system is allowed to use zipped resources such as SQL installation scripts, web templates, or images
            </summary>
        </member>
        <member name="M:CMS.IO.StorageHelper.IsExternalFileStream(CMS.IO.Stream)">
            <summary>
            Returns true, if the given file stream is bound to an external source
            </summary>
            <param name="stream">Stream to check</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.IsExternalStorage(System.String)">
            <summary>
            Returns whether current instance running on external storage.
            </summary>
            <param name="path">File path to check (virtual or physical)</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.UnMapStoragePath(System.String)">
            <summary>
            Removes the mapping to a storage provider
            </summary>
            <param name="path">Path to unmap</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.MapStoragePath(System.String,CMS.IO.AbstractStorageProvider)">
            <summary>
            Maps the given storage path to a specific provider
            </summary>
            <param name="path">Path to map, e.g. ~/App_Data</param>
            <param name="provider">Provider to use for the given path and sub paths</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.UseLocalFileSystemForPath(System.String,System.String)">
            <summary>
            Maps the given storage path to a local file system provider
            </summary>
            <param name="path">Path to map, e.g. ~/App_Data</param>
            <param name="customRootPath">Custom root path of the representing file system, e.g. c:\MyFiles</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.MapZippedFolders(System.String)">
            <summary>
            Maps the automatic zipped folders
            </summary>
        </member>
        <member name="M:CMS.IO.StorageHelper.RegisterZippedFiles(System.String,CMS.IO.DirectoryInfo,System.String)">
            <summary>
            Registers zipped folders based on the 
            </summary>
            <param name="zippedFilesFolder">Zipped files folder</param>
            <param name="dir">Directory info</param>
            <param name="subFolder">Current subfolder</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.IsSameStorageProvider(System.String,System.String)">
            <summary>
            Returns true, if two given paths use the same storage provider
            </summary>
            <param name="path1">First file path</param>
            <param name="path2">Second file path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.CopyFileAcrossProviders(System.String,System.String)">
            <summary>
            Copies two files across different storage providers
            </summary>
            <param name="sourceFileName">Source path</param>
            <param name="destFileName">Destination path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.MoveFileAcrossProviders(System.String,System.String)">
            <summary>
            Copies two files across different storage providers
            </summary>
            <param name="sourceFileName">Source path</param>
            <param name="destFileName">Destination path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetStorageProvider(System.String)">
            <summary>
            Gets the storage provider based on the given path, updates the path so it matches the provider internal structure
            </summary>
            <param name="path">Input path, output is path relative to the returned storage provider</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetFileInfo(System.String)">
            <summary>
            Returns new instance of FileInfo object.
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetDirectoryInfo(System.String)">
            <summary>
            Returns new instance of directory info.
            </summary>
            <param name="path">Path</param>        
        </member>
        <member name="M:CMS.IO.StorageHelper.GetFileStream(System.String,CMS.IO.FileMode)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>        
        </member>
        <member name="M:CMS.IO.StorageHelper.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>        
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
            <param name="bufferSize">Buffer size</param>
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.SaveFileToDisk(System.String,CMS.Core.BinaryData,System.Boolean)">
            <summary>
            Saves the given file to the disk file
            </summary>
            <param name="filePath">File path</param>
            <param name="data">File data</param>
            <param name="closeStream">If true, and source data is stream, the stream gets closed</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.SaveBinaryDataToDisk(System.String,System.Byte[])">
            <summary>
            Saves the file from given byte array to the file system.
            </summary>
            <param name="filePath">File path</param>
            <param name="fileData">File data</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.SaveStreamToDisk(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Saves the file from given stream to the file system.
            </summary>
            <param name="filePath">File path</param>
            <param name="str">File stream</param>
            <param name="closeStream">If true, fileData stream is closed and disposed after save</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.EnsureLocalPath(System.String,System.String)">
            <summary>
            Ensures path on local file system for temp or cache folder.
            </summary>
            <param name="path">Path. If not specified path to temporary </param>
            <param name="folder">Folder to create.</param> 
        </member>
        <member name="M:CMS.IO.StorageHelper.GetFullFilePhysicalPath(System.String,System.String)">
            <summary>
            Returns full physical path of a file or folder. Does not change the ending slash
            </summary>
            <param name="path">Path</param>
            <param name="webFullPath">Full path to the root of the web project (e.g. c:\WebProject\)</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetWebApplicationRelativePath(System.String)">
            <summary>
            Converts the given physical path to an application relative path
            </summary>
            <param name="path">Path to convert</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetImageUrl(System.String)">
            <summary>
            Gets the real file path for the given path (for zip returns the path to the zip file)
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetRealFilePath(System.String)">
            <summary>
            Gets the real file path for the given path (for zip returns the path to the zip file)
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.DeleteOldFiles(CMS.IO.DirectoryInfo,System.DateTime,System.Boolean)">
            <summary>
            Deletes files older than specified time from the file system.
            </summary>
            <param name="dir">Directory to process</param>
            <param name="olderThan">Limit time for deletion of a file</param>
            <param name="deleteEmptyFolder">Indicates if the specified folder should be deleted if there are no files left at the end</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.DeleteOldFiles(System.String,System.DateTime,System.Boolean)">
            <summary>
            Deletes files older than specified time from the file system.
            </summary>
            <param name="folder">Folder path</param>
            <param name="olderThan">Limit time for deletion of a file</param>
            <param name="deleteEmptyFolder">Indicates if the specified folder should be deleted if there are no files left at the end</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.GetByteArrayFromStream(CMS.IO.Stream,System.Int32,System.Int64)">
            <summary>
            Returns byte array from input stream.
            </summary>
            <param name="stream">Input stream</param>
            <param name="bufferSize">Buffer size</param>
            <param name="position">Position from which the reading should start</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.LogDirectoryDeleteTask(System.String)">
            <summary>
            Logs the directory delete task for the web farm server
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.LogDeleteFileTask(System.String)">
            <summary>
            Logs the file delete task for the web farm server
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StorageHelper.LogUpdateFileTask(System.String)">
            <summary>
            Logs the file update task for the web farm server
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="P:CMS.IO.StorageHelper.UseZippedResources">
            <summary>
            If true, the system is allowed to use zipped resources such as SQL installation scripts, web templates, or images
            </summary>
        </member>
        <member name="P:CMS.IO.StorageHelper.IsDefaultStorageExternal">
            <summary>
            Returns whether current instance running on external storage.
            </summary>
        </member>
        <member name="T:CMS.IO.StreamReader">
            <summary>
            Represents a reader that can read a sequential series of characters.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamReader.#ctor(System.IO.StreamReader)">
            <summary>
            Creates new instance of stream reader.
            </summary>
            <param name="sr">System.IO.StreamReader object</param>
        </member>
        <member name="M:CMS.IO.StreamReader.New(CMS.IO.Stream)">
            <summary>
            Returns new instance of stream reader class.
            </summary>
            <param name="stream">Stream object</param>
        </member>
        <member name="M:CMS.IO.StreamReader.New(System.IO.StreamReader)">
            <summary>
            Returns new instance of stream reader class.
            </summary>
            <param name="sr">System stream reader object</param>
        </member>
        <member name="M:CMS.IO.StreamReader.New(System.String)">
            <summary>
            Returns new instance of stream reader class.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.IO.StreamReader.New(System.IO.Stream)">
            <summary>
            Returns new instance of stream reader class.
            </summary>
            <param name="stream">System.IO.Stream object</param>
        </member>
        <member name="M:CMS.IO.StreamReader.New(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Returns new instance of stream reader class.
            </summary>
            <param name="stream">System.IO.Stream object</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:CMS.IO.StreamReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>        
        </member>
        <member name="M:CMS.IO.StreamReader.Close">
            <summary>
            Closes the StreamReader object and the underlying stream, and releases any system resources associated with the reader.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamReader.ReadToEnd">
            <summary>
            Reads the stream from the current position to the end of the stream.
            </summary>        
        </member>
        <member name="M:CMS.IO.StreamReader.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>        
        </member>
        <member name="M:CMS.IO.StreamReader.ReadLine">
            <summary>
            Reads a line from the underlying string.
            </summary>        
        </member>
        <member name="M:CMS.IO.StreamReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources.
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:CMS.IO.StreamReader.LogFileOperation(System.String,System.Int32,System.String)">
            <summary>
            Logs a file operation if logging is enabled and base stream is a FileStream.
            </summary>
            <param name="operation">Operation type</param>
            <param name="size">Number of bytes read</param>
            <param name="text">Content read</param>
        </member>
        <member name="P:CMS.IO.StreamReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
        </member>
        <member name="T:CMS.IO.StreamWriter">
            <summary>
            Represents a writer that can write a sequential series of characters.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWriter.#ctor(System.IO.StreamWriter,CMS.IO.FileStream)">
            <summary>
            Creates new instance of stream writer.
            </summary>
            <param name="sw">Stream writer object</param>
            <param name="fs">File stream</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.#ctor(System.IO.StreamWriter,CMS.IO.FileStream,System.Text.Encoding)">
            <summary>
            Creates new instance of stream writer.
            </summary>
            <param name="sw">Stream writer object</param>
            <param name="fs">File stream</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.New(CMS.IO.Stream)">
            <summary>
            Returns new instance of stream writer class.
            </summary>
            <param name="stream">Stream object</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.New(CMS.IO.Stream,System.Text.Encoding)">
            <summary>
            Returns new instance of stream writer class.
            </summary>
            <param name="stream">Stream object</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.New(System.String,System.Boolean)">
            <summary>
            Returns new instance of stream writer class.
            </summary>
            <param name="path">Path to file</param>
            <param name="append">If should append data to existing file</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.New(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Returns new instance of stream writer class.
            </summary>
            <param name="path">Path to file</param>
            <param name="append">If should append data to existing file</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.New(System.String)">
            <summary>
            Returns new instance of stream writer class.
            </summary>
            <param name="path">Path to file</param>        
        </member>
        <member name="M:CMS.IO.StreamWriter.New(System.IO.StreamWriter)">
            <summary>
            Returns new instance of stream writer class.
            </summary>
            <param name="sw">Stream writer object</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">String to write</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWriter.Close">
            <summary>
            Closes stream.
            </summary>
        </member>
        <member name="M:CMS.IO.StreamWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources.
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.Write(System.Char)">
            <summary>
            Writes one character to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes char array to the stream.
            </summary>
            <param name="buffer">Buffer with chars</param>
            <param name="index">Buffer start index</param>
            <param name="count">Number of characters to write</param>
        </member>
        <member name="M:CMS.IO.StreamWriter.LogFileOperation(System.String,System.Int32,System.String)">
            <summary>
            Logs a file operation if logging is enabled and base stream is a FileStream.
            </summary>
            <param name="operation">Operation type</param>
            <param name="size">Number of bytes written</param>
            <param name="text">Content written</param>
        </member>
        <member name="P:CMS.IO.StreamWriter.IsFileStream">
            <summary>
            Returns true if the inner stream is a file stream
            </summary>
        </member>
        <member name="P:CMS.IO.StreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that interfaces with a backing store.
            </summary>
        </member>
        <member name="P:CMS.IO.StreamWriter.Encoding">
            <summary>
            Returns current stream writer encoding.
            </summary>
        </member>
        <member name="T:CMS.IO.StringReader">
            <summary>
            CMS.IO StringReader wrapper for System.IO.StringReader.
            </summary>
        </member>
        <member name="M:CMS.IO.StringReader.New(System.String)">
            <summary>
            Creates new instance of string reader.
            </summary>
            <param name="s">Input string</param>        
        </member>
        <member name="M:CMS.IO.StringReader.#ctor(System.String)">
            <summary>
            Creates new instance of string reader. 
            </summary>
            <param name="s">Input string</param>
        </member>
        <member name="T:CMS.IO.StringWriter">
            <summary>
            CMS.IO StringWriter wrapper for System.IO.StringWriter.
            </summary>
        </member>
        <member name="M:CMS.IO.StringWriter.#ctor">
            <summary>
            Creates new instance of string writer.
            </summary>
        </member>
        <member name="M:CMS.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
            <summary>
            Creates new instance of string writer.
            </summary>
            <param name="sb">String builder</param>
            <param name="formatProvider">Format provider</param>
        </member>
        <member name="M:CMS.IO.StringWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Creates new instance of string writer.
            </summary>
            <param name="sb">String builder</param>
        </member>
        <member name="T:CMS.IO.ZipProviderLoader">
            <summary>
            Zip provider loader class
            </summary>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.#ctor(System.String,System.String,CMS.IO.AbstractStorageProvider)">
            <summary>
            Constructor
            </summary>
            <param name="zipFilePath">Path to the zip file</param>
            <param name="mappedPath">Mapped path</param>
            <param name="parentProvider">Parent storage provider</param>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetInternalProvider(System.String)">
            <summary>
            Gets the storage provider based on the given path
            </summary>
            <param name="path">Input path</param>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.NotImplemented">
            <summary>
            Throws the not implemented exception
            </summary>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.CreateFileProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.CreateDirectoryProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetFileInfo(System.String)">
            <summary>
            Returns new instance of FileInfo object.
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetDirectoryInfo(System.String)">
            <summary>
            Returns new instance of directory info.
            </summary>
            <param name="path">Path</param>        
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetFileStream(System.String,CMS.IO.FileMode)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>        
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>        
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.ZipProviderLoader.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
            <param name="bufferSize">Buffer size</param>
            <param name="share">Sharing permissions</param>
        </member>
        <member name="P:CMS.IO.ZipProviderLoader.FilePath">
            <summary>
            Zip file path
            </summary>
        </member>
        <member name="P:CMS.IO.ZipProviderLoader.ZipProvider">
            <summary>
            Zip storage provider
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.CRC32.#ctor">
            <summary>
            Constructor - Construct an instance of the CRC32 class, pre-initialising the table
            for speed of lookup.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.CRC32.GetCrc32(CMS.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>The CRC32 calculation</returns>
        </member>
        <member name="M:CMS.IO.Zip.CRC32.GetCrc32AndCopy(CMS.IO.Stream,CMS.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>The CRC32 calculation</returns>
        </member>
        <member name="P:CMS.IO.Zip.CRC32.TotalBytesRead">
            <summary>
            Gets total bytes read.
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.ZipDirectory">
            <summary>
            Envelope for System.IO.Directory.
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipDirectory.mProvider">
            <summary>
            Parent provider
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.#ctor(CMS.IO.ZipStorageProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">Parent provider</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">Path to test</param>  
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">Path to create</param> 
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from</param> 
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">Path to retrieve files from</param> 
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">Path to retrieve directories from</param> 
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>        
            <param name="path">Path to directory</param>
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetDirectories(System.String,System.String,CMS.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern
            in the current directory, and optionally searches subdirectories.
            </summary>        
            <param name="path">Path to directory</param>
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Specifies whether to search the current directory, or the current directory and all subdirectories.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetDirectoryList(CMS.IO.DirectoryInfo[])">
            <summary>
            Creates a list of directories from the given array.
            </summary>
            <param name="dirs">Array of directories</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetFileList(CMS.IO.FileInfo[])">
            <summary>
            Creates a list of file full paths from the given array.
            </summary>
            <param name="files">Array of files</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>  
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes an empty directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">Path to directory</param>
            <param name="recursive">If delete if subdirs exists</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory.
            </summary>
            <param name="path">Path to directory</param>        
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">Source directory name</param>
            <param name="destDirName">Destination directory name</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.GetAccessControl(System.String)">
            <summary>
            Gets a DirectorySecurity  object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to directory</param>        
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.PrepareFilesForImport(System.String)">
            <summary>
            Prepares files for import. Converts them to media library.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectory.DeleteDirectoryStructure(System.String)">
            <summary>
            Deletes all files in the directory structure. It works also in a shared hosting environment.
            </summary>
            <param name="path">Full path of the directory to delete</param>
        </member>
        <member name="T:CMS.IO.Zip.ZipDirectoryInfo">
            <summary>
            Directory operation provider for zip files
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipDirectoryInfo.mFiles">
            <summary>
            List of inner files
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipDirectoryInfo.mDirectories">
            <summary>
            List of inner directories
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipDirectoryInfo.mProvider">
            <summary>
            Parent provider
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.#ctor(CMS.IO.ZipStorageProvider,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">Parent provider</param>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.RegisterFile(CMS.IO.Zip.ZipFileInfo)">
            <summary>
            Registers the file within the directory
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.RegisterDirectory(CMS.IO.Zip.ZipDirectoryInfo)">
            <summary>
            Registers the subdirectory within the directory
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates subdirectory.
            </summary>
            <param name="subdir">Subdirectory to create</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.Delete">
            <summary>
            Deletes directory.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>        
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.GetFiles(System.String,CMS.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Search options</param>      
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <param name="searchPattern">Search pattern</param>              
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>        
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>        
            <param name="searchPattern">Search pattern</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirectoryInfo.GetDirectories(System.String,CMS.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria and using a value
            to determine whether to search subdirectories.
            </summary>        
            <param name="searchPattern">Search pattern</param>
            <param name="searchOption">Specifies whether to search the current directory, or the current directory and all subdirectories.</param>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirectoryInfo.FullName">
            <summary>
            Full name of directory (whole path).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirectoryInfo.LastWriteTime">
            <summary>
            Last write time to directory.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirectoryInfo.Name">
            <summary>
            Name of directory (without path).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirectoryInfo.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirectoryInfo.Exists">
            <summary>
            Whether directory exists.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirectoryInfo.Parent">
            <summary>
            Parent directory.
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.ZipFile">
            <summary>
            Zip file operation provider
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipFile.mProvider">
            <summary>
            Parent provider
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.#ctor(CMS.IO.ZipStorageProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">Parent provider</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.ThrowReadOnly">
            <summary>
            Throws a not supported exception that the zip file content is read-only
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">Path to file</param>  
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Delete(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">Path to source file.</param>
            <param name="destFileName">Path to destination file.</param>
            <param name="overwrite">If destination file should be overwritten.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">Path to source file.</param>
            <param name="destFileName">Path to destination file.</param>        
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">Path to file</param> 
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">Source file name</param>
            <param name="destFileName">Destination file name</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">Path to file</param> 
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file. 
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file. 
            </summary>
            <param name="path">Path</param>
            <param name="contents">Content to write</param>
            <param name="encoding">The character encoding to use</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">Path to file</param>
            <param name="bytes">Bytes to write</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.SetAttributes(System.String,CMS.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes  of the file on the specified path.
            </summary>
            <param name="path">Path to file</param>
            <param name="fileAttributes">File attributes</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.Open(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Opens a FileStream  on the specified path, with the specified mode and access.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">Path</param>
            <param name="lastWriteTimeUtc">Specified time</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">Path to file</param>        
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.GetAccessControl(System.String)">
            <summary>
            Gets a DirectorySecurity  object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">Path to directory</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="path">Path to file</param>
            <param name="lastWriteTime">Last write time</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFile.GetFileUrl(System.String,System.String)">
            <summary>
            Returns URL to file. If can be accessed directly then direct URL is generated else URL with GetFile page is generated.
            </summary>
            <param name="path">Virtual path starting with ~ or absolute path.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="T:CMS.IO.Zip.ZipFileInfo">
            <summary>
            FileInfo class for zip files
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.#ctor(CMS.IO.ZipStorageProvider,System.String)">
            <summary>
            Initializes new instance of FileInfo.
            </summary>
            <param name="provider">Parent provider</param>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.ThrowReadOnly">
            <summary>
            Throws a not supported exception that the zip file content is read-only
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.CreateText">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary> 
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.Delete">
            <summary>
            Deletes file.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.OpenRead">
            <summary>
            Opens file for reading.
            </summary> 
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.CopyTo(System.String)">
            <summary>
            Copies current file to destination. 
            </summary>
            <param name="destFileName">Destination file name.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies current file to destination. 
            </summary>
            <param name="destFileName">Destination file name.</param>
            <param name="overwrite">Indicates if existing file should be overwritten</param>        
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.MoveTo(System.String)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">Destination file name</param>        
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.ToString">
            <summary>
            Converts current info to string.
            </summary>        
        </member>
        <member name="M:CMS.IO.Zip.ZipFileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>   
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.Length">
            <summary>
            Length of file.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.Extension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.FullName">
            <summary>
            Full name of file (with whole path).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.Name">
            <summary>
            File name of file (without path).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.DirectoryName">
            <summary>
            Directory name.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.LastWriteTime">
            <summary>
            Last write time to file.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.Exists">
            <summary>
            If file exists.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.CreationTime">
            <summary>
            Creation date of file.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.LastAccessTime">
            <summary>
            Creation date of file.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.Directory">
            <summary>
            Directory of file.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.IsReadOnly">
            <summary>
             If is read only.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.Attributes">
            <summary>
            File attributes.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileInfo.SystemInfo">
            <summary>
            System file info
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.ZipFileStream">
            <summary>
            FileStream object from the zip file
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipFileStream.mProvider">
            <summary>
            Parent provider
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipFileStream.mStream">
            <summary>
            Underlying memory stream
            </summary>
        </member>
        <member name="F:CMS.IO.Zip.ZipFileStream.mReadSize">
            <summary>
            Number of bytes that were read
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.#ctor(CMS.IO.ZipStorageProvider,System.String,CMS.IO.FileMode)">
            <summary>
            Initializes new instance and initializes new system file stream.
            </summary>
            <param name="provider">Zip provider</param>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.#ctor(CMS.IO.ZipStorageProvider,System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Initializes new instance and initializes new system file stream.
            </summary>
            <param name="provider">Zip provider</param>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.#ctor(CMS.IO.ZipStorageProvider,System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Initializes new instance and initializes new system file stream.
            </summary>
            <param name="provider">Zip provider</param>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>       
            <param name="share">Sharing permissions.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.#ctor(CMS.IO.ZipStorageProvider,System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Initializes new instance and initializes new system file stream.
            </summary>
            <param name="provider">Zip provider</param>
            <param name="path">Path to file.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
            <param name="bSize">Buffer size.</param>
            <param name="share">Sharing permissions.</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.InitFileStream">
            <summary>
            Initializes the stream
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from stream and stores them into array.
            </summary>
            <param name="array">Array where result is stored</param>
            <param name="offset">Offset from beginning of file</param>
            <param name="count">Number of characters which are read</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.Seek(System.Int64,CMS.IO.SeekOrigin)">
            <summary>
            Sets cursor position at specified position.
            </summary>
            <param name="offset">Offset from beginning of file</param>
            <param name="loc">Reference points for seeking in the stream</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="count">Number of chars</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.WriteByte(System.Byte)">
            <summary>
            Writes byte to stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipFileStream.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileStream.SystemStream">
            <summary>
            Gets or sets system stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipFileStream.Position">
            <summary>
             Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.Shared">
            <summary>
            Shared class.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.Shared.StringFromBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets string from buffer.
            </summary>
            <param name="buf">Buffer</param>
            <param name="start">Starting index</param>
            <param name="maxlength">Maximum length</param>
        </member>
        <member name="M:CMS.IO.Zip.Shared.ReadSignature(CMS.IO.Stream)">
            <summary>
            Reads the signature.
            </summary>
            <param name="s">Stream to read</param>
        </member>
        <member name="M:CMS.IO.Zip.Shared.PackedToDateTime(System.Int32)">
            <summary>
            Gets the datetime from packed int.
            </summary>
            <param name="packedDateTime">Integer representation of the datetime</param>
        </member>
        <member name="M:CMS.IO.Zip.Shared.DateTimeToPacked(System.DateTime)">
            <summary>
            Gets packed int from datetime.
            </summary>
            <param name="time">Datetime to be converted</param>
        </member>
        <member name="T:CMS.IO.Zip.ZipDirEntry">
            <summary>
            Class representing directory entry inside ZIP file.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirEntry.#ctor">
            <summary>
            Constructor - Creates ZIP directory entry.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirEntry.#ctor(CMS.IO.Zip.ZipEntry)">
            <summary>
            Constructor - Creates ZIP directory entry.
            </summary>
            <param name="ze">ZIP entry</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirEntry.Read(CMS.IO.Stream)">
            <summary>
            Reades dir into zip.
            </summary>
            <param name="s">Stream to read</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirEntry.Read(CMS.IO.Stream,System.Boolean)">
            <summary>
            Reades dir into zip.
            </summary>
            <param name="s">Stream to read</param>
            <param name="TurnOnDebug">Indicates if debug should be turned on</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipDirEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Checks the signature.
            </summary>
            <param name="signature">Signature</param>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.LastModified">
            <summary>
            Gets time of last modification.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.FileName">
            <summary>
            Gets name of file.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.Comment">
            <summary>
            Gets comment.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.VersionMadeBy">
            <summary>
            Gets version made by (for internal format).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.VersionNeeded">
            <summary>
            Gets version made by (for internal format).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.CompressionMethod">
            <summary>
            Gets method of compression.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.CompressedSize">
            <summary>
            Gets size of compressed dir.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipDirEntry.UncompressedSize">
            <summary>
            Gets size of uncompressed dir.
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.ZipEntry">
            <summary>
            Class representing ZIP entry.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.ReadHeader(CMS.IO.Stream,CMS.IO.Zip.ZipEntry)">
            <summary>
            Reades header.
            </summary>
            <param name="s">Stream to read</param>
            <param name="ze">ZIP entry</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Checks the signature validation.
            </summary>
            <param name="signature">Signature</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Read(CMS.IO.Stream)">
            <summary>
            Reades ZIP entry.
            </summary>
            <param name="s">Stream to read</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Read(CMS.IO.Stream,System.Boolean)">
            <summary>
            Reades ZIP entry.
            </summary>
            <param name="s">Stream to read</param>
            <param name="TurnOnDebug">Indicates if debug should be turned on</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Create(System.String)">
            <summary>
            Creates ZIP entry.
            </summary>
            <param name="filename">File name of the package</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Create(System.String,CMS.IO.Stream)">
            <summary>
            Creates ZIP entry from stream.
            </summary>
            <param name="filename">File name of the package</param>
            <param name="stream">Stream</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Extract">
            <summary>
            Extracts ZIP archive.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Extract(System.String)">
            <summary>
            Extracts ZIP archive.
            </summary>
            <param name="basedir">Destination directory</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.WriteCentralDirectoryEntry(CMS.IO.Stream)">
            <summary>
            Writes central directory entry.
            </summary>
            <param name="s">Stream to write</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.WriteHeader(CMS.IO.Stream,System.Byte[])">
            <summary>
            Writes header.
            </summary>
            <param name="s">Stream to write</param>
            <param name="bytes">Bytes to write</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.WriteHeader(CMS.IO.Stream,System.Byte[],CMS.IO.Stream)">
            <summary>
            Writes header.
            </summary>
            <param name="s">Stream to write</param>
            <param name="bytes">Bytes to write</param>
            <param name="inputStream">Stream to read</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipEntry.Write(CMS.IO.Stream)">
            <summary>
            Write to the stream.
            </summary>
            <param name="s">Stream to write</param>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.LastModified">
            <summary>
            Gets the date of last modification.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.FileName">
            <summary>
            Gets filename.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.InputStream">
            <summary>
            Gets and sets input stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.VersionNeeded">
            <summary>
            Gets needed version (for internal format).
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.BitField">
            <summary>
            Gets bitfield.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets method of compression.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets compressed size.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.UncompressedSize">
            <summary>
            Gets uncompressed size.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.mFileData">
            <summary>
            Gets the file data.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.CompressedStream">
            <summary>
            Gets compressed stream.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipEntry.Header">
            <summary>
            Gets header.
            </summary>
        </member>
        <member name="T:CMS.IO.Zip.ZipProvider">
            <summary>
            Class for work with ZIP archives.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.#ctor">
            <summary>
            Constructor - Creates ZIP provider.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.#ctor(System.String)">
            <summary>
            Constructor - Creates ZIP provider.
            </summary>
            <param name="NewZipFileName">File name of the new ZIP archive</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.AddFile(System.String)">
            <summary>
            Adds file to archive.
            </summary>
            <param name="FileName">File name</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.AddFileFromStream(System.String,CMS.IO.Stream)">
            <summary>
            Adds the file from the given stream to the archive.
            </summary>
            <param name="FileName">File name to add</param>
            <param name="stream">Stream with the file data</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.AddDirectory(System.String)">
            <summary>
            Adds directory to archive.
            </summary>
            <param name="DirectoryName">Directory name</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.AddDirectory(System.String,System.Boolean)">
            <summary>
            Adds directory to archive.
            </summary>
            <param name="DirectoryName">Directory name</param>
            <param name="WantVerbose">Flag for verbose</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Save">
            <summary>
            Saves created archive.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.WriteCentralDirectoryStructure">
            <summary>
            Writes directory structure.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.WriteCentralDirectoryFooter(System.Int64,System.Int64)">
            <summary>
            Writes central directory footer.
            </summary>
            <param name="StartOfCentralDirectory">Start</param>
            <param name="EndOfCentralDirectory">End</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Read(System.String)">
            <summary>
            Reades specific archive.
            </summary>
            <param name="zipfilename">File name of the archive</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Read(System.String,System.Boolean)">
            <summary>
            Reades specific archive.
            </summary>
            <param name="zipfilename">File name of the archive</param>
            <param name="TurnOnDebug">Flag for debugging</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.ExtractAll(System.String)">
            <summary>
            Extracts all entries of the specific archive.
            </summary>
            <param name="path">Path of the package</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.ExtractAll(System.String,System.Boolean)">
            <summary>
            Extracts all entries of the specific archive.
            </summary>
            <param name="path">Path of the package</param>
            <param name="WantVerbose">Flag for verbose</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Extract(System.String)">
            <summary>
            Extraxts entry from archive.
            </summary>
            <param name="filename">File name of the package</param>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Dispose">
            <summary>
            Disposes managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:CMS.IO.Zip.ZipProvider.Dispose(System.Boolean)">
            <summary>
            Disposes managed and unmanaged resources.
            </summary>
            <param name="disposeManagedResources">Managed resources</param>
        </member>
        <member name="P:CMS.IO.Zip.ZipProvider.Name">
            <summary>
            Gets name.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipProvider.ReadStream">
            <summary>
            Stream to read.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipProvider.WriteStream">
            <summary>
            Stream to write.
            </summary>
        </member>
        <member name="P:CMS.IO.Zip.ZipProvider.Item(System.String)">
            <summary>
            Gets the entry from archive.
            </summary>
            <param name="filename">File name of the package</param>
        </member>
        <member name="T:CMS.IO.ZipStorageProvider">
            <summary>
            ZIP storage provider
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.ZIP_START">
            <summary>
            Starting character for the zip archive within path
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.ZIP_END">
            <summary>
            Ending character for the zip archive within path
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mCompressionBufferSize">
            <summary>
            Size of buffer used to un/compress packages
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mLoadAllData">
            <summary>
            If true, all data is loaded when the provider is initialized
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mCacheData">
            <summary>
            If true, the loaded data is cached
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mCacheDataLimit">
            <summary>
            Limit size for the caching of the file data (bytes), 10 kB by default
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mData">
            <summary>
            Table of file data indexed by names
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mEntries">
            <summary>
            Table of zip entries indexed by names
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mFiles">
            <summary>
            Table of file infos indexed by names
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mDirectories">
            <summary>
            Table of directory infos indexed by names
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mMappedZipProviders">
            <summary>
            Hashtable of existing mapped zip providers
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mFileStream">
            <summary>
            Zip file stream
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mStream">
            <summary>
            Zip input stream
            </summary>
        </member>
        <member name="F:CMS.IO.ZipStorageProvider.mFile">
            <summary>
            Zip file
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.#ctor(System.String,System.String,CMS.IO.AbstractStorageProvider)">
            <summary>
            Constructor
            </summary>
            <param name="zipFilePath">Path to the zip file</param>
            <param name="mappedPath">Mapped path</param>
            <param name="parentProvider">Parent storage provider</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.Dispose">
            <summary>
            Disposes the object and closes the streams if necessary
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.Dispose(System.String)">
            <summary>
            Disposes the storage provider for the given path
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.DisposeAll">
            <summary>
            Disposes the zip storage providers
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.IsZipFolderPath(System.String)">
            <summary>
            Gets the zip file path from the given zip folder path. Returns null if the path isn't a zip folder path
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetZipFileName(System.String)">
            <summary>
            Gets the zip file name with the container brackets
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileStream(System.String)">
            <summary>
            Gets a file stream for the given file
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetInternalStream(System.String,System.Int32@)">
            <summary>
            Gets the internal stream for the given file
            </summary>
            <param name="lowerFileName">Lowercase file name</param>
            <param name="size">Returns the data size</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileData(System.String)">
            <summary>
            Gets the particular file data
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileEntry(System.String)">
            <summary>
            Gets the particular file data
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.CloseStreams">
            <summary>
            Closes the file streams
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.CloseZipFile">
            <summary>
            Closes the zip file
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.CloseZipStream">
            <summary>
            Closes the zip stream
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.CloseFileStream">
            <summary>
            Closes the file stream
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.LoadContents">
            <summary>
            Loads the contents of the zip file
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.EnsureDirectory(System.String)">
            <summary>
            Ensures the given directory
            </summary>
            <param name="directoryName">Directory name</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.CreateFileProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.CreateDirectoryProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileInfo(System.String)">
            <summary>
            Returns new instance of FileInfo object.
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetDirectoryInfo(System.String)">
            <summary>
            Returns new instance of directory info.
            </summary>
            <param name="path">Path</param>        
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileStream(System.String,CMS.IO.FileMode)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>        
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>        
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.IO.ZipStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
            <param name="bufferSize">Buffer size</param>
            <param name="share">Sharing permissions</param>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.Name">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.CacheData">
            <summary>
            If true, the loaded data is cached
            </summary>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.CacheDataLimit">
            <summary>
            Limit size for the caching of the file data (bytes)
            </summary>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.ZipFile">
            <summary>
            Zip file info object
            </summary>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.FilePath">
            <summary>
            Zip file path
            </summary>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.RootDirectory">
            <summary>
            Root directory
            </summary>
        </member>
        <member name="P:CMS.IO.ZipStorageProvider.CompressionBufferSize">
            <summary>
            Size of buffer used to un/compress packages
            </summary>
        </member>
    </members>
</doc>
