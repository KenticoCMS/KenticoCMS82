<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Newsletters</name>
    </assembly>
    <members>
        <member name="T:CMS.Newsletters.NewsletterSubscriptionAction">
            <summary>
            Class for subscribe/unsubscribe contact to newsletter
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSubscriptionAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscriptionAction.NewsletterName">
            <summary>
            Newsletter identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscriptionAction.Action">
            <summary>
            Gets current action - 0 for SUBSCRIBE, 1 for UNSUBSCRIBE contact.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.GeneratePreviewEventArgs">
            <summary>
            Event arguments for <see cref="T:CMS.Newsletters.GeneratePreviewHandler"/> handler type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GeneratePreviewEventArgs.Subscriber">
            <summary>
            Subscriber for which the e-mail preview is being generated. Can be null if the issue is being generated for generic subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GeneratePreviewEventArgs.Issue">
            <summary>
            Issue for which the e-mail preview is being generated.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GeneratePreviewEventArgs.PreviewHtml">
            <summary>
            Final HTML, that will get shown in preview. Will not modify content if left empty.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.GeneratePreviewHandler">
            <summary>
            Handler for event <see cref="F:CMS.Newsletters.NewsletterEvents.GeneratePreview"/>. Alteration of what is being displayed as a preview e-mail for a subscriber can
            be done through 
            </summary>
        </member>
        <member name="M:CMS.Newsletters.GeneratePreviewHandler.Start(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo,System.String)">
            <summary>
            Starts the event
            </summary>
            <param name="issue">Issue for which the e-mail preview is being generated</param>
            <param name="subscriber">Subscriber for which the e-mail preview is being generated</param>
            <param name="previewHtml">Final HTML, that will get shown in preview. This parameter is readable from <see cref="P:CMS.Newsletters.GeneratePreviewEventArgs.PreviewHtml"/> property when the event is finished.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.GenerateQueueItemsEventArgs">
            <summary>
            Event arguments for <see cref="F:CMS.Newsletters.NewsletterEvents.GenerateQueueItems"/> event.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.GenerateQueueItemsEventArgs.mGeneratedEmails">
            <summary>
            Backing field for <see cref="P:CMS.Newsletters.GenerateQueueItemsEventArgs.GeneratedEmails"/> property.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.Subscriber">
            <summary>
            Subscriber to which the issue is being sent. Can be null to indicate that issue is being sent to all subscribers.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.Issue">
            <summary>
            Issue that's being sent.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.GeneratedEmails">
            <summary>
            E-mail addresses that have been already added to the queue. Used to remove duplicates throughout different subscriber types.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.GenerateQueueItemsHandler">
            <summary>
            Handler for <see cref="F:CMS.Newsletters.NewsletterEvents.GenerateQueueItems"/> event.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.GenerateQueueItemsHandler.Start(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Starts event.
            </summary>
            <param name="issue">Issue which is being sent</param>
            <param name="subscriber">Subscriber to which an issue is being sent. Can be null to sent issue to all subscribers</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.NewsletterEvents">
            <summary>
            Newsletter events.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.ResolveMacros">
            <summary>
            Fired when all newsletter text macros are being resolved. This includes:
            - resolving context-free macros for the whole issue before sending
            - resolving macros with Subscriber context for each recipient
            - resolving macros in the e-mail preview mode
            - when link tracking is enabled and tracking link is being changed to the original one, macros in original link are resolved
            - ...
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.GenerateQueueItems">
            <summary>
            Fired when issue is being sent in newsletter. If you cancel this event, e-mails won't be generated into newsletter queue (see <see cref="T:CMS.Newsletters.EmailQueueItemInfo"/>) and sent afterwards.
            You can use this event to manually add items to queue for your custom subscriber.
            </summary>
            <remarks>
            This event fires either if an issue is being sent to all subscribers (see <see cref="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo)"/>)
            or when sent to just one subscriber (<see cref="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)"/>).
            </remarks>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.ObtainSubscriberAddresses">
            <summary>
            Is called when newsletter module is asking other modules that have custom subscriber type (see <see cref="P:CMS.Newsletters.SubscriberInfo.SubscriberType"/> property) 
            for e-mail addresses that an issue will be sent to. The event arguments are a <see cref="T:CMS.Newsletters.SubscriberInfo"/> of the subscriber that the e-mails are being
            obtained and reference to a set of addresses. Handlers subscribing to this event should then check whether the subscriber is of required type and fill the
            given set of addresses with its own addresses.
            </summary>
            <remarks>
            This event is used only for external subscribers that are not of type <see cref="F:CMS.DataEngine.PredefinedObjectType.ROLE"/>, <see cref="F:CMS.DataEngine.PredefinedObjectType.USER"/>
            nor <see cref="F:CMS.DataEngine.PredefinedObjectType.CONTACT"/>. These types are included directly in newsletters module.
            </remarks>
            <remarks>
            This event is now only used when obtaining count of e-mail addresses in A/B testing, Newsletter module doesn't support creating custom subscriber types.
            </remarks>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.GeneratePreview">
            <summary>
            Event that is called when preview is being generated for a subscriber. Altering of preview content that is being displayed is available through 
            <see cref="P:CMS.Newsletters.GeneratePreviewEventArgs.PreviewHtml"/> property. The event is triggered in <see cref="M:CMS.Newsletters.NewsletterHelper.GetPreviewHTML(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)"/> method.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ObtainSubscriberAddressesEventArgs">
            <summary>
            Event arguments for <see cref="T:CMS.Newsletters.ObtainSubscriberAddressesHandler"/> delegate type. It's used in <see cref="F:CMS.Newsletters.NewsletterEvents.ObtainSubscriberAddresses"/> event.
            Its purpose is to resolve e-mail addresses for subscriber types that the newsletter module doesn't know about.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ObtainSubscriberAddressesEventArgs.Subscriber">
            <summary>
            Subscriber that the e-mail addresses are being resolved.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ObtainSubscriberAddressesEventArgs.Addresses">
            <summary>
            Set of e-mail addresses that will be used to send issue to, when issue is being sent to <see cref="P:CMS.Newsletters.ObtainSubscriberAddressesEventArgs.Subscriber"/>.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ObtainSubscriberAddressesHandler">
            <summary>
            Delegate type for <see cref="F:CMS.Newsletters.NewsletterEvents.ObtainSubscriberAddresses"/> event.
            Its purpose is to resolve e-mail addresses for subscriber types that the newsletter module doesn't know about.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ObtainSubscriberAddressesHandler.Start(CMS.Newsletters.SubscriberInfo,System.Collections.Generic.ISet{System.String})">
            <summary>
            Starts the event.
            </summary>
            <param name="subscriber">Subscriber that the e-mail addresses are being resolved</param>
            <param name="addresses">Set of e-mail addresses that will be used to send issue to, when issue is being sent to <paramref name="subscriber"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.NewsletterHandlers">
            <summary>
            Newsletter events handlers.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.Init">
            <summary>
            Initializes the events handlers.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.ClearEmailSendingStatus(System.Object,System.EventArgs)">
            <summary>
            Clears e-mail sending status of all newsletters
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.RenameUserSubscriber(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Rename user subscriber when user's name changed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.RenameRoleSubscriber(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Rename role subscriber when role's name changed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.UnblockUserSubscriber(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Sets user subscriber bounces to 0.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterMacroMethods">
            <summary>
            Newsletter methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterMacroMethods.GetSubscriberNameAndType(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns formatted string with name and type of subscriber.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueItemListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueItemListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemListInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailQueueItemList object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailQueueItemList object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueItemInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Newsletters.EmailQueueItemInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItems">
            <summary>
            Returns a query for all the EmailQueueItem objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItem(System.Int32)">
            <summary>
            Returns EmailQueueItem with specified ID.
            </summary>
            <param name="id">EmailQueueItem ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItem(System.Guid)">
            <summary>
            Returns EmailQueueItem with specified GUID.
            </summary>
            <param name="guid">EmailQueueItem GUID</param>                
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.SetEmailQueueItem(CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Sets (updates or inserts) specified EmailQueueItem.
            </summary>
            <param name="infoObj">EmailQueueItem to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItem(CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Deletes specified EmailQueueItem.
            </summary>
            <param name="infoObj">EmailQueueItem to be deleted</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItem(System.String)">
            <summary>
            Deletes specified EmailQueueItems.
            </summary>
            <param name="where">Condition to use for deletion.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItem(System.Int32)">
            <summary>
            Deletes EmailQueueItem with specified site ID.
            </summary>
            <param name="siteID">EmailQueueItem ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteFailedEmailQueueItem(System.Int32)">
            <summary>
            Deletes EmailQueueItems with specified site ID that are in Failed status.
            </summary>
            <param name="siteID">EmailQueueItem ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItemsInternal">
            <summary>
            Returns a query for all the EmailQueueItem objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItemInternal(System.Int32)">
            <summary>
            Returns EmailQueueItem with specified ID.
            </summary>
            <param name="id">EmailQueueItem ID</param>        
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItemInternal(System.Guid)">
            <summary>
            Returns EmailQueueItem with specified GUID.
            </summary>
            <param name="guid">EmailQueueItem GUID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.SetEmailQueueItemInternal(CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Sets (updates or inserts) specified EmailQueueItem.
            </summary>
            <param name="infoObj">EmailQueueItem to be set</param>        
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItemInternal(CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Deletes specified EmailQueueItem.
            </summary>
            <param name="infoObj">EmailQueueItem to be deleted</param>        
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItemInternal(System.String)">
            <summary>
            Deletes specified EmailQueueItems.
            </summary>
            <param name="where">Condition to use for deletion</param>
        </member>
        <member name="T:CMS.Newsletters.ResolveMacrosEventArgs">
            <summary>
            Event arguments for the <see cref="T:CMS.Newsletters.ResolveMacrosHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.MacroResolver">
            <summary>
            Macro resolver which will be used to resolve macros.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.TextToResolve">
            <summary>
            Text before resolving on the Before event or already resolved text on the After event.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.Newsletter">
            <summary>
            Text which is being resolved belongs to the issue in this newsletter.
            Can be null if there is no corresponding newsletter available.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.IssueInfo">
            <summary>
            Text which is being resolved belongs to this issue.
            Can be null if there is no corresponding issue available.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ResolveMacrosHandler">
            <summary>
            Handler for the event when macros are being resolved in the newsletter module.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ResolveMacrosHandler.StartEvent(CMS.MacroEngine.MacroResolver,System.String,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Initiates event handling.
            </summary>
            <param name="macroResolver">Macro resolver which will be used to resolve macros in the text</param>
            <param name="textToResolve">Text which will be resolved</param>
            <param name="newsletter">Text which is being resolved belongs to the issue in this newsletter</param>
            <param name="issue">Text which is being resolved belongs to this issue</param>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateHelper">
            <summary>
            Helper class for e-mail template manipulation.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateHelper.ValidateEditableRegions(System.String,System.Boolean@,System.Boolean@,System.Collections.Generic.List{System.String})">
            <summary>
            Check validity of editable regions (correct and unique code names)
            </summary>
            <param name="templateBody">Template</param>
            <param name="uniqueRegions">Returns TRUE if unique region names have been used</param>
            <param name="correctNames">Returns TRUE if valid region code names have been used</param>
            <param name="regionNames">List of region names from template (optional)</param>
        </member>
        <member name="T:CMS.Newsletters.ExtensionMethods.DictionaryExtensions">
            <summary>
            Extension methods for a generic dictionary.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ExtensionMethods.DictionaryExtensions.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``1})">
            <summary>
            Performs the specified action on each element of the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="action">The action</param>
        </member>
        <member name="T:CMS.Newsletters.Extensions.Pop3ClientExtensions">
            <summary>
            Contains extension methods for POP3 client to simplify message processing.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Extensions.Pop3ClientExtensions.GetSafeMessage(OpenPop.Pop3.Pop3Client,System.Int32)">
            <summary>
            Fetches a message from the server and parses it, consuming and logging any exceptions in the process.
            </summary>
            <param name="pop3Client">POP3 client</param>
            <param name="messageNumber">Message number on the server</param>
            <returns>Message object</returns>
        </member>
        <member name="T:CMS.Newsletters.ABTestInfo">
            <summary>
            ABTestInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.#ctor">
            <summary>
            Constructor - Creates an empty ABTestInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ABTestInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestSelectWinnerAfter">
            <summary>
            Time interval (in minutes) after a winner will be selected.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerSelected">
            <summary>
            Gets or sets the date when winner was selected.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestLastModified">
            <summary>
            Gets or sets the date and time the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerOption">
            <summary>
            Determines how to select winner.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerIssueID">
            <summary>
            Winner issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestGUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestIssueID">
            <summary>
            Parent issue (in case of A/B test).
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestID">
            <summary>
            ID of A/B test.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestSizePercentage">
            <summary>
            Size of test group in percents.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestNumberPerVariantEmails">
            <summary>
            Number of e-mail addresses to send per each variant.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerScheduledTaskID">
            <summary>
            ID of scheduled task to select winner.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ABTestInfoProvider">
            <summary>
            Class providing ABTestInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfoProvider.mABTestInfosByIssueID">
            <summary>
            States indexed by state code.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfoProvider.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTests">
            <summary>
            Returns a query for all the ABTestInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfo(System.Int32)">
            <summary>
            Returns abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.SetABTestInfo(CMS.Newsletters.ABTestInfo)">
            <summary>
            Sets (updates or inserts) specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be set.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.DeleteABTestInfo(CMS.Newsletters.ABTestInfo)">
            <summary>
            Deletes specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be deleted.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.DeleteABTestInfo(System.Int32)">
            <summary>
            Deletes abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfoForIssue(System.Int32)">
            <summary>
            Returns ABTest info for the given issue (parent issue).
            </summary>
            <param name="issueId">Parent issue ID</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestsInternal">
            <summary>
            Returns a query for all the ABTestInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfoInternal(System.Int32)">
            <summary>
            Returns abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.SetABTestInfoInternal(CMS.Newsletters.ABTestInfo)">
            <summary>
            Sets (updates or inserts) specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be set.</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.DeleteABTestInfoInternal(CMS.Newsletters.ABTestInfo)">
            <summary>
            Deletes specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be deleted.</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfoForIssueInternal(System.Int32)">
            <summary>
            Returns ABTest info for the given issue (parent issue).
            </summary>
            <param name="issueId">Parent issue ID</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.LoadTests">
            <summary>
            Loads tests to hashtable.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfoProvider.ABTestInfosByIssueID">
            <summary>
            AB tests indexed by parent issue ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterExport">
            <summary>
            Handles special actions during the Newsletter export process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterExport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterModuleMetadata">
            <summary>
            Represents the Newsletter module metadata.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterResolvers">
            <summary>
            Resolvers used in e-mail templates and other macro visual components.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterResolvers.NewsletterResolver">
            <summary>
            Newsletter resolver.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterResolvers.NewsletterOptInResolver">
            <summary>
            Newsletter opt-in resolver.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueSender">
            <summary>
            Class for sending newsletter issues (<see cref="T:CMS.Newsletters.IssueInfo"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueSender.#ctor(CMS.Newsletters.IssueInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="issue">Issue that is being sent</param>
            <exception cref="T:System.ArgumentNullException">Issue cannot be null</exception>
        </member>
        <member name="M:CMS.Newsletters.IssueSender.Send(System.DateTime)">
            <summary>
            Sends issue at given time (creates scheduled task, <see cref="T:CMS.Newsletters.QueueSender"/>) to all subscribers.
            </summary>
            <param name="when">Time at which the issue will be sent. If the time is in the past, the scheduled task will be sent immediately.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when given issue has no existing newsletter assigned.</exception>
        </member>
        <member name="M:CMS.Newsletters.IssueSender.Send(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sends e-mail based on the issue to the specified subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:CMS.Newsletters.IssueSender.SendAsync(System.String)">
            <summary>
            Asynchronously sends an issue to given e-mail addresses delimited by semicolon.
            </summary>
            <param name="recipients">Recipients delimited by semicolon</param>
        </member>
        <member name="M:CMS.Newsletters.IssueSender.Send(System.String)">
            <summary>
            Sends issue to e-mail addresses delimited by semicolon.
            </summary>
            <param name="recipients">Recipients delimited by semicolon</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterHelper">
            <summary>
            Newsletter helper class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterHelper.mLicNews">
            <summary>
            License limitation newsletter table
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under administration intefrace</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.CheckLicense(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Checks the license for insert for a new newsletter or for edit in other cases.
            </summary>
            <param name="newsletter">Newsletter</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.ClearLicNewsletter">
            <summary>
            Clear license newsletter hashtable.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.IsTrackingAvailable">
            <summary>
            Checks if newsletter tracking (open e-mail, click through and bounces) is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.IsABTestingAvailable">
            <summary>
            Checks if newsletter A/B testing is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.OnlineMarketingAvailable(System.String)">
            <summary>
            Gets whether Online marketing is available and enabled for the site.
            </summary>
            <param name="siteName">Site name</param>
            <returns>TRUE if online marketing module is loaded, available and enabled for the site, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.OnlineMarketingEnabled(System.String)">
            <summary>
            Gets whether Online marketing is enabled for the site.
            </summary>
            <param name="siteName">Site name</param>
            <returns>TRUE if Open email tracking is enabled, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.UseExternalServiceForDynamicNewsletters(System.String)">
            <summary>
            Indicates if scheduled task for dynamic newsletters should run in windows service
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.MonitorBouncedEmails(System.String)">
            <summary>
            Gets whether bounced e-mails monitoring is enabled for the given site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.BouncedEmailsLimit(System.String)">
            <summary>
            Gets limit for bounced e-mails.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.BouncedEmailAddress(System.String)">
            <summary>
            Gets e-mail address where bounced back e-mails should be sent.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GenerateEmailsEnabled(System.String)">
            <summary>
            Gets if newsletter e-mail generation is enabled.
            </summary>
            <param name="siteName">Site name</param>
            <returns>true, if newsletter e-mail generation is enabled, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GetEmailAddressCount(System.Int32,System.Int32)">
            <summary>
            Returns number of e-mail addresses for specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter</param>
            <param name="siteId">Site</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GetPreviewHTML(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Gets preview HTML of issue for given subscriber. Might not represent reality, for example Contact groups show an e-mail that will get the 
            first found contact that belongs to the contact group.
            </summary>
            <param name="issue">Issue for which the preview will be generated</param>
            <param name="subscriber">Subscriber to generate preview for</param>
            <returns>Complete HTML preview of the newsletter issue</returns>
        </member>
        <member name="P:CMS.Newsletters.NewsletterHelper.LicNews">
            <summary>
            License limitation newsletter table
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SendNewsletterIssueAction">
            <summary>
            Class for Send newsletter issue action
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SendNewsletterIssueAction.LAST_SENT_NEWSLETTER_ISSUE_KEY">
            <summary>
            Key for element containing GUID of last sent newsletter.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SendNewsletterIssueAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SendNewsletterIssueAction.NewsletterIssue">
            <summary>
            Newsletter issue identifier.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.VariantEventArgs">
            <summary>
            Additional arguments for variant slider and variant dialog events.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.VariantEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="displayName">Display name</param>
        </member>
        <member name="M:CMS.Newsletters.VariantEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="displayName">Display name</param>
            <param name="id">ID</param>
        </member>
        <member name="P:CMS.Newsletters.VariantEventArgs.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:CMS.Newsletters.VariantEventArgs.ID">
            <summary>
            Issue ID
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueABVariantItem">
            <summary>
            Class contains issue ID and variant name pair.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueABVariantItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueABVariantItem.#ctor(System.Int32,System.String,System.Boolean,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Constructor
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="variantName">Variant name</param>
            <param name="isWinner">Winner</param>
            <param name="issueStatus">Issue status</param>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IssueID">
            <summary>
            Issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IssueVariantName">
            <summary>
            Variant name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IsWinner">
            <summary>
            Flag indicates the winner
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IssueStatus">
            <summary>
            Issue status
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateNewsletterInfo">
            <summary>
            EmailTemplateNewsletterInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateNewsletterInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateNewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailTemplateNewsletterInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailTemplateNewsletterInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateNewsletterInfo.TemplateID">
            <summary>
            Newsletter e-mail template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateNewsletterInfo.NewsletterID">
            <summary>
            Newsletter ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateNewsletterInfoProvider">
            <summary>
            Class providing EmailTemplateNewsletterInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.#ctor">
            <summary>
            Creates a new instance of EmailTemplateNewsletterInfo.
            </summary>        
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletters">
            <summary>
            Returns a query for all the EmailTemplateNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified template and newsletter.
            </summary>
            <param name="templateId">Template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.SetEmailTemplateNewsletterInfo(CMS.Newsletters.EmailTemplateNewsletterInfo)">
            <summary>
            Sets relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.AddNewsletterToTemplate(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified server and site.
            </summary>	
            <param name="templateId">Template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.DeleteEmailTemplateNewsletterInfo(CMS.Newsletters.EmailTemplateNewsletterInfo)">
            <summary>
            Deletes relationship specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.RemoveNewsletterFromTemplate(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified template and specified newsletter.
            </summary>
            <param name="templateId">Email template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewslettersInternal">
            <summary>
            Returns a query for all the EmailTemplateNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified template and newsletter.
            </summary>
            <param name="templateId">E-mail template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.SetEmailTemplateNewsletterInfoInternal(CMS.Newsletters.EmailTemplateNewsletterInfo)">
            <summary>
            Sets relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.DeleteEmailTemplateNewsletterInfoInternal(CMS.Newsletters.EmailTemplateNewsletterInfo)">
            <summary>
            Deletes relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be deleted</param>
        </member>
        <member name="T:CMS.Newsletters.IssueStatusEnum">
            <summary>
            Issue status enumeration
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.Idle">
            <summary>
            New issue that has not been sent yet
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.ReadyForSending">
            <summary>
            Issue is ready for sending (i.e. scheduled task for sending is enabled)
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.PreparingData">
            <summary>
            Newsletter queue is being filled
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.TestPhase">
            <summary>
            For A/B test when testing is in progress
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.Sending">
            <summary>
            Issue is being sent
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.Finished">
            <summary>
            Issue has been sent
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ABTestWinnerSelectionEnum">
            <summary>
            Winner option enumeration
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestWinnerSelectionEnum.OpenRate">
            <summary>
            Winner will be selected according to open rate
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestWinnerSelectionEnum.TotalUniqueClicks">
            <summary>
            Winner will be selected according to total clicks
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestWinnerSelectionEnum.Manual">
            <summary>
            Winner will be selected manually
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ISubscriberFullNameFormater">
            <summary>
            Provides methods for building full name of subscribers of all existing types.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetUserSubscriberName(System.String)">
            <summary>
            Returns name for user subscriber.
            </summary>
            <param name="fullName">Full name of user subscriber</param>
            <returns>Name of user subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetRoleSubscriberName(System.String)">
            <summary>
            Returns name for role subscriber.
            </summary>
            <param name="roleName">Name of role</param>
            <returns>Name of role subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetContactSubscriberName(System.String,System.String,System.String)">
            <summary>
            Returns name of contact subscriber. Adds spaces where necessary.
            </summary>
            <param name="firstName">First name of contact</param>
            <param name="middleName">Middle name of contact</param>
            <param name="lastName">Last name of contact</param>
            <returns>Name of contact subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetContactGroupSubscriberName(System.String)">
            <summary>
            Returns name for contact group subscriber.
            </summary>
            <param name="contactGroupName">Name of contact group</param>
            <returns>Name of contact group subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetPersonaSubscriberName(System.String)">
            <summary>
            Returns name for persona subscriber.
            </summary>
            <param name="personaName">Name of persona</param>
            <returns>Name of persona subscriber</returns>
        </member>
        <member name="T:CMS.Newsletters.ISubscriberUserProvider">
            <summary>
            Provides method for linking the subscriber with the related user.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberUserProvider.UpdateSubscriberForUser(CMS.Newsletters.SubscriberInfo,CMS.Membership.UserInfo,System.Int32)">
            <summary>
            Updates given subscriber with personal data provided in the <paramref name="user"/> and connect the subscriber to the user. 
            Subscriber is assigned to the site ID given in <paramref name="siteID"/>.
            </summary>
            <param name="subscriber">Subscriber to be updated</param>
            <param name="user">User containing the data that will update the subscriber</param>
            <param name="siteID">Site ID the subscriber will be assigned to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> or <paramref name="user"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.SubscriberImporter">
            <summary>
            Manages importing subscribers into site newsletters.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberImporter.ImportSubscribersToSite(System.Object)">
            <summary>
            Imports subscribers into site and/or newsletter. Used for asynchronous control.
            </summary>
            <param name="parameter">Asynchronous parameters.
            [0] - String representation of imported subscribers
            [1] - List of int with newsletters' IDs where should be the subscribers added
            [2] - Integer with site ID
            [3] - Boolean. if true, subscribers with the same email are overwritten
            [4] - Boolean. Send confirmation email.
            [5] - Boolean. Indicates if existing users should not be subscribed.
            [6] - Boolean. Indicates if double opt-in is requested.
            [7] - Asynchronous process Guid.
            [8] - Hashtable with errors</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberImporter.ImportSubscribersToSite(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Import subscribers.
            </summary>
            <param name="importString">String representation of imported subscribers</param>
            <param name="newsletterIds">Array list with newsletters' IDs where should be the subscribers added</param>
            <param name="siteId">Site ID</param>
            <param name="overwriteExisting">If true, subscribers with the same email are overwritten</param>
            <param name="sendEmail">Send confirmation email</param>
            <param name="doNotSubscribeExisting">Indicates if existing users should not be subscribed</param>
            <param name="requireOptIn">Indicates double opt-in is requested</param>
        </member>
        <member name="F:CMS.Newsletters.SubscriberListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberList object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberList object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberFullNameFormater">
            <summary>
            Class builds full name of subscribers of all existing types.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetUserSubscriberName(System.String)">
            <summary>
            Returns name for user subscriber.
            </summary>
            <param name="fullName">Full name of user subscriber</param>
            <returns>Name of user subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetRoleSubscriberName(System.String)">
            <summary>
            Returns name for role subscriber.
            </summary>
            <param name="roleName">Name of role</param>
            <returns>Name of role subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetContactSubscriberName(System.String,System.String,System.String)">
            <summary>
            Returns name of contact subscriber. Adds spaces where necessary.
            </summary>
            <param name="firstName">First name of contact</param>
            <param name="middleName">Middle name of contact</param>
            <param name="lastName">Last name of contact</param>
            <returns>Name of contact subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetContactGroupSubscriberName(System.String)">
            <summary>
            Returns name for contact group subscriber.
            </summary>
            <param name="contactGroupName">Name of contact group</param>
            <returns>Name of contact group subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetPersonaSubscriberName(System.String)">
            <summary>
            Returns name for persona subscriber.
            </summary>
            <param name="personaName">Name of persona</param>
            <returns>Name of persona subscriber</returns>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberNewsletterListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberNewsletterListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberInfoProvider">
            <summary>
            Class providing Subscriber management.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.mLicSubscribers">
            <summary>
            License limitation subscriber table
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <returns>Subscriber specified by his ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.Guid,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his GUID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberType">Subscriber type (UserInfo.OBJECT_TYPE or RoleInfo.OBJECT_TYPE)</param>
            <param name="subscriberRelatedId">Subscriber's related ID</param>
            <param name="siteId">ID of the site this subscriber belongs to</param>
            <returns>Subscriber specified by his type, related ID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            Excludes specific subscriber types such as users, roles, contacts, contact groups or personas.
            </summary>
            <param name="email">Subscriber's email address</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberByEmail(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            Includes role, user and contact subscriber types as well.
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>        
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribersFromView(System.String,System.Int32)">
            <summary>
            Returns subscriber information for a specified email and site along with the related user data.
            Includes role, user and contact subscriber types as well.
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>
            <returns>DataQuery containing all subscribers with a given email that belong to a specified site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribersFromView">
            <summary>
            Returns subscriber information along with the related user data.
            Includes role, user and contact subscriber types as well.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SetSubscriberInfo(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sets (updates or inserts) specified subscriber.
            </summary>
            <param name="subscriber">Subscriber to set</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfo(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberObj">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfo(System.Int32)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Subscribe(System.Guid,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="siteId">Site ID</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>                
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Subscribe(System.Int32,System.Int32,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Subscribes subscriber to newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="when">Time when the subscriber was subscribed (used by import)</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>
            <param name="sendOptInEmail">Indicates if double opt-in e-mail should be send</param>
            <exception cref="T:System.InvalidOperationException">Thrown when subscriber's site doesn't exist</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ApproveSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <param name="subscriberId">ID of subscriber to be subscribed</param>
            <param name="newsletterId">Newsletter ID to subscribe into</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <returns>Returns TRUE if subscription found and not already approved. Returns FALSE if subscription not already approved.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ApproveSubscription(System.String,System.Boolean,System.String,System.DateTime)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <param name="subscriptionHash">Hash parameter representing specific subscription</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <param name="datetime">Date and time of request.</param>
            <param name="siteName">Site name.</param>
            <returns>Returns TRUE if subscription found and not already approved. Returns FALSE if subscription not found or already approved.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.RejectSubscription(System.Int32,System.Int32)">
            <summary>
            Reject subscriber from newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.AddSubscription(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Add subscription to the binding table.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="when">Time when the subscriber was subscribed (used by import)</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes subscription from the newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates if unsubscription email should be send</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.RenewSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Renews subscription.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates if subscription email should be send</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Unsubscribe(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Unsubscribe the subscriber from the newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates whether confirmation email is sent</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Unsubscribe(System.String,System.Boolean,System.String,System.DateTime)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="subscriptionHash">Subscription hash.</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation e-mail</param>
            <param name="datetime">Date and time of request</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Unsubscribe(CMS.Newsletters.SubscriberNewsletterInfo,System.Boolean)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="sni">Subscription object</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Unsubscribe(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Unsubscribes subscriber from newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterGuid">Newsletter GUID</param>
            <param name="siteId">Site ID</param>
            <param name="sendConfirmationEmail">Indicates whether send confirmation mail</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UnsubscribeAll(System.Int32,System.Boolean)">
            <summary>
            Unsubscribes subscriber from all subscribed newsletters.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="sendConfirmationEmail">Indicates whether confirmation email is sent</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribers(CMS.Newsletters.SubscriberInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the list of subscriber's members.
            Subscriber member has SubscriberID=0.
            </summary>
            <param name="subscriber">Subscriber definition</param>
            <param name="topN">Number of members that should be returned (all are returned if 0)</param>
            <param name="lastMemberID">Last member ID (used for subscribed role or contact group)</param>
            <param name="newsletterID">Newsletter ID - it allows to filter-out unsubscribed contact group members</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.IsSubscribed(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns true if subscriber is subscribed to newsletter.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="newsletterGuid">Newsletter GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.IsSubscribed(System.Int32,System.Int32)">
            <summary>
            Returns true if subscriber is subscribed to newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.EmailExists(System.String)">
            <summary>
            Returns true if given e-mail address is already used by any subscriber.
            </summary>
            <param name="email">E-mail address</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribers">
            <summary>
            Returns a query for all the SubscriberInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ExportSubscribersFromSite(System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Export subscribers from specified newsletters.
            </summary>
            <param name="newsletterIds">Newsletters' IDs</param>
            <param name="siteId">Site ID</param>
            <param name="emptyMeansAll">If true, empty array of newsletters' IDs means all subscribers are exported</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ExportSubscribersFromSite(System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Export subscribers from specified newsletters.
            </summary>
            <param name="newsletterIds">Newsletters' IDs</param>
            <param name="siteId">Site ID</param>
            <param name="emptyMeansAll">If true, empty array of newsletters' IDs means all subscribers are exported</param>
            <param name="subscriptionApproved">0 = all subscriptions, 1 = approved subscriptions, 2 = not approved subscriptions</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under administration interface/</param>
            <returns>Returns true if license is not exceeded, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
            <returns>Returns true if license is not exceeded, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UnsubscribeFromNewsletters(System.Object)">
            <summary>
            Unsubscribe subscribers from specified newsletters. Used for asynchronous control.
            </summary>
            <param name="parameter">Parameters for asynchronous control. 
            [0] - String representation of subscribers in format 'email;firstName;lastName'. 
            [1] - List of int with newsletter IDs where should be the subscribers removed from
            [2] - Integer with site ID
            [3] - Boolean value indicating if confirmation e-mail should be sent
            [4] - Asynchronous process Guid
            [5] - Hashtable with errors for asynchronous process</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UnsubscribeFromNewsletters(System.String,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Guid,System.Collections.Hashtable)">
            <summary>
            Unsubscribe subscribers from specified newsletters.
            </summary>
            <param name="importString">String representation of subscribers in format 'email;firstName;lastName'</param>
            <param name="newsletterIds">Array list with newsletter IDs where should be the subscribers removed from</param>
            <param name="siteId">Site ID</param>
            <param name="sendEmail">Indicates if confirmation e-mail should be sent</param>
            <param name="processGuid">Asynchronous process Guid</param>
            <param name="errors">Hashtable with errors for asynchronous process</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscribers(System.Object)">
            <summary>
            Delete given subscribers. Used for asynchronous control.
            </summary>
            <param name="parameter">Parameters for asynchronous processing.
            [0] - String representation of subscribers in format 'email;firstName;lastName'
            [1] - Integer with site ID
            [2] - Asynchronous process GUID
            [3] - Hashtable with errors for asynchronous processing</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscribers(System.String,System.Int32,System.Guid,System.Collections.Hashtable)">
            <summary>
            Delete given subscribers.
            </summary>
            <param name="importString">String representation of subscribers in format 'email;firstName;lastName'</param>
            <param name="siteId">Site ID</param>
            <param name="processGuid">Asynchronous process GUID</param>
            <param name="errors">Hashtable with errors for asynchronous processing</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.BlockSubscriber(System.Int32)">
            <summary>
            Blocks a subscriber with a specified ID.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UnblockSubscriber(System.Int32)">
            <summary>
            Unblocks a subscriber with a specified ID.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.BlockUser(System.Int32)">
            <summary>
            Blocks a user with a specified ID (for role subscribers).
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UnblockUser(System.Int32)">
            <summary>
            Unblocks a user with a specified ID (for role subscribers).
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.BlockContact(System.Int32)">
            <summary>
            Blocks a contact with specified ID (for contact group subscribers).
            </summary>
            <param name="contactId">ContactID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UnblockContact(System.Int32)">
            <summary>
            Unblocks a contact with specified ID (for contact group subscribers).
            </summary>
            <param name="contactId">ContactID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfos(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Deletes SubscriberInfo objects with dependencies based on specified subscriber IDs.
            </summary>
            <param name="ids">List of subscriber IDs</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteContactSubscribers(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Deletes contact subscribers based on contact IDs.
            </summary>
            <param name="contactIds">IEnumerable of contactIds</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SynchronizeSubscriberInfomation(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Renames subscriber specified by subscriberRealtedId on all sites.
            Optional parameters are saved to subscriber only when not set to null.
            </summary>
            <param name="subscriberType">Type of subscriber</param>
            <param name="subscriberRelatedId">ID of related subscriber</param>
            <param name="fullName">Subscriber's full name</param>
            <param name="firstName">(Optional) Subscriber's first name</param>
            <param name="lastName">(Optional) Subscriber's last name</param>
            <param name="email">(Optional) Subscriber's e-mail address when needed</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SetSubscriberBounces(System.Int32,System.Int32)">
            <summary>
            Sets the bounced e-mails counter to specified value for a subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="bounces">Number of bounced e-mails to set</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SetUserBounces(System.Int32,System.Int32)">
            <summary>
            Sets the bounced e-mails counter to specified value for a user.
            </summary>
            <param name="userId">User ID</param>
            <param name="bounces">Number of bounced e-mails to set</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.CreateSubscriber(System.Int32,CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Creates subscriber object using user info and source subscriber data.
            </summary>
            <param name="userId">User ID</param>
            <param name="original">Source subscriber</param>
            <param name="getUserMail">If FALSE then user e-mail is not retrieved from DB</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.CreateSubscriberFromContact(System.Int32,CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Creates subscriber object using user info and source subscriber data.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="original">Source subscriber</param>
            <param name="getContactEmail">If FALSE then contact e-mail is not retrieved from DB</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ClearLicSubscribers">
            <summary>
            Clear hashtable.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ApproveSubscription(CMS.Newsletters.SubscriberNewsletterInfo,System.Boolean)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <param name="sni">SubscriberNewsletterInfo object</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <returns>Returns TRUE if subscription found and not already approved. Returns FALSE if subscription not found or already approved.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetRoleUsers(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Gets all (or top N) users in a given role that have not exceeded the bounced e-mails limit.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="topN">Top N</param>
            <param name="lastUserId">Last user's ID (if email sets are used, otherwise set to 0)</param>
            <param name="siteName">Site name</param>
            <returns>DataSet with a list of user IDs and emails</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetRoleUsers(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets all (or top N) users in a given role that have not exceeded the bounced e-mails limit.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="topN">Top N</param>
            <param name="lastUserId">Last user's ID (if email sets are used, otherwise set to 0)</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <returns>DataSet with a list of user IDs and emails</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetCGMembers(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Gets all (or top N) contacts in a given contact group.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
            <param name="topN">Top N</param>
            <param name="lastMemberId">Contacts with higher IDs will be returned</param>
            <param name="siteName">Site name</param>
            <param name="newsletterId">Newsletter ID - it allows to filter-out unsubscribed contact group members</param>
            <param name="columns">Allows to specify columns to be returned</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ValidateHash(CMS.Newsletters.SubscriberNewsletterInfo,System.String,System.String,System.DateTime)">
            <summary>
            Validates request hash and checks if request was approved in needed interval.  
            </summary>
            <param name="sni">Subscriber newsletter info.</param>
            <param name="requestHash">Hash parameter representing specific subscription</param>
            <param name="datetime">Date and time of request.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberMember(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Returns subscriber member object with basic data (first/last name, e-mail address) set according to subscriber type.
            </summary>
            <param name="source">Subscriber object</param>
            <param name="email">Item of newsletter queue</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfoInternal(System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <returns>Subscriber specified by his ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his GUID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfoInternal(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberType">Subscriber type (UserInfo.OBJECT_TYPE or RoleInfo.OBJECT_TYPE)</param>
            <param name="subscriberRelatedId">Subscriber's related ID</param>
            <param name="siteId">ID of the site this subscriber belongs to</param>
            <returns>Subscriber specified by his type, related ID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfoInternal(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            Excludes specific subscriber types such as users, roles, contacts, contact groups or personas.
            </summary>
            <param name="email">Subscriber's email address</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribersFromViewInternal(System.String,System.Int32)">
            <summary>
            Returns subscriber information for a specified email and site along with the related user data.
            Includes role, user and contact subscriber types as well.
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>
            <returns>DataQuery containing all subscribers with a given email that belong to a specified site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribersFromViewInternal">
            <summary>
            Returns subscriber information along with the related user data.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SetSubscriberInfoInternal(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sets (updates or inserts) specified subscriber.
            </summary>
            <param name="subscriber">Subscriber to set</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfoInternal(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberObj">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.EmailExistsInternal(System.String)">
            <summary>
            Returns true if given e-mail address is already used by any subscriber.
            </summary>
            <param name="email">E-mail address</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribersInternal">
            <summary>
            Returns a query for all the SubscriberInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ExportSubscribersFromSiteInternal(System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Export subscribers from specified newsletters.
            </summary>
            <param name="newsletterIds">Newsletters' IDs</param>
            <param name="siteId">Site ID</param>
            <param name="emptyMeansAll">If true, empty array of newsletters' IDs means all subscribers are exported</param>
            <param name="subscriptionApproved">0 = all subcriptions, 1 = approved subscriptions, 2 = not approved subscriptions</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfosInternal(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Deletes SubscriberInfo objects with dependencies based on specified subscriber IDs.
            </summary>
            <param name="ids">List of subscriber IDs</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteContactSubscribersInternal(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Deletes contact subscribers based on contact IDs.
            </summary>
            <param name="contactIds">IEnumerable of contactIds</param>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfoProvider.LicSubscribers">
            <summary>
            License limitation subscriber table
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberInfoProvider.ApprovalResult">
            <summary>
            Subscription approval result.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.ApprovalResult.Success">
            <summary>
            Represents that subscription was found and successfully approved.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.ApprovalResult.Failed">
            <summary>
            Represents that subscription has failed.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.ApprovalResult.NotFound">
            <summary>
            Represents that subscription wasn't found.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.ApprovalResult.TimeExceeded">
            <summary>
            Represents that subscription interval for approving request has exceeded.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.ApprovalResult.AlreadyApproved">
            <summary>
            Represents that subscription is already approved.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberUserProvider">
            <summary>
            Provides method for linking the subscriber with the related user.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberUserProvider.mSubscriberFullNameFormater">
            <summary>
            Provides method for generating full name of the subscriber.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberUserProvider.#ctor(CMS.Newsletters.ISubscriberFullNameFormater)">
            <summary>
            Constructor.
            </summary>
            <param name="subscriberFullNameFormater">Provides method for generating full name of the subscriber</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriberFullNameFormater"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberUserProvider.UpdateSubscriberForUser(CMS.Newsletters.SubscriberInfo,CMS.Membership.UserInfo,System.Int32)">
            <summary>
            Updates given subscriber with personal data provided in the <paramref name="user"/> and connect the subscriber to the user. 
            Subscriber is assigned to the site ID given in <paramref name="siteID"/>.
            </summary>
            <param name="subscriber">Subscriber to be updated</param>
            <param name="user">User containing the data that will update the subscriber</param>
            <param name="siteID">Site ID the subscriber will be assigned to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> or <paramref name="user"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.BounceChecker">
            <summary>
            Task for checking bounced newsletter e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the task given in a task info.
            </summary>
            <param name="task">Container with task information</param>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.ProcessAllEmails">
            <summary>
            Connects to the predefined mailbox, retrieves and checks all messages.
            </summary>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.GetAuthenticationMethod">
            <summary>
            Gets the authentication method.
            </summary>
            <returns>Value from an enumeration that represents the chosen authentication method</returns>
            <exception cref="T:System.ArgumentException">Thrown when a chosen authnetication method is unsupported or malformed</exception>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.CustomFallbackDecoder(System.String)">
            <summary>
            Occurs when a character set name could not be mapped to the encoding.
            Calls OnFallbackDecoderEvent event if defined.
            </summary>
            <param name="characterSet">Character set name</param>
            <returns>Encoding</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.ProcessEmail(OpenPop.Mime.Message)">
            <summary>
            Checks a given e-mail message for known header fields.
            If the message is recognized as bounced e-mail, then it is processed and counted.
            </summary>
            <param name="message">E-mail message</param>
            <returns>true, if message is a recognized bounced e-mail, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.TryGetHeaderValue(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to find a known field in unknown header collection.
            </summary>
            <param name="headerField">Field code</param>
            <param name="headers">Header collection</param>
            <returns>Integer value from specified header or 0 if not found</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.TryParseField(System.Text.RegularExpressions.Regex,System.String,System.Int32@)">
            <summary>
            Attempts to find a known field using regex using try-parse pattern.
            </summary>
            <param name="regex">Regular expresssion used to look for the field</param>
            <param name="input">Input text</param>
            <param name="fieldID">Extracted ID from the field on success</param>
            <returns>true, if parsing was successful, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddBouncedEmail(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a bounce to all respective bounced email counters.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="userId">User ID</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.RetrieveBouncedAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves a bounced address of an intended recipient of the newsletter e-mail.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="userId">User ID</param>
            <param name="contactId">Contact ID</param>
            <returns>E-mail address where the newsletter could not be delivered</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.GetContactEmail(System.Int32)">
            <summary>
            Gets contact's e-mail
            </summary>
            <param name="contactId">Contact ID.</param>
            <returns></returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddEmailBounceGlobal(System.String)">
            <summary>
            Increments the number of bounces for every subscriber, user or contact with a specified e-mail address across all sites.
            </summary>
            <param name="email">E-mail address to filter by</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddContactsBounces(System.String)">
            <summary>
            Adds bounce to all contacts with specified e-mail across all sites.
            </summary>
            <param name="email">E-mail of contacts to add bounce to</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddIssueBounce(System.Int32)">
            <summary>
            Incerements number of bounces for the specified issue by one.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddSubscriberBounce(System.Int32)">
            <summary>
            Incerements number of bounces for the specified subscriber by one.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddSubscriberBounce(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Incerements number of bounces for the specified subscriber by one.
            </summary>
            <param name="subscriber">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddUserBounce(System.Int32)">
            <summary>
            Incerements number of bounces for the specified user by one.
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddContactBounce(System.Int32)">
            <summary>
            Incerements number of bounces by one for specified contact.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.GetSubscribers(System.String)">
            <summary>
            Returns IDs of all regular and user subscribers with a specified email address.
            </summary>
            <param name="email">E-mail address to filter subscribers by</param>
            <returns>DataSet with matching subscriber IDs</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.GetUsers(System.String)">
            <summary>
            Returns IDs of all users with a specified email address.
            </summary>
            <param name="email">E-mail address to filter subscribers by</param>
            <returns>Object query with matching user IDs</returns>
        </member>
        <member name="E:CMS.Newsletters.BounceChecker.OnFallbackDecoderEvent">
            <summary>
            Occurs when a character set from email content type header could not be mapped to the encoding.
            This allows to map given character set name to the encoding manually.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.IssueIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.SubscriberIdRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an subscriber ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.UserIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an user ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.ContactIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an contact ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.BounceChecker.FallbackDecoderHandler">
            <summary>
            Occurs when a character set name could not be mapped to the encoding.
            </summary>
            <param name="characterSet">Character set name</param>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateType">
            <summary>
            Email template type enumeration.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateType.Issue">
            <summary>
            Newsletter issue template.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateType.Subscription">
            <summary>
            Newsletter subscription template.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateType.Unsubscription">
            <summary>
            Newsletter unsubscription template.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateType.DoubleOptIn">
            <summary>
            Double opt-in activation template.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterTasksManager">
            <summary>
            Class for managing scheduled tasks that relate to newsletters (<see cref="T:CMS.Newsletters.QueueSender"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.EnsureMailoutTask(CMS.Newsletters.IssueInfo,System.DateTime,System.Boolean)">
            <summary>
            Returns scheduled mailout task for the given issue or creates new one.
            </summary>
            <param name="issue">Issue</param>
            <param name="when">Indicates when to run scheduled task</param>
            <param name="taskEnabled">Determines whether the newly created task will be enabled</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.CreateMailoutTask(CMS.Newsletters.IssueInfo,System.DateTime,System.Boolean)">
            <summary>
            Prepares scheduler TaskInfo object for an issue mailout.
            </summary>
            <param name="issue">Issue</param>
            <param name="when">Date and time when the task should be executed</param>
            <param name="taskEnabled">Creates enabled/disabled task</param>
            <returns>A scheduler task that represents an issue mailout</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.DeleteMailoutTask(System.Guid,System.Int32)">
            <summary>
            Removes scheduled mailout task for specified issue.
            </summary>
            <param name="guid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.EnsureWinnerSelectionTask(CMS.Newsletters.ABTestInfo,CMS.Newsletters.IssueInfo,System.Boolean,System.DateTime)">
            <summary>
            Ensures that the winner selection task is created or updated (or deleted) according to A/B test info.
            Start time of winner selection task is calculated according to A/B test setting and highest mailout time of the variant.
            </summary>
            <param name="abi">A/B test info</param>
            <param name="parentIssue">Parent issue (optional)</param>
            <param name="enableTask">Enable scheduled task</param>
            <param name="highestMailoutTime">Highest mailout time (mailout time of the last variant)</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.EnableVariantScheduledTasks(CMS.Newsletters.IssueInfo)">
            <summary>
            Enables all scheduled tasks associated to all variants of parent issue.
            </summary>
            <param name="issue">Parent (original) issue</param>
        </member>
        <member name="T:CMS.Newsletters.WinnerSelection">
            <summary>
            Scheduled task - selects the best issue variant and sends it to subscribers.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.WinnerSelection.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Selects the best issue variant and sends it to subscribers.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Newsletters.WinnerSelection.PostponeScheduledTask(CMS.Scheduler.TaskInfo)">
            <summary>
            Postpones given scheduled task for an hour.
            </summary>
            <param name="task">Scheduled task</param>
        </member>
        <member name="T:CMS.Newsletters.ActivityTrackingHelper">
            <summary>
            Helper methods for logging activities for opened e-mails and link tracking.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ActivityTrackingHelper.GetContactID(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Returns contact ID for particular subscriber (only ordinary subscribers or user subscribers are considered).
            </summary>
            <param name="sb">Subscriber</param>
        </member>
        <member name="T:CMS.Newsletters.LinkInfo">
            <summary>
            LinkInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.#ctor">
            <summary>
            Creates a new LinkInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new LinkInfo object from the specified DataRow.
            </summary>
            <param name="linkInfoRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.#ctor(CMS.Newsletters.LinkInfo,System.Boolean)">
            <summary>
            Creates a new LinkInfo object from the existing LinkInfo object.
            Copy constructor.
            </summary>
            <param name="linkInfo">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.DeleteObject">
            <summary>
            Deletes this LinkInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.SetObject">
            <summary>
            Updates this LinkInfo the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkID">
            <summary>
            Gets or sets the ID of this LinkInfo object.
            </summary>
            <value>
            ID of this LinkInfo object or 0 if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkIssueID">
            <summary>
            Gets or sets ID of the newsletter's issue.
            </summary>
            <value>
            Newsletter issue's ID, or 0 if not found.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkGUID">
            <summary>
            Gets or sets the unique identifier of this link.
            </summary>
            <value>
            Link's unique identifier or empty unique identifier if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkTarget">
            <summary>
            Gets or sets the original link URL.
            </summary>
            <value>
            The original URL of the link, or empty string if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkDescription">
            <summary>
            Gets or sets the description of this link.
            </summary>
            <value>
            The description contains text from <em>title</em> parameter of the link.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkOutdated">
            <summary>
            Gets or sets whether the link should not be used in the latest version of the issue.
            </summary>
            <value>
            true if the link should not be used, otherwise false.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkTotalClicks">
            <summary>
            Gets or sets the total number of times this link was clicked.
            </summary>
            <value>
            Number of times this link was clicked, or 0 when not present.
            </value>
        </member>
        <member name="T:CMS.Newsletters.LinkInfoProvider">
            <summary>
            Class providing LinkInfoProvider management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.#ctor">
            <summary>
            Creates a new instance of LinkInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfo(System.Int32)">
            <summary>
            Gets a LinkInfo object with specified ID.
            </summary>
            <param name="linkId">ID of the link</param>        
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfo(System.Guid)">
            <summary>
            Gets a LinkInfo object with specified GUID.
            </summary>
            <param name="linkGuid">GUID of the link</param>                
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinks">
            <summary>
            Gets an object query with all LinkInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinks(System.Int32)">
            <summary>
            Gets all links in the specified issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <returns>A Dictionary with links from the specified issue, using link URL as the key</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.SetLinkInfo(CMS.Newsletters.LinkInfo)">
            <summary>
            Sets (updates or inserts) a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to set</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.DeleteLinkInfo(CMS.Newsletters.LinkInfo)">
            <summary>
            Deletes a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.DeleteLinkInfo(System.Int32)">
            <summary>
            Deletes a LinkInfo object specified by ID.
            </summary>
            <param name="linkId">ID of the LinkInfo object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.LogClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Logs that a link was clicked by a specified subscriber.
            </summary>
            <param name="linkId">ID of the newsletter issue</param>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="ignoreSubscriberClick">Indicates that click should not be included in the subscriber (that means that subscriber clicks must be obtained somewhere else, for example from activities)</param>
            <returns>Original link URL, or empty string if not successfull</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.Outdate(CMS.Newsletters.LinkInfo)">
            <summary>
            Outdates the specified link.
            </summary>
            <param name="link">The link</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.Renew(CMS.Newsletters.LinkInfo)">
            <summary>
            Renews the specified link.
            </summary>
            <param name="link">The link</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfoInternal(System.Int32)">
            <summary>
            Gets a LinkInfo object with specified ID.
            </summary>        
            <param name="linkId">ID of the link</param>        
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfoInternal(System.Guid)">
            <summary>
            Gets a LinkInfo object with specified GUID.
            </summary>        
            <param name="linkGuid">GUID of the link</param>        
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinksInternal">
            <summary>
            Gets an object query with all LinkInfo objects.
            </summary>        
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.SetLinkInfoInternal(CMS.Newsletters.LinkInfo)">
            <summary>
            Sets (updates or inserts) a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to set</param>      
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.DeleteLinkInfoInternal(CMS.Newsletters.LinkInfo)">
            <summary>
            Deletes a LinkInfo object specified by ID.
            </summary>
            <param name="linkObj">LinkInfo object to delete</param>      
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.LogClickInternal(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Logs that a link was clicked by a specified subscriber.
            </summary>
            <param name="linkId">ID of the newsletter issue</param>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="ignoreSubscriberClick">Indicates that click should not be included in the subscriber (that means that subscriber clicks must be obtained somewhere else, for example from activities)</param>
            <returns>Original link URL, or empty string if not successfull</returns>
        </member>
        <member name="T:CMS.Newsletters.LinkConverter">
            <summary>
            Converts links in newsletter issue text.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkConverter.TrackingAttribute">
            <summary>
            Name of the HTML anchor's attribute that determines whether tracking is enabled or not.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ConvertToAbsolute(System.String,System.String)">
            <summary>
            Converts links from relative to absolute.
            </summary>
            <param name="input">Text containing links with relative URLs</param>
            <param name="baseUrl">Base URL to use when resolving links</param>
            <returns>Text with all links converted to absolute form</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ReplaceInLink(System.String,System.String,System.String)">
            <summary>
            Replace old value with new value in all links from input text.
            </summary>
            <param name="input">Text containing links</param>
            <param name="oldValue">Value to be replaced</param>
            <param name="newValue">Value to replace</param>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ConvertToTracking(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Converts links to tracking links.
            </summary>
            <param name="input">Text containing links with relative URLs</param>
            <param name="issue">Newsletter issue that contains the text to resolve</param>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name of the newsletter site</param>
            <returns>Text with all links converted to tracking links</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.FormatLink(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Creates a link from the regular expression match and link URL.
            </summary>
            <param name="match">Regex match result</param>
            <param name="url">Link after resolution</param>
            <returns>Full hyperlink with attributes, URL and text</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.CreateTrackingLink(System.Text.RegularExpressions.Match,CMS.Newsletters.IssueInfo,System.Collections.Generic.Dictionary{System.String,CMS.Newsletters.LinkInfo},System.Collections.Generic.Dictionary{System.String,CMS.Newsletters.LinkInfo},System.String)">
            <summary>
            Creates a tracking hyperlink link from a given regex match.
            </summary>
            <param name="match">Regular expression matching result</param>
            <param name="issue">Newsletter issue</param>
            <param name="links">Dictionary containing links found in this version of the issue, using URL as key</param>
            <param name="originalLinks">Dictionary containing links that existed in the previous version of the issue, using URL as key</param>
            <param name="trackingLink">Tracking link without query parameters</param>
            <returns>A tracking hyperlink</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.IsTrackable(System.Text.RegularExpressions.Match,System.String,System.String)">
            <summary>
            Checks whether given URL can and should be tracked.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <param name="url">URL to check</param>
            <param name="trackingLink">Path the link will be transformed to after tracking (../Redirect.ashx by default)</param>
            <returns>true if specified URL can be tracked, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.IsSupportedUriScheme(System.String)">
            <summary>
            Determines whether the URI is of a supported scheme.
            </summary>
            <param name="url">The URL</param>
            <returns><c>true</c> if URI scheme is supported, otherwise, <c>false</c></returns>
            <remarks>Currently, only HTTP/HTTPS is supported because of the need to use redirects.</remarks>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.GetDescription(System.Text.RegularExpressions.Match)">
            <summary>
            Gets a description for tracked link either from title attribute or anchor's element text.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <returns>Link's description</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.FormatHyperlink(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Creates a tracking link from the regular expression match and link URL.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <param name="url">Link after resolution</param>
            <returns>Full tracking hyperlink with attributes, URL and text</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ConvertUrlToAbsolute(System.String,System.String)">
            <summary>
            Creates an absolute URL for use in newsletter.
            </summary>
            <param name="url">URL</param>
            <param name="baseUrl">Base URL</param>
            <returns>Absolute URL</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ContainsProtocol(System.String)">
            <summary>
            Checks if URL contains protocol, including pseudo-protocol.
            </summary>
            <param name="url">URL</param>
            <returns>true, if URL contains protocol, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.GetRedirectPage(CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Returns a redirect page used for link tracking.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <returns>Absolute URL to redirect page</returns>
        </member>
        <member name="P:CMS.Newsletters.LinkConverter.LinkRegex">
            <summary>
            Gets a regular expression that matches a link.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkConverter.HyperlinkRegex">
            <summary>
            Gets a regular expression that matches an anchor hyperlink.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkConverter.RedirectPage">
            <summary>
            Gets the handler used to perform link tracking and redirection.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterSender">
            <summary>
            Task for re-sending remaining newsletters in newsletter queue
            after main thread sender exit unexpectedly.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
             Sends all emails in newsletter queue.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterModule">
            <summary>
            Represents the Newsletter module.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.OnInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.RegisterCommands">
            <summary>
            Registers the object type of this module
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.CancelSending(System.Object[])">
            <summary>
            Stop current sending
            </summary>
            <param name="parameters">Parameters array</param>
        </member>
        <member name="T:CMS.Newsletters.DynamicNewsletterSender">
            <summary>
            Class used by scheduler to execute the dynamic newsletter mailout.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.DynamicNewsletterSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Generates issue of dynamic newsletter, then generates emails of that issue into queue and send all emails in queue to subscribers.
            </summary>
            <param name="task">Task data</param>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueItemInfo">
            <summary>
            Class representing newsletter queue item.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueItemInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueItemInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailQueueItem object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailQueueItem object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailID">
            <summary>
            EmailID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailNewsletterIssueID">
            <summary>
            EmailNewsletterIssueID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailSubscriberID">
            <summary>
            EmailSubscriberID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailSiteID">
            <summary>
            E-mail site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailLastSendResult">
            <summary>
            EmailLastSendResult.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailLastSendAttempt">
            <summary>
            EmailLastSendAttempt.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailSending">
            <summary>
            EmailSending.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailGUID">
            <summary>
            E-mail GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailUserID">
            <summary>
            EmailUserID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailContactID">
            <summary>
            EmailContactID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailAddress">
            <summary>
            EmailAddress.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueManager">
            <summary>
            Manages generation and sending of EmailQueueItems (newsletter queue).
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueManager.DO_NOT_SEND">
            <summary>
            Do not send constant.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendAllEmails">
            <summary>
            Tries to send all e-mails in the newsletter queue (failed and new).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendAllEmails(System.Boolean)">
            <summary>
            Tries to send new e-mails in the newsletter queue, failed e-mails sending depends on the setting.
            </summary>
            <param name="sendFailed">Send failed e-mails?</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendAllEmails(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Tries to send all e-mails in the newsletter queue.
            </summary>
            <param name="sendFailed">Send failed e-mails?</param>
            <param name="sendNew">Send new e-mails?</param>
            <param name="issueId">Issue ID (optional)</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendEmail(CMS.Newsletters.EmailQueueItemInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.EmailTemplateInfo,System.String,System.String,System.String)">
            <summary>
            Sends specified e-mail from the newsletter queue, successfully sent e-mail is deleted from the queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="email">E-mail to be sent</param>
            <param name="newsletter">Newsletter object (optional)</param>
            <param name="issue">Issue object (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="appPath">Application path</param>
            <param name="siteName">Site name</param>
            <param name="siteDomain">Site domain</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendEmail(CMS.Newsletters.EmailQueueItemInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.EmailTemplateInfo,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends specified e-mail from the newsletter queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="email">E-mail to be sent</param>
            <param name="newsletter">Newsletter object (optional)</param>
            <param name="issue">Issue object (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="appPath">Application path</param>
            <param name="siteName">Site name</param>
            <param name="siteDomain">Site domain</param>
            <param name="deleteSent">Indicates if successfully sent e-mail should be deleted from the newsletter queue</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.ResendEmail(System.Int32)">
            <summary>
            Sends specified e-mail, successfully sent e-mail is deleted from the queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="emailId">ID of e-mail to send</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.ClearEmailsSendingStatus">
            <summary>
            Clears the sending status for the corrupted e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.ClearEmailsSendingStatusInternal">
            <summary>
            Clears the sending status for the corrupted e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchEmailsToSend(System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchEmailsToSend(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailID smaller then or equal to 'firstEmailId' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="deleteSentEmails">If true, e-mails fetched and sent in previous round are deleted</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchVariantEmailsToSend(System.Boolean,System.Boolean,System.Guid,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fetches the variant e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailGUID smaller then or equal to 'firstEmailGuid' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailGuid">First e-mail GUID (all e-mails should have the same or larger GUID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="deleteSentEmails">If true, e-mails fetched and sent in previous round are deleted</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchEmailsToSendInternal(System.Boolean,System.Boolean,System.Int32,System.Guid,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailID smaller then or equal to 'firstEmailId' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="fetchNew">If true, new e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="firstEmailGuid">First e-mail GUID (all e-mails should have the same or larger GUID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="deleteSentEmails">If true, e-mails fetched and sent in previous round are deleted</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(System.Int32)">
            <summary>
            Generates emails of given issue into e-mail queue.
            </summary>
            <param name="issueID">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo)">
            <summary>
            Generates e-mails of given issue into e-mail queue.
            </summary>
            <param name="issue">Issue object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Generates e-mails of given issue into newsletter queue.
            </summary>
            <param name="issue">Issue</param>
            <param name="subscriber">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateBasicEmails(CMS.Newsletters.IssueInfo,System.Boolean,System.Int32)">
            <summary>
            Generates e-mails for classic subscribers, users and roles subscribed to given issue.
            </summary>
            <param name="issue">Issue object</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateContactEmails(CMS.Newsletters.IssueInfo,System.Int32,System.Boolean,System.Int32,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Generates e-mails from subscribed contact groups and contacts of given issue into e-mail queue.
            </summary>
            <param name="issue">Issue object</param>
            <param name="siteId">Site ID</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="generatedEmails">E-mails addresses that are to be ignored (that have already been generated)</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FillContactTable(System.Data.DataTable,CMS.Newsletters.IssueInfo,System.Int32,System.Boolean,System.Int32,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Fills given table with contact data from subscribed contacts and contact groups.
            </summary>
            <param name="table">Data table</param>
            <param name="issue">Issue object</param>
            <param name="siteId">Site ID</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="generatedEmails">E-mail addresses that are to be ignored. The method also fills this set with generated e-mail addresses</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FillContactGroupTable(System.Data.DataTable,CMS.Newsletters.IssueInfo,System.Boolean,System.Int32,System.Int32,System.Int32,System.Collections.Generic.HashSet{System.String},System.Boolean)">
            <summary>
            Fills given table with contact data from specified contact group.
            </summary>
            <param name="table">Data table</param>
            <param name="issue">Issue object</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="contactGroupId">Contact group ID</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="currentEmails">Hash table with emails that have been already added</param>
            <param name="setSending">Indicate if new records should be set with 'sending' status</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FillRoleTable(System.Data.DataTable,CMS.Newsletters.IssueInfo,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills given table with user data from specified role.
            </summary>
            <param name="table">Data table</param>
            <param name="issue">Issue object</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="roleId">Role ID</param>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateDynamicIssue(System.Int32)">
            <summary>
            Generates issue of given dynamic newsletter based on the page defined by NewsletterDynamicURL.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.ResolveDynamicNewsletterUrl(System.String)">
            <summary>
            Returns resolved dynamic newsletter url.
            Resolves '~/' and adds protocol.
            </summary>
            <param name="url">Raw dynamic newsletter url</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GetTitleFromHTML(System.String)">
            <summary>
            Returns title (text between 'title' tags) of given html page.
            </summary>
            <param name="htmlPage">Source code of html page</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GetIssueTextFromURL(System.String)">
            <summary>
            Returns source code of html page specified by newsletterDynamicURL.
            </summary>
            <param name="dynamicNewsletterUrl">Url of page to procces</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.EnsureNewsletterObjects(CMS.Newsletters.EmailQueueItemInfo,CMS.Newsletters.NewsletterInfo@,CMS.Newsletters.IssueInfo@,CMS.Newsletters.EmailTemplateInfo@)">
            <summary>
            Ensures necessary newsletter objects.
            </summary>
            <param name="email">Email message</param>
            <param name="newsletter">Newsletter</param>
            <param name="issue">Issue</param>
            <param name="template">Newsletter email template</param>
            <returns>true, when all necessary objects are initialized, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.EnsureSiteAndDomainNames(CMS.Newsletters.NewsletterInfo,System.String@,System.String@)">
            <summary>
            Ensures site and domain names.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.AttachMetafilesToEmail(System.Int32,System.Int32,CMS.EmailEngine.EmailMessage)">
            <summary>
            Attaches metafiles to email message.
            </summary>
            <param name="templateId">Newsletter template ID</param>
            <param name="issueId">Issue ID</param>
            <param name="message">Email message</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.AttachMetafilesToEmail(System.Int32,CMS.Newsletters.IssueInfo,CMS.EmailEngine.EmailMessage)">
            <summary>
            Attaches metafiles to email message.
            </summary>
            <param name="templateId">Newsletter template ID</param>
            <param name="issue">Issue</param>
            <param name="message">Email message</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.EnsureMetafiles(CMS.Newsletters.IssueInfo,System.Int32)">
            <summary>
            Retrieves metafiles for given newsletter issue and template. Files are cached for faster access during sending.
            </summary>
            <param name="issue">Newsletter issue</param>
            <param name="templateId">Newsletter template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SetSender(CMS.EmailEngine.EmailMessage,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,System.String,System.Boolean)">
            <summary>
            Sets the newsletter sender email addresses.
            </summary>   
            <param name="message">E-mail message</param>
            <param name="newsletter">Newsletter</param>
            <param name="issue">Issue</param>
            <param name="siteName">Site name</param>
            <param name="checkBounces">Indicates if bounces should be checked if allowed in the Settings</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.AddIDFields(CMS.EmailEngine.EmailMessage,CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo,System.Int32,System.String)">
            <summary>
            Adds identification fields to e-mail header that can be used to trace newsletter e-mails.
            </summary>
            <param name="message">E-mail message</param>
            <param name="issue">Issue</param>
            <param name="subscriber">Source subscriber</param>
            <param name="memberId">Member ID - UserID for role subscriber and ContactID for contact group subscriber</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.EnsureSenderLength(System.String,System.String)">
            <summary>
            Ensures that newsletter sender address does not exceeds 250 characters.
            </summary>
            <param name="senderString">Address in the form 'name &lt;email&gt;'</param>
            <param name="senderEmail">Email address</param>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueManager.EncodingRegExp">
            <summary>
            Gets page encoding regular expression.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateInfo">
            <summary>
            EmailTemplate data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailTemplate object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailTemplate object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>ManageTemplates permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateID">
            <summary>
            TemplateID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateStylesheetText">
            <summary>
            Template stylesheet text.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateType">
            <summary>
            TemplateType.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateBody">
            <summary>
            TemplateBody.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateName">
            <summary>
            TemplateName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateHeader">
            <summary>
            TemplateHeader.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateFooter">
            <summary>
            TemplateFooter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateDisplayName">
            <summary>
            TemplateDisplayName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateSiteID">
            <summary>
            TemplateSiteID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateGUID">
            <summary>
            Template GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateSubject">
            <summary>
            Template subject.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateThumbnailGUID">
            <summary>
            Thumbnail from metafiles (GUID).
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateInfoProvider">
            <summary>
            Class providing EmailTemplate management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplates">
            <summary>
            Returns a query for all the EmailTemplateInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplateInfo(System.Int32)">
            <summary>
            Gets the e-mail template.
            </summary>
            <param name="templateId">Template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplateInfo(System.String,System.Int32)">
            <summary>
            Gets the e-mail template.
            </summary>
            <param name="templateName">Template code name</param>
            <param name="siteId">Template site ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.SetEmailTemplateInfo(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Sets (updates or inserts) specified e-mail template.
            </summary>
            <param name="emailTemplate">Template object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.DeleteEmailTemplateInfo(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Deletes specified e-mail template.
            </summary>
            <param name="emailTemplate">Template object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.DeleteEmailTemplateInfo(System.Int32)">
            <summary>
            Deletes specified e-mail template.
            </summary>
            <param name="emailTemplateId">Template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllSubscriptionTemplates(System.Int32)">
            <summary>
            Returns dataset with all subscription templates.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllUnsubscriptionTemplates(System.Int32)">
            <summary>
            Returns dataset with all unsubscription templates.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllDoubleOptInTemplates(System.Int32)">
            <summary>
            Returns dataset with all double opt-in templates.
            </summary>
            <param name="siteId">ID of a site</param>
            <returns>DataSet with double opt-in templates</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllIssueTemplates(System.Int32)">
            <summary>
            Returns dataset with all e-mail templates.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetStylesheetUrl(System.String)">
            <summary>
            Returns virtual path to the template's stylesheet.
            </summary>
            <param name="codeName">CSS stylesheet code name</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears the hashtables.
            </summary>
            <param name="logTasks">If true, the clear tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplatesInternal">
            <summary>
            Returns a query for all the EmailtemplateInfo objects.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueInfo">
            <summary>
            Issue data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.OBJECT_TYPE_VARIANT">
            <summary>
            Object type for variant
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.TYPEINFOVARIANT">
            <summary>
            Additional info for A/B test issue
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.#ctor">
            <summary>
            Constructor - Creates an empty Issue object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Issue object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>AuthorIssues permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueUnsubscribed">
            <summary>
            IssueUnsubscribed.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueText">
            <summary>
            IssueText.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSubject">
            <summary>
            IssueSubject.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueID">
            <summary>
            IssueID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSentEmails">
            <summary>
            IssueSentEmails.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueTemplateID">
            <summary>
            IssueTemplateID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueNewsletterID">
            <summary>
            IssueNewsletterID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSiteID">
            <summary>
            Issue site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueMailoutTime">
            <summary>
            IssueMailoutTime.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueShowInNewsletterArchive">
            <summary>
            IssueShowInNewsletterArchive.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueGUID">
            <summary>
            Issue GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueOpenedEmails">
            <summary>
            Gets or sets the number of opened e-mails by subscribers with this newsletter issue.
            </summary>
            <value>The total nuber of opened e-mails containing this issue of newsletter. Default is 0</value>        
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueStatus">
            <summary>
            Gets or sets the status for this issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueIsABTest">
            <summary>
            A/B test flag, set to TRUE for main A/B test issue and its variants.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueVariantOfIssueID">
            <summary>
            ID of parent issue (in case of A/B testing)
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueVariantName">
            <summary>
            Name of the A/B test variant.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSenderName">
            <summary>
            Sender user-friendly name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSenderEmail">
            <summary>
            Sender e-mail address.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueScheduledTaskID">
            <summary>
            Gets or sets ID of scheduled task for sending issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueIsVariant">
            <summary>
            Gets if the issue is variant of an A/B test issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.ABTestVariants">
            <summary>
            Collection of all A/B test variants of the main newsletter issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueHelper">
            <summary>
            Issue helper class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroEmail">
            <summary>
            Dynamic field macro for subscriber email.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroE_mail">
            <summary>
            Dynamic field macro for subscriber e-mail (used for compatibility with previous version).
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroFirstName">
            <summary>
            Dynamic field macro for subscriber first name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroLastName">
            <summary>
            Dynamic field macro for subscriber last name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroUnsubscribeLink">
            <summary>
            Dynamic field macro for unsubscribe link.
            Will contain "<a href="">...</a>".
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroActivationLink">
            <summary>
            Dynamic field - double opt-in activation link.
            Will contain "<a href="">...</a>".
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.MacroActivationUrl">
            <summary>
            Dynamic field - double opt-in activation url.
            Will contain "http://"
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.SUBSCRIBERRESOLVERNAME">
            <summary>
            Name of the resolver which is used in second round for subscriber and context macros
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.NEWSLETTERISSUERESOLVERNAME">
            <summary>
            Name of the resolver which is used in first round for newsletter and issue macros
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.mEditableRegionRegExp">
            <summary>
            Regular expression to search the editable region macro.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.regionsContents">
            <summary>
            Editable regions hash table.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.dynamicFields">
            <summary>
            Dynamic fields hash table.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.mResolver">
            <summary>
            Macro resolver
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.mCulture">
            <summary>
            Newsletter's culture
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.mSiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueHelper.mBaseUrl">
            <summary>
            Base URL used for resolving
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.LoadRegionsContents(System.String)">
            <summary>
            Loads values of editable regions into hashtable.
            </summary>
            <param name="text">Issue text</param>
            <returns>true if the loading was successful, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.LoadRegionsContents(System.Collections.Hashtable@,System.String)">
            <summary>
            Loads values of editable regions into hashtable.
            </summary>
            <param name="regions">Hashtable containing regions and their text</param>
            <param name="text">Issue text</param>
            <returns>true if the loading was successful, otherwise false</returns>        
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.ResolveEditableRegionMacros(System.String)">
            <summary>
            Resolves the editable region macros, replaces the $$editableregionname:width:height$$ macro with the editable region values previously
            loaded with LoadRegionsContents method.
            </summary>
            <param name="text">Text containing editable regions to resolve (template)</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.LoadDynamicFields(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberNewsletterInfo,CMS.Newsletters.IssueInfo,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Loads values of dynamic fields into hashtable.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">SubscriberNewsletterInfo object representing subscription (optional)</param>
            <param name="issue">Newsletter issue</param>
            <param name="previewOnly">True if issue is in preview mode, otherwise false</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
            <param name="webApplicationVirtualPath">Web application virtual path</param>
            <param name="appPath">Application path</param>
            <returns>Returns true if loading was successful, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.ResolveDynamicFieldMacros(System.String,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Resolves the dynamic field macros, replaces the {%dynamicfieldname%} macro with the dynamic field value.
            </summary>
            <param name="text">Text containing dynamic fields to resolve</param>
            <param name="newsletter">Text which is being resolved belongs to the issue in this newsletter</param>
            <param name="issue">Text which is being resolved belongs to this issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetBaseUrl(CMS.Newsletters.NewsletterInfo,System.String,System.String,System.String)">
            <summary>
            Creates a base URL for prefixing links in the given newsletter's issues.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="url">URL from which the base URL is created</param>
            <param name="webApplicationVirtualPath">Virtual path where web application is rooted</param>
            <param name="appPath">Application path</param>
            <returns>Base URL to use for resolution</returns>
            <remarks>
            If the url parameter does not contain the protocol, http is assumed.
            If the url parameter contains empty path, SystemContext.ApplicationPath is used instead.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetContentXML(System.String[])">
            <summary>
            Returns content of editable regions as XML.
            </summary>
            <param name="regions">Content of each region (if NULL "empty" XML is returned).</param>
            <remarks>Region content starts with region ID which is separated with '::' from the rest</remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetStatusFriendlyName(CMS.Newsletters.IssueStatusEnum,System.String)">
            <summary>
            Returns issue status friendly name.
            </summary>
            <param name="status">Issue status</param>
            <param name="resPrefix">Resource string prefix (if NULL default prefix will be used)</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.InitABTestNumbers(System.Int32)">
            <summary>
            Initializes number of e-mails that should be sent for each variant.
            </summary>
            <param name="parentId">ID of A/B test parent issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetNumberPerVariantEmails(CMS.Newsletters.ABTestInfo)">
            <summary>
            Returns number of e-mails to be sent to a variant of specified A/B test.
            </summary>
            <param name="abi">A/B test info</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetWinnerIssue(CMS.Newsletters.IssueInfo,CMS.Newsletters.ABTestInfo)">
            <summary>
            Returns A/B test winner.
            </summary>
            <param name="parentIssue">Parent issue</param>
            <param name="abi">A/B test info</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetIssueTotalUniqueClicks(System.Int32)">
            <summary>
            Returns number of unique clicks of all issue's links.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.CopyIssueProperties(CMS.Newsletters.IssueInfo,CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Copies specified properties from source issue to target issue.
            </summary>
            <param name="srcIssue">Source issue</param>
            <param name="dstIssue">Target issue</param>
            <param name="properties">List of properties (columns) that should be copied separated by semicolon</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetIssueVariants(System.Int32,System.String)">
            <summary>
            Returns issue variants for specified issue ID if any.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="additionalWhereCondition">Additional WHERE condition</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetIssueVariants(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Returns issue variants for specified issue if any.
            </summary>
            <param name="issue">Issue</param>
            <param name="additionalWhereCondition">Additional WHERE condition</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.FillWithPreviewValues(CMS.Newsletters.SubscriberInfo)">
            <summary>
            When running in preview mode or subscriber is unknown, fills the hashtables with subscriber's values, but makes links inactive.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.FillWithRoleSubscriberValues(CMS.Newsletters.SubscriberInfo)">
            <summary>
            When subscriber is of role or contact group type, fills the hashtables with subscriber values, but makes links blank.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.FillWithSubscriberData(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberNewsletterInfo,CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Fills the hashtable with values for a given subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">Subscription binding</param>
            <param name="issue">Issue</param>
            <param name="baseUrl">Base URL to use when creating activation and unsubscription links</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.FillBaseSubscriberData(CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Fills the hashtable with basic values of a subscriber (email, first and last names).
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="encodeName">If TRUE subscriber first and last names are encoded - this is used in preview.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.CreateInactiveUnsubscriptionLink">
            <summary>
            Creates inactive/disabled unsubscription link to use as a placeholder.
            </summary>
            <returns>Inactive unsubscription link</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.CreateInactiveActivationLink">
            <summary>
            Creates inactive/disabled activation link to use as a placeholder.
            </summary>
            <returns>Inactive activation link</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.FillUnsubscriptionLink(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberNewsletterInfo,CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Fills unsubscription link dynamic field for a given subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">Subscription binding</param>
            <param name="issue">Issue</param>
            <param name="unsubscriptionPage">Resolved unsubscription page</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.FillActivationLink(CMS.Newsletters.SubscriberNewsletterInfo,System.String,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Fills activation link dynamic fields for a given subscriber.
            </summary>
            <param name="subscription">Subscription</param>
            <param name="activationPage">Resolved activation page</param>
            <param name="newsletter">Newsletter object.</param>
            <param name="subscriber">Subscriber object.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetActivationPage(CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Retrieves activation page for a specified newsletter.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="baseUrl">Base URL to use for resolution</param>
            <returns>Complete URL to activation page</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetUnsubscriptionPage(CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Retrieves unsubscription page for a specified newsletter.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="baseUrl">Base URL to use for resolution</param>
            <returns>Complete URL to unsubscription page</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.EnsureBaseUrl(CMS.Newsletters.NewsletterInfo,System.String,System.String,System.String)">
            <summary>
            Returns base URL from global variable or creates new one.
            </summary>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <param name="webApplicationVirtualPath">Virtual path where web application is rooted</param>
            <param name="appPath">Application path</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.PrepareLink(System.String,System.String)">
            <summary>
            Combines base and relative URLs.
            </summary>
            <param name="linkUrl">URL of the link to be added after base URL</param>
            <param name="baseUrl">Base URL with domain</param>
            <returns>Returns combined URLs</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.AddTrackingLinks(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Converts links in text to tracking links and inserts a web beacon (if tracking is enabled).
            </summary>
            <param name="text">Issue text</param>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="domainName">Domain name</param>
            <returns>Transformed issue text</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.InjectTrackingImage(System.String,CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Injects a tracking image at the end of the issue text.
            </summary>
            <param name="text">Text where the web beacon will be inserted</param>
            <param name="issue">Issue to track</param>
            <param name="domainName">Domain name to use when resolving the URL</param>
            <returns>Text containing a generic web bug</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetTrackingImageStyles">
            <summary>
            Gets string representation of styles suitable for the open email tracking image.
            Guarantees tracking image remains invisible even if there are some CSS styles present that e.g. declare image border color and width.
            </summary>
            <returns>String containing the styles that can be inserted into tracking image style attribute</returns>
        </member>
        <member name="P:CMS.Newsletters.IssueHelper.Resolver">
            <summary>
            Macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueHelper.EditableRegionRegExp">
            <summary>
            Editable region macro regular expression.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueHelper.Culture">
            <summary>
            Returns default culture of the newsletter's site.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueInfoProvider">
            <summary>
            Class providing Issue management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssues">
            <summary>
            Returns a query for all the IssueInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfo(System.Int32)">
            <summary>
            Returns the issue with specified ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfo(System.Guid,System.Int32)">
            <summary>
            Returns the issue with specified GUID.
            </summary>
            <param name="issueGuid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetOriginalIssue(System.Int32)">
            <summary>
            Returns original (parent) issue for specified issue ID.
            </summary>
            <param name="issueId">Issue ID (either variant issue or parent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueInfo(CMS.Newsletters.IssueInfo)">
            <summary>
            Sets (updates or inserts) specified issue.
            </summary>
            <param name="issue">Issue to set</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.DeleteIssueInfo(CMS.Newsletters.IssueInfo)">
            <summary>
            Deletes issue.
            </summary>
            <param name="issueObj">Issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.DeleteIssueInfo(System.Int32)">
            <summary>
            Deletes issue specified by ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddSentEmails(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Increases the sent emails count in the issue specified.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="emails">Number of sent emails to add</param>
            <param name="mailoutTime">Time when the e-mails were sent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SendConfirmationEmail(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sends e-mail to confirm subscription/unsubscription of subscriber to newsletter.
            </summary>
            <param name="isSubscriptionEmail">True if the message is subscription confirmation, false if unsubscription confirmation</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SendDoubleOptInEmail(System.Int32,System.Int32)">
            <summary>
            Sends double opt-in e-mail to confirm subscription.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetEmailBody(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.EmailTemplateInfo,CMS.Newsletters.SubscriberInfo,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Merges issue text with template to create e-mail body and resolves macros with their values.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="subscriber">Subscriber (optional)</param>
            <param name="previewOnly">True when the message is in preview mode</param>
            <param name="siteName">Site name (optional)</param>
            <param name="domain">Domain (optional)</param>
            <param name="appPath">Application path (optional)</param>
            <param name="webFullUrl">Web full url (optional)</param>
            <returns>Issue e-mail body</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetEmailBody(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberNewsletterInfo,CMS.Newsletters.EmailTemplateInfo,CMS.Newsletters.SubscriberInfo,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Merges issue text with template to create e-mail body and resolves macros with their values.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter (optional)</param>
            <param name="subscription">Subscription information (optional)</param>
            <param name="template">Email template (optional)</param>
            <param name="subscriber">Subscriber object (optional)</param>
            <param name="previewOnly">True when the message is in preview mode</param>
            <param name="siteName">Site name (optional)</param>
            <param name="domain">Domain (optional)</param>
            <param name="appPath">Application path (optional)</param>
            <param name="webFullUrl">Web full url (optional)</param>
            <returns>Issue e-mail body</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.IncreaseUnsubscribeCount(System.Int32)">
            <summary>
            Increases the counter for issue unsubscriptions.
            </summary>
            <param name="issueId">ID of the issue that has been unsubscribed</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddOpenedEmails(System.Int32)">
            <summary>
            Increases the opened emails count int the issue specified.
            </summary>
            <param name="issueId">ID of the issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.InvalidateIssue(System.Int32)">
            <summary>
            Invalidates cached newsletter issue on external change.
            </summary>
            <param name="issueId">ID of the issue to invalidate</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueStatus(System.Int32,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Set specified status to the issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="newStatus">New status</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetTemplate(System.Boolean,System.Boolean,CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Gets a template for a specified type of confirmation e-mail message.
            </summary>        
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
            <param name="newsletter">Newsletter</param>
            <param name="culture">Culture string</param>
            <returns>Confirmation e-mail template</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetHeader(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Gets a header from template with embedded or linked stylesheet.
            </summary>
            <param name="template">E-mail template</param>
            <returns>Header with stylesheet data</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SendConfirmation(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sends either double opt-in e-mail or subcsription/unsubscription confirmation e-mail.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetEmailBody(CMS.Newsletters.IssueInfo,CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Creates an email body by merging the template and issue text.
            </summary>
            <param name="issue">Issue</param>
            <param name="template">Newsletter email template for this issue</param>
            <returns>Email body with text common to all subscribers.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SendConfirmation(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberNewsletterInfo,CMS.Newsletters.EmailTemplateInfo,System.String,System.String)">
            <summary>
            Sends either double opt-in e-mail or subcsription/unsubscription confirmation e-mail.
            </summary>
            <param name="subscriber">Subsciber</param>
            <param name="newsletter">Newsletter</param>
            <param name="subscription">Subscription information</param>
            <param name="template">Email template to use</param>
            <param name="siteName">Name of the site</param>
            <param name="culture">Culture string</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.OpenRate(CMS.Newsletters.IssueInfo)">
            <summary>
            Gets the open rate percentage for this issue (how many e-mails were open out of all sent e-mails).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssuesInternal">
            <summary>
            Returns a query for all the IssueInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfoInternal(System.Int32)">
            <summary>
            Returns the issue with specified ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the issue with specified GUID.
            </summary>
            <param name="issueGuid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueInfoInternal(CMS.Newsletters.IssueInfo)">
            <summary>
            Sets (updates or inserts) specified issue.
            </summary>
            <param name="issue">Issue to set</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.DeleteIssueInfoInternal(CMS.Newsletters.IssueInfo)">
            <summary>
            Deletes issue.
            </summary>
            <param name="issueObj">Issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddSentEmailsInternal(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Increases the sent emails count in the issue specified.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="emails">Number of sent emails to add</param>
            <param name="mailoutTime">Time when the e-mails were sent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddOpenedEmailsInternal(System.Int32)">
            <summary>
            Increases the opened emails count in the issue specified.
            </summary>
            <param name="issueId">ID of the issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.IncreaseUnsubscribeCountInternal(System.Int32)">
            <summary>
            Increases the counter for issue unsubscriptions.
            </summary>
            <param name="issueId">ID of the issue that has been unsubscribed</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueStatusInternal(System.Int32,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Sets specified status to the issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="status">New status</param>
        </member>
        <member name="P:CMS.Newsletters.IssueInfoProvider.UseLinkedCSS">
            <summary>
            Determines whether "link" tag is used instead of "style" tag.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkListInfo.#ctor">
            <summary>
            Constructor - Creates an empty LinkListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new LinkListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.LinkListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Newsletters.LinkTracker">
            <summary>
            Tracks subscribers who clicked on a link in a newsletter issue.
            </summary>
            <remarks>
            An e-mail containing a newsletter issue contains a modified link.
            This link contains a subscriber's guid and the guid of the newsletter link.
            A redirect to original URL is sent in response and the request is logged.
            </remarks>
        </member>
        <member name="F:CMS.Newsletters.LinkTracker.lockObj">
            <summary>
            Object for locking.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkTracker.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the tracking data and redirects request to original URL.
            </summary>
            <param name="context">An HttpContext associated with this request</param>
        </member>
        <member name="M:CMS.Newsletters.LinkTracker.GetLinkUrl">
            <summary>
            Retrieves the original URL given the arguments and logs the request.
            </summary>
            <returns>Original URL or null if not found</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkTracker.ResolveUrl(System.String,CMS.Newsletters.SubscriberInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Resolves subscriber macros in the specified URL.
            </summary>
            <param name="url">URL containing subscriber macros</param>
            <param name="subscriber">Subscriber</param>
            <param name="newsletter">Text which is being resolved belongs to the issue in this newsletter</param>
            <param name="issue">Text which is being resolved belongs to this issue</param>
            <returns>Resolved URL</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkTracker.LogActivity(CMS.Newsletters.LinkInfo,CMS.Newsletters.SubscriberInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Logs activity and returns subscriber's contact ID.
            </summary>
            <param name="link">Link</param>
            <param name="subscriber">Subscriber</param>
            <param name="issue">Newsletter issue</param>
            <param name="news">Newsletter</param>
            <param name="originalURL">Original URL</param>
            <param name="contactId">Contact ID is present if the mail is sent to a contact or a contact group</param>
            <param name="isContactGroup">Indicates if subscriber is from a contact group</param>
            <param name="isPersona">Indicates if subscriber is from a persona</param>
        </member>
        <member name="M:CMS.Newsletters.LinkTracker.OnLog(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Performs custom handling &amp; logging after a link was clicked.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="linkId">Link's ID</param>
            <param name="siteId">ID of the site</param>
            <param name="originalUrl">Original URL that is returned to the client</param>
            <param name="contactId">Contact's ID</param>
        </member>
        <member name="P:CMS.Newsletters.LinkTracker.IsReusable">
            <summary>
            Gets whether this handler can be reused for other request; always returns true.
            </summary>
            <value>Always true</value>
        </member>
        <member name="T:CMS.Newsletters.NewsletterInfo">
            <summary>
            Newsletter data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty Newsletter object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Newsletter object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>Configure permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterTemplateID">
            <summary>
            Gets or sets the newsletter template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDynamicScheduledTaskID">
            <summary>
            Gets or sets the newsletter dynamic scheduled task ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterType">
            <summary>
            Gets or sets the newsletter type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSiteID">
            <summary>
            Gets or sets the newsletter site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterName">
            <summary>
            Gets or sets the newsletter name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSubscriptionTemplateID">
            <summary>
            Gets or sets the newsletter subscription template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDynamicSubject">
            <summary>
            Gets or sets the subject of a dynamic newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterID">
            <summary>
            Gets or sets the newsletter ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDisplayName">
            <summary>
            Gets or sets the newsletter display name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSenderName">
            <summary>
            Gets or sets the newsletter sender name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDynamicURL">
            <summary>
            Gets or sets the URL of a dynamic newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSenderEmail">
            <summary>
            Gets or sets the e-mail addres of a newsletter sender.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterUnsubscriptionTemplateID">
            <summary>
            Gets or sets the newsletter unnsubscription template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterUnsubscribeUrl">
            <summary>
            Gets or sets the newsletter unsubscription URL.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterBaseUrl">
            <summary>
            Gets or sets the newsletter base URL.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterGUID">
            <summary>
            Gets or sets the newsletter unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterLastModified">
            <summary>
            Gets or sets the date and time the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterUseEmailQueue">
            <summary>
            Gets or sets whether to use the e-mail queue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterEnableOptIn">
            <summary>
            Gets or sets whether the newsletter should use double opt-in.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterOptInTemplateID">
            <summary>
            Gets or sets the ID of the template which will be used for double opt-in confirmation.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSendOptInConfirmation">
            <summary>
            Gets or sets whether subscription confirmation should be sent after double opt-in e-mail.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterOptInApprovalURL">
            <summary>
            Gets or sets the URL of the double opt-in page.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterTrackOpenEmails">
            <summary>
            Gets or sets whether tracking of opened emails carrying newsletter issues is enabled.
            </summary>
            <value>A flag that determines if tracking is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterTrackClickedLinks">
            <summary>
            Gets or sets whether tracking of clicked links in newsletter issues is enabled.
            </summary>
            <value>A flag that determines if tracking is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterLogActivity">
            <summary>
            Gets or sets whether activities logging is enabled for this particular newsletter.
            </summary>
            <value>A flag that determines if activities logging is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDraftEmails">
            <summary>
            Gets or sets the email addresses where draft emails are sent.
            </summary>
            <value>Semicolon separated list of email addresses.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterEnableResending">
            <summary>
            Gets or sets whether the newsletter issues may be resent. Default value is TRUE.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterInfoProvider">
            <summary>
            Class providing Newsletter management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletters">
            <summary>
            Returns a query for all the NewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.Clear(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, the clear tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfo(System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfo(System.String,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterName">NewsletterName</param>
            <param name="siteId">Site identifier</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfo(System.Guid,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterGuid">GUID of newsletter</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.SetNewsletterInfo(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified newsletter.
            </summary>
            <param name="newsletter">Newsletter to set</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.DeleteNewsletterInfo(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterObj">Newsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.DeleteNewsletterInfo(System.Int32)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewslettersForSite(System.Int32)">
            <summary>
            Returns object query with all newsletters of given site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetEmailAddressCount(System.Int32,System.String)">
            <summary>
            Returns number of e-mail addresses of subscribers for the given newsletter.
            </summary>
            <param name="newsletterId">Newsletter</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewslettersInternal">
            <summary>
            Returns a query for all the NewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfoInternal(System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfoInternal(System.String,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterName">NewsletterName</param>
            <param name="siteId">Site identifier</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterGuid">GUID of newsletter</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.SetNewsletterInfoInternal(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified newsletter.
            </summary>
            <param name="newsletter">Newsletter to set</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.DeleteNewsletterInfoInternal(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterObj">Newsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewslettersForSiteInternal(System.Int32)">
            <summary>
            Returns object query with all newsletters of given site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterType">
            <summary>
            Newsletter type enumeration.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterType.TemplateBased">
            <summary>
            Template-based (or static) newsletter type.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterType.Dynamic">
            <summary>
            Dynamic newsletter type.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.OpenedEmailInfo">
            <summary>
            OpenedEmail data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.OpenedEmailInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.OpenedEmailInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.#ctor">
            <summary>
            Creates a new OpenedEmailInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new OpenedEmailInfo object from the specified DataRow.
            </summary>
            <param name="openedEmailRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.#ctor(CMS.Newsletters.OpenedEmailInfo,System.Boolean)">
            <summary>
            Creates a new OpenedEmailInfo object from the existing OpenedEmailInfo object.
            Copy constructor.
            </summary>
            <param name="openedEmailInfo">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.DeleteObject">
            <summary>
            Deletes this OpenedEmailInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.SetObject">
            <summary>
            Updates this OpenedEmailInfo object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.IssueID">
            <summary>
            Gets or sets ID of the newsletter's issue.
            </summary>
            <value>
            Newsletter issue's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.SubscriberID">
            <summary>
            Gets or sets subscriber's ID.
            </summary>
            <value>
            Subscriber's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedWhen">
            <summary>
            Gets or sets the timestamp when the issue of the newsletter was opened by subscriber.
            </summary>
            <value>
            Timestamp or CMS.Helpers.DateTimeHelper.ZERO_TIME if the issue was not read by the specified subscriber yet.
            </value>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedEmailID">
            <summary>
            OpenedEmail ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.OpenedEmailInfoProvider">
            <summary>
            Class providing OpenedEmailInfoProvider management.
            </summary>
            <remarks>
            Handles basic CRUD functionality over OpenedEmailInfo objects.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.#ctor">
            <summary>
            Creates a new instance of OpenedEmailInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmails">
            <summary>
            Returns a query for all the OpenedEmailInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmailInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves the OpenedEmailInfo object for newsletter issue and subscriber identified by ID.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>
            <returns><see cref="T:CMS.Newsletters.OpenedEmailInfo"/> object</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetSubscribersOpenedEmails(System.Int32)">
            <summary>
            Gets a dataset with OpenedEmailInfo records of a specified subscriber.
            </summary>
            <param name="subscriberId">ID of the subscriber</param>        
            <returns>A DataSet containing the OpenedEmailInfo records</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetIssueOpeners(System.Int32)">
            <summary>
            Gets a dataset with OpenedEmailInfo records of a specified issue.
            </summary>
            <param name="issueId">Id of the issue</param>
            <returns>A DataSet containing the OpenedEmailInfo records</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.SetOpenedEmailInfo(CMS.Newsletters.OpenedEmailInfo)">
            <summary>
            Saves the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfo(System.Int32,System.Int32)">
            <summary>
            Deletes the OpenedEmailInfo object identified by the ID of issue and subscriber.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>        
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfo(CMS.Newsletters.OpenedEmailInfo)">
            <summary>
            Deletes the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.LogOpenedEmail(System.Int32,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="issueId">Newsletter issue ID</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.LogOpenedEmail(System.Guid,System.Guid,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber's GUID</param>
            <param name="issueGuid">GUID of the newsletter issue</param>
            <param name="siteId">ID of the site that owns the newsletter</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetMultiSubscriberOpenedIssueActivityCount(System.Int32)">
            <summary>
            Returns number of e-mails opened by multisubscribers (personas and contact groups).
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfos(System.String)">
            <summary>
            Deletes OpenedEmailInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmailsInternal">
            <summary>
            Returns a query for all the OpenedEmailInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmailInfoInternal(System.Int32,System.Int32)">
            <summary>
            Retrieves the OpenedEmailInfo object for newsletter issue and subscriber identified by ID.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>
            <returns>OpenedEmailInfo object</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.SetOpenedEmailInfoInternal(CMS.Newsletters.OpenedEmailInfo)">
            <summary>
            Saves the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfoInternal(System.Int32,System.Int32)">
            <summary>
            Deletes the OpenedEmailInfo object identified by the ID of issue and subscriber.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberId">ID of the subscriber</param>        
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfoInternal(CMS.Newsletters.OpenedEmailInfo)">
            <summary>
            Deletes the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.LogOpenedEmailInternal(System.Int32,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="issueId">Newsletter issue ID</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetMultiSubscriberOpenedIssueActivityCountInternal(System.Int32)">
            <summary>
            Returns number of e-mails opened by multisubscribers (personas and contact groups).
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfosInternal(System.String)">
            <summary>
            Deletes OpenedEmailInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetTrackingPage(System.String)">
            <summary>
            Returns a tracking page used for open-email tracking.
            </summary>
            <param name="domainName">Domain name</param>
            <returns>Absolute URL to tracking page</returns>
        </member>
        <member name="F:CMS.Newsletters.OpenedEmailListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.OpenedEmailListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailListInfo.#ctor">
            <summary>
            Constructor - Creates an empty OpenedEmailListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OpenedEmailListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailListInfo.GetDataQueryInternal">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>    
        </member>
        <member name="T:CMS.Newsletters.OpenEmailTracker">
            <summary>
            Tracks subscribers who opened a newsletter issues sent by e-mail.
            </summary>
            <remarks>
            An e-mail containing a newsletter issue contains a link to image. 
            This link contains a subscriber's guid and the guid of the newsletter issue. 
            The image is sent in response and the request is logged.
            </remarks>
        </member>
        <member name="F:CMS.Newsletters.OpenEmailTracker.lockObj">
            <summary>
            Object for locking.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTracker.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the tracking data and serves a dummy image in response.
            </summary>
            <param name="context">An HttpContext associated with this request</param>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTracker.UseCached(System.Web.HttpRequest)">
            <summary>
            Checks if the same request for this image hasn't arrived in last 24 hours.
            </summary>
            <param name="request">An HttpRequest object</param>
            <returns>true if the same request was already received in last 24 hours, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTracker.Log">
            <summary>
            Logs a request - extracts the subscriber and issue and counts the e-mail as opened.
            </summary>        
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTracker.LogActivity(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.IssueInfo,System.Int32)">
            <summary>
            Logs activity and returns subscriber's contact ID.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="issue">Issue</param>
            <param name="contactId">Contact ID is present if the mail is sent to a contact or a contact group</param>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTracker.OnLog(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs custom handling &amp; logging after an email was logged.
            </summary>
            <param name="subscriberId">Subscriber's ID</param>
            <param name="issueId">Newsletter issue's ID</param>
            <param name="siteId">ID of the site</param>
            <param name="contactId">Contact's ID</param>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTracker.Image">
            <summary>
            The tracking image that is sent in response.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTracker.IsReusable">
            <summary>
            Gets whether this handler can be reused for other request; always returns true.
            </summary>
            <value>Always true /></value>
        </member>
        <member name="T:CMS.Newsletters.QueueSender">
            <summary>
            Scheduled task for newsletter issue mailout.
            </summary>    
        </member>
        <member name="F:CMS.Newsletters.QueueSender.generateLock">
            <summary>
            Lock object for issue variant generation to newsletter queue
            </summary>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Generates e-mails of given issue (GUID or ID of an issue is specified in taskData property of task parameter) and send all emails in queue to subscribers.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.AllowGenerateQueue(System.Int32)">
            <summary>
            Returns if data can be generated into newsletter queue when a variant of A/B test is being sent.
            </summary>
            <param name="issueId">ID of parent issue</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.IsQueueGenerated(System.Int32)">
            <summary>
            Returns if data are prepared in newsletter queue when a variant of A/B test is being sent.
            </summary>
            <param name="issueId">ID of parent issue</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.CheckStatus(System.Int32,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Check if parent issue is in specified status.
            </summary>
            <param name="issueId">ID of parent issue</param>
            <param name="status">Status to be checked</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.PostponeScheduledTask(CMS.Scheduler.TaskInfo)">
            <summary>
            Postpones given scheduled task for a minute.
            </summary>
            <param name="task">Scheduled task</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.FinishWinnerVariant(System.Int32)">
            <summary>
            Ensures that winner variant's status is 'Finished'.
            </summary>
            <param name="issueId">ID of main issue</param>
        </member>
        <member name="T:CMS.Newsletters.SubscriberInfo">
            <summary>
            Subscriber data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_USER">
            <summary>
            Object type for user
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_ROLE">
            <summary>
            Object type for role
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_CONTACTGROUP">
            <summary>
            Object type for contactgroup
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_CONTACT">
            <summary>
            Object type for contact
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_PERSONA">
            <summary>
            Object type for persona
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.mSubscriberCustomData">
            <summary>
            Subscriber custom data.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOUSER">
            <summary>
            Type information for user subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOROLE">
            <summary>
            Type information for role subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOCONTACTGROUP">
            <summary>
            Type information for contact group subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOCONTACT">
            <summary>
            Type information for contact subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOPERSONA">
            <summary>
            Type information for persona subscriber.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.RegisterProperties">
            <summary>
            Register the custom properties.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.#ctor">
            <summary>
            Constructor - Creates an empty Subscriber object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Creates a new Subscriber object from the given Data class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Subscriber object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>ManageSubscribers permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberID">
            <summary>
            SubscriberID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberEmail">
            <summary>
            SubscriberEmail.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberFirstName">
            <summary>
            SubscriberFirstName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberLastName">
            <summary>
            SubscriberLastName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberFullName">
            <summary>
            SubscriberFullName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberSiteID">
            <summary>
            SubscriberSiteID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberType">
            <summary>
            SubscriberType.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberRelatedID">
            <summary>
            SubscriberRelatedID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberCustomData">
            <summary>
            Susbcriber custom data.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberGUID">
            <summary>
            Subscriber GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberRelated">
            <summary>
            Subscriber related object (contact, contact group, rule, user).
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberLinkInfo">
            <summary>
            SubscriberLinkInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberLinkInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberLinkInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfo.#ctor">
            <summary>
            Creates a new SubscriberLinkInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new SubscriberLinkInfo object from the specified DataRow.
            </summary>
            <param name="SubscriberLinkInfoRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfo.#ctor(CMS.Newsletters.SubscriberLinkInfo,System.Boolean)">
            <summary>
            Creates a new SubscriberLinkInfo object from the existing SubscriberLinkInfo object.
            Copy constructor.
            </summary>
            <param name="subLinkInfo">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfo.DeleteObject">
            <summary>
            Deletes this SubscriberLinkInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfo.SetObject">
            <summary>
            Updates this SubscriberLinkInfo the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberLinkInfo.LinkID">
            <summary>
            Gets or sets links's ID.
            </summary>
            <value>
            Links's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletters.SubscriberLinkInfo.SubscriberID">
            <summary>
            Gets or sets subscriber's ID.
            </summary>
            <value>
            Subscriber's ID, or 0 if not found.
            </value>        
        </member>
        <member name="P:CMS.Newsletters.SubscriberLinkInfo.Clicks">
            <summary>
            Gets the number of times this link was clicked by a subscriber.
            </summary>
            <value>
            Number of clicks by a specified subscriber or 0 if not applicable
            </value>
        </member>
        <member name="P:CMS.Newsletters.SubscriberLinkInfo.SubscriberLinkID">
            <summary>
            SubscriberLink ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberLinkInfoProvider">
            <summary>
            Class providing SubscriberLinkInfoProvider management.
            </summary>
            <remarks>
            Handles basic CRUD functionality over SubscriberLinkInfo objects.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.#ctor">
            <summary>
            Creates a new instance of SubscriberLinkInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.GetSubscriberLinks">
            <summary>
            Returns a query for all the SubscriberLinkInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.GetSubscriberLinkInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves the SubscriberLinkInfo object for newsletter link and subscriber identified by ID.
            </summary>
            <param name="linkId">ID of the newsletter link</param>        
            <param name="subscriberId">ID of the subscriber</param>        
            <returns><see cref="T:CMS.Newsletters.SubscriberLinkInfo"/> object</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.GetLinks(System.Int32)">
            <summary>
            Gets a dataset with SubscriberLinkInfo records of a specified subscriber.
            </summary>
            <param name="subscriberId">ID of the subscriber</param>        
            <returns>A DataSet containing the SubscriberLinkInfo records</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.GetSubscribers(System.Int32)">
            <summary>
            Gets a dataset with SubscriberLinkInfo records of a specified link.
            </summary>
            <param name="linkId">Id of the link</param>
            <returns>A DataSet containing the SubscriberLinkInfo records</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.SetSubscriberLinkInfo(CMS.Newsletters.SubscriberLinkInfo)">
            <summary>
            Saves the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfo(System.Int32,System.Int32)">
            <summary>
            Deletes the SubscriberLinkInfo object identified by the ID of link and subscriber.
            </summary>
            <param name="linkId">ID of the newsletter link</param>
            <param name="subscriberId">ID of the subscriber</param>        
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfo(CMS.Newsletters.SubscriberLinkInfo)">
            <summary>
            Deletes the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfos(System.String)">
            <summary>
            Deletes SubscriberLinkInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.GetSubscriberLinksInternal">
            <summary>
            Returns a query for all the SubscriberLinkInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.GetSubscriberLinkInfoInternal(System.Int32,System.Int32)">
            <summary>
            Retrieves the SubscriberLinkInfo object for newsletter link and subscriber identified by ID.
            </summary>
            <param name="linkId">ID of the newsletter link</param>
            <param name="subscriberId">ID of the subscriber</param>        
            <returns>SubscriberLinkInfo object</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.SetSubscriberLinkInfoInternal(CMS.Newsletters.SubscriberLinkInfo)">
            <summary>
            Saves the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to save</param>        
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfoInternal(CMS.Newsletters.SubscriberLinkInfo)">
            <summary>
            Deletes the SubscriberLinkInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>        
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkInfoProvider.DeleteSubscriberLinkInfosInternal(System.String)">
            <summary>
            Deletes SubscriberLinkInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="T:CMS.Newsletters.SubscriberNewsletterInfo">
            <summary>
            SubscriberNewsletterInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberNewsletterInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberNewsletterInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscribedWhen">
            <summary>
            Indicates when subscriber was subscribed to the newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.NewsletterID">
            <summary>
            ID of the newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriberID">
            <summary>
            ID of the Subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionApproved">
            <summary>
            Indicaties if subscription is allowed.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionApprovedWhen">
            <summary>
            Gets or sets when subscription was approved.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionApprovalHash">
            <summary>
            Hash of subscription approval.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionEnabled">
            <summary>
            Indicates if the subscription is enabled. Default TRUE.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriberNewsletterID">
            <summary>
            Subscriber newsletter ID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberNewsletterInfoProvider">
            <summary>
            Class providing SubscriberNewsletterInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletters">
            <summary>
            Returns a query for all the SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetEnabledSubscriberNewsletters">
            <summary>
            Returns a query for all enabled SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetApprovedSubscriberNewsletters">
            <summary>
            Returns a query for all approved SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscriberID and newsletterID.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfo(System.String)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscription hash.
            </summary>
            <param name="subscriptionHash">Subscription hash</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.SetSubscriberNewsletterInfo(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified SubscriberNewsletterInfo.
            </summary>
            <param name="infoObj">SubscriberNewsletterInfo to be set</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObj"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfo(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Deletes specified SubscriberNewsletterInfo.
            </summary>
            <param name="infoObj">SubscriberNewsletterInfo to be deleted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObj"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Deletes SubscriberNewsletterInfo specified by subscriberID and newsletterID.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfos(System.String)">
            <summary>
            Deletes SubscriberNewsletterInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition. Deletes all subscribers when where condition is set to null</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriptions(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all existing subscriptions along with detailed information about the subscriber.
            </summary>
            <param name="where">WHERE parameter</param>
            <param name="orderBy">ORDER BY parameter</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Selected columns</param>
            <returns>DataSet with subscriptions and their respective subscriber information</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RemoveSubscriberFromNewsletter(System.String)">
            <summary>
            Removes specified subscriber from newsletter.
            </summary>
            <param name="subscriptionApprovalHash">Subscription approval hash.</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriptionApprovalHash</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.InvalidateSubscription(System.Int32,System.Int32)">
            <summary>
            Invalidates subscription which remains in the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.InvalidateSubscription(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Invalidates subscription which remains in the newsletter.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObj"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RenewSubscription(System.Int32,System.Int32)">
            <summary>
            Renews subscription.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.ApproveSubscription(System.Int32,System.Int32)">
            <summary>
            Approve subscription.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RejectSubscription(System.Int32,System.Int32)">
            <summary>
            Reject subscription.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.SetApprovalStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set status of subscriber approval.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="status">Status of subscriber</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletter(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Date time</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletter(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Indication when subscription was created</param>
            <param name="approved">Subscription is approved</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriptionsByType(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with subscribers by type for specified issue(newsletter).
            </summary>
            <param name="subscriberType">Type of the subscriber</param>
            <param name="newsletterID">Newsletter ID representing</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N </param>
            <param name="columns">Columns</param>
            <returns>Returns DataSet.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewslettersInternal">
            <summary>
            Returns a query for all the SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetEnabledSubscriberNewslettersInternal">
            <summary>
            Returns a query for all enabled SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetApprovedSubscriberNewslettersInternal">
            <summary>
            Returns a query for all approved SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns SubscriberNewsletterInfo with specified ID.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>      
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.SetSubscriberNewsletterInfoInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified SubscriberNewsletterInfo.
            </summary>
            <param name="infoObj">SubscriberNewsletterInfo to be set.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfoInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Deletes specified SubscriberNewsletterInfo.
            </summary>
            <param name="infoObj">SubscriberNewsletterInfo to be deleted.</param>   
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfosInternal(System.String)">
            <summary>
            Deletes SubscriberNewsletterInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfoInternal(System.String)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscriptionHash.
            </summary>
            <param name="subscriptionHash">Subscription hash.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.InvalidateSubscriptionInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Invalidates subscription which remains in the newsletter.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RenewSubscriptionInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Renews subscription.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.ApproveSubscriptionInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Approves subscription.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RejectSubscriptionInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Rejects subscription.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletterInternal(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Indication when subscription was created</param>
            <param name="approved">Subscription is approved</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriptionsByTypeInternal(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with subscribers by type for specified issue(newsletter).
            </summary>
            <param name="subscriberType">Type of the subscriber</param>
            <param name="newsletterID">Newsletter ID representing</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N </param>
            <param name="columns">Columns</param>
            <returns>Returns DataSet.</returns>
        </member>
        <member name="T:CMS.Newsletters.ThreadEmailSender">
            <summary>
            Async e-mail sender. Gets e-mails from newsletter queue, prepares them and sends them to e-mail queue.
            </summary>    
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mSendFailed">
            <summary>
            Resend failed e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mSendNew">
            <summary>
            Send new e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mIssueID">
            <summary>
            Issue ID.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mSendingThreads">
            <summary>
            Threads currently sending e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mAppPath">
            <summary>
            Application path.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mWindowsIdentity">
            <summary>
            Windows identity.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mAllowSending">
            <summary>
            Used to cancel the sending if set to 'false'.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.threadLock">
            <summary>
            Thread lock for scheduled sending.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.RunAsync(System.Security.Principal.WindowsIdentity)">
            <summary>
            Runs the sender in an asynchronous thread.
            </summary>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.Run">
            <summary>
            Sends all e-mails one by one in one thread.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.CancelSending">
            <summary>
            Stops current sending process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.GetIssueIDToSend(System.Boolean,System.Boolean)">
            <summary>
            Returns IssueID of the top item in newsletter queue which is not A/B test or 0.
            </summary>
            <param name="getNew">Indicates if new issues can be used</param>
            <param name="getFailed">Indicates if failed issues can be used</param>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.EnsureNewsletterObjects(CMS.Newsletters.IssueInfo@,CMS.Newsletters.NewsletterInfo@,CMS.Newsletters.EmailTemplateInfo@,System.String@,System.String@)">
            <summary>
            Ensures necessary newsletter objects.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="template">Newsletter email template</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.ResolveCommonMacros(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.String,System.String)">
            <summary>
            Resolves newsletter and issue macros in the newsletter issue text and subject.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <param name="siteName">Site name</param>
            <param name="domainName">Domain name</param>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.SendingThreads">
            <summary>
            Number of threads that are currently sending issues.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.SendFailed">
            <summary>
            Send failed e-mails?
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.SendNew">
            <summary>
            Send new e-mails?
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.IssueID">
            <summary>
            IssueID, optional; only specific issue is send-out if it is set.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberLinkListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberLinkListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberLinkListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberLinkListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberLinkListInfo.GetDataQueryInternal">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>    
        </member>
    </members>
</doc>
