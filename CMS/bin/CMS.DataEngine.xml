<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.DataEngine</name>
    </assembly>
    <members>
        <member name="T:CMS.DataEngine.HashtableSettings">
            <summary>
            Settings for provider hashtables
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.UseHashtables">
            <summary>
            General flag if hashtables are enabled or not
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.ID">
            <summary>
            If true, ID hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.Name">
            <summary>
            If true, name hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.FullName">
            <summary>
            If true, full name hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.GUID">
            <summary>
            If true, GUID hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.UseWeakReferences">
            <summary>
            If true, weak references are used within hashtables. Use in case the provider handles a lot of objects to allow releasing memory
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.Load">
            <summary>
            Specifies the way how the hashtable values are initialized
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.GenerationColumn">
            <summary>
            Column name of the object that contains the generation number
            </summary>
        </member>
        <member name="T:CMS.RegisterCustomProviderAttribute">
            <summary>
            Registers the custom provider within the system, replaces the default helper from which the defined one inherits.
            </summary>
        </member>
        <member name="M:CMS.RegisterCustomProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="M:CMS.RegisterCustomProviderAttribute.Init">
            <summary>
            Applies the attribute
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomProviderAttribute.MarkedType">
            <summary>
            Document factory
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSHttpApplication">
            <summary>
            Envelope class with request mappings for HttpApplication class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Application_Error(System.Object,System.EventArgs)">
            <summary>
            Application error event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Application_End(System.Object,System.EventArgs)">
            <summary>
            Application end event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Session_Start(System.Object,System.EventArgs)">
            <summary>
            Session start event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Session_End(System.Object,System.EventArgs)">
            <summary>
            Session end event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)">
            <summary>
            Custom cache parameters processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.PreInit">
            <summary>
            Pre-initializes the web application
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.AsyncInit">
            <summary>
            Initializes the asynchronous items
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Init(System.Object,System.EventArgs)">
            <summary>
            Initializes the web application
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.PostStart(System.Object,System.EventArgs)">
            <summary>
            Runs the application post start event in case it wasn't run already
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.SessionStart">
            <summary>
            Fires the session start event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.SessionEnd">
            <summary>
            Fires the session end event
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassNotFoundException">
            <summary>
            This exception is thrown when data class is not found.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="className">Name of the class that wasn't found.</param>
            <param name="objectType">The object type whose class wasn't found.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="className">Name of the class that wasn't found.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="className">Name of the class that wasn't found.</param>
            <param name="objectType">The object type whose class wasn't found.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="P:CMS.DataEngine.DataClassNotFoundException.ClassName">
            <summary>
            Gets name of the class that wasn't found.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassNotFoundException.ObjectType">
            <summary>
            Gets the object type whose class wasn't found.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassSiteInfo">
            <summary>
            ClassSiteInfo data container class.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`1">
            <summary>
            Abstract object info class.
            </summary>
            <summary>
            Abstract object info class.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseInfo">
            <summary>
            Base info class (only carrying the type information).
            </summary>
            <summary>
            Base info class (only carrying the type information).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IInfo">
            <summary>
            Interface for the info objects
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IObjectTypeDriven">
            <summary>
            Interface for object type driven controls
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectTypeDriven.ObjectType">
            <summary>
            Type of the selected objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes in the object to the database.
            </summary>
            <param name="withCollections">If true, also submits the changes in the underlying collections of the object (Children, ChildDependencies, Bindings, OtherBindings)</param>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Update">
            <summary>
            Updates the database entity using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Delete">
            <summary>
            Deletes the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Destroy">
            <summary>
            Destroys the object including its version history using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Insert">
            <summary>
            Inserts the object using appropriate provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.ObjectSettings">
            <summary>
            Object settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.TypeInfo">
            <summary>
            Object type info
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.SITE">
            <summary>
            Site group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.SOCIALANDCOMMUNITY">
            <summary>
            Tools group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.GLOBAL">
            <summary>
            Global group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.CONFIGURATION">
            <summary>
            Administration group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.DEVELOPMENT">
            <summary>
            Development group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.CONTENTMANAGEMENT">
            <summary>
            Content management group
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.op_Implicit(CMS.DataEngine.GeneralizedInfo)~CMS.DataEngine.BaseInfo">
            <summary>
            Implicit operator for conversion from GeneralizedInfo class to BaseInfo
            </summary>
            <param name="info">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.op_Implicit(CMS.DataEngine.BaseInfo)~CMS.DataEngine.GeneralizedInfo">
            <summary>
            Implicit operator for conversion from BaseInfo class to GeneralizedInfo
            </summary>
            <param name="info">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGeneralizedInfo">
            <summary>
            Gets the generalized info for this object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.GroupRemoveDependenciesQueries">
            <summary>
            If true, the delete statements within the remove dependencies procedure are run grouped as much as possible and are run as a single query. If false, 
            each query is run separately.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mInstanceGUID">
            <summary>
            Instance GUID
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.lockObject">
            <summary>
            Object for locking the context for static variables
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mTypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mUpdateTimeStamp">
            <summary>
            If true, timestamp of the object is updated when saved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLogExport">
            <summary>
            If true, export tasks are logged on the object update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mAllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mSupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLogEvents">
            <summary>
            If true, events are logged on the object update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLogIntegration">
            <summary>
            Whether to log integration tasks.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLogWebFarmTasks">
            <summary>
            If true, web farm tasks are logged on the object update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mTouchCacheDependencies">
            <summary>
            If true, cache keys are touched on the object update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mInvalidateObject">
            <summary>
            If true, object is invalidated on the object update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mValidateCodeName">
            <summary>
            If true, the code name is validated upon saving.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mCheckUnique">
            <summary>
            If true, the code name is checked for uniqueness upon saving.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mAllowRestore">
            <summary>
            Indicates if the object supports deleting to recycle bin.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mAllowClone">
            <summary>
            Indicates if the object supports cloning.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectLastAccessed">
            <summary>
            Object last access time (uses internally by providers).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectSiteName">
            <summary>
            Object site name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectParent">
            <summary>
            Object parent.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectThumbnail">
            <summary>
            Object thumbnail metafile.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectIcon">
            <summary>
            Object icon metafile.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectSiteID">
            <summary>
            Object site ID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mCacheParentData">
            <summary>
            If true, the parent data is cached.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mRelatedDataLoaded">
            <summary>
            Related data is loaded.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mRelatedData">
            <summary>
            Custom data connected to the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLocalSettings">
            <summary>
            Local object settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mChildren">
            <summary>
            Child objects of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mChildDependencies">
            <summary>
            Child dependency objects of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mBindings">
            <summary>
            Binding objects of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mOtherBindings">
            <summary>
            Other binding objects of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mReferringObjects">
            <summary>
            Depending objects of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mProcesses">
            <summary>
            Processes of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mScheduledTasks">
            <summary>
            Scheduled tasks of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mRelatedObjects">
            <summary>
            Related objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mProperties">
            <summary>
            Hashtable of properties of all object types, pairs [object type -> properties]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mStatus">
            <summary>
            Status of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mGeneralized">
            <summary>
            Generalized interface of this object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mDisconnectedCount">
            <summary>
            Number of disconnected references for this collection 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mIsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mInstantiated">
            <summary>
            Date and time when  this instance was created.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mLastUpdated">
            <summary>
            Date and time when this instance was last updated.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mCustomizedColumns">
            <summary>
            Customized columns.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mObjectSettings">
            <summary>
            Object settings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsParentValid">
            <summary>
            Returns true if the currently hosted parent object is valid
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitTypeInfo(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes the object by the given type info
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SerializationNotSupported">
            <summary>
            Throws serialization not supported exception
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitFromDataRow(System.Data.DataRow)">
            <summary>
            Initializes the object from the given DataRow
            </summary>
            <param name="dr">DataRow with the data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Loads the object from the given DataRow
            </summary>
            <param name="dr">DataRow to load</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitFromDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Initialized the object from the given data container
            </summary>
            <param name="data">Data to load</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.LoadFromDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Loads the object from the given data container
            </summary>
            <param name="data">Data to load</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.LoadFromArray(System.Object[])">
            <summary>
            Loads the object from the given data array. The order of the fields must match
            </summary>
            <param name="data">Data to load</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdateExternalColumns">
            <summary>
            Goes through the columns which are stored externally and updates DB versions with the data from external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.DeleteExternalColumns(System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and deletes all the files.
            </summary>
            <param name="updateDB">If true, DB is updated with the data from the file before it's deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SaveExternalColumns(System.Boolean,System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and ensures them in the external storage.
            </summary>
            <param name="deleteUnusedFiles">If true, the old files are deleted when the path of the columnFile has changed</param>
            <param name="onlyIfChanged">Tries to modify the external file only if the column is marked as changed</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExternalFiles">
            <summary>
            Goes through the columns which are stored externally and returns the list of particular files this object uses.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExternalColumns">
            <summary>
            Returns the list of columns registered as the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsModifiedExternally">
            <summary>
            Goes through the columns which are stored externally and checks if the data in DB is the same as in external storage. If all the columns are same returns true, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPhysicalFiles(CMS.DataEngine.OperationTypeEnum,System.Boolean)">
            <summary>
            Gets DataSet with physical files.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="binaryData">If true, gets the binary data to the DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdatePhysicalFiles(System.Data.DataSet)">
            <summary>
            Saves physical files.
            </summary>
            <param name="dsFiles">DataSet with files data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetVirtualFileRelativePath(System.String,System.String)">
            <summary>
            Returns virtual relative path for specific column
            Ensures the GUID of the object
            </summary>
            <param name="externalColumnName">External column name</param>
            <param name="versionGuid">Version GUID. If not defined physical path is generated</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Clear">
            <summary>
            Clears hashtable with cached properties of all object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ClearData">
            <summary>
            Clears data from the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureGUID">
            <summary>
            Ensures the GUID of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureLastModified">
            <summary>
            Ensures the last modified time stamp of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes in the object to the database.
            </summary>
            <param name="withCollections">If true, also submits the changes in the underlying collections of the object (Children, ChildDependencies, Bindings, OtherBindings)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Update">
            <summary>
            Updates the database entity using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Delete">
            <summary>
            Deletes the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Destroy">
            <summary>
            Destroys the object including its version history using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Insert">
            <summary>
            Inserts the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckUniqueValues(System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependencyObjectType(CMS.DataEngine.ObjectDependency)">
            <summary>
            Gets dependency object type
            </summary>
            <param name="dep">Object dependency settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureCodeName">
            <summary>
            Ensures the code name of the object if not set
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetAutomaticCodeName">
            <summary>
            Gets the automatic code name for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureUniqueCodeName">
            <summary>
            Ensures that the object has a unique code name within it's context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueCodeName(System.String,System.Int32)">
            <summary>
            Returns the unique code name for the specified object, does not check duplicity if duplicity occurs within the currentObjectId.
            </summary>
            <param name="codeName">Original code name</param>
            <param name="currentObjectId">Current object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueDisplayName(System.String,System.Int32)">
            <summary>
            Returns the unique display name for the specified object.
            </summary>
            <param name="displayName">Original display name</param>
            <param name="currentObjectId">Current object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueName(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the unique code name for the specified object, does not check duplicity if duplicity occurs within the currentObjectId.
            </summary>
            <param name="name">Original code name</param>
            <param name="currentObjectId">Current object ID</param>
            <param name="columnName">Name of the column in which the uniqueness should be preserved (CodeNameColumn/DisplayNameColumn)</param>
            <param name="suffixFormat">Formatting string for the suffix (for example '_{0}' for code name or ' ({0})' for display name</param>
            <param name="suffixFormatRegex">Regex for formatting suffix (needed to remove suffix before finding the possible match in DB)</param>
            <param name="ensureLength">If true, maximal code name length is ensured</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetNameCollisions(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets the list of the name collisions of the given object
            </summary>
            <param name="currentObjectId">Current object ID</param>
            <param name="columnName">Column name</param>
            <param name="searchName">Search name for collision</param>
            <param name="exactMatch">If true, the names must match exactly</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueNameWhereCondition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructs base where condition for checking column value uniqueness. This method can be overriden in child classes to add more conditions.
            </summary>
            <param name="columnName">Name of the column in which the uniqueness should be preserved (CodeNameColumn/DisplayNameColumn)</param>
            <param name="searchName">Name which should be saved in the column (evenutally with suffix)</param>
            <param name="currentObjectId">ID of the current object (this object will be excluded from the search for duplicate names)</param>
            <param name="exactMatch">If true, the names must match exactly</param>
            <returns>Where condition used to check for name uniqueness</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="currentSiteName">Name of the current context site. Permissions are checked on this site only when the site name cannot be obtained directly from the info object (from SiteIDColumn or site binding).</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckPermissionsWithHandler(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. Outcome of this method is determined by combining results of CheckPermissions event and CheckPermissionsInternal method.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="currentSiteName">Name of the current context site. Permissions are checked on this site only when the site name cannot be obtained directly from the info object (from SiteIDColumn or site binding).</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. This method is called automatically after CheckPermissions event was fired.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="siteName">Permissions on this site will be checked</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckDefaultPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo)">
            <summary>
            Check universal permissions for an object
            </summary>
            <param name="permission">Permission to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPermissionObjectType(System.String,System.Collections.Generic.List{CMS.DataEngine.SiteInfoIdentifier}@,System.String@)">
            <summary>
            Returns the permission object type of the object (checks the SiteID column and SiteBinding columns). According to this value, the permission check is performed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGlobalPermissionName(System.String)">
            <summary>
            Returns name of the global permission name corresponding to the given permission name.
            By default, "Global" + permissionName is returned.
            </summary>
            <param name="permissionName">Name of the original permission</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.PermissionCheckException(CMS.DataEngine.PermissionsEnum,System.String,System.Boolean)">
            <summary>
            Fires an exception in case authorization result is false (denied or insignificant)
            </summary>
            <param name="permission">Checked permission</param>
            <param name="siteName">Site name</param>
            <param name="result">Result of the permission check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPermissionToCheck(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Converts PermissionEnum to permission codename which will be checked when CheckPermission() is called. 
            
            Derived classes can override this method to change permission which is checked (for example check for global permissions if object is global).
            </summary>
            <param name="permission">Permission to convert to string</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Converts PermissionEnum to permission codename which will be checked when CheckPermission() is called. 
            
            Derived classes can override this method to change permission which is checked (for example check for global permissions if object is global).
            </summary>
            <param name="permission">Permission to convert to string</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetValueForTranslation(System.String)">
            <summary>
            Returns value for translation services. Returns unmodified field content by default.
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="columnName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDoubleValue(System.String,System.Double)">
            <summary>
            Gets the double value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIntegerValue(System.String,System.Int32)">
            <summary>
            Gets the integer value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDateTimeValue(System.String,System.DateTime)">
            <summary>
            Gets the DateTime value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGuidValue(System.String,System.Guid)">
            <summary>
            Gets the guid value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetBooleanValue(System.String,System.Boolean)">
            <summary>
            Gets the boolean value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetStringValue(System.String,System.String)">
            <summary>
            Gets the string value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ChangedColumns">
            <summary>
            Returns list of column names which values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureHierarchyColumns">
            <summary>
            Ensures the IDPath and Level columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdatePathColumn(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates given path column.
            </summary>
            <param name="parentCol">Column which stores parent object ID</param>
            <param name="column">Path column</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
            <param name="updateChildren">Determines whether the parent object changed and therefore it is necessary to update all children</param>
            <param name="updateLevel">If true, also the level of the object is update according to the path</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIDPathPartLength">
            <summary>
            Returns the length of a part of IDPath.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetNamePathPartColumn">
            <summary>
            Returns the name of the column which is used to build the NamePath
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCurrentObjectPathPart(System.String)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.BuildObjectPath(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="parentColumName">Column of the parent ID</param>
            <param name="pathColumnName">Column name to build the path from</param>
            <param name="levelColumnName">Column name of the level</param>
            <param name="level">Level of the object within the tree hierarchy</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsChildOf(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the object is child of the given object. If parameter parent is null, returns true only if the object is not a child of any object.
            </summary>
            <param name="parent">Parent to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultObject">
            <summary>
            Returns default object of given object type. Has to be overriden in specific info. Returns null by default. Example is UserInfo which returns user specified in the settings or Global Administrator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ToMacroString">
            <summary>
            Returns the default text representation in the macros.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ToString">
            <summary>
            Returns the text representation of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.MacroRepresentation">
            <summary>
            By default, BaseInfo has no special macro representation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdateFromDB(System.Boolean)">
            <summary>
            Updates the data of the object from DB (updates also ObjectSettings).
            </summary>
            <param name="binaryData">Indicates whether to load also binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Disconnect">
            <summary>
            Disconnects the collection from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Reconnect">
            <summary>
            Reconnects the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectIdentifier">
            <summary>
            Gets the object identifier that uniquely identifies the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectKey">
            <summary>
            Gets the unique string key for the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetLockObject">
            <summary>
            Gets the global lock object for all the instances of the object (locked on "objectType_objectId").
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetParent(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Updates the parent object, enables to update the data that is overridden in the parent object before or after it is saved
            </summary>
            <param name="parent">Parent object that will be saved</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TouchParent">
            <summary>
            Updates the parent object by saving it (to update the timestamp).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetParent">
            <summary>
            Returns the parent object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetThumbnailInfo">
            <summary>
            Initialize the thumbnail info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIconInfo">
            <summary>
            Initialize the icon info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CloneObject">
            <summary>
            Creates the clone of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CopyMemoryProperties(CMS.DataEngine.BaseInfo)">
            <summary>
            Copies memory properties
            </summary>
            <param name="infoObj">Target object instance</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the object in the object table.
            </summary>
            <param name="keepThisInstanceValid">If true, this object is marked as updated to behave as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsObjectInvalid(System.DateTime)">
            <summary>
            Returns true if the object is invalid.
            </summary>
            <param name="lastValid">Time when the object was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependencyCacheKeys(System.String,System.String)">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
            <param name="key">Cache key</param>
            <param name="context">Cache context</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.StoreSettings">
            <summary>
            Stores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RestoreSettings">
            <summary>
            Restores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetEditingPageURL">
            <summary>
            Gets the object editing page URL.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsCheckedOutByUser(CMS.Base.IUserInfo)">
            <summary>
            Returns true if the object is checked out by the specified user.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsAvailableOnSite(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks whether info object as available on given site. Available means that object is global or assigned to given site.
            </summary>
            <param name="site">Site identifier: site name or ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureBinaryData">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object when StoreToFileSystem is true.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetBinaryData">
            <summary>
            Returns the BinaryData object of the current instance. Has to be overriden by specific classes. Returns null by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureBinaryData(System.Boolean)">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObject(CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets the object by specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObject(System.Int32)">
            <summary>
            Gets the object by its ID.
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCount(System.String,System.Int32)">
            <summary>
            Gets count of the objects filtered by given where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="topN">Top N records</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetModifiedFrom(System.DateTime,System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Gets the DataSet of all the objects modified from specified date.
            </summary>
            <param name="from">From time</param>
            <param name="parameters">Parameters for the data retrieval</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetData(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDataQuery(System.Boolean,System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)">
            <summary>
            Gets the data query for this object type
            </summary>
            <param name="includeTypeCondition">If true, the type condition is included, otherwise selects all data from the data source</param>
            <param name="parameters">Parameters for the data retrieval</param>
            <param name="checkLicense">If true, the license is checked for this query</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSiblingsQueryInternal(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Gets the parametrized query to get siblings of the object (If there is no parent-child hierarchy, query is parametrized for all objects)
            </summary>
            <param name="parameters">Parameters for the data retrieval</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExistingWhereCondition(System.Boolean)">
            <summary>
            Gets a where condition to find an existing object based on current object
            </summary>
            <param name="applyTypeCondition">If true, type condition is applied to the resulting where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExistingWhereCondition">
            <summary>
            Gets a where condition to find an existing object based on current object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetParentWhereCondition">
            <summary>
            Gets the where condition for the parent object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetChildWhereCondition(System.String,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSiteWhereCondition">
            <summary>
            Gets the site where condition for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGroupWhereCondition">
            <summary>
            Gets the group where condition for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultDataWhereCondition(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the where condition to filter out the default installation data
            </summary>
            <param name="recursive">Indicates whether where condition should contain further dependency conditions.</param>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddDependencyDefaultDataWhereCondition(System.String,CMS.DataEngine.BaseInfo,System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds default data where condition of given dependency on given <paramref name="dependencyIDColumn"/> to given <paramref name="where"/> condition.
            Returns original <paramref name="where"/> condition if no such dependency exists.
            </summary>
            <param name="where">Original where condition</param>
            <param name="dependencyInfo"><see cref="T:CMS.DataEngine.BaseInfo"/> of dependency object type.</param>
            <param name="dependencyIDColumn">Column with ID to specified dependency object.</param>
            <param name="recursive">Indicates whether added dependency where condition should process its dependencies</param>
            <param name="op">Operator used to connect old where with the new one. By default this is 'AND'.</param>
            <param name="dependencyTargetIDColumn">Name of the column on dependency target object that contains dependency ID. By default ID column of the target object is used.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddColumnPrefixesWhereCondition(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds restriction to given <paramref name="where" /> filtering out all rows where given column starts with one of excluded prefixes found in TypeInfo default data settings.
            </summary>
            <param name="where">Original where condition</param>
            <param name="columnName">Column that must not start with excluded prefixes.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultDataExportColumns">
            <summary>
            Returns names of all columns that should be exported with default data as a comma separated string. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ExportDefaultData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports the default object installation data
            </summary>
            <param name="filePath">File path for the export</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the default object installation data
            </summary>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.WriteDefaultData(System.String,System.Data.DataSet)">
            <summary>
            Writes the default object installation data into xml file
            </summary>
            <param name="filePath">File path for the export</param>
            <param name="data">Default data to write</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the object value to the nullable column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
            <param name="condition">Condition for the valid value, if false, NULL is saved</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetValue(System.String,System.Object,System.Object)">
            <summary>
            Sets the object value to the nullable column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
            <param name="nullValue">Null value, if matched, NULL is saved</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetValue(System.String)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCustomProperties">
            <summary>
            Gets list of custom properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetRegisteredProperties">
            <summary>
            Gets list of registered properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TryGetProperty(System.String,System.Object@,System.Boolean)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <param name="notNull">If true, the property attempts to return non-null values, at least it returns the empty object of the correct type</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectTypeForColumn(System.String)">
            <summary>
            Gets the object type for the given column or null if the object type is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present or at least property exists)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetProperty(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ClearCache">
            <summary>
            Clears the nested cached objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectChildren">
            <summary>
            Gets the object children repository
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetChildDependencies">
            <summary>
            Gets the child dependencies repository
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetReferringObjects">
            <summary>
            Gets the repository of depending objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetBindings">
            <summary>
            Gets the bindings repository for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOtherBindings">
            <summary>
            Gets the repository of other bindings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIconUrl(System.Web.UI.Page,System.String)">
            <summary>
            Gets the object icon URL
            </summary>
            <param name="page">Page for which the image is requested</param>
            <param name="iconSet">Requested icon set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetThumbnailUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object thumbnail URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIconUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object icon URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetMetaFileUrl(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object meta file URL
            </summary>
            <param name="columnName">Meta file column name</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsClone(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsClone(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,System.Boolean)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="isRoot">True only for the object on which the public method was called (originator of the call)</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AllowCloneToOtherSite(CMS.DataEngine.CloneSettings,System.String,System.Boolean)">
            <summary>
            Determines if given collection of binding can be cloned (returns false for bindings of site objects when cloning to other site is requested).
            </summary>
            <param name="settings">Clone settings</param>
            <param name="bindingObjectType">Object type of the binding object type</param>
            <param name="isOtherBinding">Determines whether it's other binding or binding</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            This method is called on cloned object prepared in memory by InsertAsClone method. 
            Override if you need to do further actions before inserting actual object to DB (insert special objects, modify foreign keys, copy files, etc.).
            Calls Insert() by default.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsClonePostprocessing(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            This method is called once the object is completely cloned (with all children, bindings, etc.). 
            Override if you need to do further actions after the object has been cloned.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitObjectsOrder(System.String)">
            <summary>
            Inits the proper item order so the order is consistent.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CopyExternalColumns(CMS.DataEngine.BaseInfo)">
            <summary>
            Copy value of external columns directly via set value
            </summary>
            <param name="target">Target info class</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitObjectsOrderPostprocessing">
            <summary>
            Method called after the InitObjectOrder method is called. Override this to do further actions after order initialization. Does nothing by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetLastObjectOrder(System.String)">
            <summary>
            Returns number which will be the last order within all the other items (according to Parent, Group and Site settings).
            I.e. returns largest existing order + 1.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SortAlphabetically(System.Boolean,System.String,System.String)">
            <summary>
            Sort objects alphabetically.
            </summary>
            <param name="ascending">If true the order will be ascending (default is true)</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObjectAlphabeticalOrder(System.String,System.String)">
            <summary>
            Moves the object to the right position according to the custom order.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObjectOrder(System.Int32,System.Boolean,System.String)">
            <summary>
            Moves the object to the specified order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="targetOrder">Desired order of the object</param>
            <param name="relativeOrder">If true, the targetOrder param is taken as a relative order from current order position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectOrderID">
            <summary>
            Returns ID of the item being ordered. By default return ObjectID. This is overridden in TreeNode, where NodeID has to be supplied.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObjectOrderPostprocessing">
            <summary>
            Method which is called after the order of the object was changed. Generates staging tasks and webfarm tasks by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIdentityWhereCondition">
            <summary>
            Gets indentity where condition to identify the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOrderQueryParameters(System.String,System.String,System.Boolean)">
            <summary>
            Creates QueryDataParameters with special macros for object order management.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Name of the column by which the order should be initialized (if not set, displayname column is used)</param>
            <param name="asc">If true the order will be ascending (default is true)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckDependencies(System.Boolean)">
            <summary>
            Checks the object dependencies. Returns true if there is at least one dependency.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are checked, if true required ObjectDependency constraint is ignored</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependenciesNames(System.Boolean,System.Int32)">
            <summary>
            Checks the object dependencies. Returns a list of object names which depend on this object. First tries to execute checkdependencies query, if not found, an automatic process is executed.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are returned, if true required ObjectDependency constraint is ignored</param>
            <param name="topN">Number of dependencies to return, 0 means no limitation</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependenciesNamesAuto(System.Boolean,System.Int32)">
            <summary>
            Checks the object dependencies. Returns a list of object names which depend on this object.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are returned, if true required ObjectDependency constraint is ignored</param>
            <param name="topN">Number of dependencies to return, 0 means no limitation</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependencies(System.Boolean,System.Int32)">
            <summary>
            Returns list of objects which have (direct) the dependency on this object.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are returned, if true required ObjectDependency constraint is ignored</param>
            <param name="topN">Number of dependencies to return, 0 means no limitation (0 is the default value)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddItemsToDependecyList(System.Data.DataSet,System.String,System.Collections.Generic.List{CMS.DataEngine.DependencyInfo},System.Int32)">
            <summary>
            Adds items to the list, reflects topN setting.
            </summary>
            <param name="ds">DataSet with data to add</param>
            <param name="objType">Object type of the data</param>
            <param name="result">List to add the items to</param>
            <param name="topN">Maximal allowed number of items in the list</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetFullObjectName(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the name of the object within its parent hierarchy.
            </summary>
            <param name="includeParent">If true, the parent object name is included to the object name</param>
            <param name="includeSite">If true, the site information is included if available</param>
            <param name="includeGroup">If true, the group information is included if available</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetFullObjectName(System.String,System.Int32,System.String)">
            <summary>
            Returns formated name of the given object using specified resource string.
            </summary>
            <param name="objectType">Type of the object</param>
            <param name="objectId">ID of the object</param>
            <param name="resString">Formatting resource string</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies. First tries to execute removedependencies query, if not found, automatic process is executed.
            </summary>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearHashtables">If true, hashtables of all objecttypes which were potentionally modified are cleared</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RemoveObjectDependenciesAuto(System.Boolean,System.Boolean)">
            <summary>
            Automatic process of remove dependencies procedure.
            </summary>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearHashtables">If true, hashtables of all objecttypes which were potentionally modified are cleared</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RemoveUsingAPI(System.String,System.String)">
            <summary>
            Removes given subest of objects by API.
            </summary>
            <param name="objectType">ObjectType to handle</param>
            <param name="where">WHERE defining the subset of the objects to be deleted via API</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ExecuteRemoveDependencyQuery(System.String,System.String)">
            <summary>
            Executes given query text using specified connection string.
            </summary>
            <param name="removeDependenciesText">Remove dependency query text</param>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetRemoveDependenciesList(System.Boolean,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of couples objecttype-querytext-connectionstring-useapiflag in correct order in which it should be processed.
            </summary>
            <param name="baseWhere">Base where condition which should be used while generating the remove dependencies procedure</param>
            <param name="getAll">If true all dependencies chain is returned, if false, only required dependencies are returned (according to required ObjectDependencies parameter)</param>
            <param name="connStringContext">Connection string name which is currently being used to track changes in connection string</param>
            <param name="processed">List of already processed object types (to avoid infinite loop)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ProcessDependency(System.Boolean,System.String,System.String,CMS.DataEngine.BaseInfo,System.String,System.String,CMS.DataEngine.ObjectDependencyEnum,System.Collections.Generic.List{System.String})">
            <summary>
            Processes a single dependency
            </summary>
            <param name="getAll">If true all dependencies chain is returned, if false, only required dependencies are returned (according to required ObjectDependencies parameter)</param>
            <param name="baseWhere">Base where condition which should be used while generating the remove dependencies procedure</param>
            <param name="connStringContext">Connection string name which is currently being used to track changes in connection string</param>
            <param name="obj">Dependency object</param>
            <param name="depObjType">Dependency object type</param>
            <param name="depColumn">Dependency column</param>
            <param name="required">Dependency required parameter</param>
            <param name="processed">List of already processed object types (to avoid infinite loop)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSearchID">
            <summary>
            Gets the id column value which is used as search id by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureObjectSettings">
            <summary>
            Ensures the object settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.HasData">
            <summary>
            Returns true if the object has it's data storage initialized already
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsGlobal">
            <summary>
            Returns true if the object is global object. False if the object belongs to specific site only.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.TimeStampColumn">
            <summary>
            Time stamp column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GUIDColumn">
            <summary>
            GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IDColumn">
            <summary>
            ID column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CodeNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.DisplayNameColumn">
            <summary>
            Display name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.SiteIDColumn">
            <summary>
            Site ID column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ParentIDColumn">
            <summary>
            Parent ID column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CategoryIDColumn">
            <summary>
            Category ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.OrderColumn">
            <summary>
            Order column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ParentObjectType">
            <summary>
            Parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ChildObjectTypes">
            <summary>
            Child object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ChildDependencyColumns">
            <summary>
            Name of the columns (separated by semicolon) of object dependencies which should be included into the parent data (for example class data for BizForms).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.BindingObjectTypes">
            <summary>
            Binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.OtherBindingObjectTypes">
            <summary>
            Other binding types (ObjectType constants separated by semicolon) - binding types where this object participate but is not parent object of those binding types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsObjectValid">
            <summary>
            Returns true if the object is considered valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.InstanceGUID">
            <summary>
            Returns the object instance GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsDisconnected">
            <summary>
            Returns true if this collection is disconnected from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IgnoreExternalColumns">
            <summary>
            If true, externally stored columns are ignored and are stored normally in DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectStatus">
            <summary>
            Returns the current status of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CacheParentData">
            <summary>
            If true, the parent object data is cached within object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectLastModified">
            <summary>
            Last modified time.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectGUID">
            <summary>
            Object GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectVersionGUID">
            <summary>
            Object version GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSiteID">
            <summary>
            Object site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectParentID">
            <summary>
            Object parent ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectGroupID">
            <summary>
            Object community group ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectDisplayName">
            <summary>
            Object display name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectCodeName">
            <summary>
            Object code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectFullName">
            <summary>
            Object full name if exists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectThumbnailGUID">
            <summary>
            Object thumbnail GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIconGUID">
            <summary>
            Object icon GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectParent">
            <summary>
            Object parent.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectCategory">
            <summary>
            Object category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSite">
            <summary>
            Returns the object site.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectOrder">
            <summary>
            Returns the order of the object among the other objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CustomizedColumns">
            <summary>
            Gets the list of customized columns in current object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIsCustom">
            <summary>
            Indicates if object is custom.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIsCustomized">
            <summary>
            Indicates if object is customized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIsNested">
            <summary>
            Returns true if the object is created within wrapping object and figures as its part (e.g., partial classes for TreeNode class).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSiteName">
            <summary>
            Object site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectLastAccessed">
            <summary>
            Object last access time (uses internally by providers).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.UpdateTimeStamp">
            <summary>
            If true, timestamp of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogExport">
            <summary>
            If true, export tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported. Default false
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.VersioningEnabled">
            <summary>
            Indicates if the object versioning is enabled by the settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogEvents">
            <summary>
            If true, Events tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogIntegration">
            <summary>
            If true, integration tasks are being logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogWebFarmTasks">
            <summary>
            If true, web farm tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.TouchCacheDependencies">
            <summary>
            If true, cache dependencies are touched when the object is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.InvalidateObject">
            <summary>
            If true, object is invalidated when the object is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.InvalidateObjectInternal">
            <summary>
            If true, object is invalidated when the object is changed.
            </summary>
            <remarks>
            Will be removed along with <see cref="P:CMS.DataEngine.BaseInfo.InvalidateObject"/>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.InvalidateObjectInternalExplicit">
            <summary>
            Stored value wrapper for <see cref="P:CMS.DataEngine.BaseInfo.InvalidateObjectInternal"/>.
            </summary>
            <remarks>
            Will be removed along with <see cref="P:CMS.DataEngine.BaseInfo.InvalidateObject"/>.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsCheckedOut">
            <summary>
            Indicates if the object is checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsCheckedOutByUserID">
            <summary>
            Gets ID of the user who checked the object out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsClone">
            <summary>
            Indicates if the object is clone.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ValidateCodeName">
            <summary>
            If true, the code name is validated upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CheckUnique">
            <summary>
            If true, the code name is checked for uniqueness upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowRestore">
            <summary>
            Indicates if the object supports deleting to recycle bin.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowClone">
            <summary>
            Indicates if the object supports cloning.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSettings">
            <summary>
            Object settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.TypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Parent">
            <summary>
            Object parent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Site">
            <summary>
            Object site
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Thumbnail">
            <summary>
            Object thumbnail
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Icon">
            <summary>
            Object icon
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AssignedSites">
            <summary>
            Collection of the sites to which the object is associated via site bindings (M:N relationships).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Bindings">
            <summary>
            Collection of the binding objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.OtherBindings">
            <summary>
            Collection of the binding objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ReferringObjects">
            <summary>
            Collection of the objects depending on this object (object which have FK to this object).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Children">
            <summary>
            Collection of the child objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ChildDependencies">
            <summary>
            Collection of the child dependencies for the given object. These are objects which should be included into the parent data (for example class data for BizForms), but aren't direct child of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectThumbnail">
            <summary>
            Object thumbnail metafile.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIcon">
            <summary>
            Object icon metafile.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.MetaFiles">
            <summary>
            Collection of the metafiles belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Processes">
            <summary>
            Collection of the processes belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ScheduledTasks">
            <summary>
            Collection of the scheduled tasks belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.RelatedObjects">
            <summary>
            Related objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.RelatedData">
            <summary>
            Custom data connected to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.PrioritizedProperties">
            <summary>
            Gets the list of properties which should be prioritized in the macro controls (IntelliSense, MacroTree).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Name">
            <summary>
            Returns the code name of the object
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper">
            <summary>
            Info object wrapper for generalized access
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsAvailableOnSite(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks whether info object as availabe on given site. Available means that object is global or assigned to given site.
            </summary>
            <param name="site">Site identifier: site name or ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetFullObjectName(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the name of the object within its parent hierarchy.
            </summary>
            <param name="includeParent">If true, the parent object name is included to the object name</param>
            <param name="includeSite">If true, the site information is included if available</param>
            <param name="includeGroup">If true, the group information is included if available</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetVirtualFileRelativePath(System.String,System.String)">
            <summary>
            Returns virtual relative path for specific column
            </summary>
            <param name="externalColumnName">External column name</param>
            <param name="versionGuid">Version GUID. If not defined physical path is generated</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObject(CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets the object by specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObject(System.String)">
            <summary>
            Gets the object by specified where condition.
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObject(System.Int32)">
            <summary>
            Gets the object by its ID.
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetChildWhereCondition(System.String,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDataQuery(System.Boolean,System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)">
            <summary>
            Gets the data query for this object type
            </summary>
            <param name="includeTypeCondition">If true, the type condition is included, otherwise selects all data from the data source</param>
            <param name="parameters">Parameters for the data retrieval</param>
            <param name="checkLicense">If true, the license is checked for this query</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetModifiedFrom(System.DateTime,System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Gets the DataSet of all the objects modified from specified date.
            </summary>
            <param name="from">From time</param>
            <param name="parameters">Parameters for the data retrieval</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetData(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetCount(System.String,System.Int32)">
            <summary>
            Gets count of the objects filtered by given where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="topN">Top N records</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateFromDB(System.Boolean)">
            <summary>
            Updates the data of the object from DB (updates also ObjectSettings).
            </summary>
            <param name="binaryData">Indicates whether to load also binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes in the object to the database.
            </summary>
            <param name="withCollections">If true, also submits the changes in the underlying collections of the object (Children, ChildDependencies, Bindings, OtherBindings)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetParent">
            <summary>
            Returns the parent object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TouchParent">
            <summary>
            Updates the parent object by saving it (to update the timestamp).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependencyCacheKeys(System.String,System.String)">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
            <param name="key">Cache key</param>
            <param name="context">Cache context</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetPhysicalFiles(CMS.DataEngine.OperationTypeEnum,System.Boolean)">
            <summary>
            Gets DataSet with physical files for current object.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="binaryData">Get the binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdatePhysicalFiles(System.Data.DataSet)">
            <summary>
            Updates physical files in given DataSet for current object.
            </summary>
            <param name="dsFiles">DataSet with files data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.StoreSettings">
            <summary>
            Stores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RestoreSettings">
            <summary>
            Restores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObjectKey">
            <summary>
            Gets the unique string key for the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetLockObject">
            <summary>
            Gets the global lock object for all the instances of the object (locked on "objectType_objectId").
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AnyItemChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if any of the specified column names has changed.
            </summary>
            <param name="columnNames">Column names</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DataChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Disconnect">
            <summary>
            Disconnects the object from database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Reconnect">
            <summary>
            Reconnects the object to database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureCodeName">
            <summary>
            Ensures the code name of the object if not set
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureGUID">
            <summary>
            Ensures the GUID of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetBinaryData">
            <summary>
            Returns the BinaryData object of the current instance. Has to be overriden by specific classes. Returns null by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureBinaryData">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object when StoreToFileSystem is true.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureBinaryData(System.Boolean)">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckUniqueValues(System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Invalidate(System.Boolean)">
            <summary>
            Invalidates the object in the object table.
            </summary>
            <param name="keepThisInstanceValid">If true, this object is marked as updated to behave as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsObjectInvalid(System.DateTime)">
            <summary>
            Returns true if the object is invalid.
            </summary>
            <param name="lastValid">Time when the object was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Clone">
            <summary>
            Returns the clone 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InsertAsClone(CMS.DataEngine.CloneSettings)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InsertAsClone(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MoveObjectUp(System.String)">
            <summary>
            Moves the object up within the object order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MoveObjectDown(System.String)">
            <summary>
            Moves the object down within the object order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetObjectAlphabeticalOrder(System.String,System.String)">
            <summary>
            Moves the object to the right position according to the custom order.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetObjectOrder(System.Int32,System.Boolean,System.String)">
            <summary>
            Moves the object to the specified order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="targetOrder">Desired order of the object</param>
            <param name="relativeOrder">If true, the targetOrder parameter is taken as a relative order from current order position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetLastObjectOrder(System.String)">
            <summary>
            Returns number which will be the last order within all the other items (according to Parent, Group and Site settings).
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InitObjectsOrder(System.String)">
            <summary>
            Inits the proper item order so the order is consistent.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SortAlphabetically(System.Boolean,System.String,System.String)">
            <summary>
            Moves the object to the right position according to the custom order.
            </summary>
            <param name="asc">If true the order will be ascending (default is true)</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckDependencies(System.Boolean)">
            <summary>
            Checks the object dependencies. Returns true if there is at least one dependency.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are checked, if true required ObjectDependency constraint is ignored</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependenciesNames(System.Boolean,System.Int32)">
            <summary>
            Checks the object dependencies. Returns a list of object names which depend on this object. First tries to execute checkdependencies query, if not found, an automatic process is executed.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are returned, if true required ObjectDependency constraint is ignored</param>
            <param name="topN">Number of dependencies to return, 0 means no limitation</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependencies(System.Boolean,System.Int32)">
            <summary>
            Returns list of objects which have the (direct) dependency on this object.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are returned, if true required ObjectDependency constraint is ignored</param>
            <param name="topN">Number of dependencies to return, 0 means no limitation (0 is the default value)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureUniqueCodeName">
            <summary>
            Ensures that the object has a unique code name within it's context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetUniqueCodeName">
            <summary>
            Returns the unique code name generated from current object code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetUniqueDisplayName">
            <summary>
            Returns the unique display name generated from current object display name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetUniqueName(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the unique code name for the specified object, does not check duplicity if duplicity occurs within the currentObjectId.
            </summary>
            <param name="name">Original code name</param>
            <param name="currentObjectId">Current object ID</param>
            <param name="columnName">Name of the column in which the uniqueness should be preserved (CodeNameColumn/DisplayNameColumn)</param>
            <param name="suffixFormat">Formatting string for the suffix (for example '_{0}' for code name or ' ({0})' for display name</param>
            <param name="suffixFormatRegex">Regex for formatting suffix (needed to remove suffix before finding the possible match in DB)</param>
            <param name="ensureLength">If true, maximal code name length is ensured</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetValueForTranslation(System.String)">
            <summary>
            Returns value for translation services. Returns unmodified field content by default.
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetIconUrl(System.Web.UI.Page,System.String)">
            <summary>
            Gets the object icon URL
            </summary>
            <param name="page">Page for which the image is requested</param>
            <param name="iconSet">Requested icon set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetThumbnailUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object thumbnail URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetIconUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object icon URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetEditingPageURL">
            <summary>
            Gets the object editing page URL.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ResetChanges(System.Boolean)">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
            <param name="asUnchanged">If true, the changed columns won't contain anything. If false, the previous values are discarded, but all the columns will be marked as changed.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetColumnType(System.String)">
            <summary>
            Gets the column type.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.NotSupported">
            <summary>
            Throws the not supported exception
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependencyObjectType(CMS.DataEngine.ObjectDependency)">
            <summary>
            Gets dependency object type
            </summary>
            <param name="dep">Object dependency settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsDynamicDependency(CMS.DataEngine.ObjectDependency)">
            <summary>
            Indicates if dependency object type id dynamic
            </summary>
            <param name="dep">Object dependency settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ExportDefaultData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports the default object installation data
            </summary>
            <param name="filePath">File path for the export</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDefaultDataWhereCondition(System.Boolean)">
            <summary>
            Gets where condition for default data according to TypeInfo configuration.
            </summary>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateExternalColumns">
            <summary>
            Goes through the columns which are stored externally and updates DB versions with the data from external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DeleteExternalColumns(System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and deletes all the files.
            </summary>
            <param name="updateDB">If true, DB is updated with the data from the file before it's deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SaveExternalColumns">
            <summary>
            Goes through the columns which are stored externally and ensures them in the external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetExternalFiles">
            <summary>
            Goes through the columns which are stored externally and returns the list of particular files this object uses.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetExternalColumns">
            <summary>
            Returns the list of columns registered as the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsModifiedExternally">
            <summary>
            Goes through the columns which are stored externally and checkes if the data in DB is the same as in external storage. If all the columns are same returns true, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCheckedOutByUser(CMS.Base.IUserInfo)">
            <summary>
            Returns true if the object is checked out by the specified user.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDefaultObject">
            <summary>
            Returns default object of given object type. Returns null by default. Example is UserInfo which returns user specified in the settings or Global Administrator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsChildOf(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the object is child of the given object. If parameter parent is null, returns true only if the object is not a child of any object.
            </summary>
            <param name="parent">Parent to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdatePathColumn(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates given path column.
            </summary>
            <param name="parentCol">Column which stores parent object ID</param>
            <param name="column">Path column</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
            <param name="updateChildren">Determines whether the parent object changed and therefore it is necessary to update all children</param>
            <param name="updateLevel">If true, also the level of the object is update according to the path</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DeleteData">
            <summary>
            Deletes the object from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetProperty(System.String)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TryGetProperty(System.String,System.Object@,System.Boolean)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <param name="notNull">If true, the property attempts to return non-null values, at least it returns the empty object of the correct type</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CacheParentData">
            <summary>
            If true, the parent object data is cached within object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsDisconnected">
            <summary>
            Returns true if the object is disconnected from the data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TypeInfo">
            <summary>
            Type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MainObject">
            <summary>
            Main object for this general access object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IgnoreExternalColumns">
            <summary>
            If true, externally stored columns are ignored and are stored normally in DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IDColumn">
            <summary>
            ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CodeNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DisplayNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TimeStampColumn">
            <summary>
            Time stamp column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GUIDColumn">
            <summary>
            GUID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SiteIDColumn">
            <summary>
            Site ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ParentIDColumn">
            <summary>
            Parent ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CategoryIDColumn">
            <summary>
            Category ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectLastModified">
            <summary>
            Object last modified time.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectGUID">
            <summary>
            Object GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectVersionGUID">
            <summary>
            Object version GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectSiteID">
            <summary>
            Object site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectParentID">
            <summary>
            Object parent ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectGroupID">
            <summary>
            Object group ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectCodeName">
            <summary>
            Object code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectFullName">
            <summary>
            Object full name if exists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectDisplayName">
            <summary>
            Object name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectSiteName">
            <summary>
            Object site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectThumbnailGUID">
            <summary>
            Object thumbnail GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIconGUID">
            <summary>
            Object icon GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectLastAccessed">
            <summary>
            Object last access time (uses internally by providers).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectOrder">
            <summary>
            Returns the order of the object among the other objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ParentObjectType">
            <summary>
            Parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ChildObjectTypes">
            <summary>
            Child object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ChildDependencyColumns">
            <summary>
            Child dependency columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.BindingObjectTypes">
            <summary>
            Binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.OtherBindingObjectTypes">
            <summary>
            Other binding types (ObjectType constants separated by semicolon) - binding types where this object participate but is not parent object of those binding types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Children">
            <summary>
            The collection of the child objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ChildDependencies">
            <summary>
            Collection of the child dependencies for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Bindings">
            <summary>
            The collection of the binding objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.OtherBindings">
            <summary>
            The collection of the other binding objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MetaFiles">
            <summary>
            The collection of the metafiles of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Processes">
            <summary>
            The collection of the processes of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ScheduledTasks">
            <summary>
            The collection of the scheduled tasks of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RelatedObjects">
            <summary>
            The collection of the relationships of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ReferringObjects">
            <summary>
            Collection of the objects depending on this object (object which have FK to this object).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateTimeStamp">
            <summary>
            If true, time stamp is updated on object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogExport">
            <summary>
            If true, export tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.VersioningEnabled">
            <summary>
            Indicates if the object versioning is enabled by the settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogEvents">
            <summary>
            If true, events are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogIntegration">
            <summary>
            If true, integration tasks are being logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogWebFarmTasks">
            <summary>
            If true, web farm tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TouchCacheDependencies">
            <summary>
            If true, cache dependencies are touched when the object is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InvalidateObject">
            <summary>
            If true, object is invalidated when the object is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCheckedOut">
            <summary>
            Indicates if the object is checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCheckedOutByUserID">
            <summary>
            Gets ID of the user who checked the object out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsClone">
            <summary>
            Indicates if the object is clone.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ValidateCodeName">
            <summary>
            If true, the code name is validated upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckUnique">
            <summary>
            If true, the code name is checked for uniqueness upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AllowRestore">
            <summary>
            Indicates if the object supports deleting to recycle bin.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AllowClone">
            <summary>
            Indicates if the object supports cloning.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsObjectValid">
            <summary>
            Returns true if the object is considered valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectCategory">
            <summary>
            Object category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectParent">
            <summary>
            Object parent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectThumbnail">
            <summary>
            Object thumbnail
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIcon">
            <summary>
            Object icon
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.HasData">
            <summary>
            Returns true if the object has it's data storage initialized already
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.HasChanged">
            <summary>
            Returns true if the object has changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIsNested">
            <summary>
            Returns true if the object is created within wrapping object and figures as its part (e.g., partial classes for TreeNode class). 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.PrioritizedProperties">
            <summary>
            Gets the list of properties which should be prioritized in the macro controls (IntelliSense, MacroTree).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CustomizedColumns">
            <summary>
            Gets the list of customized columns in current object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIsCustom">
            <summary>
            Indicates if object is custom (created by customer).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIsCustomized">
            <summary>
            Indicates if object is customized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RelatedData">
            <summary>
            Custom data connected to the object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseInfo.PermissionObjectType">
            <summary>
            Type of the object for permission check.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.PermissionObjectType.OnlyAdmin">
            <summary>
            Only global administrator can access the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.PermissionObjectType.CurrentSite">
            <summary>
            Permission should be checked against current site.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.PermissionObjectType.SpecifiedSite">
            <summary>
            Permission should be checked against one of the specified sites (at least one has to be allowed for the user to be able to access the object).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISearchable">
            <summary>
            Interface for search.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchDocument(CMS.DataEngine.ISearchIndexInfo)">
            <summary>
            Returns iDocument with dependence on current object type and index.
            </summary>
            <param name="index">Search index</param>
            <returns>Returns iDocument</returns>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchFields(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Returns search fields collection. When existing collection is passed as argument, fields will be added to that collection.
            When collection is not passed, new collection will be created and return. 
            Collection will contain field values only when collection with StoreValues property set to true is passed to the method.
            When method creates new collection, it is created with StoreValues property set to false.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchImageUrl(System.String,System.String)">
            <summary>
            Returns URL to current search result item.
            </summary>
            <param name="id">ID of the item</param>
            <param name="image">Image</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchID">
            <summary>
            Gets the search item unique id.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="P:CMS.DataEngine.ISearchable.SearchType">
            <summary>
            Gets or sets the search object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mRegisteredProperties">
            <summary>
            Registered properties
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mLocalProperties">
            <summary>
            Local properties
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mExternalColumnSettings">
            <summary>
            Hashtable of external column settings (cached settings indexed by column name which are registered in specific InfoObjects).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mLocalColumnNames">
            <summary>
            Local column names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mDataClass">
            <summary>
            Data class with the SiteInfo data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mUpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mDeleteFiles">
            <summary>
            If true, all physical files will be deleted when object will be deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mStoreContentField">
            <summary>
            Indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfo`1.mGenerator">
            <summary>
            Object generator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetGeneralizedInfo">
            <summary>
            Gets the generalized info for this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteData">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteRelatedData">
            <summary>
            Deletes the related data of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteMetafiles">
            <summary>
            Deletes the metafiles related to this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.UpsertData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.EnsureSystemFields">
            <summary>
            Ensures the system fields for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.FinalizeSaving">
            <summary>
            Finalizes saving of the object by performing extra actions
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.CopyProperties(`0)">
            <summary>
            Copies memory properties
            </summary>
            <param name="infoObj">Target object instance</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.Clone">
            <summary>
            Creates a clone of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Boolean)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="createData">If true, data structure of the object is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="dr">DataRow with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="sourceData">Source data</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.EnsureData(System.Boolean,System.Boolean)">
            <summary>
            Creates a new data class container within the object
            </summary>
            <param name="forceNew">If true, new data class is created</param>
            <param name="loadDefault">If true, the process loads the default data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Loads the object data from given DataRow.
            </summary>
            <param name="dr">Data row with the data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.LoadFromDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Container with the data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.LoadFromArray(System.Object[])">
            <summary>
            Loads the object data from given data reader (current reader record).
            </summary>
            <param name="data">Field array with the data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.CloneObject">
            <summary>
            Creates the clone of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ReplaceWith``1">
            <summary>
            Initiates the system to replace the info type with a specified type that must inherit from the original info type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.NewInternal(System.Data.DataRow)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="dr">Data row with the data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(System.String)">
            <summary>
            Creates new object of the given class based on the given object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(System.Action{`0})">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="initializer">Optional initializer to set additional properties to the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(System.Data.DataRow)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="dr">Data row with the data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(CMS.Base.IDataContainer)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="dc">Container with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetLocalProperties">
            <summary>
            Gets the list of local properties for particular object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetLocalColumnNames">
            <summary>
            Gets the list of local column names for particular object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.CombineColumnNames(System.Collections.ICollection[])">
            <summary>
            Returns column names
            </summary>
            <param name="names">Values</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.CombineColumnNames(System.String[])">
            <summary>
            Returns column names
            </summary>
            <param name="names">Values</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetValue(System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetValue``1(System.String,``0)">
            <summary>
            Gets the field value converted to a specified type.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value to use if the value is empty or not convertible to a specified type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetValue(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.TouchKeys">
            <summary>
            Touches the cache dependency keys of the object to flush the dependent cache items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ResetChanges(System.Boolean)">
            <summary>
            Resets the object changes and keeps the new values as unchanged accoring to the asUnchanged parameter.
            </summary>
            <param name="asUnchanged">If true, the changed columns won't contain anything. If false, the previous values are discarded, but all the columns will be marked as changed.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.AnyItemChanged(System.String[])">
            <summary>
            Returns true if any of specified columns changed.
            </summary>
            <param name="columnNames">Column names</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ChangedColumns">
            <summary>
            Returns list of column names which values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetObjectOrderPostprocessing">
            <summary>
            Method which is called after the order of the object was changed. Generates staging tasks and webfarm tasks by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RegisterProperty``1(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RegisterProperty(System.String,System.Object,System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given parameterized property to the object.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="parameter">Parameter for the lambda expression</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RegisterProperty(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetRegisteredProperties">
            <summary>
            Gets list of registered properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetAutomaticProperty(System.String)">
            <summary>
            Tries to get the automatic property value for underlying object
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.TryGetAutomaticProperty(System.String,System.Object@)">
            <summary>
            Tries to get the automatic property value for underlying object
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returning value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.HasAutomaticProperty(System.String)">
            <summary>
            Returns true if the given column provides an automatic property to access it's binding.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetExternalColumnSettings(System.String)">
            <summary>
            Returns settings for external storage of the column. Returns null by default (which causes the default settings to be used in the external column data storage process).
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RegisterExternalColumn(System.String,CMS.DataEngine.ExternalColumnSettings{`0})">
            <summary>
            Registers external column settings to the hash table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.RegisterExternalColumns">
            <summary>
            Registers external column settings to the hash table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetExternalPath(System.String,CMS.DataEngine.ExternalColumnSettings{`0})">
            <summary>
            Returns path to the external storage with data of the given column. If the column data is not stored in the external storage, returns null.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="settings">Settings of the external storage of the column data (if null, default settings are used)</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetFileInfo(System.String)">
            <summary>
            Returns FileInfo object from external storage if exists.
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetPhysicalPath(System.String)">
            <summary>
            Returns physical path or null if can't be retrieved.
            </summary>
            <param name="path">Path to process</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetExternalColumnData(System.String,System.Boolean)">
            <summary>
            Returns the column data from external storage if exists.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="applyGetTransformation">If true, GetTransformation is applied before the result is returned</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SetExternalColumnData(System.String,System.Object,System.Boolean)">
            <summary>
            Saves the column data to the external storage if exists. Returns true if data was stored in external storage and should not be stored also in DB. If data should be stored in DB, returns false.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="data">Data to save externally</param>
            <param name="deleteUnusedFiles">If true, the old files are deleted when the path of the columnFile has changed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetExternalColumns">
            <summary>
            Returns the list of columns registered as the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.UpdateExternalColumns">
            <summary>
            Goes through the columns which are stored externally and updates DB versions with the data from external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.DeleteExternalColumns(System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and deletes all the files.
            </summary>
            <param name="updateDB">If true, DB is updated with the data from the file before it's deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetExternalFiles">
            <summary>
            Goes through the columns which are stored externally and returns the list of particular files this object uses.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.SaveExternalColumns(System.Boolean,System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and ensures them in the external storage.
            </summary>
            <param name="deleteUnusedFiles">If true, the old files are deleted when the path of the columnFile has changed</param>
            <param name="onlyIfChanged">Tries to modify the external file only if the column is marked as changed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.ColumnsChanged(System.Collections.Generic.List{System.String})">
            <summary>
            Returns true if at least one column of the column list provided as the first argument was changed.
            </summary>
            <param name="columns">Column list</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.IsModifiedExternally">
            <summary>
            Goes through the columns which are stored externally and checkes if the data in DB is the same as in external storage. If all the columns are same returns true, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.AllowExternalColumn(System.String)">
            <summary>
            Indicates whether a given column is allowed to be saved externally.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.NormalizeLineEndings(System.String)">
            <summary>
            Returns text with normalized line endings (\r\n).
            </summary>
            <param name="text">Text to process</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetSearchFields(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Returns search fields collection. When existing collection is passed as argument, fields will be added to that collection.
            When collection is not passed, new collection will be created and return. 
            Collection will contain field values only when collection with StoreValues property set to true is passed to the method.
            When method creates new collection, it is created with StoreValues property set to false.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetSearchDocument(CMS.DataEngine.ISearchIndexInfo)">
            <summary>
            Returns index document for current object with dependencies on search index info.
            </summary>
            <param name="index">Search index info object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GetSearchImageUrl(System.String,System.String)">
            <summary>
            Returns URL to current search result item.
            </summary>
            <param name="id">ID of the item</param>
            <param name="image">Image</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.AddContentField(CMS.DataEngine.SearchSettingsInfo,CMS.DataEngine.ISearchFields,System.Boolean)">
            <summary>
            Process search settings of DataClass field and inserts required search field into search fields collection when field is marked as content field.
            </summary>
            <param name="searchSetting">Search settings of DataClass field</param>
            <param name="searchFields">Search fields collection</param>
            <param name="stripTags">Indicates if HTML tags should be removed from content</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.AddSearchableField(CMS.DataEngine.SearchSettingsInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Process search settings of DataClass field and inserts required search field into search fields collection when field is searchable.
            </summary>
            <param name="searchSetting">Search settings of DataClass field</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.InsertSearchFieldToDocument(CMS.DataEngine.ISearchDocument,CMS.DataEngine.ISearchField)">
            <summary>
            Inserts given search field and it's value into search document.
            </summary>
            <param name="document">Search document</param>
            <param name="field">Search field</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.StoreContentField">
            <summary>
            Gets the value that indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.InternalDataClass">
            <summary>
            Data class with the info object data (internally public)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.UpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.DeleteFiles">
            <summary>
            Indicates if all physical files should be deleted when object will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.CodeNameChanged">
            <summary>
            Returns whether the object code name changed or not
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.ClassName">
            <summary>
            Returns the class name of this object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.Properties">
            <summary>
            Properties of the object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.RegisteredProperties">
            <summary>
            Registered properties
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.ExternalColumnSettings">
            <summary>
            Hashtable of external column settings (cached settings indexed by column name which are registered in specific InfoObjects).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.HasData">
            <summary>
            Returns true if the object has it's data storage initialized already
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.SearchType">
            <summary>
            Gets the search type name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper">
            <summary>
            Info object wrapper for generalized access
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedAbstractInfo">
            <summary>
            Base info object interface for abstract info
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedInfo">
            <summary>
            Info object interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedInfo.#ctor(CMS.DataEngine.BaseInfo,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
            <param name="dummy">Dummy object to separate the protected constructor</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedInfo.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="P:CMS.DataEngine.GeneralizedAbstractInfo.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.#ctor(CMS.DataEngine.AbstractInfo{`0})">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DeleteData">
            <summary>
            Deletes the object from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.SetData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.MainObject">
            <summary>
            Main object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.UpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.DeleteFiles">
            <summary>
            Indicates if all physical files should be deleted when object will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`1.GeneralizedInfoWrapper.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassSiteInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassSiteInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.#ctor">
            <summary>
            Constructor - Creates an empty ClassSiteInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClassSiteInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassSiteInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassSiteInfo.ClassID">
            <summary>
            Class ID.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassSiteInfoProvider">
            <summary>
            Class providing ClassSiteInfo management.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfoProvider`2">
            <summary>
            Abstract info class provider.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfoProvider`1">
            <summary>
            Abstract info class provider.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseAbstractInfoProvider">
            <summary>
            Base class for the info providers.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractProvider">
            <summary>
            Abstract provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProvider.mIsValid">
            <summary>
            Indicates if the provider instance is up-to-date and can be used to manage object instances.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProvider.mProviders">
            <summary>
            Hashtable containing all the inheriting provider objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProvider.mCompleteProviders">
            <summary>
            Hashtable containing complete provider objects including duplicities.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProvider.LockProviderTransactions">
            <summary>
            If true, providers locks context within their transactions
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clears the object's hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.ClearAllHashtables(System.Boolean)">
            <summary>
            Clears up hashtables of every single provider object present in the list.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.ClearHashtables(System.String,System.Boolean)">
            <summary>
            Clears hashtables of the object passed.
            </summary>
            <param name="objectType">Type of the object</param>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.#ctor(System.Boolean)">
            <summary>
            Initializes the provider
            </summary>
            <param name="register">If true, registers the provider</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.Register">
            <summary>
            Registers current provider in providers collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.Register(System.String,CMS.DataEngine.AbstractProvider)">
            <summary>
            Registers specified provider in providers collection and handle clear hastable event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.SetAsDefaultProvider">
            <summary>
            Sets this provider instance as the default provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.GetCurrentProvider">
            <summary>
            Gets the current provider instance
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.GetProvider(System.String,System.Boolean)">
            <summary>
            Gets the loaded provider by its object type.
            </summary>
            <param name="objectType">Provider object type</param>
            <param name="exceptionIfNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.GetProviderInternal(System.String,System.Boolean)">
            <summary>
            Gets the loaded provider by its object type.
            </summary>
            <param name="objectType">Provider object type</param>
            <param name="exceptionIfNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.Invalidate">
            <summary>
            Sets this provider as invalid
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.InvalidateProviderInternal(System.String)">
            <summary>
            Invalidates specific provider.
            </summary>
            <param name="objectType">Type of the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.RaiseLoadProvider(System.String,CMS.DataEngine.AbstractProvider@)">
            <summary>
            Raises the load provider event
            </summary>
            <param name="objectType">Object type</param>
            <param name="provider">Returns the provider object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.CreateWebFarmTask(System.String,System.String)">
            <summary>
            Creates web farm task specific for current object and action name
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.CreateWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Creates web farm task specific for current object and action name
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractProvider.Providers">
            <summary>
            Hashtable containing all the inheriting provider objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProvider.CompleteProviders">
            <summary>
            Hashtable containing complete provider objects including duplicities.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProvider.ProviderName">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProvider.IsValid">
            <summary>
            Indicates if the provider instance is up-to-date and can be used to manage object instances.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.AbstractProvider.LoadProvider">
            <summary>
            Event to load provider
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractProvider.ClearProvidersHandler">
            <summary>
            Represents the method that will handle a clear provider event
            </summary>
            <param name="logTasks">Indicates whether web farm task should be created</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractProvider.OnLoadProvider">
            <summary>
            Load provider delegate.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseAbstractInfoProvider.ALL_SITES">
            <summary>
            All sites constant for the data retrieval.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseAbstractInfoProvider.INVALIDATE_COLUMN_NAMES">
            <summary>
            Codename for column names invalidation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseAbstractInfoProvider.UNKNOWN_TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseAbstractInfoProvider.mTypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseAbstractInfoProvider.hashtableLock">
            <summary>
            Table lock for loading hashtables
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseAbstractInfoProvider.infos">
            <summary>
            Info tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.Init(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes the provider variables.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.BoundGetInfoById(System.Int32)">
            <summary>
            Gets the info by ID.
            </summary>
            <param name="id">ID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoById(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the info by its type and ID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">ID of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the object type is not found. If false, the null is returned if the object type is not found</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.BoundGetInfosByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the info by its type and ID from the appropriate provider.
            </summary>
            <param name="ids">IDs of the objects</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfosByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the info by its type and ID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="ids">IDs of the objects</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.BoundGetInfoByName(System.String)">
            <summary>
            Gets the info by code name
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoByName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the info by its type and code name from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="name">Name of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoProvider(System.String,System.Boolean)">
            <summary>
            Gets the loaded provider by its object type.
            </summary>
            <param name="objectType">Provider object type</param>
            <param name="exceptionIfNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.BoundGetInfoByName(System.String,System.Int32)">
            <summary>
            Gets the info by code name
            </summary>
            <param name="name">Name of the object</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoByName(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the info by its type and code name from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="name">Name of the object</param>
            <param name="siteId">Site ID</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.BoundGetInfoByGuid(System.Guid)">
            <summary>
            Gets the info by GUID
            </summary>
            <param name="guid">GUID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoByGuid(System.String,System.Guid,System.Boolean)">
            <summary>
            Gets the info by its type and GUID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="guid">GUID of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.BoundGetInfoByGuid(System.Guid,System.Int32)">
            <summary>
            Gets the info by GUID
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetInfoByGuid(System.String,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Gets the info by its type and GUID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetCodeName(System.String,System.Int32)">
            <summary>
            Gets the code name by the given ID
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetId(System.String,System.String)">
            <summary>
            Gets the ID by the given code name
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Object code name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetTypeInfo">
            <summary>
            Gets the type info for this provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.RefreshObjectsCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetGeneralObjectQuery(System.Boolean)">
            <summary>
            Gets an object query from the provider
            </summary>
            <param name="checkLicense">If true, the call checks the license</param>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.GetDataQuery">
            <summary>
            Gets the database query for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.UseSource(CMS.DataEngine.DataQuerySource)">
            <summary>
            Sets the provider to use given data as data source
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.ResetToDefault">
            <summary>
            Resets the provider to default implementation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.EnsureHashtables(System.Boolean)">
            <summary>
            Loads all objects from the database to memory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseAbstractInfoProvider.CreateHashtables">
            <summary>
            Creates the provider hashtables
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.InfoType">
            <summary>
            Returns the type of the info object for this provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.TypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.ProviderName">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.DataSource">
            <summary>
            Data source for the provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.IsDataAvailable">
            <summary>
            Returns true if the data is available for this provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.HashtableSettings">
            <summary>
            Hashtable settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.UseHashtables">
            <summary>
            If true, the provider uses hashtables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.UseIDHashtable">
            <summary>
            If true, the ID hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.UseNameHashtable">
            <summary>
            If true, the code name hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.UseFullNameHashtable">
            <summary>
            If true, the full name hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.UseGUIDHashtable">
            <summary>
            If true, the guid hashtable is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.LoadHashtables">
            <summary>
            Determines the mode in which the hashtables should be loaded. In case the hashtables are loaded through generations, you must also specify the GenerationColumn property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.UseWeakReferences">
            <summary>
            If true, the weak references are used for the items so the memory can be cleared upon request
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseAbstractInfoProvider.GenerationColumn">
            <summary>
            Column used to filter the data according the generation in which the items should be loaded.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`1.mProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.GetInstance">
            <summary>
            Gets the default provider object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.ResetProvider">
            <summary>
            Resets the provider to its original implementation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.SetAsDefaultProvider">
            <summary>
            Sets this provider instance as the default provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.GetCurrentProvider">
            <summary>
            Gets the current provider instance
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.SetProviderTo(CMS.DataEngine.AbstractInfoProvider{`0})">
            <summary>
            Sets the provider to the given provider object
            </summary>
            <param name="newProvider">New provider object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.ResetToDefault">
            <summary>
            Resets the provider to default implementation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`1.EnsureProviderObject">
            <summary>
            Resets the provider to its original implementation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`1.ProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`2.mStoreEmptyValuesInHashtables">
            <summary>
            If true, provider hashtables store empty values for not found objects to reduce database calls
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`2.mInfoObject">
            <summary>
            Info object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="initialize">Indicates if provider together with hash tables should be initialized</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.HashtableSettings)">
            <summary>
            Default constructor.
            </summary>
            <param name="settings">Hashtable settings</param>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.InitHashtables(CMS.DataEngine.HashtableSettings)">
            <summary>
            Initializes the hashtable settings
            </summary>
            <param name="settings">Hashtable settings</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CreateInfo(System.Data.DataRow,System.Boolean)">
            <summary>
            Creates a new info object.
            </summary>
            <param name="dr">Data to use to create new object</param>
            <param name="useGenerator">If true, the process allows using the generator to differentiate between particular info types based on data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.NewInfo(System.Data.DataRow)">
            <summary>
            Returns new info object.
            </summary>
            <param name="dr">Data to use to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDependencyCacheKeys(CMS.DataEngine.GeneralizedInfo,System.String,System.String)">
            <summary>
            Gets the cache dependency keys for the given object.
            </summary>
            <param name="obj">Object</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDependencyCacheKeys(System.Data.DataSet,System.String,System.String)">
            <summary>
            Gets the cache dependency keys for the given DataSet.
            </summary>
            <param name="ds">Dataset with the data</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetCacheDependency(CMS.DataEngine.BaseInfo,System.String,System.String)">
            <summary>
            Gets the cache dependency for the given object.
            </summary>
            <param name="obj">Object</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetCacheDependency(System.Data.DataSet,System.String,System.String)">
            <summary>
            Gets the cache dependency for the given object.
            </summary>
            <param name="ds">DataSet with the data</param>
            <param name="key">Cache key</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.TouchCacheDependencies(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Touches the cache dependencies of the given object.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CreateInfo(System.Int32)">
            <summary>
            Creates an instance of info object.
            </summary>
            <param name="objectId">ID of the object to create</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfo(System.String,System.String)">
            <summary>
            Gets an instance of the first info object matching the specified condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfo(System.Action{CMS.DataEngine.ObjectQuery{`0}})">
            <summary>
            Gets an instance of the first info object matching the specified condition.
            </summary>
            <param name="parameters">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfo(CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets an instance of the first info object matching the specified condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByIntColumn(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on the integer column value.
            </summary>
            <param name="columnName">Integer column name</param>
            <param name="value">Value to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByStringColumn(System.String,System.String)">
            <summary>
            Gets an instance of info object based on the string column value.
            </summary>
            <param name="columnName">String column name</param>
            <param name="value">Value of the column to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.BoundGetInfosByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the list of info objects by their IDs
            </summary>
            <param name="ids">List of IDs to get</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.BoundGetInfoById(System.Int32)">
            <summary>
            Gets the info by ID.
            </summary>
            <param name="id">ID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoById(System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on ID.
            </summary>
            <param name="id">Value of the record ID to look for</param>        
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoById(System.Int32)">
            <summary>
            Gets an instance of info object based on ID.
            </summary>
            <param name="id">Value of the record ID to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfosByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the list of info objects by their IDs
            </summary>
            <param name="ids">List of IDs to get</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.BoundGetInfoByName(System.String)">
            <summary>
            Gets the info object by its code name
            </summary>
            <param name="name">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.BoundGetInfoByName(System.String,System.Int32)">
            <summary>
            Gets the info object by its code name and site Id
            </summary>
            <param name="name">Code name</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Int32)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Community group ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Group ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeName(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">Indicates if value should be returned from hashtable if hashtables are used</param>
            <param name="searchGlobal">If true, global objects are also searched when site object is not found</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByCodeNameFromDB(System.String,System.Int32,System.Int32)">
            <summary>
            Gets an instance of info object based on the given code name from database
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Community group ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByFullName(System.String)">
            <summary>
            Gets an instance of info object based on the given full name.
            </summary>
            <param name="fullName">Full name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByFullName(System.String,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given full name.
            </summary>
            <param name="fullName">Full name</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByFullNameInternal(System.String)">
            <summary>
            Gets the info by its full name from the database
            </summary>
            <param name="fullName">Full name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.BoundGetInfoByGuid(System.Guid)">
            <summary>
            Gets the info object by its GUID
            </summary>
            <param name="guid">GUID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.BoundGetInfoByGuid(System.Guid,System.Int32)">
            <summary>
            Gets the info object by its GUID and site ID
            </summary>
            <param name="guid">GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuid(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuidFromDB(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on the given GUID from database
            </summary>
            <param name="guid">GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetInfoByGuidColumn(System.String,System.Guid)">
            <summary>
            Gets an instance of info object based on the string column value.
            </summary>
            <param name="columnName">String column name</param>
            <param name="value">Value of the column to look for</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.SetInfo(`0)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CheckObject(`0)">
            <summary>
            Checks if the given info object is not null. Throws an exception if it is.
            </summary>
            <param name="info">Info object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ValidateCodeName(`0)">
            <summary>
            Validates the object code name. Returns true if the code name is valid.
            </summary>
            <param name="info">Object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CheckUniqueCodeName(`0)">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
            <param name="infoObj">Info object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CheckUniqueValues(`0,System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="infoObj">Info object to check</param>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteInfo(`0)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.NewTransaction">
            <summary>
            Creates a new transaction over this provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteData(System.String)">
            <summary>
            Deletes the data in the database based on the given where condition.
            </summary>
            <param name="where">Where condition to filter data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteData(CMS.DataEngine.IWhereCondition)">
            <summary>
            Deletes the data in the database based on the given where condition.
            </summary>
            <param name="where">Where condition to filter data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteData(System.Action{CMS.DataEngine.ObjectQuery{`0}})">
            <summary>
            Deletes the data in the database based on the given where condition.
            </summary>
            <param name="parameters">Where condition to filter data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.UpdateData(System.String,CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Updates the data in the database based on the given where condition.
            </summary>
            <param name="updateExpression">Update expression, e.g. "Value = Value * 2"</param>
            <param name="parameters">Parameters</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ReplaceData(System.String,System.String,System.String,System.String)">
            <summary>
            Replaces the data in the given columns.
            </summary>
            <param name="columns">List of columns to replace</param>
            <param name="pattern">Pattern to replace</param>
            <param name="replacement">Replacement text</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.RecalculateData(System.String,System.Single,System.Int32,System.String)">
            <summary>
            Recalculates the value in the given column using the coefficient.
            </summary>
            <param name="columnName">Column name</param>
            <param name="coefficient">Coefficient</param>
            <param name="roundTo">Number of significant digits the number should be rounded to</param>
            <param name="where">Where conditions (on which items apply the recalculation)</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetParentWhereCondition(System.Int32)">
            <summary>
            Gets the where condition to limit the objects to specific parent.
            </summary>
            <param name="objectParentId">Object parent ID to filter by</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetSiteWhereCondition(System.Int32,System.Boolean)">
            <summary>
            Gets the where condition to limit the objects to specific site.
            </summary>
            <param name="siteId">Site ID to filter by</param>
            <param name="combine">True - both site and global objects are included. False - only site objects are included</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetSiteWhereCondition(System.Int32)">
            <summary>
            Gets the where condition to limit the objects to specific site.
            </summary>
            <param name="siteId">Site ID to filter by</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.AddSiteWhereCondition(System.String,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Creates site where condition from the specified parameters and adds it to the original where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="siteId">Site ID. Set to 0 for global objects only</param>
            <param name="keyName">Name of the settings key which says whether global objects are used/allowed. Set to null if it doesn't depends on any settings key</param>
            <param name="combine">True - site objects are returned together with the global objects. False - only global objects are returned</param>
            <param name="op">Logic operator ("AND" or "OR") which says how the site condition is joined with the original condition</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.AddSiteWhereCondition(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates site where condition from the specified parameters and adds it to the original where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="siteId">Site ID. Set to 0 for global objects only</param>
            <param name="keyName">Name of the settings key which says whether global objects are used/allowed. Set to null if it doesn't depends on any settings key</param>
            <param name="combine">True - site objects are returned together with the global objects. False - only global objects are returned</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetBindingWhereCondition(System.String,System.Object[])">
            <summary>
            Gets the where condition to limit the objects to specific binding dependencies. Use this method for 3 and more-keys bindings.
            </summary>
            <param name="bindingType">Binding object type name</param>
            <param name="dependencies">Pairs of binding dependencies to filter by (first variable in each pair - dependency object type, second variable in each pair - dependency value)</param>  
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetBindingWhereCondition(System.String,System.Int32)">
            <summary>
            Gets the where condition to limit the objects to specific binding dependency. Use this method only for 2-keys bindings.
            </summary>
            <param name="bindingType">Binding object type name</param>
            <param name="bindingDependencyId">Binding dependency ID to filter by</param>        
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetData(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If false, the binary data shouldn't be retrieved</param>
            <param name="siteId">Site ID of the site for which the object should be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetData(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If false, the binary data shouldn't be retrieved</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param> 
            <param name="siteId">Site ID of the site for which the object should be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDataByStringColumn(System.String,System.String,System.String)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="columnName">String column name</param>
            <param name="value">Value of the column to look for</param>
            <param name="columns">List of columns to be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDataByIntColumn(System.String,System.Int32,System.String)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="columnName">Integer column name</param>
            <param name="value">Value of the record ID to look for</param>
            <param name="columns">List of columns to be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDataByGuidColumn(System.String,System.Guid,System.String)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="columnName">GUID column name</param>
            <param name="value">Value of the record ID to look for</param>        
            <param name="columns">List of columns to be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDataByColumn``1(System.String,``0,System.String)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="columnName">GUID column name</param>
            <param name="value">Value of the record ID to look for</param>        
            <param name="columns">List of columns to be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetSingleObject">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetGeneralObjectQuery(System.Boolean)">
            <summary>
            Gets an object query from the provider
            </summary>
            <param name="checkLicense">If true, the call checks the license</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetObjectQuery(System.Boolean)">
            <summary>
            Gets the object query for the provider
            </summary>
            <param name="checkLicense">If true, the call checks the license</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetDeleteQuery">
            <summary>
            Gets the object query that deletes all items matching the query parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetCountInternal(System.Action{CMS.DataEngine.ObjectQuery{`0}})">
            <summary>
            Gets the number of items matching the given parameters. Does not check the license when retrieving data.
            </summary>
            <param name="parameters">Parameters to apply to the query</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetExistingIDsInternal(System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Filters out all object IDs that do not exist in the database.
            </summary>
            <exception cref="T:System.ArgumentNullException">When IDs is null</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetEmptyDataSet">
            <summary>
            Gets the empty data set to be filled by the data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.UseSource(`0[])">
            <summary>
            Sets the provider to use given data as data source
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.LoadGeneration(System.Int32)">
            <summary>
            Loads the specified generation of the objects.
            </summary>
            <returns>Returns true if the generation was not empty</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.LoadObjectsToHashtables(System.Data.DataSet,CMS.Base.SafeDictionary{System.Int32,CMS.DataEngine.BaseInfo})">
            <summary>
            Loads the objects from a DataSet to the hashtables
            </summary>
            <param name="ds">Source data</param>
            <param name="objectsById">Table where the created objects will be placed [ObjectID -> object]</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.RegisterObjectInHashtables(`0)">
            <summary>
            Registers the object instance within the hashtables.
            </summary>
            <param name="info">Object to register</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.RemoveOriginalCodeNameFromHashtable(`0)">
            <summary>
            Removes the original object code name from the hashtable
            </summary>
            <param name="info">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.UpdateObjectInHashtables(`0)">
            <summary>
            Updates the object instance in the hashtables. Updates is different than register, because it logs task about changing object.
            </summary>
            <param name="info">Object to update</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.DeleteObjectFromHashtables(`0)">
            <summary>
            Deletes the object instance from the hashtables.
            </summary>
            <param name="info">Object to delete</param>
            <exception cref="T:System.ArgumentNullException">When info is null</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.LoadInfos">
            <summary>
            Loads all objects from the database to memory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.CreateHashtables">
            <summary>
            Creates the provider hashtables
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.LoadAllInfos">
            <summary>
            Loads all infos to the hashtable
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ClearHashtables(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetCount(System.Action{CMS.DataEngine.ObjectQuery{`0}})">
            <summary>
            Gets the number of items matching the given condition. Does not check the license when retrieving data.
            </summary>
            <param name="parameters">Parameters to apply to the query</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetExistingIDs(System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Filters out all object IDs that do not exist in the database.
            </summary>
            <exception cref="T:System.ArgumentNullException">When IDs is null</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.SortAlphabetically(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the object alphabetically.
            </summary>
            <param name="ascending">If true, the resulting order will be ascending</param>
            <param name="parentId">Only objects under this parent object will be sorted</param>
            <param name="siteId">Only object within this site will be sorted</param>
            <param name="groupId">Only objects within this group will be sorted</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.AssertCodeNameColumnExists">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> if the object does not have a code name property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.AssertGuidColumnExists">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> if the object type does not have a GUID property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.InfoType">
            <summary>
            Returns the type of the info object for this provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.InfoObject">
            <summary>
            Info object instance the provider is working with.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`2.StoreEmptyValuesInHashtables">
            <summary>
            If true, provider hashtables store empty values for not found objects to reduce database calls
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSites">
            <summary>
            Returns all bindings between classes and sites.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSites(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the bindings between classes and sites.
            </summary>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSiteInfo(System.Int32,System.Int32)">
            <summary>
            Returns the ClassSiteInfo structure for the specified classSite.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>        
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.SetClassSiteInfo(CMS.DataEngine.ClassSiteInfo)">
            <summary>
            Sets (updates or inserts) specified classSite.
            </summary>
            <param name="classSite">ClassSite to set</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.DeleteClassSiteInfo(CMS.DataEngine.ClassSiteInfo)">
            <summary>
            Deletes specified classSite.
            </summary>
            <param name="infoObj">ClassSite object</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.RemoveClassFromSite(System.Int32,System.Int32)">
            <summary>
            Deletes specified classSite.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.AddClassToSite(System.Int32,System.Int32)">
            <summary>
            Adds the class to the specified site.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSitesInternal">
            <summary>
            Returns all bindings between classes and sites.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSitesInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the bindings between classes and sites.
            </summary>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSiteInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the ClassSiteInfo structure for the specified classSite.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.SetClassSiteInfoInternal(CMS.DataEngine.ClassSiteInfo)">
            <summary>
            Sets (updates or inserts) specified classSite.
            </summary>
            <param name="classSite">ClassSite to set</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.DeleteClassSiteInfoInternal(CMS.DataEngine.ClassSiteInfo)">
            <summary>
            Deletes specified classSite.
            </summary>
            <param name="infoObj">ClassSite object</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfoBase`1">
            <summary>
            ClassInfo data container class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Creates an empty ClassInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClassInfo object from the given DataRow.
            </summary>
            <param name="typeInfo">Type info</param>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassID">
            <summary>
            Class ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassDisplayName">
            <summary>
            Class display name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassUsesVersioning">
            <summary>
            Class uses versioning
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsDocumentType">
            <summary>
            Class is document type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsCoupledClass">
            <summary>
            Class is coupled class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassXmlSchema">
            <summary>
            Class xml schema
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassFormDefinition">
            <summary>
            Class form definition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassEditingPageURL">
            <summary>
            Class editing page url
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassListPageURL">
            <summary>
            Class list page url
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassNodeNameSource">
            <summary>
            Class node name source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassTableName">
            <summary>
            Class table name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassViewPageUrl">
            <summary>
            Class view page url
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassPreviewPageUrl">
            <summary>
            Class preview page url
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassFormLayout">
            <summary>
            Class form layout
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassNewPageURL">
            <summary>
            Class new page url
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassShowAsSystemTable">
            <summary>
            Class show as system table
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassUsePublishFromTo">
            <summary>
            Class use publish from to
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassShowTemplateSelection">
            <summary>
            Class show template selection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUMappings">
            <summary>
            Class SKU mappings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsMenuItemType">
            <summary>
            Class is menu item type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassNodeAliasSource">
            <summary>
            Class node alias source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassDefaultPageTemplateID">
            <summary>
            Class default page template ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassLastModified">
            <summary>
            Class last modified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassGUID">
            <summary>
            Class GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassCreateSKU">
            <summary>
            Class create SKU
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsProduct">
            <summary>
            Class is product
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsCustomTable">
            <summary>
            Class is custom table
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassShowColumns">
            <summary>
            Class show columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassLoadGeneration">
            <summary>
            Class load generation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchTitleColumn">
            <summary>
            Class search title column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchContentColumn">
            <summary>
            Class search content column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchImageColumn">
            <summary>
            Class search image column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchCreationDateColumn">
            <summary>
            Class search creation date column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchSettings">
            <summary>
            Class search settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassInheritsFromClassID">
            <summary>
            Class inherits from class ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassConnectionString">
            <summary>
            Class connection string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchEnabled">
            <summary>
            Class search enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUDefaultDepartmentName">
            <summary>
            Class SKU default department name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUDefaultDepartmentID">
            <summary>
            Class SKU default department ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassContactMapping">
            <summary>
            Class contact mapping
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassContactOverwriteEnabled">
            <summary>
            Class contact overwrite enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUDefaultProductType">
            <summary>
            Class SKU default product type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsProductSection">
            <summary>
            Class is product section
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassPageTemplateCategoryID">
            <summary>
            Class page template category ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassFormLayoutType">
            <summary>
            Class form layout type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassVersionGUID">
            <summary>
            Class version GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassDefaultObjectType">
            <summary>
            Class default object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsForm">
            <summary>
            Class is form
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassResourceID">
            <summary>
            Class resource ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassCustomizedColumns">
            <summary>
            Class customized columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassCodeGenerationSettings">
            <summary>
            Class code generation settings
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfoProviderBase`1">
            <summary>
            Class providing DataClassInfo management.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetClasses">
            <summary>
            Returns a query for all the DataClassInfo objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfo(System.Int32)">
            <summary>
            Returns DataClassInfo with specified ID.
            </summary>
            <param name="id">DataClassInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfo(System.String)">
            <summary>
            Returns DataClassInfo with specified name.
            </summary>
            <param name="name">DataClassInfo name</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfo(System.Guid)">
            <summary>
            Returns DataClassInfo with specified GUID.
            </summary>
            <param name="guid">DataClassInfo GUID</param>                
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.SetDataClassInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Sets (updates or inserts) specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be set</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.DeleteDataClassInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.DeleteDataClassInfo(System.Int32)">
            <summary>
            Deletes DataClassInfo with specified ID.
            </summary>
            <param name="id">DataClassInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.Clear(System.Boolean)">
            <summary>
            Clears hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetClassesInternal">
            <summary>
            Returns a query for all the DataClassInfo objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfoInternal(System.Int32)">
            <summary>
            Returns DataClassInfo with specified ID.
            </summary>
            <param name="id">DataClassInfo ID</param>        
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfoInternal(System.String)">
            <summary>
            Returns DataClassInfo with specified name.
            </summary>
            <param name="name">DataClassInfo name</param>        
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfoInternal(System.Guid)">
            <summary>
            Returns DataClassInfo with specified GUID.
            </summary>
            <param name="guid">DataClassInfo GUID</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.SetDataClassInfoInternal(CMS.DataEngine.DataClassInfo)">
            <summary>
            Sets (updates or inserts) specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be set</param>        
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.DeleteDataClassInfoInternal(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be deleted</param>        
        </member>
        <member name="T:CMS.DataEngine.LayoutHelper">
            <summary>
            Helper for layout objects
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LayoutHelper.mDefaultNamespaces">
            <summary>
            List of default form layout namespaces
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.GetLayoutTypeEnum(System.String,CMS.DataEngine.LayoutTypeEnum)">
            <summary>
            Gets the layout type enumeration for the given string value.
            </summary>
            <param name="type">String type</param>
            <param name="defaultValue">Default value - optional; HTML is default value by default</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.GetLayoutTypeCode(CMS.DataEngine.LayoutTypeEnum)">
            <summary>
            Gets the layout type code for the given enum value.
            </summary>
            <param name="type">String type</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.AddLayoutDirectives(System.String,CMS.DataEngine.LayoutTypeEnum)">
            <summary>
            Adds the layout directives to the transformation.
            </summary>
            <param name="code">Code of the layout</param>
            <param name="type">Type of the layout</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.AddLayoutDirectives(System.String)">
            <summary>
            Adds the layout directives to the transformation.
            </summary>
            <param name="code">Code of the layout</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.GetLayoutDirectives">
            <summary>
            Layout directives are set before layout code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LayoutHelper.DefaultNamespaces">
            <summary>
            List of default form layout namespaces
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LayoutHelper.DefaultDirectives">
            <summary>
            Returns list of default form layout directives (ToLower).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryInfoBase`1">
            <summary>
            QueryInfo data container class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Creates an empty QueryInfo object.
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Creates a new QueryInfo object from the given DataRow.
            </summary>
            <param name="typeInfo">Type info</param>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryID">
            <summary>
            Query ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryName">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryTypeID">
            <summary>
            Query type ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryRequiresTransaction">
            <summary>
            Query requires transaction
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.ClassID">
            <summary>
            Class ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryIsLocked">
            <summary>
            Query is locked
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryLastModified">
            <summary>
            Query last modified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryGUID">
            <summary>
            Query GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryLoadGeneration">
            <summary>
            Query load generation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryIsCustom">
            <summary>
            Query is custom
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoBase`1.QueryConnectionString">
            <summary>
            Query connection string name
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryInfoProviderBase`1">
            <summary>
            Class providing QueryInfo management.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueries">
            <summary>
            Returns a query for all the QueryInfo objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueryInfo(System.Int32)">
            <summary>
            Returns QueryInfo with specified ID.
            </summary>
            <param name="id">QueryInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueryInfoFromDB(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueryInfo(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.SetQueryInfo(CMS.DataEngine.QueryInfo)">
            <summary>
            Sets (updates or inserts) specified QueryInfo.
            </summary>
            <param name="infoObj">QueryInfo to be set</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.DeleteQueryInfo(CMS.DataEngine.QueryInfo)">
            <summary>
            Deletes specified QueryInfo.
            </summary>
            <param name="infoObj">QueryInfo to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.DeleteQueryInfo(System.Int32)">
            <summary>
            Deletes QueryInfo with specified ID.
            </summary>
            <param name="id">QueryInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueriesInternal">
            <summary>
            Returns a query for all the QueryInfo objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueryInfoInternal(System.Int32)">
            <summary>
            Returns QueryInfo with specified ID.
            </summary>
            <param name="id">QueryInfo ID</param>        
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.GetQueryInfoInternal(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="queryName">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.SetQueryInfoInternal(CMS.DataEngine.QueryInfo)">
            <summary>
            Sets (updates or inserts) specified QueryInfo.
            </summary>
            <param name="infoObj">QueryInfo to be set</param>        
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProviderBase`1.DeleteQueryInfoInternal(CMS.DataEngine.QueryInfo)">
            <summary>
            Deletes specified QueryInfo.
            </summary>
            <param name="infoObj">QueryInfo to be deleted</param>        
        </member>
        <member name="T:CMS.DataEngine.QueryName">
            <summary>
            System query names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALUPSERT">
            <summary>
            Name of the 'generalupsert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALUPDATE">
            <summary>
            Name of the 'generalupdate' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALINSERT">
            <summary>
            Name of the 'generalinsert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALDELETE">
            <summary>
            Name of the 'generaldelete' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALSELECT">
            <summary>
            Name of the 'generalselect' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SELECT">
            <summary>
            Name of the 'select' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.INSERT">
            <summary>
            Name of the 'insert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.INSERTIDENTITY">
            <summary>
            Name of the 'insertidentity' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.UPDATE">
            <summary>
            Name of the 'update' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.DELETE">
            <summary>
            Name of the 'delete' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.DELETEALL">
            <summary>
            Name of the 'deleteall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.UPDATEALL">
            <summary>
            Name of the 'updateall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SELECTALL">
            <summary>
            Name of the 'selectall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SEARCHTREE">
            <summary>
            Name of the 'searchtree' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SELECTDOCUMENTS">
            <summary>
            Name of the 'selectdocuments' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SELECTVERSIONS">
            <summary>
            Name of the 'selectversions' default query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSApplication">
            <summary>
            Base class for CMS Application
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.RECOVERY_INTERVAL">
            <summary>
            Defines the interval in minutes after which the system tries to recover itself
            in case the initialization fails.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mApplicationStart">
            <summary>
            Date and time when the application started
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mApplicationStartFinished">
            <summary>
            Date and time when the application start finished
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mPostStartRaised">
            <summary>
            If true, the system executes first request after the system start
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mApplicationInitialized">
            <summary>
            Defines the state whether the application is initialized. If true, the application was initialized correctly. If false, the application was initialized with an error. If null, the initialization is to be done.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mApplicationPreInitialized">
            <summary>
            If true, the application is pre-initialized
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mApplicationEnded">
            <summary>
            If true, the application end actions were already called
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.lockObject">
            <summary>
            Object for locking the context
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.mApplicationErrorMessage">
            <summary>
            Connection error message
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.WaitForDatabaseAvailable">
            <summary>
            If true, the process without the database available waits for the database instead of attempting to redirect to DB installation wizard. Use this for background applications such as services, that start automatically prior to the installation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.EnsureDefaultDBSchema">
            <summary>
            If true, the application ensures the default schema for the user upon its initialization. Use this setting for Windows authentication on DB server with automatic default schema.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.#cctor">
            <summary>
            Static constructor - Initialization code
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.CurrentDomain_ProcessExit(System.Object,System.EventArgs)">
            <summary>
            Runs the actions when the application exits
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.PreInit(System.Boolean)">
            <summary>
            Performs the application pre-initialization on the first request.
            </summary>
            <param name="isWebSite">If true, the application is a web site</param>
            <returns>Returns true, if the application was pre-initialized during this call.</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.Init">
            <summary>
            Performs the application initialization on the first request.
            </summary>
            <returns>Returns true, if the application was initialized during this call.</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.CanInitialize">
            <summary>
            Returns true if the initialization of application is allowed with current request
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ReInit">
            <summary>
            Reinitializes the application by resetting the application variables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.PostStart">
            <summary>
            Runs the application post start event in case it wasn't run already
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.RaisePostStart">
            <summary>
            Raises the application post start event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ApplicationError">
            <summary>
            Raises the application error event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ApplicationEnd">
            <summary>
            Raises the application end event to properly end the application
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.GetVaryByCustomString(CMS.Base.GetVaryByCustomStringEventArgs)">
            <summary>
            Returns the  
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ReportApplicationError(System.String)">
            <summary>
            Reports the application error
            </summary>
            <param name="message">Error message to report</param>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.CreateSetup">
            <summary>
            Creates application startup parameters and returns it.
            </summary>
            <returns>Application startup parameters.</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.InstallRedirect(System.Boolean)">
            <summary>
            Redirects user to the installation page if connectionString not set.
            </summary>
            <param name="forceRedirect">If true, the redirect is forced</param>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.IsInstallerExcluded(System.String)">
            <summary>
            Returns true if the path is excluded for the installer process.
            </summary>
            <param name="path">Path to check</param>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationStart">
            <summary>
            Date and time of the application start.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationStartFinished">
            <summary>
            Date and time when the application start (initialization) finished its execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationInitialized">
            <summary>
            Defines the state whether the application is initialized. If true, the application was initialized correctly. If false, the application was initialized with an error. If null, the initialization is to be done.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationErrorMessage">
            <summary>
            Connection error message.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.RecoveryTime">
            <summary>
            The time when the application should try to recover itself
            from initialization failure.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BulkInsertSettings">
            <summary>
            Configuration class for <see cref="M:CMS.DataEngine.AbstractDataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.Mappings">
            <summary>
            Gets or sets a collection of column mappings.
            Column mappings define the relationships between columns in the data source and columns in the destination.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.Options">
            <summary>
            Gets or sets a bitwise flag that specifies one or more options to use with an instance of System.Data.SqlClient.SqlBulkCopy.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.BulkCopyTimeout">
            <summary>
            Number of seconds for the operation to complete before it times out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.KeepIdentity">
            <summary>
            Gets or sets whether to keep identity of inserted data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISqlServerCapabilities">
            <summary>
            Sql server capabilities contract.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsDatabaseCreation">
            <summary>
            Indicate if server supports database creation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsDatabaseDeletion">
            <summary>
            Indicate if server supports database deletion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsOpenQueryCommand">
            <summary>
            Indicate if server supports OPENQUERY commands.
            
            OPENQUERY is used to do commands across two or more databases.
            http://msdn.microsoft.com/en-us/library/ms188427.aspx
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsLinkedServer">
            <summary>
            Indicate if server supports linked server which is used with in OPENQUERY to do commands across two or more databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.ControlServerPermissionAvailable">
            <summary>
            Indicate if server supports 'CONTROL SERVER' permission for user.
            http://msdn.microsoft.com/en-us/library/ms191291.aspx
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlServerCapabilitiesFactory">
            <summary>
            Class that returns SQL server capabilities based on the connection string and server edition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlServerCapabilitiesFactory.GetSqlServerCapabilities(System.String)">
            <summary>
            Returns SQL server capabilities based on the connection string.
            </summary>
            <param name="connectionString">Connection string to SQL server</param>
            <returns>Instance of SQLServerCapabilities class with data</returns>
        </member>
        <member name="T:CMS.DataEngine.SqlServerCapabilitiesFactory.SqlServerCapabilities">
            <summary>
            Class that holds information about SQL server capabilities.
            
            These are features of the SQL server itself.
            It doesn't depend on the user and his permissions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilitiesFactory.SqlServerCapabilities.SupportsDatabaseCreation">
            <summary>
            Indicate if server supports database creation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilitiesFactory.SqlServerCapabilities.SupportsDatabaseDeletion">
            <summary>
            Indicate if server supports database deletion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilitiesFactory.SqlServerCapabilities.SupportsOpenQueryCommand">
            <summary>
            Indicate if server supports OPENQUERY commands.
            
            OPENQUERY is used to do command across two or more databases.
            http://msdn.microsoft.com/en-us/library/ms188427.aspx
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilitiesFactory.SqlServerCapabilities.SupportsLinkedServer">
            <summary>
            Indicate if server supports linked server which is used with in OPENQUERY to do commands across two or more databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilitiesFactory.SqlServerCapabilities.ControlServerPermissionAvailable">
            <summary>
            Indicate if server supports 'CONTROL SERVER' permission for user.
            http://msdn.microsoft.com/en-us/library/ms191291.aspx
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabaseHelper">
            <summary>
            Provides database operations
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseHelper.mDatabaseVersion">
            <summary>
            Defines the version of the current database
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseHelper.lockObject">
            <summary>
            Object for locking the thread context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.DatabaseExists(System.String)">
            <summary>
            Checks if the specified database exists, returns true if database exists.
            </summary>
            <param name="connectionString">Connection string to the database</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.GetDatabaseCollation(System.String)">
            <summary>
            Returns database collation.
            </summary>
            <param name="connectionString">Connection string to the database</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.CheckDBPermission(System.String,CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String)">
            <summary>
            Checks if SQL account is granted with specific permission.
            </summary>
            <param name="permission">SQL permission to check</param>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
            <returns>Returns TRUE if SQL account is granted permission</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.CheckDatabaseCollation(System.String,System.String@)">
            <summary>
            Checks if the specified database has correct collation.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="collation">Current database collation</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.ChangeDatabaseCollation(System.String,System.String)">
            <summary>
            Change the collation of specified database.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="databaseName">Database name</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.GetDatabaseName(System.String)">
            <summary>
            Returns the database name.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.ChangeDatabaseCollation(System.String,System.String,System.String)">
            <summary>
            Change the collation of specified database.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="databaseName">Database name</param>
            <param name="collation">Collation</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.CheckDatabaseVersion">
            <summary>
            Checks the database version, returns true if the version is correct, reports error in case the version is wrong
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.DatabaseCollation">
            <summary>
            Database collation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.IsDatabaseAvailable">
            <summary>
            Indicates whether connection string is set and objects exist in database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.DatabaseVersion">
            <summary>
            Returns the version of the database that the application uses. Returns null if connection string is not initialized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.IsCorrectDatabaseVersion">
            <summary>
            Returns whether database version is correct and matches the application version.   
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataType`1">
            <summary>
            Data type definition
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataType">
            <summary>
            Data type definition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetSqlType(System.Int32,System.Int32)">
            <summary>
            Gets the SQL data type representation
            </summary>
            <param name="size">Data size</param>
            <param name="precision">Data precision</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetSqlValue(System.Object)">
            <summary>
            Gets the SQL value representation for this type
            </summary>
            <param name="value">Value to convert to SQL value</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetSqlValueString(System.Object)">
            <summary>
            Gets a string representation of the given value on SQL server
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.Convert(System.Object,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion of the type</param>
            <param name="defaultValue">Default value to return in case the conversion fails</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetDefaultValueCode(System.String,System.Boolean)">
            <summary>
            Gets the code for the default value of this type in C# code
            </summary>
            <param name="explicitDefaultValue">Explicit default value to use</param>
            <param name="returnEmpty">If true, the method returns code even if default value representation is empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the string representation of the given value
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion to string</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.FormatValue(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Formats the given value
            </summary>
            <param name="value">Value to format</param>
            <param name="culture">Culture used for format</param>
        </member>
        <member name="P:CMS.DataEngine.DataType.TypeGroup">
            <summary>
            Name of the group that groups together types with similar behavior, such as integer, decimal, string etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.TypeAlias">
            <summary>
            System type alias (e.g. bool for Boolean, etc.)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.Type">
            <summary>
            System type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.FieldType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SqlType">
            <summary>
            SQL data type representation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SchemaType">
            <summary>
            Type representation in the XML schema of the data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SqlValueFormat">
            <summary>
            SQL value format. Default format is '{0}' to prevent SQL injection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SupportsTranslation">
            <summary>
            If true, the data type supports translation of the content
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.IsDefaultType">
            <summary>
            If true, the data type is considered default. Types marked as default are replaced only by default types in the type mapping tables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DbType">
            <summary>
            Database type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.Hidden">
            <summary>
            If true, the data type is hidden
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.ConversionMethod">
            <summary>
            Returns the conversion method
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DefaultValueCode">
            <summary>
            Code of the default value for this type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.ObjectDefaultValue">
            <summary>
            Default value for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.CodeValueFormat">
            <summary>
            Formatting code of the value for this type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SpecialDefaultValues">
            <summary>
            List of special default values recognized by this type and treated as default value by the code
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.AllowEmpty">
            <summary>
            If true, the data type allows for nulls in the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.StringFormat">
            <summary>
            If defined, the given format is used to convert the value of this type to a string value. {0} represents the value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.GetFormatProvider">
            <summary>
            Function which gets a format provider for the given culture
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.VariableSize">
            <summary>
            If true, the data type has variable size
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DefaultSize">
            <summary>
            Default size of the type, if the size is variable
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.MaxSize">
            <summary>
            Maximum size of the type, if the size is variable
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.MaxValueLength">
            <summary>
            Maximum value length
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.VariablePrecision">
            <summary>
            If true, the data type has variable precision
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DefaultPrecision">
            <summary>
            Default precision of the type, if the precision is variable
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.MaxPrecision">
            <summary>
            Maximum precision of the type, if the precision is variable
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.#ctor(System.String,System.String,System.String,System.Func{System.Object,`0,System.Globalization.CultureInfo,`0})">
            <summary>
            Constructor
            </summary>
            <param name="sqlType">SQL type</param>
            <param name="fieldType">Field type</param>
            <param name="schemaType">Schema type</param>
            <param name="conversionFunc">Conversion function</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.Convert(System.Object,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion of the type</param>
            <param name="defaultValue">Default value to return in case the conversion fails</param>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.DefaultValue">
            <summary>
            Default value for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.ObjectDefaultValue">
            <summary>
            Default value for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.ConversionFunc">
            <summary>
            Conversion function for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.ConversionMethod">
            <summary>
            Returns the conversion method
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.DefaultValueCode">
            <summary>
            Code of the default value for this type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataTypeManager">
            <summary>
            Provides management of SQL data types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.PLAIN">
            <summary>
            Represents the format string for a plain SQL value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.UNICODE">
            <summary>
            Represents the format string for a unicode text on SQL server
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.STRING">
            <summary>
            Represents the format string for a string value in C# code
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.NULL">
            <summary>
            Represents null value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.MIN_DATETIME">
            <summary>
            Minimum DateTime value for date time data type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.MAX_DATETIME">
            <summary>
            Minimum DateTime value for date time data type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesByFieldType">
            <summary>
            Data types by field type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesBySqlType">
            <summary>
            Data types by SQL type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesByType">
            <summary>
            Data types by system type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesBySchemaType">
            <summary>
            Data types by schema type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.numericTypes">
            <summary>
            Collection of recognized numeric types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.integerTypes">
            <summary>
            Collection of recognized numeric types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.EnsureFieldTypes(System.Collections.Generic.IEnumerable{System.String}@,System.Func{CMS.DataEngine.DataType,System.Boolean})">
            <summary>
            Ensures the list of field types
            </summary>
            <param name="fieldTypes">Resulting field types</param>
            <param name="condition">Condition for the data type to be included</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterDataTypes(CMS.DataEngine.DataType[])">
            <summary>
            Registers the given data type to the system
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterDataTypesInternal(System.Boolean,CMS.DataEngine.DataType[])">
            <summary>
            Registers the given data type to the system
            </summary>
            <param name="defaultTypes">If true, the registered types are default types</param>
            <param name="types">Types to register</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterDataTypeInternal(CMS.DataEngine.DataType)">
            <summary>
            Registers the given data type
            </summary>
            <param name="type">Data type to register</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterType``1(CMS.Base.IGeneralIndexable{``0,CMS.DataEngine.DataType},``0,CMS.DataEngine.DataType)">
            <summary>
            Registers the given type within the given dictionary
            </summary>
            <param name="dictionary">Type dictionary</param>
            <param name="key">Type key</param>
            <param name="type">Type to register</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.EnsureSystemTypes">
            <summary>
            Registers the default supported data types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterSystemTypes">
            <summary>
            Registers the default data types to the system
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.ClearRegisteredTypes">
            <summary>
            Clears the registered field types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlType(System.String,System.Int32,System.Int32)">
            <summary>
            Gets column type for defined data type and size.
            </summary>
            <param name="dataType">Data type</param>
            <param name="size">Size of the type</param>
            <param name="precision">Precision of the type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetFieldType(System.String)">
            <summary>
            Returns form field data type from database column data type.
            </summary>
            <param name="sqlType">Database column data type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlValue(System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlValue(CMS.DataEngine.TypeEnum,System.String,System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Sql type</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.ConvertToSystemType(CMS.DataEngine.TypeEnum,System.String,System.Object,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Converts the value to a proper data type
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Data type</param>
            <param name="value">Value to convert</param>
            <param name="culture">Culture to use for conversion</param>
            <param name="nullIfDefault">If true, and the resulting value is the default value, returns null</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetStringValue(CMS.DataEngine.TypeEnum,System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to a string value
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Data type</param>
            <param name="value">Value to convert</param>
            <param name="culture">Culture to use for conversion</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlValue(CMS.DataEngine.DataType,System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="type">Data type</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDataType(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Gets the data type settings by its SQL type
            </summary>
            <param name="typeEnum"></param>
            <param name="typeValue">SQL type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDataType(System.Type)">
            <summary>
            Gets the data type by the system type
            </summary>
            <param name="type">System type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSystemType(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Gets the system type by the field type
            </summary>
            <param name="typeEnum">Type to search</param>
            <param name="typeValue">Field type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDefaultType(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Gets the default type for the given type by its system type
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Data type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsKnownType(System.Type)">
            <summary>
            Returns true, if the given type is a registered known type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.SupportsTranslation(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true if the given field type supports translation
            </summary>
            <param name="typeEnum">Type to search</param>
            <param name="typeValue">DataType of the field</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsValidDate(System.DateTime)">
            <summary>
            Returns if start date of the scheduled interval is valid.
            </summary>
            <param name="date">Start date of the scheduled interval</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsString(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is a string type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsNumber(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is a number type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsInteger(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is an integer type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsType``1(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is a GUID type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.FieldTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.VisibleFieldTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesByFieldType">
            <summary>
            Registered data types by field type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesByType">
            <summary>
            Registered data types by system type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesBySqlType">
            <summary>
            Registered data types by field type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesBySchemaType">
            <summary>
            Registered data types by schema type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TableColumnInfo">
            <summary>
            Contains information for table column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.DataType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.IsNullable">
            <summary>
            Indicates whether column allows NULL.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.DataSize">
            <summary>
            Data size
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.DataPrecision">
            <summary>
            Data precision
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.DefaultValue">
            <summary>
            Column default value
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableColumnInfo.Guid">
            <summary>
            Column GUID in form definition (helps to determine whether column name has changed)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TypeEnum">
            <summary>
            Enumeration of the types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeEnum.SQL">
            <summary>
            SQL server type, e.g. "nvarchar(max)"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeEnum.Field">
            <summary>
            Field type, e.g. "longtext"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeEnum.Schema">
            <summary>
            Schema type, e.g. "xs:string"
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlDebug">
            <summary>
            SQL debug methods
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlDebug.DebugConnections">
            <summary>
            Debug SQL connections?
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.GetDebugSettings">
            <summary>
            Gets the debug settings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.FinalizeData(System.Data.DataTable)">
            <summary>
            Finalizes the debug data
            </summary>
            <param name="dt">Data</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.NewLogTable">
            <summary>
            Creates a new SQL log table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogInformation(System.String,System.String)">
            <summary>
            Logs Sql debug information
            </summary>
            <param name="title">Information title</param>
            <param name="text">Information text</param>
            <returns>Returns the new log item</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryStart(System.String,System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs query start. Logs the query to the file and to current request log for debugging.
            </summary>
            <param name="queryName">Query name</param>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="conn">Connection for the query execution</param>
            <returns>Returns the new log item</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryEnd(System.Object)">
            <summary>
            Logs the end of the query processing.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryToFile(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs the query.
            </summary>
            <param name="queryText">Query text to log</param>
            <param name="parameters">Query parameters</param>
            <param name="conn">Connection used for this query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryEndToFile(System.Object,System.String@,System.Int32@)">
            <summary>
            Logs the end of the query processing.
            </summary>
            <param name="result">Result object</param>
            <param name="resultsString">Returning the results string</param>
            <param name="totalSize">Returning the total size of results</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogConnectionOperation(System.String,System.Boolean,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs the connection operation to the query log.
            </summary>
            <param name="operation">Connection operation</param>
            <param name="allowBeforeQuery">If true, the operation is allowed before the query when the query is open</param>
            <param name="conn">Connection around the operation</param>
        </member>
        <member name="P:CMS.DataEngine.SqlDebug.Settings">
            <summary>
            Debug settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlDebug.DebugCurrentRequest">
            <summary>
            Debug current request queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlDebug.CurrentRequestLog">
            <summary>
            Current request log.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlOperator">
            <summary>
            Defines SQL operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.UNION">
            <summary>
            Union operator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.INTERSECT">
            <summary>
            Intersect operator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.EXCEPT">
            <summary>
            Except operator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.UNION_ALL">
            <summary>
            Union all operator
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataSetPostProcessingEventArgs">
            <summary>
            Custom event arguments used for default data post processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataSetPostProcessingEventArgs.#ctor(System.Data.DataSet,System.String)">
            <summary>
            Default constructor for event arguments used in dataset processing.
            </summary>
            <param name="data">Dataset being imported</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="P:CMS.DataEngine.DataSetPostProcessingEventArgs.Data">
            <summary>
            Gets or sets dataset being imported.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataSetPostProcessingEventArgs.TableName">
            <summary>
            Gets or sets table name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SQLEngineEditionEnum">
            <summary>
            Enumeration for database engine edition of the instance of SQL Server installed on the server.
            http://msdn.microsoft.com/en-us/library/ms174396.aspx, EngineEdition property.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Unknown">
            <summary>
            Unknown engine edition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.PersonalOrDesktop">
            <summary>
            Not available in SQL Server 2005 and later versions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Standard">
            <summary>
            This is returned for Standard, Web, and Business Intelligence.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Enterprise">
            <summary>
            This is returned for Evaluation, Developer, and both Enterprise editions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Express">
            <summary>
            This is returned for Express, Express with Tools and Express with Advanced Services
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.SQLAzure">
            <summary>
            This is returned for SQL Azure server or sometimes for any other SQL Database.
            It is not safe to use this property to decide whether is SQL server running on Azure or not.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SQLScript">
            <summary>
            SQL script to be applied during upgrade or hotfix.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.SQLFileName">
            <summary>
            File name of the SQL script.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.SQLFilePath">
            <summary>
            Full path of SQL script.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.ConnectionStringName">
            <summary>
            Name of connection string needed for script execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.ConnectionString">
            <summary>
            Connection string needed for script execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.SQLLaunchOrder">
            <summary>
            Order in which the script should be launched.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SQLSettings">
            <summary>
            Provides SQL settings for hotfixing databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLSettings.Scripts">
            <summary>
            Collection of SQL scripts.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MissingSQLTypeException">
            <summary>
            Exception raised when unsupported SQL type is encountered.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MissingSQLTypeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message text</param>
            <param name="columnName">Column name</param>
            <param name="currentSqlType">Unsupported type</param>
            <param name="recommendedSqlType">Supported type</param>
        </member>
        <member name="M:CMS.DataEngine.MissingSQLTypeException.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MissingSQLTypeException.ColumnName">
            <summary>
            Gets or sets table column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MissingSQLTypeException.UnsupportedType">
            <summary>
            Gets or sets unsupported SQL type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MissingSQLTypeException.RecommendedType">
            <summary>
            Gets or sets supported SQL type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSConnectionContext">
            <summary>
            Ensures that the wrapped API calls are executed against specific database(s).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionContext.#ctor(System.String)">
            <summary>
            Constructor, sets up the connection string name prefix for the life time of this object. E.g. for prefix "External" the connection string "ExternalCMSConnectionString"
            will be used instead of the default "CMSConnectionString". To revert to default DB, use prefix null or empty string.
            </summary>
            <param name="connectionStringPrefix">Connection string prefix</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionContext.Dispose">
            <summary>
            Disposes the object and resets the context to the previous one.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionContext.OriginalPrefix">
            <summary>
            Connection string prefix from the original context
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnDefinition">
            <summary>
            Data column definiton
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ColumnDefinition.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="name">Column name</param>
            <param name="type">Column type</param>
        </member>
        <member name="M:CMS.DataEngine.ColumnDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.ColumnDefinition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="P:CMS.DataEngine.ColumnDefinition.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnDefinition.ColumnType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GetObjectsDataSettings">
            <summary>
            Configuration class for <see cref="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.GetObjectsDataSettings)"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GetObjectsDataSettings.#ctor(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.GeneralizedInfo,System.String,System.String,System.Boolean,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[])">
            <summary>
            Constructor of the configuration class.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Main info object</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns for the main objects</param>
            <param name="childData">If true, child objects data are included</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
        </member>
        <member name="M:CMS.DataEngine.GetObjectsDataSettings.Clone">
            <summary>
            Creates clone of current settings object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.Operation">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.InfoObject">
            <summary>
            Main info object for which the data should be retrieved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.Where">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.OrderBy">
            <summary>
            Order by.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.IncludeChildData">
            <summary>
            Indicates if child object data should be included into selection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.IncludeBinaryData">
            <summary>
            Indicates if binary data should be included into selection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.TranslationTable">
            <summary>
            Translation table to initialize with data bindings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.QueryParameters">
            <summary>
            Query parameters for the selection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.ExcludedNames">
            <summary>
            List of names which are used to filter out objects having codename or display name that starts with one of these names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.SiteId">
            <summary>
            Site ID specifies that only site child objects and bindings are included into selection.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ILicenseService">
            <summary>
            Interface for check license 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ILicenseService.CheckLicense(CMS.DataEngine.FeatureEnum,System.String,System.Boolean)">
            <summary>
            Checks the license based on feature and perform action based on given arguments
            </summary>
            <param name="feature">Feature to check</param>
            <param name="domain">Domain to check. If null, function tries to get domain from HttpContext</param>
            <param name="throwError">Indicates whether throw error after false check</param>
        </member>
        <member name="T:CMS.DataEngine.DummyInfo">
            <summary>
            Empty info object class.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.NotImplementedInfo">
            <summary>
            Info object with no methods implemented. Serves as a base info for partially implemented info objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Type info to use for initialization</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.CloneObject">
            <summary>
            Creates the clone of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Loads the object from the given DataRow
            </summary>
            <param name="dr">DataRow to load</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.LoadFromDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Loads the object from the given data container
            </summary>
            <param name="data">Container to load</param>
        </member>
        <member name="P:CMS.DataEngine.NotImplementedInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralInfoProvider">
            <summary>
            General info provider
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider T4 runtime template.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info provider template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoClassNamePluralized">
            <summary>
            Gets the info class name in plural.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftVariableName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightVariableName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftSideColumnName">
            <summary>
            Gets the binding left side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightSideColumnName">
            <summary>
            Gets the binding right side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftObjectName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightObjectName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftObjectCodeName">
            <summary>
            Gets the binding left side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightObjectCodeName">
            <summary>
            Gets the binding right side name without spaces.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info T4 runtime template.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ObjectClassName">
            <summary>
            Gets the object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.Properties">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.References">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.IdColumn">
            <summary>
            Gets the name of the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.SiteIdColumn">
            <summary>
            Gets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ParentColumn">
            <summary>
            Gets the name of the parent column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ParentObjectType">
            <summary>
            Gets the parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.HasReferences">
            <summary>
            Determines whether there is at least one field which has a reference set to some object type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty">
            <summary>
            A property description for the info T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.#ctor(CMS.DataEngine.FieldInfo)">
            <summary>
            Creates a new instance initialized using the specified field info.
            </summary>
            <param name="field">Field info</param>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.Comment">
            <summary>
            Gets the property comment.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.AllowEmpty">
            <summary>
            Gets a value that indicates if the property is not required to have a value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.DefaultValue">
            <summary>
            Gets a default value of the property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.TypeDefaultValue">
            <summary>
            Gets a default value of the type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.GetMethod">
            <summary>
            Gets the name of the method to be used to obtain the property value in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.UseGetValue">
            <summary>
            Gets a value that indicates if the GetValue method is to be used in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassCodeGenerationSettings">
            <summary>
            Represents the code generation configuration for the data class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.#ctor">
            <summary>
            Creates a settings object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.#ctor(System.String)">
            <summary>
            Creates a settings object and initializes it using the given XML representation.
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.ToString">
            <summary>
            Returns an XML representation of the settings as string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.NameSpace">
            <summary>
            Gets or sets the namespace of generated files.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.ObjectType">
            <summary>
            Gets or sets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.DisplayNameColumn">
            <summary>
            Gets or sets the name of the display name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.CodeNameColumn">
            <summary>
            Gets or sets the name of the code name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.GuidColumn">
            <summary>
            Gets or sets the name of the GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.LastModifiedColumn">
            <summary>
            Gets or sets the name of the "last modified" column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.BinaryColumn">
            <summary>
            Gets or sets the name of the binary column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.SiteIdColumn">
            <summary>
            Gets or sets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.UseIdHashtable">
            <summary>
            Gets or sets a value that indicates if the code should use the ID hashtable.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.UseNameHashtable">
            <summary>
            Gets or sets a value that indicates if the code should use the name hashtable.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.UseGuidHashtable">
            <summary>
            Gets or sets a value that indicates if the code should use the GUID hashtable.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractMapping">
            <summary>
            Class representing general mapping object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractMapping.Serialize">
            <summary>
            Method to serialize object to XML string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractMapping.Serializer">
            <summary>
            XML serializer
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DeletedFKs">
            <summary>
            Class to define FKs which were removed during DB separation. Is used in DB join.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.ReferencingTable">
            <summary>
            Table with foreign key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.FKName">
            <summary>
            Name of the foreign key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.ReferencingColumn">
            <summary>
            Foreign key column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.PKTable">
            <summary>
            Table with primary key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.PKColumn">
            <summary>
            Primary key column.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TablesAndSchemas">
            <summary>
            Defines table with appropriate XML schema and corresponding SQL script.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TablesAndSchemas.TableName">
            <summary>
            Table name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TablesAndSchemas.SQLScript">
            <summary>
            SQL script to create table.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TablesAndSchemas.Schema">
            <summary>
            Table XML schema.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabaseSeparationHelper">
            <summary>
            Sets of methods used for database separation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseSeparationHelper.OM_CONNECTION_STRING">
            <summary>
            On-line marketing connection string name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CheckDBSeparation">
            <summary>
            Check that DB separation is successfully finished. Returns false, and sets up connection error message in case it isn't
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.SeparateDatabase">
            <summary>
            Separates Database.
            </summary>
            <returns>Returns TRUE if all scripts proceeded without error</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.JoinDatabase">
            <summary>
            Joins databases.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CheckCMDatabase(System.String)">
            <summary>
            Checks if database is installed with contact management tables.
            </summary>
            <param name="connectionString">Connection string to database</param>
            <returns>Returns true if database contains contact management tables</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteSourceTables(System.Boolean,System.Boolean)">
            <summary>
            Modifies old database.
            </summary>
            <param name="deleteDB">Indicates if complete database should be deleted.</param>
            <param name="separation">Indicates if current process is separation</param>
            <returns>Returns error if any occurred.</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.PrepareConnectionStrings">
            <summary>
            Sets connection strings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.MoveDB(System.String)">
            <summary>
            Runs  DB separation process.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.Initialize">
            <summary>
            Initializes classes used in separation or join.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.TargetDBModification">
            <summary>
            Creates data on new database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.ModifyContent(System.Collections.Generic.List{CMS.DataEngine.TablesAndSchemas})">
            <summary>
            Modify content.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CreateProceduresViews">
            <summary>
            Create procedures functions and views
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CreateSeparatedTables(System.Collections.Generic.IEnumerable{CMS.DataEngine.TablesAndSchemas})">
            <summary>
            Creates all required tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CopyData(System.Collections.Generic.IEnumerable{CMS.DataEngine.TablesAndSchemas})">
            <summary>
            Copies content of all tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.LinkedServer">
            <summary>
            Prepares and test linked server connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.PrepareLinkedServer">
            <summary>
            Get linked server SQL script.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.TestLinkedServer">
            <summary>
            Test linked servers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CopyTable(System.String)">
            <summary>
            Copy content of single table to different DB.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.HasIdentityColumn(System.String)">
            <summary>
            Indicates if table has identity column defined
            </summary>
            <param name="tableName">Table name</param>
            <returns>Returns TRUE if table has identity column</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.GetTableColumns(System.String)">
            <summary>
            Get table columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteDB">
            <summary>
            Delete complete database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteTables">
            <summary>
            Delete tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteOldTables">
            <summary>
            Drops all old tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DropProceduresFunctionsViews">
            <summary>
            Drops old procedures functions and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DropDB(System.String)">
            <summary>
            Drops separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.SeparationInProgress">
            <summary>
            Indicates if DB separation is in progress.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.SeparationStartedByServer">
            <summary>
            Indicates what web farm server started DB separation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.ScriptsFolder">
            <summary>
            Folder where SQL separation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.InstallScriptsFolder">
            <summary>
            Folder where SQL installation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.InstallationConnStringSeparate">
            <summary>
            Installation connection string for separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.ConnStringSeparate">
            <summary>
            Connection string for separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.ConnStringSeparateName">
            <summary>
            Connection string name for separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.LogMessage">
            <summary>
            Method for logging.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.SqlServerCapabilities">
            <summary>
            Returns SQL server capabilities.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FileReader.ReadAndSplit(System.String,System.String)">
            <summary>
            Reads file and separates it into list.
            </summary>        
            <param name="scriptsFolder">Scripts folder</param>
            <param name="file">Name of the file with the script</param>
            <returns>Returns list of strings representing lines of the scripts file</returns>
        </member>
        <member name="M:CMS.DataEngine.FileReader.ReadFileIntoString(System.String,System.String)">
            <summary>
            Reads content from a file into the string.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProcsFuncViewsTypes">
            <summary>
            Separation class for manipulation with procedures, types, functions and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.CreateProceduresViews">
            <summary>
            Creates all required procedures functions and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.CreateItem(System.String)">
            <summary>
            Recreates one procedure or function or view on new DB.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.CheckIfItemExistsInDB(System.String)">
            <summary>
            Checks existence of specified View, Procedure, Function or Type in DB.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.DropProceduresFunctionsViews">
            <summary>
            Drops functions, procedures and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.DropItem(System.String)">
            <summary>
            Deletes one procedure or function or view on old DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.ScriptsFolder">
            <summary>
            Folder where SQL separation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.InstallScriptsFolder">
            <summary>
            Folder where SQL installation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.IsSeparation">
            <summary>
            Indicates if current process is separation of databases. If FALSE then current process is joining of databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.LogMessage">
            <summary>
            Method for logging.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SeparatedTables">
            <summary>
            Class providing list of separated tables including SQL and XML definitions
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="scriptsFolder">SQL scripts folder</param>
            <param name="installScriptsFolder">SQL install scripts folder</param>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTablesAndSchemas">
            <summary>
            Get tables and schemas.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTableNames(System.Boolean)">
            <summary>
            Gets list of table names.
            </summary>        
            <param name="inverted">Indicates if list should be inverted</param>
            <returns>Returns list of table names </returns>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTableNames(System.String)">
            <summary>
            Returns string with table names.
            </summary>
            <param name="separator">Separator between table names</param>
            <returns>Returns string with separated tables names</returns>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTableSQL(System.Collections.Generic.IEnumerable{CMS.DataEngine.TablesAndSchemas})">
            <summary>
            Gets table SQL.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTableSchemas(System.Collections.Generic.IEnumerable{CMS.DataEngine.TablesAndSchemas})">
            <summary>
            Get table schemas
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TemporaryTables.DELETED_FKS">
            <summary>
            Key for persistent storage helper containing FK's deleted during DB separation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.CreateTemporaryTables(System.String)">
            <summary>
            Creates all required temporary tables for DB separation.
            </summary>
            <param name="scriptsFolder">Scripts folder</param>
            <returns>Returns list of temporary table names.</returns>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.RemoveTemporaryTables(System.Collections.Generic.List{System.String})">
            <summary>
            Removes temporary tables.
            </summary>
            <param name="temporaryTables">List of temporary tables</param>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.CreateAdditionalConstraints">
            <summary>
            Recreates additional FK constraints which were stored during DB separation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.CreateTemporaryTable(System.String)">
            <summary>
            Creates temporary table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.RemoveFKs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove FKs referencing temporary tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.DeleteFKs(System.Data.DataSet)">
            <summary>
            Deletes FKs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.InitializeFK(System.Collections.Generic.List{CMS.DataEngine.DeletedFKs},System.Data.DataRow)">
            <summary>
            Adds new FK reference to list.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.StoreRemovedFKs(System.Collections.Generic.List{CMS.DataEngine.DeletedFKs})">
            <summary>
            Stores deleted FKs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.DeleteTemporaryTables(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes temporary tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.GetConstraints">
            <summary>
            Gets constraints from persistent storage helper.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlInstallationHelper">
            <summary>
            Sets of methods for creating database during installation process.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.SETTINGS_KEY_TABLE_NAME">
            <summary>
            Settings keys table name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.DB_CONNECTION_TIMEOUT">
            <summary>
            Default SQL connection timeout.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.DBO_SCHEMA">
            <summary>
            DB Owner schema
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.RunQuery">
            <summary>
            Executes when SQL script is run by the installer
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.TestConnection(System.String)">
            <summary>
            Test connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetConnectionString(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Returns connection string for the given parameters.
            </summary>
            <param name="winAuth">Whether to use windows authentication</param>
            <param name="serverName">Server</param>
            <param name="database">Name of the database</param>
            <param name="userName">SQL user name</param>
            <param name="pass">SQL password</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CheckIfSchemaExist(System.String,System.String)">
            <summary>
            Check if DB schema exists.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="dbSchema">Schema</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetCurrentDefaultSchema(System.String)">
            <summary>
            Returns current default schema
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetCurrentDefaultSchema(CMS.DataEngine.IDataConnection)">
            <summary>
            Returns current default schema
            </summary>
            <param name="conn">Connection</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CreateDatabase(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String)">
            <summary>
            Creates database based on given info.
            </summary>
            <param name="authenticationType">Authentication type</param>
            <param name="serverName">Server</param>
            <param name="database">Database name</param>
            <param name="userName">SQL user name</param>
            <param name="pass">SQL password</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CreateDatabase(System.String,System.String,System.String)">
            <summary>
            Creates database.
            </summary>
            <param name="databaseName">Name of the database</param>
            <param name="connectionString">Connection string</param>
            <param name="databaseCollation">Collation of database</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetSQLInstallPath">
            <summary>
            Gets the folder in which the SQL install scripts are located.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetSQLInstallPathToObjects">
            <summary>
            Gets the folder in which the SQL install scripts for DB objects are located.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetDatabaseVersion(System.String)">
            <summary>
            Returns database version from settings key.
            </summary>
            <param name="connString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.DatabaseExists(System.String,System.String)">
            <summary>
            Returns true if database exists.
            </summary>
            <param name="databaseName">Database name</param>
            <param name="connectionString">Connection string to DB server</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetEngineEdition(System.String)">
            <summary>
            Returns database engine edition of the instance of SQL Server installed on the server.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ChangeDefaultSchema(CMS.DataEngine.IDataConnection,System.String,CMS.DataEngine.SqlInstallationHelper.LogMessage)">
            <summary>
            Changes the database schema to the given schema
            </summary>
            <param name="conn">Connection</param>
            <param name="newSchema">New schema</param>
            <param name="log">Log</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CopyDatabase(System.String,System.String,System.String)">
            <summary>
            Create a copy of database. This feature is available only in SQL Azure databases.
            </summary>
            <param name="connectionString">Connection string to master database.</param>
            <param name="databaseName">Name of database to copy.</param>
            <param name="copyName">Name of new database.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CopyingCompleted(System.String,System.String)">
            <summary>
            Checks if given database is being copied.
            </summary>
            <param name="connectionString">Connection to master database.</param>
            <param name="databaseName">Name of database to check.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetDefaultBackupPath(System.String)">
            <summary>
            Retrieves SQL server default backup directory from it's registry.
            </summary>
            <param name="connectionString">Database connection string</param>
            <returns>Database default backup directory</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.BackupDatabase(System.String,System.String)">
            <summary>
            Backup given database to filesystem.
            </summary>
            <param name="connectionString">Connection string of database to backup</param>
            <param name="backupPath">Path to filesystem, where the database will be backuped on the database server.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.DeleteDatabase(System.String,System.String)">
            <summary>
            Deletes database.
            </summary>
            <param name="databaseName">Database name</param>
            <param name="connectionString">Connection string to DB server</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetUniqueDatabaseName(System.String,System.String)">
            <summary>
            Returns unique database name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.InstallDatabase(System.String,System.String,System.String,System.String,CMS.DataEngine.SqlInstallationHelper.LogMessage,System.String)">
            <summary>
            Performs the database installation.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="scriptsFolder">Folder with the database scripts</param>
            <param name="dbObjectsErrMessage">Error message when creation of DB objects fails</param>
            <param name="defaultDataErrMessage">Error message when creation data fails</param>
            <param name="log">Method for logging messages</param>
            <param name="dbSchema">Name of the schema (all "dbo." and "[dbo]." occurrences are replaced by this schema)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.EnsureDefaultSchema(CMS.DataEngine.IDataConnection)">
            <summary>
            Ensures the default schema for current user
            </summary>
            <param name="conn">Connection</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.EnsureDefaultSchema(CMS.DataEngine.SqlInstallationHelper.LogMessage,CMS.DataEngine.IDataConnection,System.Boolean@)">
            <summary>
            Ensures the database schema for the current user. If the user does not have the schema set, sets the schema to dbo.
            </summary>
            <param name="log">Log message</param>
            <param name="conn">Data connection</param>
            <param name="success">Returns true, if changing the schema was successful</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.DatabaseIsSeparated">
            <summary>
            Checks if database is separated or not.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetSQLInstallPath(System.String)">
            <summary>
            Gets the folder in which the SQL install scripts are located.
            </summary>
            <param name="relativePath">Additional path to folder or file</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.RunSQLQuery(System.String,CMS.DataEngine.IDataConnection,System.String)">
            <summary>
            Executes SQL query.
            </summary>
            <param name="query">Query</param>
            <param name="conn">Connection</param>
            <param name="dbSchema">Schema</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.RunSQLScript(System.String,CMS.DataEngine.IDataConnection,System.String)">
            <summary>
            Executes SQL script. Method internally handles 'GO' commands.
            </summary>
            <param name="fileName">SQL script</param>
            <param name="conn">Connection</param>
            <param name="dbSchema">DB schema</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ProceedSQLScripts(System.String,CMS.DataEngine.IDataConnection,System.String,CMS.DataEngine.SqlInstallationHelper.LogMessage,System.String,System.String)">
            <summary>
            Runs the SQL scripts listed in the given file.
            </summary>
            <param name="fileName">FileName with the scripts to run</param>
            <param name="conn">SQL connection</param>
            <param name="scriptsFolder">Folder with the SQL scripts</param>
            <param name="log">Method for logging messages</param>
            <param name="dbSchema">Name of the schema (all "dbo." and "[dbo]." occurrences are replaced by this schema)</param>
            <param name="defaultErrorMessage">Default error message</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CleanSQLForAzure(System.String)">
            <summary>
            Change query for azure - remove unsupported features.
            </summary>
            <param name="query">Query text</param>
            <returns>Returns query ready for Azure</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.IncrementCounter(System.String)">
            <summary>
            Increments number (separated by "_") at the end of string.
            </summary>
            <param name="str">String</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.LoadScriptsFromFile(System.String)">
            <summary>
            Returns script names (files) from text file.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetOrderedTables(CMS.DataEngine.IDataConnection)">
            <summary>
            Get list of tables ordered by dependency from least dependent to most dependent.
            </summary>
            <param name="connection">Connection to database.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ImportDefaultData(CMS.DataEngine.IDataConnection,System.String,CMS.DataEngine.SqlInstallationHelper.LogMessage,System.String)">
            <summary>
            Import default data to database.
            </summary>
            <param name="connection">Connection to database.</param>
            <param name="dataFolder">Folder containing default data serialized in XML.</param>
            <param name="log">Method for logging messages</param>
            <param name="defaultErrorMessage">Default error message</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.InitSettingsKeyTimestamp(System.Data.DataSet,System.String)">
            <summary>
            Initialize settings key timestamp.
            </summary>
            <param name="data">Data</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ApplyHotfix(CMS.DataEngine.IDataConnection,System.String,System.String,CMS.DataEngine.SqlInstallationHelper.LogMessage,System.String)">
            <summary>
            Import default data to database.
            </summary>
            <param name="connection">Connection to database.</param>
            <param name="scriptsFolder">Folder containing default data serialized in XML.</param>
            <param name="dbSchema">Name of the schema (all "dbo." and "[dbo]." occurrences are replaced by this schema)</param>
            <param name="log">Method for logging messages</param>
            <param name="defaultErrorMessage">Default error message</param>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.FillFactorRegex">
            <summary>
            Regular expression for removing FILLFACTOR from install queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.TextImageRegex">
            <summary>
            Regular expression for removing TEXTIMAGE_ON from install queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.OnPrimaryRegex">
            <summary>
            Regular expression for removing TEXTIMAGE_ON from install queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.ReplicationRegex">
            <summary>
            Regular expression for removing NOT FOR REPLICATION from install queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.AllowRowLocksRegex">
            <summary>
            Regular expression for removing ALLOW_ROW_LOCKS from install queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.DBORegEx">
            <summary>
            Regular expression for removing dbo. and [dbo]. from install queries.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.SqlInstallationHelper.AfterDataGet">
            <summary>
            Fired after data getting is finished.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlInstallationHelper.LogProgress">
            <summary>
            Delegate of event fired when message logging is required.
            </summary>
            <param name="message">Text of the message</param>
            <param name="type">Type of the message</param>
            <param name="logToEventLog">Log to event log</param>
        </member>
        <member name="T:CMS.DataEngine.SqlInstallationHelper.LogMessage">
            <summary>
            Delegate of event fired when message logging is required.
            </summary>
            <param name="message">Text of the message</param>
            <param name="type">Type of the message</param>
        </member>
        <member name="T:CMS.DataEngine.InfoHelper">
            <summary>
            General info methods and properties
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoHelper.mEmptyInfo">
            <summary>
            Empty info object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoHelper.UNKNOWN_TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoHelper.CODENAME_AUTOMATIC">
            <summary>
            Constant for automatic code name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoHelper.EnsureInfo(CMS.DataEngine.BaseInfo@,System.Func{CMS.DataEngine.BaseInfo})">
            <summary>
            Ensures that the info variable is loaded with the given info. Caches the null value as BaseInfo.Empty info if the value wasn't provided, and returns null in that case.
            </summary>
            <param name="variable">Variable to use for the value</param>
            <param name="getMethod">Method to get the value</param>
        </member>
        <member name="P:CMS.DataEngine.InfoHelper.EmptyInfo">
            <summary>
            Empty info object. Can be used instead of null in BaseInfo variables to mark the loaded value as not found to prevent additional calls.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LicenseException">
            <summary>
            Represents license exception
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LicenseException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="redirectUrl">URL to redirect</param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CMS.DataEngine.LicenseException.Report">
            <summary>
            Reports the exception by either redirecting it to the URL, or re-throwing it.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LicenseException.RedirectUrl">
            <summary>
            URL to redirect
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BindingCollection">
            <summary>
            Info collection of object bindings
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectCollection">
            <summary>
            Collection of GeneralizedInfos.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectCollection`1">
            <summary>
            Object list.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractObjectCollection">
            <summary>
            Base class for the object collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractObjectCollection.mCount">
            <summary>
            Total number of items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractObjectCollection.mDisconnectedCount">
            <summary>
            Number of disconnected references for this collection 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractObjectCollection.mIsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractObjectCollection.mLoadBinaryData">
            <summary>
            Indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractObjectCollection.mName">
            <summary>
            Collection name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractObjectCollection.mInstanceGuid">
            <summary>
            Instance GUID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.Disconnect">
            <summary>
            Disconnects the collection from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.Reconnect">
            <summary>
            Reconnects the collection to the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.MakeEmpty">
            <summary>
            Makes the collection empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.CloneCollection">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.GetCompleteWhereCondition">
            <summary>
            Gets the complete where condition for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractObjectCollection.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.Columns">
            <summary>
            Columns to get.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.WhereCondition">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.DynamicWhereCondition">
            <summary>
            Dynamic where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.OrderBy">
            <summary>
            Order by expression.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.TopN">
            <summary>
            Select top N objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.ParentStorage">
            <summary>
            Parent storage
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.LoadBinaryData">
            <summary>
            Gets or sets the value which indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.IsDisconnected">
            <summary>
            Returns true if this collection is disconnected from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.IsLastVersion">
            <summary>
            If true, the document is the last version (retrieved using DocumentHelper.GetDocument).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.EnforceReadOnlyDataAccess">
            <summary>
            If true, the read only access to the data is enforced within the transaction.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractObjectCollection.Name">
            <summary>
            Collection name
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ICMSQueryable`1">
            <summary>
            Interface for queryable CMS objects
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ICMSQueryable">
            <summary>
            Interface for queryable CMS objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ICMSQueryable.Count">
            <summary>
            Number of total items in the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ICMSQueryable.IsOffline">
            <summary>
            Returns true if the given collection is offline (disconnected from the database)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ICMSQueryable`1.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mCountDifference">
            <summary>
            Difference in count of the items from data source and current number of items
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mSourceData">
            <summary>
            Source data for the collection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mPageSize">
            <summary>
            Page size for loading of the items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mItems">
            <summary>
            Items collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mAllowPaging">
            <summary>
            If true, the paging of the data is allowed (data is loaded in batches).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mNewItems">
            <summary>
            New items added to the collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mDeletedItems">
            <summary>
            Deleted items removed from the collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mObjectsByName">
            <summary>
            Objects by name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mEnumerators">
            <summary>
            Number of enumerators accessing the items collection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mClearAfterEnumeration">
            <summary>
            If true, the collection will be cleared after the last enumeration finishes
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectCollection`1.mRemovedObject">
            <summary>
            Empty object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.UseData(System.Data.DataSet)">
            <summary>
            Initializes the collection with the given source data
            </summary>
            <param name="sourceData">Source data for the collection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.RegisterColumns">
            <summary>
            Registers the Columns of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.EnsureItems(System.Int32)">
            <summary>
            Ensures the specified number of items in the item list.
            </summary>
            <param name="count">Number of items</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetObjectByName(System.String)">
            <summary>
            Gets the object by its name.
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetObjectByNameInternal(System.String)">
            <summary>
            Gets the object by its name, internal representation that gets data from database
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetItem(System.Int32)">
            <summary>
            Gets the item on the specified index.
            </summary>
            <param name="index">Item index to get</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.IsRemoved(`0)">
            <summary>
            Returns true if the given value  represents a removed object
            </summary>
            <param name="obj">Object to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetFullData">
            <summary>
            Gets the data set of the data behind this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetData(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the data for the collection.
            </summary>
            <param name="where">Where condition</param>
            <param name="offset">Starting offset for the data</param>
            <param name="maxRecords">Maximum number of records to get</param>
            <param name="totalRecords">Returning total number of records</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.CreateNewObject(System.Data.DataRow)">
            <summary>
            Creates new object for this collection.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetEmptyObject">
            <summary>
            Gets an empty object for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetObjectName(`0)">
            <summary>
            Registers new object in this collection.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetNameWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given object name.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.CloneCollection">
            <summary>
            Creates the clone of this collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.Add(`0[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Object to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Object to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.Remove(`0[])">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="objects">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="objects">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.ValidateItem(`0,System.Boolean)">
            <summary>
            Validates whether the item can be member of the collection (collection can work with it). Returns true if item is valid.
            </summary>
            <param name="item">Item to validate</param>
            <param name="throwException">If true, the method throws exception in case validation fails</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.RemoveItem(System.Collections.Generic.List{`0},`0)">
            <summary>
            Removes the item from the given list of items
            </summary>
            <param name="items">List of items</param>
            <param name="obj">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.Clear">
            <summary>
            Clears the current items in the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetObjectEnumerator">
            <summary>
            Gets the object enumerator for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.CreateQueryProvider">
            <summary>
            Creates a LINQ query provider for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.op_Implicit(CMS.DataEngine.ObjectCollection{`0})~System.Data.DataSet">
            <summary>
            Implicit operator for conversion from ObjectCollection class to DataSet
            </summary>
            <param name="col">Collection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetEnumeratorInternal">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the general enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectCollection`1.GetObjectName(System.Object)">
            <summary>
            Returns the name of the given object
            </summary>
            <param name="obj">Object for which to get the name</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.ItemType">
            <summary>
            Result type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.RemovedObject">
            <summary>
            Defines the removed object within collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.Items">
            <summary>
            Returns the items collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.ObjectsByName">
            <summary>
            Objects by name collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object on specific index.
            </summary>
            <param name="index">Object index to get</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.InternalCount">
            <summary>
            Internal count of the items
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.FirstItem">
            <summary>
            Returns the first item of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.LastItem">
            <summary>
            Returns the last item of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.AllowPaging">
            <summary>
            If true, the paging of the data is allowed (data is loaded in batches).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.LoadBinaryData">
            <summary>
            Gets or sets the value which indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.NameColumn">
            <summary>
            Name column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.IsOffline">
            <summary>
            Returns true, if the collection is offline (not backed up by the database but by the source data)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.Expression">
            <summary>
            Query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.Provider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.CMS#Base#IIndexable#Item(System.Int32)">
            <summary>
            Integer indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.SortNames">
            <summary>
            If true, the names in enumeration are sorted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectCollection`1.ItemsHaveNames">
            <summary>
            Returns true if the items in the collection have names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mObject">
            <summary>
            Object instance of specified type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mParentObject">
            <summary>
            Parent object instance
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mOrderBy">
            <summary>
            Order by expression.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mFieldsAsObjects">
            <summary>
            Related objects wrappers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mItemsAsFields">
            <summary>
            Fields wrappers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mAutomaticNameColumn">
            <summary>
            If true, the automatic name column is used within this collection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mCacheCallbackRegistered">
            <summary>
            Flag indicating if the cache callback is already registered
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mUseDefaultCacheDependencies">
            <summary>
            If true, the collection uses default cache dependencies to flush it's content
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mCustomCacheDependencies">
            <summary>
            List of custom cache dependencies
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.ObjectInitializer">
            <summary>
            Provides a way how to initialize the object instance based on given data 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection.mCheckLicense">
            <summary>
            If true, the collection check license when getting data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.New(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.Init(System.String)">
            <summary>
            Initializes the collection to use specific object type
            </summary>
            <param name="objectType">Object type to use</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.RegisterColumns">
            <summary>
            Registers the Columns of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.ChangeParent(CMS.DataEngine.BaseInfo,CMS.Base.ICMSStorage)">
            <summary>
            Changes the parent of the collection
            </summary>
            <param name="parentObject">Parent object</param>
            <param name="parentStorage">Parent storage</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.CreateNewObject(System.Data.DataRow)">
            <summary>
            Creates new instance of the encapsulated object.
            </summary>
            <param name="dr">DataRow with the data</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetObjectName(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets the unique object name from the given object.
            </summary>
            <param name="infoObj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetCompleteWhereCondition">
            <summary>
            Gets the complete where condition for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetNameWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given object name.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetObjectByNameInternal(System.String)">
            <summary>
            Gets the object by its name, internal representation that gets data from database
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetData(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the data for the collection.
            </summary>
            <param name="where">Where condition</param>
            <param name="offset">Starting offset for the data</param>
            <param name="maxRecords">Maximum number of records to get</param>
            <param name="totalRecords">Returning total number of records</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.CopyPropertiesTo(CMS.DataEngine.InfoObjectCollection)">
            <summary>
            Copies the properties of this collection to the other collection
            </summary>
            <param name="col">Target collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.EnsureObjectValues(CMS.DataEngine.BaseInfo)">
            <summary>
            Ensures the proper values for the given object
            </summary>
            <param name="item">Item in which ensure the values</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.Add(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.ValidateItem(CMS.DataEngine.BaseInfo,System.Boolean)">
            <summary>
            Validates whether the item can be member of the collection (collection can work with it). Returns true if item is valid.
            </summary>
            <param name="item">Item to validate</param>
            <param name="throwException">If true, the method throws exception in case validation fails</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.As``1">
            <summary>
            Makes a wrapper of the collection with specified type of the items.
            </summary>
            <typeparam name="TargetType">Target type of the items</typeparam>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetItemsAsFields(System.String)">
            <summary>
            Returns the updatable collection of fields of collection items
            </summary>
            <param name="propertyName">Name of the properties to extract</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetFieldsAsObjects(System.String)">
            <summary>
            Gets the collection of objects that are referenced by the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetFieldsAsObjects(System.String,System.String)">
            <summary>
            Gets the collection of objects that are referenced by the given property
            </summary>
            <param name="propertyName">Property name</param>
            <param name="objectType">Object type of the target objects</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.Load(System.Collections.Generic.List{CMS.DataEngine.BaseInfo})">
            <summary>
            Clears the data in the collection and loads objects from the given list.
            </summary>
            <param name="objects">Objects data to load</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.RegisterProperties(System.Collections.Generic.List{System.String})">
            <summary>
            Registers supported properties
            </summary>
            <param name="properties">List with supported properties</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetSubsetWhereNotEmpty(System.String)">
            <summary>
            Returns the clone of the collection with specified column not being empty
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetSubsetWhere(System.String)">
            <summary>
            Returns the clone of the collection with specified where condition applied
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetSubsetOrderBy(System.String)">
            <summary>
            Returns the clone of the collection with specified order by applied
            </summary>
            <param name="orderBy">Order By expression</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.ToString">
            <summary>
            Provides a string representation of the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.AddCacheDependencies(System.String[])">
            <summary>
            Adds the given list of cache dependencies to the collection
            </summary>
            <param name="keys">Keys to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.CacheDependenciesChanged">
            <summary>
            Ensures the actions when the cache dependencies have changed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.RemoveClearCacheCallback">
            <summary>
            Removes the callback to clear the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.RegisterClearCacheCallback">
            <summary>
            Registers the callback to clear the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetCacheCallbackKey">
            <summary>
            Gets the key for the cache callback
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetCacheDependencyKeys">
            <summary>
            Gets the list of cache dependency keys on which this collection depends
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.ClearCache">
            <summary>
            Clears the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.ClearCacheCallback(CMS.DataEngine.InfoObjectCollection,System.Object)">
            <summary>
            Clears the collection cache
            </summary>
            <param name="col">Target collection</param>
            <param name="parameter">Callback parameter</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.GetItem(System.Int32)">
            <summary>
            Gets the item on the specified index.
            </summary>
            <param name="index">Item index to get</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.FieldsAsObjects">
            <summary>
            Related objects wrappers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.ItemsAsFields">
            <summary>
            Fields wrappers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.DisplayNames">
            <summary>
            Collection of the object display names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.CodeNames">
            <summary>
            Collection of the object code names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.GUIDs">
            <summary>
            Collection of the object GUIDs
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.IDs">
            <summary>
            Collection of the object IDs
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.IsDisconnected">
            <summary>
            Returns true if the collection is disconnected from the data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.ParentObject">
            <summary>
            Parent object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.OrderBy">
            <summary>
            Order by expression.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.TypeInfo">
            <summary>
            Type info for the collection object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.Name">
            <summary>
            Collection name. Returns object type if name is not defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.NameColumn">
            <summary>
            Name column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.SiteID">
            <summary>
            Site ID to filter the collection to a particular site
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.InternalCount">
            <summary>
            Internal count of the items
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.UseDefaultCacheDependencies">
            <summary>
            If true, the collection uses default cache dependencies to flush it's content
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.SearchText">
            <summary>
            If set, the collection filters objects to only those containing the given text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.CheckLicense">
            <summary>
            If true, the collection check license when getting data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection.UseObjectTypeCondition">
            <summary>
            If true, the collection uses the type condition to get the data
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectCollection.EmptyCollection`1">
            <summary>
            Empty info object collection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectCollection`1">
            <summary>
            Generic strongly typed info object collection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mInfoObject">
            <summary>
            Info object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.#ctor(System.Data.DataSet)">
            <summary>
            Constructor. Creates a static collection populated from DataSet
            </summary>
            <param name="sourceData">Source DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CreateQueryProvider">
            <summary>
            Creates a LINQ query provider for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetEnumerator">
            <summary>
            Gets the strongly typed enumerator for the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.InfoObject">
            <summary>
            Info object instance the provider is working with.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object on specific index.
            </summary>
            <param name="index">Object index to get</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.EmptyCollection`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Add(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Remove(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.GetTargetObjectId(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets the target object ID for this collection
            </summary>
            <param name="infoObj">Object to process</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Add(System.Int32[])">
            <summary>
            Adds given bindings to the collection. Supported only for collections with parent defined. Returns newly created binding objects.
            </summary>
            <param name="bindingIds">Binding IDs to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Remove(System.Int32[])">
            <summary>
            Removes given bindings from the collection. Supported only for collections with parent defined. Returns removed binding objects.
            </summary>
            <param name="bindingIds">Binding IDs to remove</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Add(System.String[])">
            <summary>
            Adds given bindings to the collection. Supported only for collections with parent defined, and target object having code name column. Returns newly created binding objects.
            </summary>
            <param name="bindingCodeNames">Binding code names to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Remove(System.String[])">
            <summary>
            Removes given bindings from the collection. Supported only for collections with parent defined, and target object having code name column. Returns removed binding objects.
            </summary>
            <param name="bindingCodeNames">Binding code names to remove</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.AddBinding(System.String,System.Int32)">
            <summary>
            Adds a new binding
            </summary>
            <param name="bindingColumn">Binding column</param>
            <param name="bindingId">Binding ID</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.RemoveBinding(System.String,System.Int32)">
            <summary>
            Removes the binding
            </summary>
            <param name="bindingColumn">Binding column</param>
            <param name="bindingId">Binding ID</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.GetBindingColumn(System.String@)">
            <summary>
            Gets the binding column and object type
            </summary>
            <param name="targetObjectType">Returns target object type</param>
        </member>
        <member name="T:CMS.DataEngine.BindingRepository">
            <summary>
            Specialized repository for binding object types
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectRepository">
            <summary>
            Repository for info objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectRepository`3">
            <summary>
            Repository for info objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mCollections">
            <summary>
            Table of collections [name -> CollectionType]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mNiceNames">
            <summary>
            Translation of collection nice names to a normal names [niceName -> name]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mAll">
            <summary>
            Collection of all underlying objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mCollectionsList">
            <summary>
            List of all collections (sorted by the order in which the collections were added).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mCollectionSettings">
            <summary>
            Table of collection settings [name -> InfoCollectionSettings]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mCollectionSettingsByIndex">
            <summary>
            Table of collection settings by index [index -> InfoCollectionSettings]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mCount">
            <summary>
            Number of the inner collections.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mProperties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mLoadBinaryData">
            <summary>
            Indicates whether to load binary data into the collections of the repository.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mDisconnectedCount">
            <summary>
            Number of disconnected references for this collection 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mIsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRepository`3.mDynamicNames">
            <summary>
            List of dynamic names of the collections
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.LoadCollection(`2)">
            <summary>
            Loads the given collection.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.NewCollection(System.String)">
            <summary>
            Creates new collection for the data.
            </summary>
            <param name="type">Type of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.NewCombinedCollection">
            <summary>
            Creates new combined collection for the data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.Disconnect">
            <summary>
            Disconnects the collections from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.Reconnect">
            <summary>
            Reconnects the collection to the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetNicePropertyName(System.String)">
            <summary>
            Gets the property name for the original name of the collection
            </summary>
            <param name="name">Original name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.RegisterNiceName(System.String,System.String)">
            <summary>
            Registers the nice name of the collection
            </summary>
            <param name="name">Name</param>
            <param name="niceName">Nice name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the general enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetProperty(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetCollection(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetCollection(System.Int32)">
            <summary>
            Returns the collection of objects.
            </summary>
            <param name="index">Index of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetCollectionResult(System.Int32)">
            <summary>
            Returns the collection of objects from Collection list. Does not load collections
            </summary>
            <param name="index">Index of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRepository`3.GetObjectName(System.Object)">
            <summary>
            Returns the name of the given object
            </summary>
            <param name="obj">Object for which to get the name</param>
        </member>
        <member name="E:CMS.DataEngine.ObjectRepository`3.OnLoadCollection">
            <summary>
            Fires when the collection with specified name is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.GetDynamicNames">
            <summary>
            Function that provides the dynamic names of collections to the repository
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.DynamicNames">
            <summary>
            List of the dynamic names of the collections
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.ParentStorage">
            <summary>
            Parent storage
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.AllowNiceNames">
            <summary>
            If true, the repository allows nice names of the collections, e.g. for "CMS.User" uses "Users"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.IsDisconnected">
            <summary>
            Returns true if this collection is disconnected from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.LoadBinaryData">
            <summary>
            Gets or sets the value which indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.CollectionNames">
            <summary>
            Returns list of collection names in the repository.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.Item(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.Item(System.Int32)">
            <summary>
            Returns the collection of objects.
            </summary>
            <param name="index">Index of the collection</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.All">
            <summary>
            All items from all underlying collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.SortNames">
            <summary>
            If true, the names in enumeration are sorted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectRepository`3.ItemsHaveNames">
            <summary>
            Returns true if the items in the collection have names
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectRepository`3.LoadCollectionHandler">
            <summary>
            Delegate to define the handle to load the collection of this type.
            </summary>
            <param name="repository">Repository into which the collection loads</param>
            <param name="name">Collection name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.#ctor(CMS.Base.ICMSStorage)">
            <summary>
            Constructor.
            </summary>
            <param name="parentStorage">Parent storage object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parentObject">Parent object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.LoadCollection(CMS.DataEngine.InfoCollectionSettings)">
            <summary>
            Loads the given collection.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.NewCollection(System.String)">
            <summary>
            Creates new collection for the data.
            </summary>
            <param name="type">Object type of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.NewCollectionInternal(System.String)">
            <summary>
            Creates a new collection
            </summary>
            <param name="type">Collection type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.NewCombinedCollection">
            <summary>
            Creates new combined collection for the data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.ReplaceCollection(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="name">Collection name</param>
            <param name="objectType">Object type</param>
            <param name="where">Where</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.AddCollection(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="name">Collection name</param>
            <param name="objectType">Object type</param>
            <param name="where">Where</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.AddCollection``1(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="name">Collection name</param>
            <param name="objectType">Object type</param>
            <param name="where">Where</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.AddCollection(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="name">Collection name</param>
            <param name="objectType">Object type</param>
            <param name="where">Where</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N</param>
            <param name="columns">Columns</param>
            <param name="siteId">Site ID of the objects</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.AddCollection(System.String)">
            <summary>
            Registers the given collection of objects within the repository. Includes all the objects of given type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.SubmitChanges">
            <summary>
            Submits the changes to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.Add(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository.ParentObject">
            <summary>
            Parent object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository.IsDisconnected">
            <summary>
            Returns true if the repository is disconnected from the data source
            </summary>
        </member>
        <member name="E:CMS.DataEngine.InfoObjectRepository.OnNewCollection">
            <summary>
            Event fired when new collection instance is requested
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectRepository.OnNewCollectionHandler">
            <summary>
            New collection delegate
            </summary>
            <param name="type">Object type of the collection</param>
            <param name="parentObject">Parent object</param>
            <param name="repository">Parent repository</param>
        </member>
        <member name="M:CMS.DataEngine.BindingRepository.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parentObject">Parent object</param>
        </member>
        <member name="M:CMS.DataEngine.BindingRepository.#ctor(CMS.Base.ICMSStorage)">
            <summary>
            Constructor.
            </summary>
            <param name="parentStorage">Parent storage object</param>
        </member>
        <member name="M:CMS.DataEngine.BindingRepository.NewCollectionInternal(System.String)">
            <summary>
            Creates a new collection
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="P:CMS.DataEngine.BindingRepository.Sites">
            <summary>
            Site bindings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BindingRepository.Item(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="T:CMS.DataEngine.OtherBindingCollection">
            <summary>
            Info collection of object other bindings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.#ctor(System.String,CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="boundObject">Bound object</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.EnsureObjectValues(CMS.DataEngine.BaseInfo)">
            <summary>
            Ensures the proper values for the given object
            </summary>
            <param name="item">Item in which ensure the values</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.GetBindingColumn(System.String@)">
            <summary>
            Gets the binding column and object type
            </summary>
            <param name="targetObjectType">Returns target object type</param>
        </member>
        <member name="P:CMS.DataEngine.OtherBindingCollection.BoundObject">
            <summary>
            Bound object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.OtherBindingRepository">
            <summary>
            Specialized repository for binding object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingRepository.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="boundObject">Parent object</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingRepository.NewCollectionInternal(System.String)">
            <summary>
            Creates a new collection
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="P:CMS.DataEngine.OtherBindingRepository.BoundObject">
            <summary>
            Bound object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OtherBindingRepository.Item(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="T:CMS.DataEngine.SearchAnalyzerTypeEnum">
            <summary>
            Search analyzer type enum.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.SimpleAnalyzer">
            <summary>
            SimpleAnalyzer - divides text at non-letters, lowercase.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StopAnalyzer">
            <summary>
            StopAnalyzer - divides text at non-letters, use of stop words.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.WhiteSpaceAnalyzer">
            <summary>
            WhiteSpaceAnalyzer - divides text at whitespace, lowercase.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StandardAnalyzer">
            <summary>
            StandardAnalyzer - grammar based, lowecase, good for most European-language documents.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.KeywordAnalyzer">
            <summary>
            "Tokenizes" the entire stream as a single token. This is useful for data like zip codes, ids, and some product names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.CustomAnalyzer">
            <summary>
            Custom analyzer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.SubsetAnalyzer">
            <summary>
            Subset analyzer - whitespace, lowercase, searched text is processed as *word*.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StartsWithanalyzer">
            <summary>
            Starts with analyzer - whitespace, lowercase, searched text is processed as word*.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.SimpleWithStemmingAnalyzer">
            <summary>
            Simple analyzer with stemmer involved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StopWithStemmingAnalyzer">
            <summary>
            Stop word analyzer with stemmer involved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.WhitespaceWithStemmingAnalyzer">
            <summary>
            Whitespace analyzer with stemmer involved.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISearchField">
            <summary>
            Represents search field
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchField.Init(System.String,System.Boolean,System.Boolean,System.Object,System.Nullable{CMS.DataEngine.SearchAnalyzerTypeEnum})">
            <summary>
            Initializes object values.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="searchable">Indicates if the search is enabled for this field</param>
            <param name="tokenizable">Indicates if field will be tokenized (processed by the analyzer)</param>
            <param name="value">Field value</param>
            <param name="analyzer">Explicit analyzer to process search field's value</param>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.FieldName">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.Tokenized">
            <summary>
            True when field is tokenizable (analyzer is used to process it's value).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.Analyzer">
            <summary>
            Explicit analyzer to process search field's value. 
            When null, default analyzer is used based on search index configuration. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.Searchable">
            <summary>
            True when field is marked as searchable.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.Value">
            <summary>
            Field value. May be null when field is not initialized with it's value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.InsertDirectly">
            <summary>
            When field is market to be insert directly, it will not processed before inserted into search document. 
            Will not be passed to SearchHelper.AddGeneralField method.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISearchFields">
            <summary>
            Search fields collection and field constatns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchFields.Add(System.String,System.Boolean,System.Boolean,System.Func{System.Object},System.Boolean,System.Nullable{CMS.DataEngine.SearchAnalyzerTypeEnum})">
            <summary>
            Adds new field to collection. When field already exists, it will be updated (merged with existing one). 
            When adding content field with it's value multiple times, the value is appended to existing content.
            </summary>
            <param name="fieldName">Field name</param>
            <param name="searchable">Indicates if field can be searched</param>
            <param name="tokenized">Indicates if field will be tokenized</param>
            <param name="getValueFunc">Function that returns value of the field</param>
            <param name="insertDirectly">Indicates if field should be insert directly into search document whithout aditional processing</param>
            <param name="analyzer">Explicit analyzer to process search field's value. When null default analyzer is used.</param>
            <returns>Newly added or existing field</returns>
            <exception cref="T:System.InvalidOperationException">When StoreValues is true and we try to add already existing field but with different value.</exception>
        </member>
        <member name="M:CMS.DataEngine.ISearchFields.Get(System.String)">
            <summary>
            Returns requested field. Null when field doesn't exist.
            </summary>
            <param name="fieldName">Field name</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchFields.PrepareContentValue(System.Object,System.Boolean)">
            <summary>
            Prepares value to add to content field.
            </summary>
            <param name="value">Value to add</param> 
            <param name="stripTags">Indicates whether tags should be stripped</param>
        </member>
        <member name="P:CMS.DataEngine.ISearchFields.StoreValues">
            <summary>
            Indicates if field values will be retrieved and stored in collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchFields.Items">
            <summary>
            Search fields
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchFieldsConstants">
            <summary>
            Search field constants
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CONTENT">
            <summary>
             Name of content field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.ID">
            <summary>
             Name of id field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.IDCOLUMNNAME">
            <summary>
            Name of ID (DataClass) column in iDocument
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.TYPE">
            <summary>
             Name of type field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.INDEX">
            <summary>
             Name of index field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.SITE">
            <summary>
             Name of the site field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CREATED">
            <summary>
            Name of the created field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CULTURE">
            <summary>
            Name of the culture field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.PARTIAL_REBUILD">
            <summary>
            Special field for partial index rebuild. This field contains site name and node alias path of a document separated by semicolon (used for document move for example).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_TITLE">
            <summary>
            Custom title field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_CONTENT">
            <summary>
            Custom content field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_DATE">
            <summary>
            Custom date field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_URL">
            <summary>
            Custom URL field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_IMAGEURL">
            <summary>
            Custom image URL.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.SCORE">
            <summary>
            Score field
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.POSITION">
            <summary>
            Position field
            </summary>
        </member>
        <member name="T:CMS.RegisterObjectTypeAttribute">
            <summary>
            This attribute finds the static TypeInfo fields (all of them) and registers object types those TypeInfos define to the system.
            </summary>
        </member>
        <member name="M:CMS.RegisterObjectTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="infoType">Info type</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.RegisterObjectTypeAttribute.Init">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="P:CMS.RegisterObjectTypeAttribute.MarkedType">
            <summary>
            Type marked with this attribute
            </summary>
        </member>
        <member name="P:CMS.RegisterObjectTypeAttribute.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.RegisterObjectTypeAttribute.TypeInfo">
            <summary>
            Type info representing this type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DynamicObjectTypeInfo">
            <summary>
            Dynamic object type info structure for objects which definition can be changed during the lifetime.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo">
            <summary>
            Object type info structure.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.VALUE_UNKNOWN">
            <summary>
            Uknown value.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.COLUMN_NAME_UNKNOWN">
            <summary>
            Uknown column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mLogSiteBindings">
            <summary>
            If true, object tasks are logged when site binding changes.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mGlobalLogSynchronization">
            <summary>
            If true, object tasks are logged.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mTrackObjectInstances">
            <summary>
            If true, object instances are tracked.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAllowObjectRelationships">
            <summary>
            If true, object relationships are allowed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mRelatedTypes">
            <summary>
            Dictionary of related typeinfos (the relationship is made from OriginalTypeInfo property, but reflects the relationship from both sides).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mEvents">
            <summary>
            Events handled by object of this type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mRelatedTypeInfos">
            <summary>
            Returns list of related TypeInfos of this TypeInfo (the relationship is made from OriginalTypeInfo property, but reflects the relationship from both sides).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mRelatedTypeInfosLoaded">
            <summary>
            Returns true if related type infos were loaded
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIDColumn">
            <summary>
            ID column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mTimeStampColumn">
            <summary>
            Time stamp column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mGUIDColumn">
            <summary>
            GUID column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mCodeNameColumn">
            <summary>
            Code name column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mDisplayNameColumn">
            <summary>
            Display name column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mBinaryColumn">
            <summary>
            Binary column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSiteIDColumn">
            <summary>
            Site ID column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mParentIDColumn">
            <summary>
            Parent ID column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mGroupIDColumn">
            <summary>
            Community group ID column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mResourceIDColumn">
            <summary>
            Resource ID column for dependant object resource.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mExtensionColumn">
            <summary>
            File extension column (for objects with binary column - column which specifies extension type of binary data).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSizeColumn">
            <summary>
            File size column (for objects with binary column - column which specifies size of binary data).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mMimeTypeColumn">
            <summary>
            Mime type column (for objects with binary column - column which specifies mime type of binary data).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mThumbnailGUIDColumn">
            <summary>
            Name of the column that contains the GUID of the object thumbnail meta file.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mThumbnailMetaFileGroup">
            <summary>
            Name of the meta file group of the thumbnail meta file.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIconGUIDColumn">
            <summary>
            Name of the column that contains the GUID of the object icon meta file.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mVersionGUIDColumn">
            <summary>
            Name of the column that contains the version GUID of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mCodeColumn">
            <summary>
            Name of the column that contains code of the object (markup).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mCSSColumn">
            <summary>
            Name of the column that contains CSS of the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIconMetaFileGroup">
            <summary>
            Name of the meta file group of the icon meta file.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mOrderColumn">
            <summary>
            Order column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSearchContentColumn">
            <summary>
            Column which stores cached content extracted for this Info object to be used in search indexing. Used by the method EnsureSearchContent.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mCustomizedColumnsColumn">
            <summary>
            Customized columns column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIsCustomColumn">
            <summary>
            Is custom flag column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mOriginalTypeInfo">
            <summary>
            Parent TypeInfo.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAllObjectsInvalidated">
            <summary>
            Time of the last invalidation of all of the objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mLastObjectInvalidated">
            <summary>
            Time of the last invalidation of any object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mInvalidatedObjects">
            <summary>
            Table of invalidated objects [ID] -> [Invalidated when].
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mInvalidatedChildren">
            <summary>
            Table of invalidated direct child objects [ParentID] -> [Invalidated when].
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mColumnsInvalidated">
            <summary>
            If true, column names are not valid.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mInstanceCount">
            <summary>
            Number of object instances of the current type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mForeignKeys">
            <summary>
            Foreign key column names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mLogObjectEventsAppSettings">
            <summary>
            App settings that can disable event logging for any type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mParentTypeInfo">
            <summary>
            Parent type information of the info record if the object is child object (has parent).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mProviderType">
            <summary>
            Provider type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mInfoType">
            <summary>
            Info type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mModuleName">
            <summary>
            Name of the module where the object belongs.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mModuleInfo">
            <summary>
            ModuleInfo object retrieved by ModuleName.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAssemblyNameColumn">
            <summary>
            Name of the column with assembly name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mDefaultOrderBy">
            <summary>
            Default order by clause for getting data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mParentObjectType">
            <summary>
            Parent type (ObjectType constant).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectDependencies">
            <summary>
            Object dependencies (list of foreign keys definition of the object with the exception of SiteID column and ParentID columns).
            Automatically computed from Extends and DependsOn lists of all objects within the system.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mChildObjectTypes">
            <summary>
            Child object types, list of object types separated by semicolon.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mBindingObjectTypes">
            <summary>
            Binding object types, list of object types separated by semicolon.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mOtherBindingObjectTypes">
            <summary>
            Other binding types (ObjectType constants separated by semicolon) - binding types where this object participate but is not parent object of those binding types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mChildDependencyColumns">
            <summary>
            Name of the columns (separated by semicolon) of object dependencies which should be included into the parent data (for example class data for BizForms).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSiteBindingObject">
            <summary>
            Site binding object (if exists).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSiteBinding">
            <summary>
            Site binding object type (if exists).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectCategory">
            <summary>
            Object category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mCategoryIDColumn">
            <summary>
            Category ID column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAllowPostProcessing">
            <summary>
            Indicates if object allows post-processing during import or staging process.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIsBinding">
            <summary>
            Determines if the object is binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIsMultipleBinding">
            <summary>
            Indicates if the object is binding between more than two objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIsSiteBinding">
            <summary>
            Determines if the object is site binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mCheckPermissions">
            <summary>
            Determines whether the permissions should be checked when the object is accessed within the macro engine as an inner object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mLogSynchronization">
            <summary>
            Logs synchronization.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mLogIntegration">
            <summary>
            Whether to log integration tasks.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSupportsCloning">
            <summary>
            Indicates if object can be cloned.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSupportsCloneToOtherSite">
            <summary>
            Indicates if object can be cloned to other site than the site of the original.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mLogEvents">
            <summary>
            Logs events.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mUpdateTimeStamp">
            <summary>
            Update time stamp.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mTouchCacheDependencies">
            <summary>
            If true, cache dependencies are touched when the object is changed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIncludeToSynchronizationParentDataSet">
            <summary>
            Parent data inclusion for synchronization.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mRequiredObject">
            <summary>
            If true, the object is required when imported / synchronized. If false, the object can be skipped when some error occurs.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mHasObjectRelationships">
            <summary>
            If true, the objects can have relationships to other objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mHasMetaFiles">
            <summary>
            If true, the objects can have meta files. By default no metafiles to simplify general processes
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAllowDataExport">
            <summary>
            Specifies whether the object supports data export.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mAllowRestore">
            <summary>
            Indicates if object can be deleted to rec. bin.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mOriginalObjectType">
            <summary>
            Original object type of virtual object types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mWhereCondition">
            <summary>
            Default where condition restricting the data of this particular object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mProviderIsCustomizable">
            <summary>
            Indicates if provider supports methods customization.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mReferenceColumnNames">
            <summary>
            Names of the columns that reference some object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mHasAutomaticProperties">
            <summary>
            If true, the object of this type has automatic properties.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mRememberUniGridState">
            <summary>
            Indicates whether UniGrids working with objects of this type will remember their state, i.e., filter, page number, page size and sorting order.
            </summary>
            <remarks>
            This setting can be overridden by individual UniGrids.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIsMainObject">
            <summary>
            Indicates if the object is main (= is not child of other objects).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectPathColumn">
            <summary>
            Object path column for hierarchical objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectIDPathColumn">
            <summary>
            Object ID path column. If the object has hierarchical structure.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectNamePathColumn">
            <summary>
            Object name path column. If the object has hierarchical structure.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectLevelColumn">
            <summary>
            Object level column. If the object has hierarchical structure, determines the depth within the tree.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mEnabledColumn">
            <summary>
            Name of the column which determines whether the object is enabled or disabled within the system.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mFormDefinitionColumn">
            <summary>
            Form definition column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mContainsMacros">
            <summary>
            Indicates if the object may contain some macros in it's values.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mImportExportSettings">
            <summary>
            Import/export settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mDeleteAsDependency">
            <summary>
            Indicates if object should be deleted when removing dependencies of other object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mClassStructureInfo">
            <summary>
            Class structure info of this type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mSupportsSearch">
            <summary>
            Indicates if object can be searched.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mIncludeToVersionParentDataSet">
            <summary>
            Indicates if the objects should be included in version data set of it's parent
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mHasObjectSettings">
            <summary>
            Indicates if the object can have object settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerType">Provider type</param>
            <param name="objectType">Object type</param>
            <param name="objectClassName">Object class name</param>
            <param name="idColumn">ID column name</param>
            <param name="timeStampColumn">Time stamp column name</param>
            <param name="guidColumn">GUID column name</param>
            <param name="codeNameColumn">Code name column name</param>
            <param name="displayNameColumn">Display name column name</param>
            <param name="binaryColumn">Binary column name</param>
            <param name="siteIDColumn">Site ID column name</param>
            <param name="parentIDColumn">Parent ID column name</param>
            <param name="parentObjectType">Parent object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.#ctor(System.String,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="sourceInfo">Source TypeInfo instance</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.#ctor">
            <summary>
            Constructor just for clonning purposes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RepresentsObjectType(System.String)">
            <summary>
            Returns true if this type info represents the given object type. Object type is represented if either ObjectType, OriginalObjectType or RelatedTypeInfos equal to the given object type.
            </summary>
            <param name="objType">ObjectType to compare with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetOriginalObjectType">
            <summary>
            Gets the original object type of virtual object types. For normal object type it's same as object type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.LoadDependentObjectTypes">
            <summary>
            Gets the object types somehow dependent on the current object type (as parent, site, group or via foreign key). Skips inherited object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.LoadRelatedTypes">
            <summary>
            Loads the related types for all type infos [objectType] => [List of related object types]
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.EnsureCategoryInfo">
            <summary>
            Initializes the category info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetCategoryInfo">
            <summary>
            Gets the category info for current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetSiteBindingObject">
            <summary>
            Gets the site binding object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.HasBindingTypeDependencies">
            <summary>
            Returns true if the object has at least one Object dependency of type Binding.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.MergeTypeInfos(CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Merges two or more type infos. Single valued properties are taken from the first type info, list properties are merged from all the participating typeinfos.
            </summary>
            <param name="typeInfos">TypeInfos to merge</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.Clone">
            <summary>
            Returns clone of type info where all the properties are copied.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.CopyEventsTo(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Copies the event's hooks from current ObjectTypeInfo to specified one.
            </summary>
            <param name="info">Target.</param>
            <remarks>Do not use in custom code!</remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetFirstKnownColumn(System.String[])">
            <summary>
            Gets the first known column from the given list of columns
            </summary>
            <param name="columns">Columns to select from</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetTypeWhereCondition">
            <summary>
            Generates default WHERE condition according to GroupColumn and TypeCondition settings. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.CheckTypeCondition(CMS.Base.IDataContainer,System.Boolean)">
            <summary>
            Checks if condition defined in TypeCondition is not violated by the given info.
            </summary>
            <param name="info">Info to check</param>
            <param name="throwException">If true, the exception is thrown in case the object violates the type condition</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ApplyTypeCondition(CMS.Base.IDataContainer)">
            <summary>
            Applies condition defined in TypeCondition property to the given info. Returns info without changes if TypeCondition is null.
            </summary>
            <param name="info">Info to apply condition to</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.AddDependencies(System.Collections.Generic.List{CMS.DataEngine.ObjectDependency})">
            <summary>
            Adds object dependencies to the existing ones.
            </summary>
            <param name="dependencies">Dependencies to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetObjectTypeForColumn(System.String)">
            <summary>
            Gets the object type for the given column or null if the object type is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDependencyForColumn(System.String)">
            <summary>
            Gets the dependency settings for the given column or null if the settings is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetTypeColumns(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns the column names of specified object type, separated by semicolon.
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetTypeColumns(System.String)">
            <summary>
            Returns the column names of specified object type, separated by semicolon.
            </summary>
            <param name="objectType">Object type name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IncludeToParentDataSet(CMS.DataEngine.OperationTypeEnum)">
            <summary>
            Gets value of appropriate include to parent data set property due to operation.
            </summary>
            <param name="operation">Operation type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ObjectInvalidated(System.Int32,System.Boolean)">
            <summary>
            Invalidates specific object.
            </summary>
            <param name="objectId">Object ID to invalidate</param>
            <param name="logTask">If true web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ChildrenInvalidated(System.Int32,System.Boolean)">
            <summary>
            Invalidates direct child objects of specific parent.
            </summary>
            <param name="parentId">Parent object ID</param>
            <param name="logTask">If true web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateAllObjects">
            <summary>
            Invalidates all objects of this type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateAllObjects(System.Boolean)">
            <summary>
            Invalidates all objects of this type.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateColumnNames">
            <summary>
            Invalidates column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateColumnNames(System.Boolean)">
            <summary>
            Invalidates column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IsObjectInvalid(System.Int32,System.DateTime)">
            <summary>
            Returns true if the object is invalid.
            </summary>
            <param name="objectId">Object ID</param>
            <param name="lastValid">Time when the object was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.AreChildrenInvalid(System.Int32,System.DateTime)">
            <summary>
            Returns true if the direct child objects are invalid.
            </summary>
            <param name="parentId">Parent object ID</param>
            <param name="lastValid">Time when the objects was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IncrementInstanceCount">
            <summary>
            Increase the number of instances
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.DecrementInstanceCount">
            <summary>
            Decrease the number of instances
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.AddNewInstance(CMS.DataEngine.BaseInfo)">
            <summary>
            Registers a new object instance
            </summary>
            <param name="instance">Instance to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RemoveInstance(CMS.DataEngine.BaseInfo)">
            <summary>
            Removes a new object instance from the list
            </summary>
            <param name="instance">Instance to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetInstances">
            <summary>
            Gets the list of instances of the objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetSiteWhereCondition(System.Int32,System.Boolean)">
            <summary>
            Gets the where condition to limit the objects to specific site.
            </summary>
            <param name="siteId">Site ID to filter by</param>
            <param name="combine">True - both site and global objects are included. False - only site objects are included</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetObjectPathWhereCondition(System.String)">
            <summary>
            Gets the where condition to limit the objects to specific path.
            </summary>
            <param name="path">ID path</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IsDynamicDependency(CMS.DataEngine.ObjectDependency)">
            <summary>
            Indicates if dependency object type id dynamic
            </summary>
            <param name="dep">Object dependency settings</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetBindingWhereCondition(System.String,System.Object[])">
            <summary>
            Gets the where condition to limit the objects to specific binding dependencies. Use this method for 3 and more-keys bindings.
            </summary>
            <param name="bindingType">Binding object type name</param>
            <param name="dependencies">Pairs of binding dependencies to filter by (first variable in each pair - dependency object type, second variable in each pair - dependency value)</param>  
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetBindingColumns(System.Boolean,System.Boolean)">
            <summary>
            Gets the list of columns representing binding
            </summary>
            <param name="includeParent">If true, the result includes the parent column</param>
            <param name="includeSite">If true, the result includes the site column</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDependencyWhereCondition(System.String,System.String,System.Object[])">
            <summary>
            Gets the where condition to limit the objects to specific dependencies.
            </summary>
            <param name="dependencyType">Dependency object type name</param>
            <param name="op">Operator</param>
            <param name="dependencies">Pairs of dependencies to filter by (first variable in each pair - dependency object type, second variable in each pair - dependency value)</param>  
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetNewWhereCondition">
            <summary>
            Gets a new empty where condition for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDataQuery(System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)">
            <summary>
            Gets the data query for this object type
            </summary>
            <param name="parameters">Parameters for the data retrieval</param>
            <param name="checkLicense">If true, the license is checked for this query</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDependencyWhereCondition(System.String,System.String,System.Tuple{System.String,System.Nullable{System.Int32}}[])">
            <summary>
            Gets the where condition to limit the objects to specific dependencies.
            </summary>
            <param name="dependencyType">Dependency object type name</param>
            <param name="op">Operator</param>
            <param name="dependencies">Pairs of dependencies to filter by (first item in each pair - dependency object type, second item in each pair - dependency value)</param>  
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetBindingDependencyObjectType(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns first object type from binding dependencies, parent, and site which holds reference to the different object type than the object type of the provider. 
            Use only for 2-keys bindings.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InitializeForeignKeys">
            <summary>
            Initializes foreign key columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IsForeignKey(System.String)">
            <summary>
            Indicates if given column is foreign key.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetNiceObjectTypeName">
            <summary>
            Gets the nice objext type name for this type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ToXML">
            <summary>
            Returns XML representation of TypeInfo instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ToJSON">
            <summary>
            Returns JSON representation of TypeInfo instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ToXMLInternal">
            <summary>
            Returns XML representation of TypeInfo instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ToJSONInternal">
            <summary>
            Returns JSON representation of TypeInfo instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.HasEvents">
            <summary>
            Returns true if this type info has some events
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RaiseOnLoadRelatedData(CMS.DataEngine.BaseInfo)">
            <summary>
            Raises the on load related data event.
            </summary>
            <param name="infoObj">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RaiseOnLogObjectChange(CMS.DataEngine.BaseInfo,CMS.DataEngine.TaskTypeEnum)">
            <summary>
            Raises the OnLogObjectChange event.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="taskType">Type of the task</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogSiteBindings">
            <summary>
            If true, object tasks are logged when site binding changes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowObjectRelationships">
            <summary>
            If true, object relationships are allowed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.GlobalLogSynchronization">
            <summary>
            If true, object tasks are logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TrackObjectInstances">
            <summary>
            If true, object instances are tracked.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RelatedTypes">
            <summary>
            Returns dictionary of related typeinfos (the relationship is made from OriginalTypeInfo property, but reflects the relationship from both sides). [objectType] => [List of related object types]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DeleteAsDependency">
            <summary>
            Indicates if object should be deleted when removing dependencies of other object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TypeCondition">
            <summary>
            Condition which can distinguish between several object types within one Info class. This is used for two purposes - first to generate correct type WHERE condition
            which is used in GetData (for example) and for correct object initialization when creating empty BaseInfo objects for specified object type.
            If you need to specify more complex WHERE condition, use property WhereCondition which has higher priority.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RelatedTypeInfos">
            <summary>
            Returns list of related TypeInfos of this TypeInfo (the relationship is made from OriginalTypeInfo property, but reflects the relationship from both sides).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LastObjectInvalidated">
            <summary>
            Last time of the object invalidation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ColumnsInvalidated">
            <summary>
            Indicates whether column names are invalidated. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ImportExportSettings">
            <summary>
            Import/export settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsDataObjectType">
            <summary>
            Indicates if the object is dynamic based on data in the DB (e.g. custom table item or biz form item objecttypes).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsMultipleBinding">
            <summary>
            Indicates if the object is binding between more than two objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsMainObject">
            <summary>
            Indicates if the object is main (= is not child of other objects).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ReferenceColumnNames">
            <summary>
            Names of the columns that reference some object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Name">
            <summary>
            Object type name, if not set, ObjectClassName is returned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IDColumn">
            <summary>
            ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TimeStampColumn">
            <summary>
            Time stamp column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.GUIDColumn">
            <summary>
            GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CodeNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.NameGloballyUnique">
            <summary>
            If true, the object code name must be unique both per site, and through global objects. If false, the name is unique per site only. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DisplayNameColumn">
            <summary>
            Display name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.BinaryColumn">
            <summary>
            Binary column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn">
            <summary>
            Order column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SearchContentColumn">
            <summary>
            Column which stores cached content extracted for this Info object to be used in search indexing. Used by the method EnsureSearchContent.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CustomizedColumnsColumn">
            <summary>
            Column name which contains customized columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsCustomColumn">
            <summary>
            Column name of the info record for flag IsCustom.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SiteIDColumn">
            <summary>
            Site ID column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ParentIDColumn">
            <summary>
            Parent ID column name of the info record, returns specific column if the object is child object (has parent).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.PossibleParentIDColumn">
            <summary>
            Possible parent ID column name of the info record in case the parent ID column is optional (if the object can be both global and child).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.GroupIDColumn">
            <summary>
            Community group ID column name of the info record, returns specific column if the object can be also group object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ResourceIDColumn">
            <summary>
            Resource ID column name of the info record, returns specific column if the object is dependant on a resource.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.MimeTypeColumn">
            <summary>
            Mime type column (for objects with binary column - column which specifies mime type of binary data).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ExtensionColumn">
            <summary>
            File extension column (for objects with binary column - column which specifies extension type of binary data).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.EnabledColumn">
            <summary>
            Name of the column which determines whether the object is enabled or disabled within the system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SizeColumn">
            <summary>
            File size column (for objects with binary column - column which specifies size of the binary data).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ThumbnailGUIDColumn">
            <summary>
            Name of the column that contains the GUID of the object thumbnail meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IconGUIDColumn">
            <summary>
            Name of the column that contains the GUID of the object icon meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ThumbnailMetaFileGroup">
            <summary>
            Name of the meta file group of the thumbnail meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IconMetaFileGroup">
            <summary>
            Name of the meta file group of the icon meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ModuleName">
            <summary>
            Name of the module where the object belongs.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.VersionGUIDColumn">
            <summary>
            Name of the column that contains the version GUID of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CodeColumn">
            <summary>
            Name of the column that contains code of the object (markup).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CSSColumn">
            <summary>
            Name of the column that contains CSS of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ModuleInfo">
            <summary>
            Returns ModuleInfo object retrieved by ModuleName.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AssemblyNameColumn">
            <summary>
            Name of the column with assembly name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.FormDefinitionColumn">
            <summary>
            Form definition column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DefaultOrderBy">
            <summary>
            Default order by clause for getting data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ProviderType">
            <summary>
            Provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ParentTypeInfo">
            <summary>
            Parent type information of the info record if the object is child object (has parent).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InfoType">
            <summary>
            Info class type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ProviderObject">
            <summary>
            Returns the provider object for this type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectClassName">
            <summary>
            Object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ClassStructureInfo">
            <summary>
            Class structure information. If not set explicitly, it is retrieved automatically by class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ParentObjectType">
            <summary>
            Parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ChildDependencyColumns">
            <summary>
            Name of the columns (separated by semicolon) of object dependencies which should be included into the parent data (for example class data for BizForms).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectDependencies">
            <summary>
            Object dependencies (list of foreign keys definition of the object with the exception of SiteID column and ParentID columns).
            Automatically computed from Extends and DependsOn lists of all objects within the system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsWrapper">
            <summary>
            Returns true if object is wrapper. Object consists of several partial objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.WrapperObjectType">
            <summary>
            Wrapper object type - type of the object which is is a wrapper for this object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ConsistsOf">
            <summary>
            Defines the list of object TypeInfos that are part of this wrapper object. If the object is not a wrapper, this property is not initialized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Extends">
            <summary>
            List of columns which which this object extends other objects as a foreign key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DependsOn">
            <summary>
            List of objects this object depends on (foreign keys definition of the object with the exception of SiteID column and ParentID columns to the objects which are directly visible via reference,
            for the foreign keys of objects of other modules not visible by this module, use Extends property in those object to define the foreign key in this object).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ChildObjectTypes">
            <summary>
            Child object types, list of object types separated by semicolon.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.BindingObjectTypes">
            <summary>
            Binding object types, list of object types separated by semicolon.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OtherBindingObjectTypes">
            <summary>
            Other binding types (ObjectType constants separated by semicolon) - binding types where this object participate but is not parent object of those binding types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SiteBindingObject">
            <summary>
            Site binding object (if exists).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SiteBinding">
            <summary>
            Site binding object type (if exists).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CategoryObject">
            <summary>
            Empty read-only instance of the category object (if this type has a category object)
            For example settings key will have a SettingsCategoryInfo object here.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CategoryIDColumn">
            <summary>
            Category ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.UpdateTimeStamp">
            <summary>
            If true, timestamp of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SynchronizationObjectTreeLocations">
            <summary>
            Object tree locations for synchronization
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogIntegration">
            <summary>
            If true, integration tasks are being logged. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IncludeToVersionParentDataSet">
            <summary>
            Indicates if the objects should be included in version data set of it's parent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsLocking">
            <summary>
            Indicates is the object supports locking (check-in / check-out). Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ContainsMacros">
            <summary>
            Indicates if the object may contain some macros in it's values. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsCloning">
            <summary>
            Indicates if object can be cloned. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsCloneToOtherSite">
            <summary>
            Indicates if object can be cloned to different site than the site of the original. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogEvents">
            <summary>
            If true, Events tasks are logged on the object update. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TouchCacheDependencies">
            <summary>
            If true, cache dependencies are touched when the object is changed. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IncludeToSynchronizationParentDataSet">
            <summary>
            If false, the object is not included in the parent DataSet (for synchronization).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RequiredObject">
            <summary>
            If true, the object is required when imported / synchronized. If false, the object can be skipped when some error occurs. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasMetaFiles">
            <summary>
            If true, the objects can have meta files. By default no metafiles to simplify general processes
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasProcesses">
            <summary>
            If true, the processes can be run on the objects. By default no processes to simplify general processes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasExternalColumns">
            <summary>
            If true, the object has externally stored columns. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsTriggerTarget">
            <summary>
            If true, the object can be targeted by triggers. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasScheduledTasks">
            <summary>
            If true, the scheduled tasks can be run on the objects. By default no scheduled tasks to simplify general processes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasObjectRelationships">
            <summary>
            If true, the objects can have relationships to other objects. By default no relationships to simplify general processes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsSiteObject">
            <summary>
            Returns true if the object is site
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsBinding">
            <summary>
            Returns true if the object is binding. Set forces the object to behave as binding.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowPostProcessing">
            <summary>
            Indicates if object allows post-processing during the import and staging process.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsCategory">
            <summary>
            Returns true if object is category type. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DeleteObjectWithAPI">
            <summary>
            If true, the object is always deleted using API methods in the remove dependencies phase, not the generated queries. Use for objects where additional actions are performed during deletion. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CheckDependenciesOnDelete">
            <summary>
            If true, the CheckDependencies procedure is first called within the remove dependencies procedure and if there are some, the remove dependencies procedure
            throws and exception and does not continue.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CheckPermissions">
            <summary>
            Determines whether the permissions should be checked when the object is accessed within the macro engine as an inner object. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsSiteBinding">
            <summary>
            Returns true if the object is site binding.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsSelfBinding">
            <summary>
            Returns true if the binding is binding to the same object as parent.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowDataExport">
            <summary>
            Specifies whether the object supports data export. By default the value is true for all objects except binding objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsInvalidation">
            <summary>
            If true, the object is automatically invalidated upon it's change. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsGlobalObjects">
            <summary>
            If true, object can be either site or global (for example poll). Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Feature">
            <summary>
            Get/sets info's feature for license check
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InvalidatedObjects">
            <summary>
            Table of invalidated objects [ID] -> [Invalidated when].
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InvalidatedChildren">
            <summary>
            Table of invalidated direct child objects [ParentID] -> [Invalidated when].
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InstanceCount">
            <summary>
            Gets the number of registered isntances.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ForeignKeys">
            <summary>
            List of the foreign keys columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowRestore">
            <summary>
            Indicates if the object supports deleting to recycle bin. By default the value is true for all objects except binding objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ProviderIsCustomizable">
            <summary>
            Indicates if provider supports methods customization
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Inherited">
            <summary>
            Indicates if the type info is inherited (list info for example).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OriginalTypeInfo">
            <summary>
            Original object type of virtual object types. For normal object type it's same as object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType">
            <summary>
            Original object type of virtual object types. For normal object type it's same as object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.WhereCondition">
            <summary>
            Default where condition restricting the data of this particular object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasAutomaticProperties">
            <summary>
            If true, the object of this type has got some automatic properties
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RememberUniGridState">
            <summary>
            Indicates whether UniGrids working with objects of this type will remember their state, i.e., filter, page number, page size and sorting order.
            </summary>
            <remarks>
            This setting can be overridden by individual UniGrids.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.MaxCodeNameLength">
            <summary>
            Maximum length of the object code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DefaultData">
            <summary>
            Default data exported within installation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsVirtualObject">
            <summary>
            Indicates if object is stored in DB or only in memory.
            
            If true, object is stored in memory and cannot be queried by SQL. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn">
            <summary>
            Path column name of the info record, returns specific column if the object has hierarchical structure.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectIDPathColumn">
            <summary>
            ID path column name of the info record, returns specific column if the object has hierarchical structure.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectNamePathColumn">
            <summary>
            Name path column name of the info record, returns specific column if the object has hierarchical structure.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectLevelColumn">
            <summary>
            Object level column. If the object has hierarchical structure, determines the depth within the tree.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RegisterAsChildToObjectTypes">
            <summary>
            If set (= not null), than the automatic process of registering the object type in the ChildObjectTypes list is bypassed and the registration is
            forced to the specified types in this list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RegisterAsBindingToObjectTypes">
            <summary>
            If set (= not null), than the automatic process of registering the object type in the BindingObjectTypes list is bypassed and the registration is
            forced to the specified types in this list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RegisterAsOtherBindingToObjectTypes">
            <summary>
            If set (= not null), than the automatic process of registering the object type in the OtherBindingObjectTypes list is bypassed and the registration is
            forced to the specified types in this list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SensitiveColumns">
            <summary>
            List of column names which are sensitive from the privacy point of view (i.e. UserPassword, etc.). Those columns are automatically excluded from macro engine and REST.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsSearch">
            <summary>
            Indicates if object can be searched. Default is true for main objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.NestedInfoTypes">
            <summary>
            List of nested info object types that contain the data internally
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasObjectSettings">
            <summary>
            Indicates if the object can have object settings. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DependentObjectTypes">
            <summary>
            Gets the object types somehow dependent on the current object type (as parent, site, group or via foreign key). Skips inherited object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Events">
            <summary>
            Events handled by object of this type
            </summary>
        </member>
        <member name="E:CMS.DataEngine.ObjectTypeInfo.OnLogObjectChange">
            <summary>
            Fires when the object change should be logged - Handler for particular type info
            </summary>
        </member>
        <member name="E:CMS.DataEngine.ObjectTypeInfo.OnLogGlobalObjectChange">
            <summary>
            Fires when the object change should be logged - Global handler
            </summary>
        </member>
        <member name="E:CMS.DataEngine.ObjectTypeInfo.OnLoadRelatedData">
            <summary>
            Fires when the related data should be loaded to the object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo.ObjectLoadRelatedDataEventHandler">
            <summary>
            Object load related data event handler.
            </summary>
            <param name="infoObj">Info object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo.OnGetContentEventHandler">
            <summary>
            Fires when search content is requested. You can modify content value which is saved to the search index.
            </summary>
            <param name="obj">Currently indexed object</param>
            <param name="content">Current content value</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo.OnLogObjectChangeEventHandler">
            <summary>
            Logs the object change.
            </summary>
            <param name="infoObj">Main info object</param>
            <param name="taskType">Type of the task</param>
        </member>
        <member name="M:CMS.DataEngine.DynamicObjectTypeInfo.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerType">Provider type</param>
            <param name="objectType">Object type</param>
            <param name="objectClassName">Object class name</param>
            <param name="idColumn">ID column name</param>
            <param name="timeStampColumn">Time stamp column name</param>
            <param name="guidColumn">GUID column name</param>
            <param name="codeNameColumn">Code name column name</param>
            <param name="displayNameColumn">Display name column name</param>
            <param name="binaryColumn">Binary column name</param>
            <param name="siteIDColumn">Site ID column name</param>
            <param name="parentIDColumn">Parent ID column name</param>
            <param name="parentObjectType">Parent object type</param>
        </member>
        <member name="P:CMS.DataEngine.DynamicObjectTypeInfo.IsValid">
            <summary>
            Indicates if dynamic type info is valid and shouldn't be updated based on current state of definition
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IncludeToParentEnum">
            <summary>
            Determines whether objects of child types are included into the export/staging data of parent objects.
            </summary>
            <remarks>
            Use for the values of the <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.<see cref="P:CMS.DataEngine.ObjectTypeInfo.IncludeToSynchronizationParentDataSet"/> and <see cref="T:CMS.DataEngine.ImportExportSettings"/>.<see cref="P:CMS.DataEngine.ImportExportSettings.IncludeToExportParentDataSet"/> properties.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.None">
            <summary>
            Objects of the child type are not included in the data of parent objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.Complete">
            <summary>        
            The data of parent objects includes all existing child objects of the given type.
            Import/staging adds new child objects or updates existing ones. Deletes child objects that exist on the target instance, but are missing in the data of the updated parent.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.Incremental">
            <summary>        
            The data of parent objects includes all existing child objects of the given type.
            Import/staging adds new child objects or updates existing ones. Does not delete child objects that exist on the target instance, but are missing in the data of the updated parent.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.Default">
            <summary>
            Default inclusion. Do NOT assign this value manually.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTreeLocation">
            <summary>
            Defines a location for an object type within the object tree in the export/import or staging interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTreeLocation.#ctor(System.String[])">
            <summary>
            Constructor. Accepts string parameters, each representing a category (level) in the object tree.
            You can use either the default category constants or custom strings.
            The tree node containing the objects is added under the final category.
            </summary>
            <param name="path">Parts of the path</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectTreeLocation.ObjectType">
            <summary>
            Object type of the actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTreeLocation.ParentPath">
            <summary>
            Parent path in the object type tree.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SynchronizationTypeEnum">
            <summary>
            Determines how the system logs staging synchronization tasks for object types.
            </summary>
            <remarks>
            Use for the value of the <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.<see cref="P:CMS.DataEngine.ObjectTypeInfo.LogSynchronization"/> property.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.None">
            <summary>
            The system does not log staging tasks for objects of the type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.LogSynchronization">
            <summary>
            The system logs staging tasks when objects of the type are created, updated or deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.TouchParent">
            <summary>        
            For object types that have a parent type. Creating, modifying or deleting an object of the child type triggers an update of the parent object.
            The update generates staging tasks according to the TYPEINFO settings of the parent type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.Default">
            <summary>
            Default value used internally. Do NOT assign this value manually in the TYPEINFO of classes.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TypeCondition">
            <summary>
            Class determining condition which can distinguish between several object types within one Info class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeCondition.NOT_NULL">
            <summary>
            Represents Condition value "IS NOT NULL".
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeCondition.NULL">
            <summary>
            Represents Condition value "IS NULL".
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.#ctor(System.String,System.Object)">
            <summary>
            Creates new instance of ObjectDependency.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="conditionValue">value of the condition column which determines specified type</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.GetFieldValue">
            <summary>
            Gets the field value for the Type condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeCondition.ConditionColumn">
            <summary>
            Gets or sets the name of the column the value of which can distinguish between the object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeCondition.ConditionValue">
            <summary>
            Gets or sets the value of the condition column which determines specified type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MessageTypeEnum">
            <summary>
            Message type returned to log panel.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Info">
            <summary>
            Informational message type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Warning">
            <summary>
            Warning message type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Error">
            <summary>
            Error message type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Finished">
            <summary>
            Logging finished.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlMacroHelper">
            <summary>
            Helper methods for SQL query macros
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.SHARP_REPLACEMENT">
            <summary>
            Replacement for ## in Encode/Decode methods.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoWhereRegExp">
            <summary>
            Regular expression to match not needed WHERE condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoOrderByRegExp">
            <summary>
            Regular expression to match not needed ORDER BY expression.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoGroupByRegExp">
            <summary>
            Regular expression to match not needed GROUP BY expression.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoHavingRegExp">
            <summary>
            Regular expression to match not needed HAVING condition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.GetEmptyWhereRegEx(System.String)">
            <summary>
            Gets a regular expression to match an empty where condition
            </summary>
            <param name="keyWord">Where condition key word</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.GetMacroRegEx(System.String)">
            <summary>
            Gets the regular expression for a given macro name
            </summary>
            <param name="name">Macro name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ResolveQueryMacros(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Resolves the query macros using the given parameters.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Parameters array</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ResolveQueryMacros(CMS.DataEngine.QueryMacros,System.String)">
            <summary>
            Resolves the query macros.
            </summary>
            <param name="queryMacros">Query macros</param>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceMacro(System.String@,System.String,System.String,System.String)">
            <summary>
            Replaces the macro within the given text. Returns true, if the replacement was made. Returns false if the the macro wasn't found.
            </summary>
            <param name="text">Text to replace</param>
            <param name="macro">Macro to replace</param>
            <param name="replacement">Replacement string</param>
            <param name="defaultReplacement">Default replacement in case the replacement is empty</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.BuildSelectQuery(CMS.DataEngine.QueryMacros)">
            <summary>
            Builds the select query using the given macros
            </summary>
            <param name="queryMacros">Query macros</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceGroupBy(System.String,System.String)">
            <summary>
            Replaces the where macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="groupBy">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceHaving(System.String,System.String)">
            <summary>
            Replaces the where macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="having">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceWhere(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the where macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where condition</param>
            <param name="keepMacro">If true, the where macro is kept in the query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceSource(System.String,System.String,System.String)">
            <summary>
            Replaces the source macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="source">Query source</param>
            <param name="defaultSource">Default source</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceOrderBy(System.String,System.String)">
            <summary>
            Replace order by macro in query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.RemoveOrderBy(System.String)">
            <summary>
            Removes order by expression from query string.
            </summary>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceTopN(System.String,System.Int32)">
            <summary>
            Replaces the TOPN macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="topN">Top N</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceDistinct(System.String,System.Boolean)">
            <summary>
            Replaces the DISTINCT macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="distinct">Distinct</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.GetColumnsString(System.String)">
            <summary>
            Gets the columns string
            </summary>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceColumns(System.String,System.String)">
            <summary>
            Replaces columns macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceValues(System.String,System.String)">
            <summary>
            Replaces columns macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="values">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.EncodeMacroInText(System.String)">
            <summary>
            Encode macros like ##WHERE## in text to {{#}}WHERE{{#}}. 
            </summary>
            <param name="text">Text to encode.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.DecodeMacroInText(System.String)">
            <summary>
            Decode macros like ##WHERE## in text to {{#}}WHERE{{#}} 
            </summary>
            <param name="text">Text to decode.</param>
        </member>
        <member name="T:CMS.DataEngine.QueryMacros">
            <summary>
            Query expressions
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.VALUES">
            <summary>
            Values query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.COLUMNS">
            <summary>
            Columns query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.DISTINCT">
            <summary>
            Distinct query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.TOPN">
            <summary>
            Top N query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.ORDERBY">
            <summary>
            Order by query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.SOURCE">
            <summary>
            Source query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.WHERE">
            <summary>
            Where query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.HAVING">
            <summary>
            Having query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.GROUPBY">
            <summary>
            Group by query macro
            </summary>   
        </member>
        <member name="M:CMS.DataEngine.QueryMacros.ResolveMacros(System.String)">
            <summary>
            Resolves the given macros within a query
            </summary>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.QueryMacros.ToString">
            <summary>
            Gets the string representation of the where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryMacros.GetPart(System.String,System.Object)">
            <summary>
            Gets the part of the string representation
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Where">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.OrderBy">
            <summary>
            Order by
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.TopN">
            <summary>
            Top N records
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Columns">
            <summary>
            List of columns to select
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Source">
            <summary>
            Query source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.DefaultSource">
            <summary>
            Default query source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Distinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.GroupBy">
            <summary>
            List of columns to group by
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Having">
            <summary>
            Where condition for the GroupBy clause
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Values">
            <summary>
            List of values for the update / insert query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlSecurityHelper">
            <summary>
            Security methods for SQL queries
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlSecurityHelper.mWhereRegex">
            <summary>
            SQL security regular expressions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlSecurityHelper.SQLIdentifier">
            <summary>
            SQL identifier
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlSecurityHelper.SQLNumber">
            <summary>
            SQL number
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlSecurityHelper.SQLString">
            <summary>
            SQL string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.GetWhereRegEx">
            <summary>
            Gets the regular expression for the safe value of WHERE condition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.GetOrderByRegEx">
            <summary>
            Gets the regular expression for the safe value of ORDER BY clause.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.GetColumnsRegEx">
            <summary>
            Gets the regular expression for the safe value of ORDER BY clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlSecurityHelper.WhereRegex">
            <summary>
            Regular expression to check security of WHERE clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlSecurityHelper.OrderByRegex">
            <summary>
            Regular expression to check security of ORDER BY clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlSecurityHelper.ColumnsRegex">
            <summary>
            Regular expression to check security of COLUMNS clause.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.HierarchyHelper">
            <summary>
            Object hierarchy manipulation methods.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.#ctor(CMS.DataEngine.ExportObjectSettings)">
            <summary>
            Default constructor for inheritance
            </summary>
            <param name="settings">Settings of the serialization</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.#ctor(CMS.DataEngine.ExportObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Creates new instance of CMSHierarchyHelper which can be used to serialize given object.
            </summary>
            <param name="settings">Settings of the serialization</param>
            <param name="info">GeneralizedInfo to serialize</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.TraverseObjectStructure(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Goes through the object structure and calls given delegates.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallStartCollection(CMS.DataEngine.TraverseObjectSettings,System.String)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallStartCollection(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Determines whether it's the start of an array</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallEndCollection(CMS.DataEngine.TraverseObjectSettings,System.String)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallEndCollection(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Determines whether it's the start of an array</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallItemCallback(CMS.DataEngine.TraverseObjectSettings,System.Boolean)">
            <summary>
            Calls item callback if exists.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="isEnd">Determines whether is is the end of the item or the beginning</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallObjectCallback(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Calls object callback if exists.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="infoObj">Info object</param>
            <param name="level">Current level</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportCategoryObjects(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Exports categories data to given StringBuilder object.
            </summary>
            <param name="settings">Traverse object object</param>
            <param name="info">Info object the categories of which should be exported</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.TraverseObjectCollection(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.InfoObjectCollection,System.Int32,System.Boolean,System.Func{CMS.DataEngine.BaseInfo,System.Boolean})">
            <summary>
            Exports given child collection.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="collection">InfoObject collection</param>
            <param name="currentLevel">Current level of the relationship (parent - child)</param>
            <param name="checkInclusion">If true, TypeInfo.IncludeToParentDataSet is called to check whether to include child to result</param>
            <param name="objectFilter">Function representing object filter</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportObject(CMS.DataEngine.ExportObjectSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns XML representation of given instance of info object.
            </summary>
            <param name="settings">Export settings</param>
            <param name="infoObj">Info object to export</param>
            <returns>XML representation of given instance of info object.</returns>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CacheExportResult(CMS.DataEngine.ExportObjectSettings,System.String,System.String,System.String)">
            <summary>
            Puts the result of the export to the cache (including TranslationHelper if present).
            </summary>
            <param name="settings">Export settings object</param>
            <param name="export">Exported data</param>
            <param name="storageKey">Storage key</param>
            <param name="key">Cache key</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetResultFromCache(CMS.DataEngine.ExportObjectSettings,System.String,System.String)">
            <summary>
            Tries find exported data and TranslationHelper in cache.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="storageKey">Storage key</param>
            <param name="key">Cache key</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportObject">
            <summary>
            Returns XML representation of given instance of info object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.DataAvailable">
            <summary>
            Returns true if the data can be exported
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportObjectData">
            <summary>
            Exports the object data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetMetadataSource">
            <summary>
            Gets the metadata source object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetSyndicationItem(System.ServiceModel.Syndication.SyndicationContent)">
            <summary>
            Gets the syndication item created from current object
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessObjectMethod(CMS.DataEngine.TraverseObjectSettings,CMS.Base.ICMSObject,System.Int32)">
            <summary>
            Handles export to required format.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="obj">Object (TreeNode / Info Object) to process</param>
            <param name="currentLevel">Current level within the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessItemMethod(CMS.DataEngine.TraverseObjectSettings,System.Boolean)">
            <summary>
            Handles FK ID (can be used to fill translation helper for example).
            </summary>
            <param name="settings">Export object settings (not needed in this implementation)</param>
            <param name="isEnd">Determines whether its start or end of the item</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessIDMethod(CMS.DataEngine.TraverseObjectSettings,CMS.Base.ICMSObject,System.String,System.String,System.Boolean)">
            <summary>
            Handles FK ID (can be used to fill translation helper for example).
            </summary>
            <param name="settings">Export object settings (not needed in this implementation)</param>
            <param name="obj">Object (TreeNode / InfoObject) to export</param>
            <param name="columnName">Column name of the dependency</param>
            <param name="objectType">Object type of the dependency</param>
            <param name="required">Determines whether the dependency is required (reflects required flag from TypeInfo).</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessStartCollectionMethod(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Handles start of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Indicates whether it's array collection (important for export to JSON)</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessArraySeparatorMethod(CMS.DataEngine.TraverseObjectSettings)">
            <summary>
            Handles array separator of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessEndCollectionMethod(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Handles end of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Indicates whether it's array collection (important for export to JSON)</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessTranslations(CMS.DataEngine.TraverseObjectSettings,CMS.Base.SafeDictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Text.StringBuilder)">
            <summary>
            Fills translation helper with data from hashtable and appends translations to the result if needed.
            </summary>
            <param name="settings">Export settings</param>
            <param name="translations">Hashtable with translations</param>
            <param name="sb">StringBuilder to append result to</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.WrapResult(CMS.DataEngine.ExportObjectSettings,System.String)">
            <summary>
            Wraps final result into root if needed.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="code">Code to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.AppendNode(CMS.DataEngine.ExportObjectSettings,System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Appends hierarchy node to the result.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="sb">StringBuilder object with the result</param>
            <param name="nodeName">Name of the node</param>
            <param name="endTag">Determines whether to append start or end tag</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.AddTranslation(System.String,System.Int32,CMS.Base.SafeDictionary{System.String,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Adds given ID into the translation table to correct list according to objectType
            </summary>
            <param name="objectType">Object type of the object</param>
            <param name="id">ID of the object</param>
            <param name="translationTable">Translation table</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetMetadata(CMS.DataEngine.ExportObjectSettings,System.Object)">
            <summary>
            Returns metadata for given object according to export settings.
            </summary>
            <param name="settings">Export settings format</param>
            <param name="obj">Object to get the metadata of</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetListOfColumns(System.Object,System.Boolean@)">
            <summary>
            Returns list of supported columns/properties
            </summary>
            <param name="obj">Object to get the metadata of</param>
            <param name="isProperties">For properties this param will be true, otherwise (columns) false</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromXML(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.BaseInfo,System.String,System.Boolean,System.Boolean,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Loads objects data including collection from a given XML representation (root of the xml has to be ClassTableName of given object).
            </summary>
            <param name="operation">Operation type</param>
            <param name="obj">Object to load</param>
            <param name="xml">XML data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="updateMode">If true, only column contained in the XML are loaded (columns which are not contained are not set to null)</param>
            <param name="cultureName">Name of the culture to use for parsing double and datetime values</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
            <returns>Translation helper</returns>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromJSON(CMS.DataEngine.BaseInfo,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Loads objects data including collection from a given XML representation.
            </summary>
            <param name="obj">Object to load</param>
            <param name="json">JSON data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="updateMode">If true, only column contained in the JSON are loaded (columns which are not contained are not set to null)</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
            <returns>Translation helper</returns>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadDataSetFromJSON(System.Data.DataSet,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Recursively loads dataset from JSON deserialized object. Returns list of fields contained in the JSON data (for update object purposes).
            </summary>
            <param name="ds">DataSet to fill the data in</param>
            <param name="tableName">Name of the table</param>
            <param name="values">Values from deserialization</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromDataSet(CMS.DataEngine.GeneralizedInfo,System.Data.DataSet,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads object data including collection from a given data set.
            </summary>
            <param name="obj">Object to load</param>
            <param name="ds">Dataset with data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="columnsToUpdate">List of columns which will be updated</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromDataSet(CMS.DataEngine.GeneralizedInfo,System.Data.DataSet,System.Boolean,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads object data including collection from a given data set.
            </summary>
            <param name="obj">Object to load</param>
            <param name="ds">Dataset with data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="id">ID of the object to identify it within the DataSet</param>
            <param name="columnsToUpdate">List of columns which will be updated</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetCompositeID(System.String,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns object ID even if it is composed out of multiple columns.
            </summary>
            <param name="idColumns">ID columns separated with semicolon</param>
            <param name="infoObj">Object to get ID from</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromDataRow(CMS.Base.IDataContainer,System.Data.DataRow,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads an GeneralizedInfo with values from given DataRow.
            </summary>
            <param name="container">Container to load</param>
            <param name="dr">DataRow with data</param>
            <param name="columnsToUpdate">List of columns to update</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
        </member>
        <member name="P:CMS.DataEngine.HierarchyHelper.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HierarchyHelper.ResultBuilder">
            <summary>
            Result builder
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectHelper">
            <summary>
            Object manipulation methods.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.BINARY_DATA_DEFAULT">
            <summary>
            Default binary data type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.BINARY_DATA_PREVIEW">
            <summary>
            Thumbnail data type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_TOOLS">
            <summary>
            Site object types - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_SITE">
            <summary>
            Site object types - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_DOCUMENTS">
            <summary>
            Document object type - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_OBJECTS">
            <summary>
            All objects object type - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_DEVELOPMENT">
            <summary>
            Development object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_ADMINISTRATION">
            <summary>
            Administration object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_OTHER">
            <summary>
            Other object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_ECOMMERCE">
            <summary>
            E-commerce object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_POLLS">
            <summary>
            Polls object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_NEWSLETTER">
            <summary>
            Polls object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_FORUMS">
            <summary>
            Forum object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_REPORTING">
            <summary>
            Reporting object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_UICULTURE">
            <summary>
            UI culture object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_NOTIFICATION">
            <summary>
            Notification object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_WEBPART">
            <summary>
            Web part object types - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_PAGETEMPLATE">
            <summary>
            Page template object types - Group constant.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsDataSet(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.GeneralizedInfo,System.Boolean)">
            <summary>
            Returns empty objects DataSet based on the given object type.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Info object</param>
            <param name="childData">If true, child datasets are included</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetBinaryDataSet(System.Boolean)">
            <summary>
            Gets empty DataSet for binary data.
            </summary>
            <param name="binaryData">If false, binary data column is string column</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetBinaryData(CMS.DataEngine.GeneralizedInfo,System.String[0:,0:],System.Int64,System.Boolean)">
            <summary>
            Gets DataSet with binary data of given files.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="files">Array of files in format { {"fullPhysicalFile1Path", "fileType"} {"fullPhysicalFile2Path", "fileType"}}</param>
            <param name="maxFileSize">Maximal size in bytes of the file which should be included into the DataSet</param>
            <param name="binaryData">If true, gets the binary data to the DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetExcludedNamesWhereCondition(System.String[],System.String)">
            <summary>
            Generate where condition due to excluded names.
            </summary>
            <param name="excludedNames">Excluded names</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.BaseInfo,System.String,System.String,System.Boolean,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[])">
            <summary>
            Gets the DataSet of the objects data and their child objects.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Main info object</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns for the main objects</param>
            <param name="childData">If true, child objects data are included</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.GeneralizedInfo,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Boolean,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[],System.Int32)">
            <summary>
            Gets the DataSet of the objects data and their child objects.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Main info object</param>
            <param name="parameters">Parameters for the selection</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns for the main objects</param>
            <param name="childData">If true, child objects data are included</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.GetObjectsDataSettings)">
            <summary>
            Gets the DataSet of the objects data and their child objects.
            </summary>
            <param name="settings">Configuration for objects data selection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.TransferHierarchicalCategoryDataSet(System.String,System.String,System.String,System.Data.DataTable,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[],CMS.DataEngine.OperationTypeEnum,System.Data.DataSet)">
            <summary>
            Adds table with categories parents to data set.
            </summary>
            <param name="columnName">Column name of table ID</param>
            <param name="parentColumnName">Column name of parent key ID</param>
            <param name="objectType">Object type</param>
            <param name="parentDT">Data table with parent data</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
            <param name="operation">Operation type</param>
            <param name="ds">Data set to add the data</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.ApplyExcludedNamesWhere(System.String[],CMS.DataEngine.ObjectTypeInfo,System.String)">
            <summary>
            Combines given original WHERE condition with the WHERE condition generated for excluding specified objects.
            </summary>
            <param name="excludedNames">Names which should be excluded</param>
            <param name="objectTypeInfo">ObjectTypeInfo to provide type information of code name and displayname columns</param>
            <param name="originalWhereCondition">Original WHERE condition which should be applied</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.ExtractObjectsData(System.Data.DataSet,CMS.DataEngine.GeneralizedInfo,System.String,System.Boolean)">
            <summary>
            Extracts the object data from given DataSet.
            </summary>
            <param name="ds">Source DataSet</param>
            <param name="infoObj">Object type</param>
            <param name="where">Where condition</param>
            <param name="childData">Child data</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetExportSelectionColumns(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Returns the list of columns needed for export selection.
            </summary>
            <param name="infoObj">Info object for which to get the columns</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetDependencyColumnName(System.String,System.String)">
            <summary>
            Get column name of the first dependency.
            </summary>
            <param name="dependingObjectType">Depending object type</param>
            <param name="dependsOnObjectType">Depends on object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetDependencyColumnNames(System.String,System.String)">
            <summary>
            Get dependingObjectType dependencies: 1. parent ID column, 2. site ID column, 3. list of object dependencies where dependency object type is dependsOnObjectType object type. 
            </summary>
            <param name="dependingObjectType">Depending object type</param>
            <param name="dependsOnObjectType">Depends on object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.AddDependingObjectTypes(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds depending object types to the list.
            </summary>
            <param name="list">Object list</param>
            <param name="objectType">Object type</param>
            <param name="dependingType">Depending type</param>
            <param name="child">Process also child types</param>
            <param name="binding">Process also binding types</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetSiteBindingObject(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Gets the site binding object for specified info object.
            </summary>
            <param name="infoObj">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectFriendlyName(System.String)">
            <summary>
            Returns translated name of object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.BuildFullName(System.String,System.String,System.String)">
            <summary>
            Builds the full name from the given names.
            </summary>
            <param name="first">First name</param>
            <param name="second">Second name</param>
            <param name="separator">Separator</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.ParseFullName(System.String,System.String@,System.String@,System.String)">
            <summary>
            Parses the full name in format "something.whatewer.abc" so that "something.whatever" is considered the first part, and "abc" second part.
            </summary>
            <param name="fullName">Given full name</param>
            <param name="firstPart">First part</param>
            <param name="secondPart">Second part</param>
            <param name="delimiter">Fullname delimiter</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetParentIdColumn(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets the parent ID column for the given child type in parent type
            </summary>
            <param name="childTypeInfo">Child type info</param>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetOtherBindingParentIdColumn(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets the parent ID column for the given binding type info for the direction of other binding (indirect parent)
            </summary>
            <param name="bindingTypeInfo">Binding type info</param>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectIconUrl(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Gets the icon for the given object type.
            </summary>
            <param name="page">Page</param>
            <param name="objectType">Object type constant</param>
            <param name="iconName">Icon name (e.g. list.png)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectIconPath(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the icon for the given object type.
            </summary>
            <param name="page">Page</param>
            <param name="objectType">Object type constant</param>
            <param name="iconName">Icon name (e.g. list.png)</param>
            <param name="isLiveSite">Indicates if URL should be returned for live site</param>
            <param name="ensureDefaultTheme">Indicates if default theme should be always used</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectIconPath(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Gets the icon for the given object type.
            </summary>
            <param name="page">Page</param>
            <param name="objectType">Object type constant</param>
            <param name="iconName">Icon name (e.g. list.png)</param>
            <param name="isLiveSite">Indicates if URL should be returned for live site</param>
            <param name="ensureDefaultTheme">Indicates if default theme should be always used</param>
            <param name="usedObjectType">Object type which has been eventually used to get the icon (this will be usually the given object type, but for inherited object types this can be their parent object type)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectIconPathInternal(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the icon for the given object type.
            </summary>
            <param name="page">Page</param>
            <param name="objectType">Object type constant</param>
            <param name="iconName">Icon name (e.g. list.png)</param>
            <param name="isLiveSite">Indicates if URL should be returned for live site</param>
            <param name="ensureDefaultTheme">Indicates if default theme should be always used</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectHelper.SkipMissingObjectTypes">
            <summary>
            Indicates if missing object types can be skipped.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataDefinition">
            <summary>
            Data definition base class
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataDefinition.xmlDoc">
            <summary>
            XML document representing FormInfo.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.#ctor(System.String)">
            <summary>
            Constructor, creates the form info structure and loads specified form definition.
            </summary>
            <param name="dataDefinition">XML definition of the data</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadFromXml(System.String)">
            <summary>
            Loads the data definition from XML file
            </summary>
            <param name="dataDefinition">Data definition</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadFromXml(System.Xml.XmlDocument)">
            <summary>
            Loads the definition from the XML document
            </summary>
            <param name="xml">Xml document</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadItem(System.Xml.XmlNode)">
            <summary>
            Loads the item from the XML node
            </summary>
            <param name="node">XML node</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadField(System.Xml.XmlNode)">
            <summary>
            Loads the field from the XML node
            </summary>
            <param name="node">XML node</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.GetFields``1">
            <summary>
            Gets the field of the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.NewFieldDefinition">
            <summary>
            Creates a new field definition object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataDefinition.ItemsList">
            <summary>
            Returns list of all FormItems.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FieldDataType">
            <summary>
            Field data types - string constants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.ALL">
            <summary>
            All datatypes.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Unknown">
            <summary>
            Unknown data type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.LongText">
            <summary>
            Long text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.LongInteger">
            <summary>
            Long integer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.DateTime">
            <summary>
            Date and time.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.DocAttachments">
            <summary>
            Document attachments.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Guid">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Binary">
            <summary>
            Binary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.TimeSpan">
            <summary>
            Time span
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FieldBase`1">
            <summary>
            Form field base class
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IField">
            <summary>
            Interface for form items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IField.Clone">
            <summary>
            Clones current object and returns copy of it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IField.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns XML representation of current object.
            </summary>
            <param name="doc">XML document with other items</param>
        </member>
        <member name="M:CMS.DataEngine.IField.LoadFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Loads the field info from XML node
            </summary>
            <param name="node">Field node</param>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.LoadFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Loads the field info from XML node
            </summary>
            <param name="fieldNode">Field node</param>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.ToString">
            <summary>
            Returns field name value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.RegisterColumns">
            <summary>
            Registers the Columns of this object for resolving data macros.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>Returns clone of FormFiedlInfo</returns>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns the XML node representing the FormFieldInfo object.
            </summary>
            <param name="doc">XML document</param>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Caption">
            <summary>
            Column caption.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.AllowEmpty">
            <summary>
            Indicates whether field allow empty values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.PrimaryKey">
            <summary>
            Indicates whether field is a primary key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Size">
            <summary>
            Size of the field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Precision">
            <summary>
            Precision of the field
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.DefaultValue">
            <summary>
            Field default value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Guid">
            <summary>
            Field unique identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.System">
            <summary>
            Indicates if field is a system field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsUnique">
            <summary>
            Indicates whether field is unique.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.External">
            <summary>
            Indicates if field is external, if so it represents column from another table which is included in CMS_Tree_View_Joined (CMS_Document, CMS_Node, ...).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsInherited">
            <summary>
            If true, the field is inherited from parent class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsDummyField">
            <summary>
            Indicates if field has no representation in database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsDummyFieldFromMainForm">
            <summary>
            Indicates if dummy field is in main or alternative form
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsExtraField">
            <summary>
            Indicates if field is extra field (field is not in orignal form definition).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Properties">
            <summary>
            Properties of the field
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.PropertiesMacroTable">
            <summary>
            Macro table for the field properties.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FieldInfo">
            <summary>
            Basic field definition
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CheckDependenciesException">
            <summary>
            Exception to report attempt to delete an object which has required dependencies.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectException">
            <summary>
            Base class for the exceptions on the info objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectException.Clone">
            <summary>
            Returns clone of the exception
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectException.Object">
            <summary>
            Object to which the exception relates.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CheckDependenciesException.#ctor(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CheckDependenciesException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.DependencyInfo">
            <summary>
            Wrapper class for a depending object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates new DeleteDependencyInfo.
            </summary>
            <param name="objectType">Object type of the dependency</param>
            <param name="objectId">ID of the dependency</param>
        </member>
        <member name="P:CMS.DataEngine.DependencyInfo.ObjectType">
            <summary>
            Object type of the dependency.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyInfo.ObjectID">
            <summary>
            ID of the dependency.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DeleteDependencyInfo">
            <summary>
            Wrapper class for remove dependencies procedure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DeleteDependencyInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates new DeleteDependencyInfo.
            </summary>
            <param name="objectType">Object type of the dependency.</param>
            <param name="queryText">DELETE query to be executed to remove current dependency.</param>
            <param name="where">WHERE condition to apply for the deletion</param>
            <param name="connStr">Connection string to use to execute the query.</param>
            <param name="useApi">If true, API method will be used for object deletion instead of QueryText</param>
        </member>
        <member name="P:CMS.DataEngine.DeleteDependencyInfo.ObjectType">
            <summary>
            Object type of the dependency.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeleteDependencyInfo.QueryText">
            <summary>
            DELETE query to be executed to remove current dependency.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeleteDependencyInfo.WhereCondition">
            <summary>
            WHERE condition to apply for removing the dependency using the API.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeleteDependencyInfo.ConnectionString">
            <summary>
            Connection string to use to execute the query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeleteDependencyInfo.UseApi">
            <summary>
            If true, API method will be used for object deletion instead of QueryText.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoIdentifier">
            <summary>
            Represents the general info object identifier that uses object type to translate info object ID to code name and vice versa.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new info object identifier using the object type and ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.#ctor(System.String,System.String)">
            <summary>
            Creates a new info object identifier using the object type and code name.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Creates a new info object identifier for the specified info object.
            </summary>
            <param name="info">Info</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.op_Implicit(CMS.DataEngine.BaseInfo)~CMS.DataEngine.InfoIdentifier">
            <summary>
            Implicitly converts BaseInfo to InfoIdentifier.
            </summary>
            <param name="info">Info</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.op_Implicit(CMS.DataEngine.InfoIdentifier)~System.Int32">
            <summary>
            Implicitly converts InfoIdentifier to integer.
            </summary>
            <param name="identifier">Info identifier</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.op_Implicit(CMS.DataEngine.InfoIdentifier)~System.String">
            <summary>
            Implicitly converts InfoIdentifier to string.
            </summary>
            <param name="identifier">Info identifier</param>
        </member>
        <member name="P:CMS.DataEngine.InfoIdentifier.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoIdentifier.ObjectID">
            <summary>
            Gets the object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoIdentifier.ObjectCodeName">
            <summary>
            Gets the object code name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSettingsInfo">
            <summary>
            ObjectSettingsInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSettingsInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSettingsInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.#ctor">
            <summary>
            Constructor - Creates an empty ObjectSettingsInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ObjectSettingsInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectSettingsObjectID">
            <summary>
            Related object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectCheckedOutWhen">
            <summary>
            Time stamp when the object was checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectCheckedOutVersionHistoryID">
            <summary>
            Version of the object that is checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectSettingsID">
            <summary>
            ID of the settings object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectSettingsObjectType">
            <summary>
            Related object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectCheckedOutByUserID">
            <summary>
            ID of the user who has currently checked out the object for editing.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectWorkflowStepID">
            <summary>
            Current workflow step ID of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectTags">
            <summary>
            Object tags.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectComments">
            <summary>
            Object comments.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectPublishedVersionHistoryID">
            <summary>
            Version of the object that is currently published.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectWorkflowSendEmails">
            <summary>
            Indicates if workflow e-mails should be send from workflow process.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectFullName">
            <summary>
            Object full name if defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.IsCheckedOut">
            <summary>
            Returns true if the object is checked out
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSettingsInfoProvider">
            <summary>
            Class providing ObjectSettingsInfo management.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettings">
            <summary>
            Returns all object settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfo(System.String,System.Int32)">
            <summary>
            Gets the object settings for the specified object, ensures the settings if not exists.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfo(System.Int32)">
            <summary>
            Gets the object settings with the specified ID.
            </summary>
            <param name="settingsId">Object settings ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.SetObjectSettingsInfo(CMS.DataEngine.ObjectSettingsInfo)">
            <summary>
            Sets (updates or inserts) the specified object settings.
            </summary>
            <param name="settingsObj">Object settings to be set</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettingsInfo(CMS.DataEngine.ObjectSettingsInfo)">
            <summary>
            Deletes the specified object settings.
            </summary>
            <param name="settingsObj">Object settings to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettings(System.String)">
            <summary>
            Deletes the object settings matching the specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteSettingsForObject(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes settings for the given object
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInternal">
            <summary>
            Returns all object settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteSettingsForObjectInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes settings for the given object
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfoInternal(System.String,System.Int32)">
            <summary>
            Gets the object settings for the specified object, ensures the settings if not exists.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfoInternal(System.Int32)">
            <summary>
            Gets the object settings with the specified ID.
            </summary>
            <param name="settingsId">Object settings ID</param>        
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.SetObjectSettingsInfoInternal(CMS.DataEngine.ObjectSettingsInfo)">
            <summary>
            Sets (updates or inserts) specified object settings.
            </summary>
            <param name="settingsObj">Object settings to be set</param>        
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettingsInfoInternal(CMS.DataEngine.ObjectSettingsInfo)">
            <summary>
            Deletes specified object settings.
            </summary>
            <param name="settingsObj">Object settings to be deleted</param>        
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettingsInternal(System.String)">
            <summary>
            Deletes the object settings matching the specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoDataSet">
            <summary>
            InfoDataSet interface
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoDataSet.GetNewObject(System.Data.DataRow)">
            <summary>
            Gets new instance of the object hosted in this DataSet
            </summary>
            <param name="dr">Data row with the source data</param>
        </member>
        <member name="T:CMS.DataEngine.AuthorizationResultEnum">
            <summary>
            Enumeration of the user authorization result.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AuthorizationResultEnum.Allowed">
            <summary>
            Allowed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AuthorizationResultEnum.Denied">
            <summary>
            Denied.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AuthorizationResultEnum.Insignificant">
            <summary>
            Insignificant, does not influence other authorization results.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DefaultClassThumbnail">
            <summary>
            Is able to select default metafile of the class. Default metafile is the one with name starting with "default.".
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DefaultClassThumbnail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.DefaultClassThumbnail"/> class.
            </summary>
            <param name="objectType">Code name of the class whose Avatar meta files will be managed</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectType"/> is null</exception>
        </member>
        <member name="M:CMS.DataEngine.DefaultClassThumbnail.GetDefaultClassThumbnailGuid">
            <summary>
            Gets GUID of default avatar located in MetaFile table for processed object info.
            </summary>
            <returns>GUID of default image, if exists; null otherwise</returns>
        </member>
        <member name="M:CMS.DataEngine.DefaultClassThumbnail.GetClassId">
            <summary>
            Gets class ID of processed object type.
            </summary>
            <returns>Class ID of processed object type</returns>
        </member>
        <member name="T:CMS.DataEngine.IInfoFake`1">
            <summary>
            Interface for automated tests fake of the info
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IInfoProviderFake`2">
            <summary>
            Interface for automated tests fake of the info provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoProviderFake`2.IncludeData(`0[])">
            <summary>
            Includes the given data to the source items while keeping the existing data intact
            </summary>
            <param name="sourceItems">Source items to include</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProviderFake`2.WithData(`0[])">
            <summary>
            Fakes the data for the given provider. Resets any previous data and only includes the given source items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoProviderFake`2.WithOriginalSourceName">
            <summary>
            Ensures that the original data source name is used for the faked data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoProviderFake`2.Reset">
            <summary>
            Resets the fake
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IFakeMethods">
            <summary>
            Interface for attaching methods for faking data within automated tests
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IFakeMethods.Info``1">
            <summary>
            Fakes the data for the given info
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IFakeMethods.InfoProvider``2">
            <summary>
            Fakes the data for the given info and provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IFakeMethods.GetClassXmlSchema``1(System.Boolean)">
            <summary>
            Gets the class XML schema for the given type
            </summary>
            <param name="getFromParentType">If true, the columns from parent type are extracted</param>
        </member>
        <member name="T:CMS.DataEngine.CMSOutputMetaFile">
            <summary>
            Summary description for CMSOutputFile.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.#ctor(CMS.DataEngine.MetaFileInfo,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="mi">MetaFile info</param>
            <param name="data">Output file data</param>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.EnsureData(System.Byte[])">
            <summary>
            Ensures that the object contains the output data.
            </summary>
            <param name="defaultData">Default data which should be loaded if data required</param>
            <returns>Returns true if new data has been loaded</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.LoadData(System.Byte[])">
            <summary>
            Loads the data to the object.
            </summary>
            <param name="data">New data</param>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.UseWatermark">
            <summary>
            If true, the watermark is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.MetaFile">
            <summary>
            Meta file info without AttachmentBinary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.LastModified">
            <summary>
            Time when the file was last modified.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.RedirectTo">
            <summary>
            If set, file should be redirected to the file system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.SiteName">
            <summary>
            Meta file site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.PhysicalFile">
            <summary>
            Physical file path to the data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MetaFileInfo">
            <summary>
            MetaFileInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.mInputStream">
            <summary>
            Input stream - for file upload.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.mStreamProcessed">
            <summary>
            True if the input stream has already been processed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.mMetaFileCustomData">
            <summary>
            Attachment custom data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.GetDependencyCacheKeys(System.String,System.String)">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
            <param name="key">Cache key</param>
            <param name="context">Cache context</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.GetDependencyCacheKeys">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty MetaFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MetaFileInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new MetaFileInfo object based on the file specified by given path.
            </summary>
            <param name="filePath">File path</param>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
            <param name="category">Category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.String,System.String)">
            <summary>
            Creates a new AttachmentInfo object based on the file posted through the upload control.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
            <param name="category">Category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.EnsureBinaryData(System.Boolean)">
            <summary>
            Ensures the binary data - loads the binary data from file stream if present.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.LoadDataFromStream">
            <summary>
            Loads the attachment data from the input stream.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.SetParent(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Updates the parent object, enables to update the data that is overriden in the parent object before or after it is saved
            </summary>
            <param name="parent">Parent object that will be saved</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.IsIcon(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the MetaFile is a thumbnail metafile
            </summary>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.IsThumbnail(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the MetaFile is a thumbnail metafile
            </summary>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones metafile and inserts it to DB as new object.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies. First tries to execute removedependencies query, if not found, automatic process is executed.
            </summary>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearHashtables">If true, hashtables of all objecttypes which were potentionally modified are cleared</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.GetDefaultDataWhereCondition(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the where condition to filter out the default installation data
            </summary>
            <param name="recursive">Indicates whether where condition should contain further dependency conditions.</param>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileImageWidth">
            <summary>
            MetaFile image width.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileMimeType">
            <summary>
            MetaFile MIME type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileExtension">
            <summary>
            MetaFile extension.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileBinary">
            <summary>
            MetaFile binary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileGroupName">
            <summary>
            MetaFile group name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileImageHeight">
            <summary>
            MetaFile image height.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileObjectID">
            <summary>
            MetaFile object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileName">
            <summary>
            MetaFile name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileID">
            <summary>
            MetaFile ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileGUID">
            <summary>
            MetaFile GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileObjectType">
            <summary>
            MetaFile object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileSize">
            <summary>
            MetaFile size.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileSiteID">
            <summary>
            MetaFile site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.InputStream">
            <summary>
            File input stream (for large files).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileTitle">
            <summary>
            MetaFile title.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileDescription">
            <summary>
            MetaFile description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileCustomData">
            <summary>
            MetaFile custom data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.ObjectParentID">
            <summary>
            Object parent ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.ParentObjectType">
            <summary>
            Object parent type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MetaFileInfoProvider">
            <summary>
            Class providing MetaFileInfo management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_LAYOUT">
            <summary>
            Layouts category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_FORM_LAYOUT">
            <summary>
            Form layout category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_THUMBNAIL">
            <summary>
            Thumbnails category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_ICON">
            <summary>
            Icons category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_TEMPLATE">
            <summary>
            Templates category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_INVOICE">
            <summary>
            Invoice category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_ISSUE">
            <summary>
            Issue category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_IMAGE">
            <summary>
            Image category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_EPRODUCT">
            <summary>
            E-product category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.OBJECT_CATEGORY_ATTACHMENT">
            <summary>
            Attachment category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles">
            <summary>
            Returns all metafiles.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfo(System.Int32)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileId">MetaFile id</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfo(System.Guid,System.String,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfoWithoutBinary(System.Guid,System.String,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile without the binary data.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SetMetaFileInfo(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Sets (updates or inserts) specified metaFile.
            </summary>
            <param name="metaFile">MetaFile to set</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteMetaFileInfo(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Deletes specified metaFile.
            </summary>
            <param name="metaFileObj">MetaFile object</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteMetaFileInfo(System.Int32)">
            <summary>
            Deletes specified metaFile.
            </summary>
            <param name="metaFileId">MetaFile id</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.String,System.String)">
            <summary>
            Gets all the files with specified where/order by.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets all the files with specified where/order by.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all the files with specified where/order by.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param> 
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the file list of the files for certain object.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the file list of the files for certain object.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param> 
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesWithBinary(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object with the binary file data. Loads the binaries from file system if the binary is missing.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesWithoutBinary(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object without the binary file data.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String)">
            <summary>
            Will call the previous method will all the remaining parameters null.
            </summary>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFiles(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Deletes all files associated to the given object.
            </summary>
            <param name="infoObject">Info object</param>
            <param name="category">Meta files category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFiles(System.Int32,System.String,System.String)">
            <summary>
            Deletes all files associated with the given object.
            </summary>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
            <param name="category">Meta files category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFiles(System.Int32,System.String)">
            <summary>
            Delete all files associated to the given object.
            </summary>
            <param name="objectId">Object id</param>
            <param name="objectType">Meta files type</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.UpdateMetaFiles(CMS.DataEngine.BaseInfo,System.Data.DataTable,System.Int32)">
            <summary>
            Updates the object meta files from the given DataTable.
            </summary>
            <param name="infoObj">Info object for which the metafiles update</param>
            <param name="filesDT">Table of the new files (with binaries)</param>
            <param name="filesObjectId">Object ID in the new files table</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.UpdateMetaFiles(CMS.DataEngine.BaseInfo,System.Data.DataTable,System.Int32,CMS.DataEngine.LoadDataEventHandler)">
            <summary>
            Updates the object meta files from the given DataTable.
            </summary>
            <param name="infoObj">Info object for which the metafiles update</param>
            <param name="filesDT">Table of the new files (with binaries)</param>
            <param name="filesObjectId">Object ID in the new files table</param>
            <param name="onLoadData">Load data event handler</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.UpdateMetaFiles(CMS.DataEngine.BaseInfo,System.Data.DataTable,System.Int32,CMS.DataEngine.LoadDataEventHandler,System.Boolean)">
            <summary>
            Updates the object meta files from the given DataTable.
            </summary>
            <param name="infoObj">Info object for which the metafiles update</param>
            <param name="filesDT">Table of the new files (with binaries)</param>
            <param name="filesObjectId">Object ID in the new files table</param>
            <param name="onLoadData">Load data event handler</param>
            <param name="logSynchronization">Indicates if staging tasks should be logged</param>
            <returns>Returns the GUID of the thumbnail meta file if found</returns>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.CopyMetaFiles(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Duplicates metafiles for specified object. Returns old guid/new guid list.
            </summary>
            <param name="sourceObjectId">Source object</param>
            <param name="targetObjectId">Target object</param>
            <param name="objectType">Type</param>
            <param name="category">Category</param>
            <param name="convList">List containing old and new guids</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.CopyMetaFiles(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Duplicates metafiles for specified object. Returns old guid/new guid list.
            </summary>
            <param name="sourceObjectId">Source object</param>
            <param name="targetObjectId">Target object</param>
            <param name="sourceObjectType">Source object type</param>
            <param name="sourceCategory">Source object category</param>
            <param name="targetObjectType">Target object type</param>
            <param name="targetCategory">Target object category</param>
            <param name="convList">List containing old and new guids</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.MoveMetaFiles(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Moves metafiles for one object to another.
            </summary>
            <param name="sourceObjectId">Source object ID</param>
            <param name="targetObjectId">Target object ID</param>
            <param name="sourceObjectType">Source object type</param>
            <param name="sourceCategory">Source category</param>
            <param name="targetObjectType">Target object type</param>
            <param name="targetCategory">Target category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.StoreFilesInFileSystem(System.String)">
            <summary>
            Returns the current settings whether the files should be stored in the filesystem.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.StoreFilesInDatabase(System.String)">
            <summary>
            Returns the current settings whether the files should be stored in the database.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GenerateThumbnails(System.String)">
            <summary>
            Returns the current settings whether the thumbnails should be generated.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetGUIDWhereCondition(System.Guid,System.String,System.Boolean)">
            <summary>
            Gets the meta file where condition.
            </summary>
            <param name="metaFileGuid">File GUID</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean)">
            <summary>
            Save file to the disk.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="fileData">File data (byte[] or Stream)</param>   
            <param name="deleteOldFiles">Indicates whether files in destination folder with mask '[guid]*.*' should be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean,System.Boolean)">
            <summary>
            Saves file to the disk.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="fileData">File data (byte[] or Stream)</param>   
            <param name="deleteOldFiles">Indicates whether files in destination folder with mask '[guid]*.*' should be deleted</param>
            <param name="synchronization">Indicates if this function is called from "ProcessTask"</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFullFileName(System.String,System.String)">
            <summary>
            Returns full file name ([name.extension] if extension is specified) or ([name] only if extension is not specified).
            </summary>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete all files with the same name ([name].*).
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">Name of the file to delete</param>
            <param name="deleteDirectory">Determines whether delete specified directory or not</param>
            <param name="synchronization">Indicates wehther the method is called due to synchronization</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetWhereCondition(System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets the where condition for meta files.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.EnsureMetaFileBinaries(System.Data.DataTable)">
            <summary>
            Ensures the binary data in the DataTable of metafiles.
            </summary>
            <param name="dt">DataTable with the data</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesObjectTypes(System.Int32)">
            <summary>
            Returns list of all object types which have some metafiles attached.
            </summary>
            <param name="siteId">ID of the site from which the object types should be recieved</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFile(System.String,System.String,System.Boolean)">
            <summary>
            Delete all files with the same name ([name].*).
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">Name of the file to delete</param>
            <param name="deleteDirectory">Determines whether delete specified directory or not</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesInternal">
            <summary>
            Returns all metafiles.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfoInternal(System.Int32)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileId">MetaFile id</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfoInternal(System.Guid,System.String,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfoWithoutBinaryInternal(System.Guid,System.String,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile without the binary data.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SetMetaFileInfoInternal(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Sets (updates or inserts) specified metaFile.
            </summary>
            <param name="metaFile">MetaFile to set</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteMetaFileInfoInternal(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Deletes specified metaFile.
            </summary>
            <param name="metaFileObj">MetaFile object</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesInternal(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <param name="columns">Data columns to return</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>     
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesWithoutBinaryInternal(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object without the binary file data.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFilesInternal(System.Int32,System.String,System.String)">
            <summary>
            Delete all files associated to the given object.
            </summary>
            <param name="objectId">Object id</param>
            <param name="objectType">Meta files type</param>
            <param name="category">Category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFilesInternal(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Deletes all files associated to the given object.
            </summary>
            <param name="infoObject">Info object</param>
            <param name="category">Meta files category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.EnsurePhysicalFile(CMS.DataEngine.MetaFileInfo,System.String)">
            <summary>
            Ensures the file in the file system and returns the path to the file.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.EnsureThumbnailFile(CMS.DataEngine.MetaFileInfo,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures the thumbnail file.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="width">File width</param>
            <param name="height">File height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFile(System.Guid,System.String)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="guid">Guid of the file to get</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFile(CMS.DataEngine.MetaFileInfo,System.String)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFileBinary(System.Guid,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns meta file binary and optionaly store it in file system.
            </summary>
            <param name="guid">Guid of the file to get</param>
            <param name="id">ID of the file to get</param>
            <param name="siteName">Site name</param>
            <param name="storeInFileSystem">If true, given meta file is stored in file system</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFileBinary(System.String,System.String)">
            <summary>
            Returns the file binary from disk.
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">Name of the file to get, including extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.CanResizeImage(CMS.DataEngine.MetaFileInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the image should be processed (resized) by the Image manager (if the destination size is smaller).
            </summary>
            <param name="fileInfo">Meta file info to check</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="maxSideSize">Max side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetImageThumbnail(CMS.DataEngine.MetaFileInfo,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail (from the disk - if already exists, or create new one and save it to disk - if doesnt exist).
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetImageThumbnail(System.Guid,System.Byte[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail (from the disk - if already exists, or create new one and save it to disk - if doesnt exist).
            </summary>
            <param name="guid">File GUID</param>
            <param name="imageData">Image data</param>
            <param name="extension">Image extenstion</param>
            <param name="siteName">Site name</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
            <param name="originalWidth">Original width of the image</param>
            <param name="originalHeight">Original height of the image</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetImageThumbnailFile(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the image thumbnail from the disk.
            </summary>
            <param name="guid">Guid of the file to get</param>
            <param name="siteName">Site name</param>
            <param name="height">Image thumbnail width</param>
            <param name="width">Image thumbnail height</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.ResizeMetaFiles(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes specified metafiles to the required dimensions.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>        
            <param name="width">Image widht</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Image max side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SetMetaFilesQuality(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Changes images quality using GDI+ built in JPEG encoder.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>        
            <param name="quality">New image quality, from 0 (lowest quality) to 100 (highest quality)</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFilePhysicalPath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetThumbnailPhysicalPath(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns physical path to the thumbnail.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="extension">File extension</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFileFolder(System.String,System.String)">
            <summary>
            Returns physical path to the meta file folder (meta files folder path + subfolder).
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">Meta file GUID</param>        
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFilesFolderPath(System.String)">
            <summary>
            Returns physical path to folder with meta files which are associated with the specified site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileUrl(System.Guid,System.String)">
            <summary>
            Returns meta file url.
            </summary>
            <param name="metaFileGuid">Meta file GUID</param>
            <param name="fileName">File name without extension</param>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfoProvider.WebApplicationPhysicalPath">
            <summary>
            Full path to the root of the web.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfoProvider.DeletePhysicalFiles">
            <summary>
            Indicates if physical files should be deleted.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MetaFileURLProvider">
            <summary>
            Provider for metafiles URLs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrl(System.Guid,System.String)">
            <summary>
            Returns meta file url.
            </summary>
            <param name="metaFileGuid">Meta file GUID</param>
            <param name="fileName">File name without extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrlFormat(System.String)">
            <summary>
            Returns format of the metafile URL in relative form (with ~). Meaning of the wildcards in returned URL:
            - {0} - metafile GUID.
            - {1} - extensionless metafile file name.
            </summary>
            <example>
            Example how the returned url can look like:
            ~/getmetafile/{0}/{1}.aspx
            (.aspx extension can differ based on what is set in settings key CMSFilesFriendlyURLExtension on site specified by <paramref name="siteName"/>)
            </example>
            <param name="siteName">Sitename used for correct file extension. Null (default) specifies that file extension should be taken from global settings.</param>
            <returns>Format of the metafile URL</returns>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrlInternal(System.Guid,System.String,System.String)">
            <summary>
            Returns meta file url.
            </summary>
            <param name="metaFileGuid">Meta file GUID</param>
            <param name="fileName">File name without extension</param>
            <param name="siteName">Sitename used for correct file extension. Null (default) specifies that file extension should be taken from global settings.</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrlFormatInternal(System.String)">
            <summary>
            Returns format of the metafile URL in relative form (with ~). Meaning of the wildcards in returned URL:
            - {0} - metafile GUID.
            - {1} - extensionless metafile file name.
            </summary>
            <example>
            Example how the returned url can look like:
            ~/getmetafile/{0}/{1}.aspx
            (.aspx extension can differ based on what is set in settings key CMSFilesFriendlyURLExtension on site specified by <paramref name="siteName"/>)
            </example>
            <param name="siteName">Sitename used for correct file extension. Null (default) specifies that file extension should be taken from global settings.</param>
            <returns>Format of the metafile URL</returns>
        </member>
        <member name="T:CMS.DataEngine.ISearchDocument">
            <summary>
            Interface for the search document
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchDocument.Init(CMS.DataEngine.ISearchIndexInfo,System.String,System.String,System.DateTime)">
            <summary>
            Initializes search document.
            </summary>
            <param name="index">Index this document belongs to</param>
            <param name="type">Type of document</param>   
            <param name="id">ID value</param>
            <param name="created">Document created</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchDocument.PrepareContentValue(System.Object,System.Boolean)">
            <summary>
            Prepares value to add to content field.
            </summary>
            <param name="value">Value to add</param> 
            <param name="stripTags">Indicates whether tags should be stripped</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchDocument.AddGeneralField(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds a general-purpose field to the document, handles field conversion
            </summary>
            <param name="name">Name of new field</param>
            <param name="value">Value of field</param>
            <param name="store">Should be value stored</param>
            <param name="tokenize">Should be value tokenized</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchDocument.Add(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the given field to the document
            </summary>
            <param name="name">Field name</param>
            <param name="value">Field value</param>
            <param name="store">If true, the field value is stored</param>
            <param name="tokenize">If true, the field value is tokenized</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchDocument.Get(System.String)">
            <summary>
            Gets the value of specified field
            </summary>
            <param name="name">Field name</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchDocument.RemoveField(System.String)">
            <summary>
            Removes field with the given name
            </summary>
            <param name="name">Field name</param>
        </member>
        <member name="T:CMS.DataEngine.ImportExportSettings">
            <summary>
            Class representing export/import settings in the type information of objects.
            </summary>
            <remarks>
            Use in the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ImportExportSettings"/> property of ObjectTypeInfo.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mLogExport">
            <summary>
            Indicates whether the system logs export tasks when objects of the type are deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mLogProgress">
            <summary>
            Indicates whether the import progress log includes a record for objects of the type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mAllowSingleExport">
            <summary>        
            Indicates whether the object type supports export of individual objects from UniGrid listing pages.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mIncludeToExportParentDataSet">
            <summary>
            Determines how the system includes objects of the type when exporting parent objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mIncludeToWebTemplateExport">
            <summary>
            Determines the range of objects which will go to the web template export.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mWhereCondition">
            <summary>        
            Where condition that defines which objects of the type are available for export. Does not affect the single object export.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mOrderBy">
            <summary>
            Order by clause that sets the order of objects in the XML data of export packages.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ImportExportSettings.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="typeInfo">Related type information</param>
        </member>
        <member name="M:CMS.DataEngine.ImportExportSettings.RegisterColumns">
            <summary>
            Property registration.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.TypeInfo">
            <summary>
            ObjectTypeInfo instance that stores the type information of the related object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.AllowSingleExport">
            <summary>
            Indicates whether the object type supports export of individual objects from UniGrid listing pages.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.LogExport">
            <summary>
            Indicates whether the system logs export tasks when objects of the type are deleted. The delete tasks can be included in export packages. False by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.LogProgress">
            <summary>
            Indicates whether the import progress log includes a record for objects of the type. True by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IsAutomaticallySelected">
            <summary>
            Indicates whether all objects of the type are automatically selected when creating export packages. For internal objects that are not visible in the object tree. False by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IsExportable">
            <summary>
            Indicates whether the object type is exportable via Export/Import. Does not affect SingleObjectExport. False by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IncludeToExportParentDataSet">
            <summary>
            Determines how the system includes objects of the type when exporting parent objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IncludeToWebTemplateExport">
            <summary>
            Determines the range of objects which will go to the web template export.
            If Default, the default selection of objects for web template export is preserved.
            If None, this object type will never go to web template export.
            If All, this object type will always go to web template export (both site and global objects).
            If Site, global objects are excluded.
            If Global, site objects are excluded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.ExcludedDependingType">
            <summary>
            Indicates if object is excluded depending type. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.WhereCondition">
            <summary>
            Where condition that defines which objects of the type are available for export. Does not affect the single object export.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.OrderBy">
            <summary>
            Order by clause that sets the order of objects in the XML data of export packages. Used to ensure that export packages containing the same objects always have matching XML data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.ObjectTreeLocations">
            <summary>
            Sets the locations of the object type within the object tree in the export/import wizard.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectRangeEnum">
            <summary>
            Enum representing object range (in the scale of site vs. global object).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.None">
            <summary>
            No objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.All">
            <summary>
            All objects (both, site and global).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.Site">
            <summary>
            Site objects only.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.Global">
            <summary>
            Global objects only.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.Default">
            <summary>
            Default scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectAttachmentsCategories">
            <summary>
            Class containing names of the object attachment (metafiles) categories names used by CMS.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.LAYOUT">
            <summary>
            Layouts category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.FORMLAYOUT">
            <summary>
            Form layout category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.THUMBNAIL">
            <summary>
            Thumbnails category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.ICON">
            <summary>
            Icons category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.TEMPLATE">
            <summary>
            Templates category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.INVOICE">
            <summary>
            Invoice category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.ISSUE">
            <summary>
            Issue category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.IMAGE">
            <summary>
            Image category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.EPRODUCT">
            <summary>
            E-product category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.ATTACHMENT">
            <summary>
            Attachment category.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TempFileInfo">
            <summary>
            TempFileInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty TempFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new TempFileInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.EnsureBinaryData(System.Boolean)">
            <summary>
            Ensures the binary data - loads the binary data from file if available.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileSiteName">
            <summary>
            Temporary file site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileID">
            <summary>
            Temporary file ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileLastModified">
            <summary>
            Date and time when the temporary file was last modified.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileParentGUID">
            <summary>
            Temporary file scope unique identifier (temporary files are numbered uniquely within this scope).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileMimeType">
            <summary>
            Temporary file mime type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileGUID">
            <summary>
            Temporary file unique identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileBinary">
            <summary>
            Temporary file binary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileNumber">
            <summary>
            Name of the temporary file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileName">
            <summary>
            Name of the original file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileExtension">
            <summary>
            Temporary file extension.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileDirectory">
            <summary>
            Folder within temporary files folder.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileImageWidth">
            <summary>
            Temporary file width (makes sense for images only).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileSize">
            <summary>
            Temporary files size.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileImageHeight">
            <summary>
            Temporary file height (makes sense for images only).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileTitle">
            <summary>
            Temporary file title.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileDescription">
            <summary>
            Temporary file description.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TempFileInfoProvider">
            <summary>
            Class providing TempFileInfo management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.IMAGE_EDITOR_FOLDER">
            <summary>
            Name of the parent folder for image editor temporary files.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.MULTIFILE_UPLOADER_FOLDER">
            <summary>
            Name of the parent folder for multifile uploader temporary files.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.mTemporaryFilesFolderPath">
            <summary>
            Temporary files folder path.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFiles">
            <summary>
            Returns all temp files.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfo(System.Int32)">
            <summary>
            Returns temporary file with specified ID.
            </summary>
            <param name="tempFileId">Temporary file ID</param>        
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfo(System.Guid,System.Int32)">
            <summary>
            Returns temporary file with specified number.
            </summary>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="number">Temporary file number within the parent scope</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFiles(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of all temporary files matching the specified parameters.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Number of records to be selected</param>        
            <param name="columns">Columns to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.SetTempFileInfo(CMS.DataEngine.TempFileInfo)">
            <summary>
            Sets (updates or inserts) specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be set</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFileInfo(CMS.DataEngine.TempFileInfo)">
            <summary>
            Deletes specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFileInfo(System.Int32)">
            <summary>
            Deletes temporary file with specified ID.
            </summary>
            <param name="tempFileId">Temporary file ID</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFiles(System.String,System.Guid)">
            <summary>
            Deletes all temporary files for the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFiles(System.String,System.Guid,System.Int32,System.Int32)">
            <summary>
            Deletes all the temporary files with number between lower and upper boud for the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="lowerBound">Number of the temporary file which should be deleted as the first</param>
            <param name="upperBound">Number of the temporary file which should be deleted as the last</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFiles(System.String,System.DateTime)">
            <summary>
            Deletes old temporary files from the specified parent folder.`  `.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="olderThan">All temporary files older than this date/time are deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesInternal">
            <summary>
            Returns all temp files.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfoInternal(System.Int32)">
            <summary>
            Returns temporary file with specified ID.
            </summary>
            <param name="tempFileId">Temporary file ID</param>        
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns temporary file from the specified parent scope and with specified number.
            </summary>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="number">Number of the temporary file to return</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of all temporary files matching the specified parameters.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Number of records to be selected</param>        
            <param name="columns">Columns to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.SetTempFileInfoInternal(CMS.DataEngine.TempFileInfo)">
            <summary>
            Sets (updates or inserts) specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be set</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFileInfoInternal(CMS.DataEngine.TempFileInfo)">
            <summary>
            Deletes specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be deleted</param>        
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFilesInternal(System.String,System.Guid)">
            <summary>
            Deletes all the temporary files from the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFilesInternal(System.String,System.Guid,System.Int32,System.Int32)">
            <summary>
            Deletes all the temporary files with number between lower and upper boud from the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="lowerBound">Number of temporary file which should be deleted as the first</param>
            <param name="upperBound">Number of the temporary file which should be deleted as the last</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFilesInternal(System.String,System.DateTime)">
            <summary>
            Deletes old temporary files from the specified parent folder.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="olderThan">All temporary files older than this date/time are deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.EnsurePhysicalFile(CMS.DataEngine.TempFileInfo)">
            <summary>
            Ensures the file in the file system.
            </summary>
            <param name="fileInfo">Temporary file</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileBinary(System.String,System.Guid,System.Int32,System.String)">
            <summary>
            Returns the temporary file binary data from disk.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileBinary(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the temporary file binary data from disk.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeFolder">Scope folder which is located under the parent folder</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.StoreFilesInFileSystem(System.String)">
            <summary>
            Returns the current settings whether the files should be stored in the filesystem.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.StoreFilesInDatabase(System.String)">
            <summary>
            Returns the current settings whether the files should be stored in the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesFolderPath(System.String,System.Guid)">
            <summary>
            Returns physical path to the folder where temporary files are located.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">Parent scope GUID</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesFolderPath(System.String,System.String)">
            <summary>
            Returns physical path to the folder where temporary files are located.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeFolder">Scope folder which is located under the parent folder</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesRootFolderPath">
            <summary>
            Returns physical path to the root folder of all temporary files.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesRootFolderPath(System.String)">
            <summary>
            Returns physical path to the root folder of all temporary files.
            </summary>        
            <param name="webFullPath">Full path to the root of the web project (e.g. c:\WebProject\)</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilePath(System.String,System.Guid,System.Int32,System.String)">
            <summary>
            Returns physical path to the specified temporary file.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilePath(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns physical path to the specified temporary file.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeFolder">Scope folder which is located under the parent folder</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfoProvider.TemporaryFilesFolderPath">
            <summary>
            Temporary files folder path (default: ~/App_Data/CMSTemp/)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineCodeTemplateGenerator">
            <summary>
            Data engine code template generator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the info class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default info class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoProviderCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the info provider class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoProviderCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default info provider class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the binding info class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default binding info class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoProviderCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the binding info provider class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoProviderCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default binding info provider class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider T4 runtime template.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info provider template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.HasCodeNameColumn">
            <summary>
            Indicates whether a codename column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.HasGUIDColumn">
            <summary>
            Indicates whether a GUID column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoClassNamePluralized">
            <summary>
            Gets the pluralized info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseIdHashtable">
            <summary>
            Gets the value that indicates if the ID hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseNameHashtable">
            <summary>
            Gets a value that indicates if the name hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseGuidHashtable">
            <summary>
            Gets a value that indicates if the GUID hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseHashtables">
            <summary>
            Gets a value that indicates if any hastable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.IsSiteObject">
            <summary>
            Gets a value that indicates if the info can be a site object (i.e. can have site ID specified).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.HasAdvancedMethods">
            <summary>
            Gets a value that indicates if the info provider has any advanced methods.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info T4 runtime template.
            
            NOTE: If you change InfoTemplate.tt file, you need to replace the namespace in InfoTemplate.cs before he compilation to CMS.DataEngine.Generators
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.ObjectClassName">
            <summary>
            Gets the object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.Properties">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.IdColumn">
            <summary>
            Gets the name of the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.DisplayNameColumn">
            <summary>
            Gets the name of the display name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.CodeNameColumn">
            <summary>
            Gets the name of the code name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.GuidColumn">
            <summary>
            Gets the name of the GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.LastModifiedColumn">
            <summary>
            Gets the name of the "last modified" column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.BinaryColumn">
            <summary>
            Gets the name of the binary column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.SiteIdColumn">
            <summary>
            Gets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.HasReferences">
            <summary>
            Determines whether there is at least one field which has a reference set to some object type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty">
            <summary>
            A property description for the info T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.#ctor(CMS.DataEngine.FieldInfo)">
            <summary>
            Creates a new instance initialized using the specified field info.
            </summary>
            <param name="field">Field info</param>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.Comment">
            <summary>
            Gets the property comment.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.AllowEmpty">
            <summary>
            Gets a value that indicates if the property is not required to have a value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.DefaultValue">
            <summary>
            Gets a default value of the property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.TypeDefaultValue">
            <summary>
            Gets a default value of the type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.GetMethod">
            <summary>
            Gets the name of the method to be used to obtain the property value in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.UseGetValue">
            <summary>
            Gets a value that indicates if the GetValue method is to be used in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="T:CMS.Base.URLHandler">
            <summary>
            Simple thread handler
            </summary>
        </member>
        <member name="M:CMS.Base.URLHandler.StartEvent(System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="url">Handled URL</param>
        </member>
        <member name="T:CMS.Base.URLEventArgs">
            <summary>
            Get URL event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.URLEventArgs.URL">
            <summary>
            URL
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDataEventArgs">
            <summary>
            Object data event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataEventArgs.Data">
            <summary>
            Data set returned by object query or custom data set
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataEventArgs.Query">
            <summary>
            Object query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataEventArgs.TotalRecords">
            <summary>
            Number of total records when paging is used. If value is less than 0, value is calculated as number of rows in Data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDataEventHandler">
            <summary>
            Object data handler enables manipulation with object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataEventHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataEventHandler.#ctor(CMS.DataEngine.ObjectDataEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataEventHandler.StartEvent(System.Data.DataSet,CMS.DataEngine.IObjectQuery,System.Int32)">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="result">Data set with object data.</param>
            <param name="query">Default object query used to select data in case data set is not returned by event.</param>
            <param name="totalRecords">Number of records which should by used for paging. If not set, number of rows in dataset is calculated.</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSortEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSortEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectEventArgs`1.Object">
            <summary>
            Processed object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectEventArgs`1.Content">
            <summary>
            Object content. Used when it makes sense: Search indexing
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs`1.#ctor(`0,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="ascending">Indicates if the sort should be ascending</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectSortEventArgs`1.OrderColumn">
            <summary>
            Name of the order column. If null, OrderColumn from TypeInfo is taken.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSortEventArgs`1.NameColumn">
            <summary>
            Column by the content of which the alphabetical order will be set.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSortEventArgs`1.Ascending">
            <summary>
            Indicates if the sort should be ascending.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs.#ctor(CMS.DataEngine.BaseInfo,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="ascending">Indicates if the sort should be ascending</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectChangeOrderHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderHandler.#ctor(CMS.DataEngine.ObjectChangeOrderHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectChangeOrderEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectChangeOrderEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs`1.#ctor(`0,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="newOrder">Specific new document order index to be set</param>
            <param name="relativeOrder">Indicates if the NewOrder index is relative to current document position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectChangeOrderEventArgs`1.NewOrder">
            <summary>
            Specific new document order index to be set.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectChangeOrderEventArgs`1.RelativeOrder">
            <summary>
            Indicates if the NewOrder index is relative to current document position.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectChangeOrderEventArgs`1.OrderColumn">
            <summary>
            Name of the order column. If null, OrderColumn from TypeInfo is taken.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs.#ctor(CMS.DataEngine.BaseInfo,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="newOrder">Specific new document order index to be set</param>
            <param name="relativeOrder">Indicates if the NewOrder index is relative to current document position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSortHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortHandler.#ctor(CMS.DataEngine.ObjectSortHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSecurityEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSecurityEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityEventArgs`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.Result">
            <summary>
            Result of the security check. If true, the security check is allowed
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.User">
            <summary>
            User for which the permissions is checked
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.SiteName">
            <summary>
            Site name for which the security check is performed. Doesn't necessarily have to be the same as the object site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.Permission">
            <summary>
            Permission to check
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSecurityHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityHandler.#ctor(CMS.DataEngine.ObjectSecurityHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.Base.QueryEventArgs">
            <summary>
            Query event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.QueryEventArgs.Query">
            <summary>
            Query
            </summary>
        </member>
        <member name="T:CMS.Base.QueryHandler">
            <summary>
            Query handler
            </summary>
        </member>
        <member name="M:CMS.Base.QueryHandler.StartEvent(System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="query">Handled query</param>
        </member>
        <member name="T:CMS.DataEngine.ExecuteQueryEventArgs`1">
            <summary>
            Execute query event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExecuteQueryEventArgs`1.Query">
            <summary>
            Processed query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExecuteQueryEventArgs`1.Connection">
            <summary>
            Query connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExecuteQueryEventArgs`1.Result">
            <summary>
            Result of the query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExecuteQueryHandler`1">
            <summary>
            Execute query handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExecuteQueryHandler`1.StartEvent(CMS.DataEngine.QueryParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="query">Query that executes</param>
            <param name="conn">Connection executing the query</param>
        </member>
        <member name="M:CMS.DataEngine.ExecuteQueryHandler`1.WhenMarkedWith(System.String)">
            <summary>
            Adds the conditional before query handler for the query executed with specified mark
            </summary>
            <param name="mark">Query mark</param>
        </member>
        <member name="T:CMS.DataEngine.SqlEvents">
            <summary>
            SQL events
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteQuery">
            <summary>
            Fires when query is executed
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteNonQuery">
            <summary>
            Fires when non-query is executed
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteScalar">
            <summary>
            Fires when scalar query is executed
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteReader">
            <summary>
            Fires when reader is executed
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabaseFieldAttribute">
            <summary>
            Specifies to which database column the property maps
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseFieldAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseFieldAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="colName">Database column name</param>
        </member>
        <member name="P:CMS.DataEngine.DatabaseFieldAttribute.ColumnName">
            <summary>
            Database column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseFieldAttribute.ValueType">
            <summary>
            Type representing the stored value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExpressionTreeModifier">
            <summary>
            Provides the ability to replace particular constant in the expression tree by a new value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExpressionTreeModifier.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Converts the constant expression to the results
            </summary>
            <param name="c">Constant to visit</param>
        </member>
        <member name="M:CMS.DataEngine.ExpressionTreeModifier.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExpressionTreeModifier.CopyAndModify(System.Linq.Expressions.Expression)">
            <summary>
            Provides a copy of the expression tree with modifications applied
            </summary>
            <param name="expression">Expression to copy</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralInfo">
            <summary>
            General info class to work with any object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralInfo.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Loads the object data from given DataRow.
            </summary>
            <param name="dr">Data row with the data</param>
        </member>
        <member name="T:CMS.DataEngine.ExtraColumn">
            <summary>
            Class representing an extra column with which an object can extend other object as a foreign key.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExtraColumn.#ctor(System.String,System.String,CMS.DataEngine.ObjectDependencyEnum)">
            <summary>
            Creates new instance of ObjectDependency.
            </summary>
            <param name="extendedObjectType">Object type of the defined dependecy</param>
            <param name="columnName">Name of the foreign key column with which the object type will be extended</param>
            <param name="required">Determines whether the dependency is required or optional (not required by default)</param>
        </member>
        <member name="P:CMS.DataEngine.ExtraColumn.ColumnName">
            <summary>
            Gets or sets the name of the foreign key column with which the object type will be extended.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExtraColumn.ExtendedObjectType">
            <summary>
            Gets or sets the object type of the defined dependecy.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExtraColumn.DependencyType">
            <summary>
            Determines whether the dependency is required or optional.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependencyEnum">
            <summary>
            Enumeration for setting the Required parameter of ObjectDependency.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.Required">
            <summary>
            Use this if the dependency is required and there is NO default value which can be used instead 
            (i.e. the object does not make sense without having the exact dependency set).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.RequiredHasDefault">
            <summary>
            Use this if the dependency is required but there is a default value which can be set instead 
            (typical example is User, if the user owns a document and the user is deleted, the document should not 
            be deleted, but default user - administrator - should be set as the owner instead).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.NotRequired">
            <summary>
            Use this if the dependency is not required (column has to support nulls) and the object makes sense 
            without having this dependency set.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.Binding">
            <summary>
            Represents a required dependency which is a part of binding relationship.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependency">
            <summary>
            Class with various types of object type lists (used for example in Import/Export, ODATA Service).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.#ctor(System.String,System.String,CMS.DataEngine.ObjectDependencyEnum,System.String)">
            <summary>
            Creates new instance of ObjectDependency.
            </summary>
            <param name="dependencyColumn">Name of the foreign key column of the dependency</param>
            <param name="dependencyObjectType">Object type of the defined dependecy (null for objects which define the dependency type in the data column - use fourth param to specify that)</param>
            <param name="required">Determines whether the dependency is required or optional (not required by default)</param>
            <param name="objectTypeColumn">Name of the column where the object type is stored (null for standard dependencies)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.GetHashCode">
            <summary>
            Returns has code of this object dependecy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.Equals(System.Object)">
            <summary>
            Returns true if the dependencies match in all their fields.
            </summary>
            <param name="obj">Object to compare with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.Equals(CMS.DataEngine.ObjectDependency)">
            <summary>
            Returns true if the dependencies match in all their fields.
            </summary>
            <param name="other">Object to compare with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.HasDynamicObjectType">
            <summary>
            Returns true if the dependency has dynamic object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.DependencyColumn">
            <summary>
            Gets or sets the name of the foreign key column of the dependency.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.DependencyObjectType">
            <summary>
            Gets or sets the object type of the defined dependecy.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.DependencyType">
            <summary>
            Determines whether the dependency is required or optional.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.ObjectTypeColumn">
            <summary>
            Gets or sets the name of the column where the object type is stored (for objects with no FK DB restricton, but still an object dependency).
            The example is ObjectSettings or Metafiles where the object dependency is combination of MetaFileObjectType and MetaFileObjectID.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeManager">
            <summary>
            Class with various types of object type lists (used for example in Import/Export, ODATA Service).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mTypes">
            <summary>
            List of registered types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mTypesByObjectType">
            <summary>
            Registered object types [ObjectType] -> [RegisterObjectTypeAttribute].
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mTypeInfosByType">
            <summary>
            All type infos existing in the system for the given type [Type] -> [List[RegisterObjectTypeAttribute]].
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mInstance">
            <summary>
            Singleton instance of the manager.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mBindingObjectTypes">
            <summary>
            List of all binding object types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mListObjectTypes">
            <summary>
            List of all listing (inherited) object types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mMainObjectTypes">
            <summary>
            List of all "main" object types (= not child of other object) retrieved from modules.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mAllObjectTypes">
            <summary>
            List of all object types without inherited object types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mAllExceptBindingObjectTypes">
            <summary>
            List of all object types without inherited and binding object types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mObjectTypesWithMacros">
            <summary>
            List of all object types with macros.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mExistingObjectTypes">
            <summary>
            List of all existing object types retrieved from modules (including inherited object types).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeManager.mObjectGenerator">
            <summary>
            Object generator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetAllObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetAllExceptBindingObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types and binding object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetObjectTypesWithMacros">
            <summary>
            Returns the list of all the object types available in the system that can contain macros in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetMainObjectTypes">
            <summary>
            Returns list of all "main" object types (= not child of other object) retrieved from modules.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetBindingObjectTypes">
            <summary>
            Returns list of all binding object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetListObjectTypes">
            <summary>
            Returns list of all listing (inherited) object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.CreateGenerator">
            <summary>
            Creates the object generator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetColumnNames(System.String[])">
            <summary>
            Gets list of columns from given object types
            </summary>
            <param name="objectTypes">Object types</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfos(System.Collections.Generic.IEnumerable{System.String},System.Func{CMS.DataEngine.ObjectTypeInfo,System.Boolean})">
            <summary>
            Filters given source collection of object types according to the condition specified.
            </summary>
            <param name="sourceCollection">Source collection to filter</param>
            <param name="condition">Condition to filter with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetObjectTypes(System.Collections.Generic.IEnumerable{System.String},System.Func{CMS.DataEngine.ObjectTypeInfo,System.Boolean})">
            <summary>
            Filters given source collection of object types according to the condition specified.
            </summary>
            <param name="sourceCollection">Source collection to filter</param>
            <param name="condition">Condition to filter with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypes">
            <summary>
            Ensures that the object types are properly registered
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeInfoDynamicList(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Registers the specified type info to all lists where it belongs to (ObjectDependencies, ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="typeInfo">Object type info to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeDynamicLists(System.Collections.Generic.List{System.String})">
            <summary>
            Registers the specified types to all lists where it belongs to (ObjectDependencies, ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeDynamicListsInternal(System.Collections.Generic.List{System.String})">
            <summary>
            Registers the specified types to all lists where it belongs to (ObjectDependencies, ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeDependencies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Computes ObjectDependencies from DependsOn and Extends fields of TypeInfo of objects in the system.
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeInfoDependencies(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Computes ObjectDependencies from DependsOn and Extends fields of TypeInfo of objects in the system.
            </summary>
            <param name="typeInfo">Object type info to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfo(CMS.RegisterObjectTypeAttribute)">
            <summary>
            Gets the type info for the given attribute
            </summary>
            <param name="typeAttr">Object type attribute</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfoFields(CMS.RegisterObjectTypeAttribute,System.Reflection.BindingFlags)">
            <summary>
            Gets list of fields of type ObjectTypeInfo for specified object type attribute
            </summary>
            <param name="attribute">Object type attribute</param>
            <param name="flags">Binding flags</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfo(System.String,System.Boolean)">
            <summary>
            Gets the type info for the given object type
            </summary>
            <param name="objectType">Object type</param>
            <param name="exceptionIfNotFound">If true, an exception is fired if the given object type is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddObjectDependencies(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectDependency})">
            <summary>
            Adds object dependencies to the specified TypeInfo if they are not present yet.
            </summary>
            <param name="typeInfo">TypeInfo where to add dependencies</param>
            <param name="dependencies">Dependencies to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddObjectDependency(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectDependency)">
            <summary>
            Adds object dependency to the specified TypeInfo if it's not present yet.
            </summary>
            <param name="typeInfo">TypeInfo where to add dependencies</param>
            <param name="dependency">Dependency to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeInfoList(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Registers the specified types to all lists where it belongs to (ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="typeInfo">Object type info to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeLists(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers the specified types to all lists where it belongs to (ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddToObjectTypeLists(System.String,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Registers the specified type to all lists where it belongs to (ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectType">Object type to register</param>
            <param name="typeInfo">Type info of the type to which it should register</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddToObjectTypesList(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Adds specified object type to the list if not exists.
            </summary>
            <param name="objectType">Object type</param>
            <param name="collection">Collection to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddObjectType(System.String)">
            <summary>
            Adds the object type to the list of object types
            </summary>
            <param name="objectType">Object type to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetEmptyObject(System.String)">
            <summary>
            Creates an empty object of the given type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type)">
            <summary>
            Registers the given object type
            Registers the object type
            </summary>
            <param name="objectType">Object type string</param>
            <param name="type">Type to register</param>
            <param name="typeInfo">TypeInfo of the object type being registered</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(CMS.RegisterObjectTypeAttribute)">
            <summary>
            Registers the object type
            </summary>
            <param name="typeAttr">Object type definition</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.InitializeInfo(System.Object,CMS.RegisterObjectTypeAttribute)">
            <summary>
            Initializes the given info object with the given type info
            </summary>
            <param name="o">Object to initialize</param>
            <param name="typeAttr">Register object type attribute</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.RegisterTypesToObjectTree(CMS.DataEngine.ObjectTypeTreeNode,System.Func{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTreeLocation}})">
            <summary>
            Registers the specified types to object type tree
            </summary>
            <param name="tree">Object type tree</param>
            <param name="getLocations">Function to provide locations for the given object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetRegisteredTypeInfo(System.String)">
            <summary>
            Gets the specific type info based on the object type name.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfos(System.Type)">
            <summary>
            Gets all the type infos registered for the given system type
            </summary>
            <param name="type">System type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfos(System.Collections.Generic.List{CMS.RegisterObjectTypeAttribute})">
            <summary>
            Gets all the type infos registered for the given system type
            </summary>
            <param name="list">List of registered types</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.RegisteredTypes">
            <summary>
            Returns all registered types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ObjectGenerator">
            <summary>
            Object generator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.Instance">
            <summary>
            Returns singleton instance of the ObjectTypeManager.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ExistingObjectTypes">
            <summary>
            Returns the list of all existing object types available in the system in a not guaranteed order (includes also inherited, list infos).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.AllObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.AllExceptBindingObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types and binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.MainObjectTypes">
            <summary>
            List of all "main" object types (= not child of other object) retrieved from modules.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.BindingObjectTypes">
            <summary>
            List of all binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ListObjectTypes">
            <summary>
            Returns list of all listing (inherited) object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ObjectTypesWithMacros">
            <summary>
            Returns the list of all the object types available in the system that can contain macros in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IStringMetadata">
            <summary>
            Defines extra metadata for string methods
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IStringMetadata.StartsWith(System.String)">
            <summary>
            Returns true if the given string 
            </summary>
            <param name="prefix">Prefix to check</param>
        </member>
        <member name="M:CMS.DataEngine.IStringMetadata.EndsWith(System.String)">
            <summary>
            Returns true if the given string ends with the given suffix
            </summary>
            <param name="suffix">Suffix to check</param>
        </member>
        <member name="M:CMS.DataEngine.IStringMetadata.Contains(System.String)">
            <summary>
            Returns true if the given string contains the given substring
            </summary>
            <param name="substring">Substring to check</param>
        </member>
        <member name="T:CMS.DataEngine.LinqSqlMethods">
            <summary>
            Methods available in LINQ statements that have proper SQL representation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LinqSqlMethods.Equals(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="first">First object</param>
            <param name="second">Second object</param>
        </member>
        <member name="M:CMS.DataEngine.LinqSqlMethods.StartsWith(System.String,System.String)">
            <summary>
            Returns true if the given string 
            </summary>
            <param name="text">Text to check</param>
            <param name="prefix">Prefix to check</param>
        </member>
        <member name="M:CMS.DataEngine.LinqSqlMethods.EndsWith(System.String,System.String)">
            <summary>
            Returns true if the given string ends with the given suffix
            </summary>
            <param name="text">Text to check</param>
            <param name="suffix">Suffix to check</param>
        </member>
        <member name="M:CMS.DataEngine.LinqSqlMethods.Contains(System.String,System.String)">
            <summary>
            Returns true if the given string contains the given substring
            </summary>
            <param name="text">Text to check</param>
            <param name="substring">Substring to check</param>
        </member>
        <member name="T:CMS.DataEngine.SqlRepresentationAttribute">
            <summary>
            Defines the SQL representation of the given method call
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlRepresentationAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="format">Defines format of the SQL representing this method call. Individual parameters are represented via standard format string with {0}, {1} etc.</param>
        </member>
        <member name="P:CMS.DataEngine.SqlRepresentationAttribute.Format">
            <summary>
            Defines format of the SQL representing this method call. Individual parameters are represented via standard format string with {0}, {1} etc.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineHandlers">
            <summary>
            Handlers within Data engine module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.Init">
            <summary>
            Initializes the handlers
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.InitRequestContext(System.Object,System.EventArgs)">
            <summary>
            Initializes the request context to use proper database based on current domain name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.DisposeRequestScope(System.Object,System.EventArgs)">
            <summary>
            Disposes the request connection scope
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.DisposeThreadRequestScope(System.Object,CMS.Base.ThreadEventArgs)">
            <summary>
            Fires when thread cleanups its context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.EnsureThreadRequestScope(System.Object,CMS.Base.ThreadEventArgs)">
            <summary>
            Fires before the thread runs
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.EnsureConnectionString(System.Object,CMS.Base.ThreadEventArgs)">
            <summary>
            Fires when the new thread starts
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineModuleMetadata">
            <summary>
            Represents the Data Engine module metadata.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataTaskType">
            <summary>
            Web farm task types for DataEngine module
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.UpdateMetaFile">
            <summary>
            MetaFile update.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.DeleteMetaFile">
            <summary>
            MetaFile delete.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.ProcessObject">
            <summary>
            Process custom object task
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.InvalidateObject">
            <summary>
            Invalidation of single object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.InvalidateChildren">
            <summary>
            Invalidation of direct children objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.InvalidateAllObjects">
            <summary>
            Invalidation of all objects of specific type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.DictionaryCommand">
            <summary>
            Provider dictionary command.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.DeleteItemInt">
            <summary>
            Deleting hashtable item index by integer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.DeleteItemString">
            <summary>
            Deleting hashtable item index by string.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.DeleteItemGuid">
            <summary>
            Deleting hashtable item index by GUID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.ClearSettings">
            <summary>
            Clears the settings
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.ClearResolvedClassNames">
            <summary>
            Clears resolved class names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.RemoveReadOnlyObject">
            <summary>
            Removes read only object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.ClearReadOnlyObjects">
            <summary>
            Clears read only objects
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.RemoveClassStructureInfo">
            <summary>
            Removes class structure info
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.ClearClassStructureInfos">
            <summary>
            Clears class structure infos
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTaskType.ClearHashtables">
            <summary>
            Clear all the system hashtables.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ConnectionContext">
            <summary>
            Connection context.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionContext.EnsureRequestScope(System.String,System.Boolean,System.Boolean)">
            <summary>
            Ensures the connection scope for current request.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="keepOpen">If true, the connection is kept open</param>
            <param name="openConnection">If true, the connection is opened right away</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionContext.DisposeRequestScope">
            <summary>
            Disposes the scope for current request.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.RequestOpenedTransactions">
            <summary>
            Number of request opened transactions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.RequestOpenedConnections">
            <summary>
            Number of request opened connections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.CurrentScopeConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.SomeConnectionUsed">
            <summary>
            True if any connection has opened within the current request
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.CurrentConnectionScope">
            <summary>
            Request connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.CurrentTransactionScope">
            <summary>
            Request transaction scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryObject">
            <summary>
            Base interface for all query objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObject.CloneObject">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObject.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="parameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryObject.Changed">
            <summary>
            Marks the object as changed
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryObject.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryObject.Parameters">
            <summary>
            Query data parameters
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryObjectWithValue">
            <summary>
            Base interface for all query objects with value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObjectWithValue.GetExpression">
            <summary>
            Gets a string expression representing this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObjectWithValue.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryParameters">
            <summary>
            Query parameters interface
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this where condition to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.Expand(System.String)">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.EnsureParameters">
            <summary>
            Ensures data parameters for the given query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnList">
            <summary>
            Represents a list of query columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.#ctor(CMS.DataEngine.IQueryObject)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.#ctor(System.String)">
            <summary>
            Creates an empty column list built from the given columns
            </summary>
            <param name="columns">List of columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.GetPresentColumns">
            <summary>
            Gets the hash set of present columns for duplicity detection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.ResolveColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolves all columns into the given class columns
            </summary>
            <param name="allColumns">List of columns representing all columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.EnsureOrderByColumns(System.String@)">
            <summary>
            Ensures that the order by columns are provided within the list of columns as aliases, modifies the order by expression to the aliases of those columns
            </summary>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.FilterOrderByColumns(CMS.DataEngine.QueryColumnList)">
            <summary>
            Removes from the order by columns those not present in select columns. For the purposes of nested distinct queries.
            </summary>
            <param name="selectColumns">Columns returned by the nested query.</param>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.ReplaceColumn(System.String,CMS.DataEngine.IQueryColumn)">
            <summary>
            Replaces the column with a given name with the new column definition
            </summary>
            <param name="originalName">Column name</param>
            <param name="newColumn">New column</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.EnsureAllColumns">
            <summary>
            Ensures all columns flag if the list is empty
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Load(System.String[])">
            <summary>
            Loads the given list of columns to the list
            </summary>
            <param name="columns">Lists of columns separated by commas</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Clear">
            <summary>
            Clears the list of columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Adds the given list of columns to the list
            </summary>
            <param name="columns">Lists of columns separated by commas</param>
            <param name="extraColumns">If true, the columns are considered extra columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(System.String,System.Boolean)">
            <summary>
            Adds the given list of columns
            </summary>
            <param name="columns">Columns separated by commas</param>
            <param name="extraColumns">If true, the columns are considered extra columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.SetNoColumns">
            <summary>
            Sets no columns flag if no columns added yet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Load(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn})">
            <summary>
            Loads the given list of columns to the list
            </summary>
            <param name="columns">Lists of columns separated by commas</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(CMS.DataEngine.IQueryColumn,System.Boolean)">
            <summary>
            Adds the given list of query columns
            </summary>
            <param name="column">Column to add</param>
            <param name="extraColumn">If true, the column is considered extra column</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn},System.Boolean)">
            <summary>
            Adds the given list of query columns
            </summary>
            <param name="columns">Columns to add</param>
            <param name="extraColumns">If true, the columns are considered extra columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(CMS.DataEngine.QueryColumnList,System.Boolean)">
            <summary>
            Adds the given list of query columns
            </summary>
            <param name="columns">Columns to add</param>
            <param name="extraColumns">If true, the columns are considered extra columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddToList(CMS.DataEngine.IQueryColumn,System.Boolean)">
            <summary>
            Adds the given column to the column list
            </summary>
            <param name="col">Column list</param>
            <param name="extraColumn">If true, the column is handled as an extra column and is added even in case all columns are included</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.GetColumns(CMS.DataEngine.QueryDataParameters,System.Boolean)">
            <summary>
            Gets list of columns represented as string
            </summary>
            <param name="parameters">Query parameters. If provided, the column parameters are included into the parameters and column expression is altered accordingly</param>
            <param name="expand">If true, the result expression is expanded with parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Changed">
            <summary>
            Marks the list as changed and flushes all necessary caches
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.GetEnumerator">
            <summary>
            Gets the enumerator for the columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Equals(System.Object)">
            <summary>
            Returns true if the object equals to another
            </summary>
            <param name="obj">Object to compare to</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.GetHashCode">
            <summary>
            Gets the object hash code
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.ToString">
            <summary>
            Gets a string representation of the column list
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.op_Equality(CMS.DataEngine.QueryColumnList,CMS.DataEngine.QueryColumnList)">
            <summary>
            Compares two column lists
            </summary>
            <param name="cols1">First column list</param>
            <param name="cols2">Second columns list</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.op_Inequality(CMS.DataEngine.QueryColumnList,CMS.DataEngine.QueryColumnList)">
            <summary>
            Compares two column lists
            </summary>
            <param name="cols1">First column list</param>
            <param name="cols2">Second columns list</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Clone(CMS.DataEngine.IQueryObject)">
            <summary>
            Clones the column list
            </summary>
            <param name="newParent">New parent for the cloned object</param>>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AsAliases">
            <summary>
            Returns the column list transformed to the aliases of the columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Transform(System.Func{CMS.DataEngine.IQueryColumn,CMS.DataEngine.IQueryColumn})">
            <summary>
            Transforms the column list to a new list of columns using the given column transformation
            </summary>
            <param name="transformFunc">Transformation function</param>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.Parent">
            <summary>
            Parent query for the column list
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.IncludeAllColumns">
            <summary>
            If true, all columns are included
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.NoColumns">
            <summary>
            If true, the list represents an empty list with no columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.Columns">
            <summary>
            List of columns represented as string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.AnyColumnsDefined">
            <summary>
            Returns true if any columns are defined within this column list
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.Count">
            <summary>
            Returns the number of defined columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.ReturnsAllColumns">
            <summary>
            Returns true if the columns contain all columns specification or columns do not contain definition of any columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.IsSingleColumn">
            <summary>
            Returns true if the columns represent a single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnList.PresentColumns">
            <summary>
            Gets the hash set of present columns for duplicity detection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryExpression">
            <summary>
            Represents a general query expression
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryExpressionBase`1">
            <summary>
            Query expression base class
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryParametersBase`1">
            <summary>
            Generic variant of the abstract query object, provides fluent syntax
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractQueryObject">
            <summary>
            Base for any object participating in the Data query evaluation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="parameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this query parameters to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.CloneObject">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.Changed">
            <summary>
            Marks the object as changed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.Reset">
            <summary>
            Flushes the results but leaves the generated query text unchanged.
            After the reset, query can be executed again to obtain new data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractQueryObject.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractQueryObject.Parameters">
            <summary>
            Query parameters
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParametersBase`1.mParameters">
            <summary>
            Query data parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this where condition to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies all the object properties to the given target class
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.CloneObject">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Clone">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.EnsureParameters">
            <summary>
            Ensures data parameters for the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="addParameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Immutable">
            <summary>
            Makes this object instance is immutable, and next subsequent modification starts with a clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Snapshot">
            <summary>
            Creates an immutable snapshot of the current query as a base for further evaluation. Doesn't modify the original query in any way.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.NewResult">
            <summary>
            Returns properly typed this
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Expand(System.String)">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.ToString">
            <summary>
            Returns the string representation of the expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="P:CMS.DataEngine.QueryParametersBase`1.IsImmutable">
            <summary>
            If true, this object instance is immutable, and next subsequent modification starts with a clone of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParametersBase`1.TypedThis">
            <summary>
            Returns properly typed this
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParametersBase`1.Parameters">
            <summary>
            Query data parameters
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryExpression">
            <summary>
            General interface for the query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryExpression.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.GetExpression">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies all the object properties to the given target class
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.AsColumn(System.String)">
            <summary>
            Creates a column from the given expression
            </summary>
            <param name="alias">Column alias</param>
        </member>
        <member name="P:CMS.DataEngine.QueryExpressionBase`1.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpression.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpression.#ctor(System.String)">
            <summary>
            Constructor with expression
            </summary>
            <param name="expression">Expression text</param>
        </member>
        <member name="T:CMS.DataEngine.QueryColumn">
            <summary>
            Simple query column e.g. "DocumentName" / "DocumentName AS Name"
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SelectQueryColumnBase`1">
            <summary>
            Query column
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnBase`1">
            <summary>
            Query column
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryColumn">
            <summary>
            General interface for the query columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryColumn.AsAlias">
            <summary>
            Converts the column to a column representing its alias
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.AsAlias">
            <summary>
            Returns the new column created from this column alias
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression (column name)</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.WithExpression(System.String)">
            <summary>
            Sets the expression
            </summary>
            <param name="expression">New column expression</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.GetExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.op_Explicit(CMS.DataEngine.QueryColumnBase{`0})~System.String">
            <summary>
            Implicit operator for conversion from QueryColumn class to string
            </summary>
            <param name="col">Column object</param>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.Name">
            <summary>
            Gets the column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.Expression">
            <summary>
            Expression (column name)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.TypedThis">
            <summary>
            Returns properly typed this
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression (column name)</param>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.As(System.String)">
            <summary>
            Sets the alias to the column
            </summary>
            <param name="alias">Column alias</param>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.GetValueExpression">
            <summary>
            Gets the value expression of the column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.GetExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectQueryColumnBase`1.Name">
            <summary>
            Gets the column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectQueryColumnBase`1.ColumnAlias">
            <summary>
            Column alias
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectQueryColumnBase`1.EnsureBracketsForAlias">
            <summary>
            If true, brackets for the column alias are ensured
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="forceColumnBrackets">Indicates whether for brackets should be used for non-base column defined by IdentifierRegExp</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.GetValueExpression">
            <summary>
            Gets the value expression of the columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)">
            <summary>
            Creates a query column from the given expression
            </summary>
            <param name="expression">Column expression</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.IsBasicColumnName(System.String)">
            <summary>
            Returns true if column name match the identifier rules and is not NULL
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.QueryColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumn.ForceColumnBrackets">
            <summary>
            Gets or sets the value that indicates whether square brackets should be used for non-base column defined by IdentifierRegExp
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CountColumn">
            <summary>
            Count column
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AggregatedColumn">
            <summary>
            Aggregated query column e.g. "AVG(XYZ) AS Average"
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.#ctor(CMS.DataEngine.AggregationType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="aggregation">Aggregation type</param>
            <param name="expression">Column name expression</param>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.GetValueExpression">
            <summary>
            Gets the column expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.ApplyAggregation(System.String)">
            <summary>
            Applies the aggregation to the given expression
            </summary>
            <param name="expression">Column expression</param>
        </member>
        <member name="P:CMS.DataEngine.AggregatedColumn.AggregationType">
            <summary>
            Aggregation type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AggregatedColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CountColumn.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression to count. Leave empty for COUNT(*)</param>
        </member>
        <member name="T:CMS.DataEngine.OrderByColumn">
            <summary>
            Order by column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.#ctor(System.String,CMS.DataEngine.OrderDirection)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression (column name)</param>
            <param name="direction">Order direction</param>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.GetExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OrderByColumn.Direction">
            <summary>
            Order direction
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OrderByColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="T:CMS.DataEngine.RowNumberColumn">
            <summary>
            Row number query column e.g. "ROW_NUMBER() OVER (ORDER BY DefaultCulture) AS CMS_RN"
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor(System.String,CMS.DataEngine.IQueryColumn)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.GetValueExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RowNumberColumn.OrderBy">
            <summary>
            OrderBy expression for the row number
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RowNumberColumn.PartitionBy">
            <summary>
            If set, the row order gets partitioned by specific column(s)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RowNumberColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SystemColumns">
            <summary>
            System column names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.ORDER_ROW_NUMBER">
            <summary>
            Order row number
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.ORDER">
            <summary>
            Order column
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SOURCE_ROW_NUMBER">
            <summary>
            Source row number column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SOURCE_NUMBER">
            <summary>
            Source number column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SOURCE_TYPE">
            <summary>
            Source type column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.ROW_NUMBER">
            <summary>
            Row number
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.TOTAL_RECORDS">
            <summary>
            Total number of found records
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.CULTURE">
            <summary>
            Culture
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.DUPLICATE_PRIORITY">
            <summary>
            Colum name with priorities of duplicates
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryValueExpression">
            <summary>
            Query value expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryValueExpression.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryValueExpression.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
            <param name="name">Value name</param>
            <param name="expand">If true, expands the value to a constant</param>
        </member>
        <member name="M:CMS.DataEngine.QueryValueExpression.As(System.String)">
            <summary>
            Changes the name of the expression parameter to the given name
            </summary>
            <param name="name">Name for the parameter</param>
        </member>
        <member name="T:CMS.DataEngine.IMultiObjectQuery`3">
            <summary>
            Multi object query interface for a specific query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IMultiQuery`2">
            <summary>
            Multi query interface for a specific query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataQuery`1">
            <summary>
            Interface for the data query for a specific query type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataQuerySettings`1">
            <summary>
            Data query parameters interface for a specific query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IWhereCondition`1">
            <summary>
            Interface for classes which provide where condition for a specific query type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IWhereCondition">
            <summary>
            Interface for classes which provide where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition.ReturnNoResults">
            <summary>
            Sets the query to return no results. This action is irreversible, once the query is set to return no results it cannot be changed. 
            This method is used by data engine to forbid access to data that are not allowed to be accessed (e.g. license limitations), without notifying the process about the fact.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IWhereCondition.WhereCondition">
            <summary>
            Where condition on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IWhereCondition.WhereIsComplex">
            <summary>
            Returns true if the given where condition contains compound conditions, e. g. "A > 1 AND B = 5"
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.And">
            <summary>
            Changes the where operator to AND for subsequent where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.And(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the AND operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.And(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the AND operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Or">
            <summary>
            Changes the where operator to OR for next where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Or(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the OR operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Or(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the OR operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotNull(System.String)">
            <summary>
            Adds the where condition for a not null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereEmpty(System.String)">
            <summary>
            Adds the where condition for a null or empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotEmpty(System.String)">
            <summary>
            Adds the where condition for a non empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNull(System.String)">
            <summary>
            Adds the where condition for a null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereTrue(System.String)">
            <summary>
            Adds the where condition for a true column value (boolean column equals true).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereFalse(System.String)">
            <summary>
            Adds the where condition for a false column value (boolean column equals false).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereIn(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with EXISTS and the nested query "EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with NOT EXISTS and the nested query "NOT EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given where conditions to the query
            </summary>
            <param name="conditions">Nested where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNot(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the negation of the given where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.NewWhere">
            <summary>
            Clears the current where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.NoResults">
            <summary>
            Sets the where condition to exclude all data from result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Adds the given where condition to the query
            </summary>
            <param name="where">Where condition</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Adds the given where condition to the query. Matches the column value with an unary operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereEqualsOrNull(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value or null value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using NOT LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereID(System.String,System.Int32)">
            <summary>
            Adds the where condition to match the ID to the query. In case the column name is not provided or unknown, does not generate where condition. If given ID is invalid, adds the condition to match NULL.
            </summary>
            <param name="columnName">Column name</param>
            <param name="id">ID</param>
        </member>
        <member name="T:CMS.DataEngine.IDataQuerySettings">
            <summary>
            Data query parameters interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.OrderByColumns">
            <summary>
            List of columns by which the result should be sorted, e.g. "NodeLevel, DocumentName DESC"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.GroupByColumns">
            <summary>
            List of columns to group by, by default doesn't group, e.g. "NodeLevel, NodeOwner"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.SelectColumns">
            <summary>
            List of columns to return, by default returns all columns, e.g. "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.SelectColumnsList">
            <summary>
            List of columns to return, by default returns all columns, e.g. "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.TopNRecords">
            <summary>
            If set, selects only first top N number of records
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.Offset">
            <summary>
            Index of the first record to return (use for paging together with MaxRecords)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.MaxRecords">
            <summary>
            Maximum number of results to return (use for paging together with Offset)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.SourceExpression">
            <summary>
            Source of the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.DefaultSourceExpression">
            <summary>
            Default source of the query in case source is not defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.SelectDistinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.HavingCondition">
            <summary>
            Where condition for the group by on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.FilterColumns">
            <summary>
            List of columns used for extra filtering within the query, e.g. "CMS_C, CMS_RN"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.IsSubQuery">
            <summary>
            If true, the query is a sub-query used in another query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.IsNested">
            <summary>
            Indicates that this query is part of multi query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Then">
            <summary>
            Identity method to make the query expression more readable. Use before the OrderBy method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Take">
            <summary>
            Identity method to make the query expression more readable. Use before the Columns or Page method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Distinct(System.Boolean)">
            <summary>
            Sets the query to use distinct selection over the given columns
            </summary>
            <param name="distinct">If set to true, returns only distinct (different) values.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.FirstResult">
            <summary>
            Sets the query as a single object query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.TopN(System.Int32)">
            <summary>
            Selects only first top N number of records
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Column(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Column(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Columns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Columns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.ReplaceColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Page(System.Int32,System.Int32)">
            <summary>
            Specifies the page to select with given page index and page size. Page number is indexed from 0 (first page)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.PagedBy(System.Int32)">
            <summary>
            Sets up the query as a paged query with the given page size. Resets the page index to first page. Use in combination with NextPageAvailable and NextPage to iterate over the data in batches.
            </summary>
            <remarks>
            Note that if you iterate the results after calling this method, the results will cover only a single page. To iterate through all items page-by-page, use methods ForEachRow or ForEachObject.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NotPaged">
            <summary>
            Sets up the query to become not paged query and output all results at once.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NextPage">
            <summary>
            Adjusts the query to a next page, using the current page size. Use in combination with PagedBy and NextPageAvailable to iterate over the data in batches.
            </summary>
            <remarks>
            Number of records in one page can be specified by setting MaxRecords property or calling PagedBy() method.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NewGroupBy(System.String[])">
            <summary>
            Clears the current group by, reverting the source of data to the original. Note, that this method also resets the existing having condition which is closely bound to the group by.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.GroupBy(System.String[])">
            <summary>
            Specifies the columns to group by
            </summary>
            <param name="columns">List of columns to group by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NewHaving">
            <summary>
            Clears the current having condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Having(System.String,System.Boolean)">
            <summary>
            Specifies the group by having condition
            </summary>
            <param name="having">Having condition</param>
            <param name="replace">If true, the having condition replaces the original having condition</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Having(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given having conditions to the query.
            </summary>
            <param name="conditions">Having where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Having(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.WithComment(System.String)">
            <summary>
            Adds the comment to the given query
            </summary>
            <param name="comment">Comment to add</param>
        </member>
        <member name="T:CMS.DataEngine.IDataQuery">
            <summary>
            Data query interface
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetFullQueryText(System.Boolean)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetCompleteSettings(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the complete parameters for the query execution
            </summary>
            <param name="executingQuery">Executing query for which the parameters are retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ApplySettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ApplySettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.Execute">
            <summary>
            Executes the current query and returns it's results as a DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ExecuteReader(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the current query and returns it's results as a data reader
            </summary>
            <param name="commandBehavior">Command behavior</param>
            <param name="newConnection">If true, the reader should be executed using its own dedicated connection</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetScalarResult``1(``0)">
            <summary>
            Gets the scalar
            </summary>
            <param name="defaultValue">Default value if result not found or not capable to convert to output type</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetListResult``1">
            <summary>
            Gets the result as a list of values from the first column that the query returns. Excludes null values from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.Select``1(System.Func{System.Data.DataRow,``0})">
            <summary>
            Transforms the current result
            </summary>
            <param name="func">Select function</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ForEachRow(System.Action{System.Data.DataRow},System.Int32)">
            <summary>
            Executes the given action for each item (DataRow) in the result. Processes the items in batches of the given size.
            </summary>
            <param name="rowAction">Row action</param>
            <param name="batchSize">Batch size. 0 means no batch processing. By default uses current paging settings.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsNested``1">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsIDQuery">
            <summary>
            Creates an ID query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.As``1">
            <summary>
            Changes the type of the query to another type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsSingleColumn(System.String,System.Boolean)">
            <summary>
            Creates a single column query from the given query
            </summary>
            <param name="defaultColumn">Specific column to use in case query doesn't return single column yet</param>
            <param name="forceColumn">If true, the given column is forced to the output</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsSubQuery">
            <summary>
            Modifies the query to be able to be used as a sub-query, e.g. for usage in WHERE A IN ([query]). Ensures single column result, and removes order by from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsMaterializedList(System.String,System.Boolean)">
            <summary>
            Makes a materialized list from the given query
            </summary>
            <param name="columnName">Column name to output</param>
            <param name="distinct">If true, only distinct IDs are selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.HasCompatibleSource(CMS.DataEngine.IDataQuery)">
            <summary>
            Returns true if the given query is an external source
            </summary>
            <param name="query">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.QueryName">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.CustomQueryText">
            <summary>
            Custom query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.IncludeBinaryData">
            <summary>
            If true, the query includes the object binary data. Default is false
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.Result">
            <summary>
            DataSet with the result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.Count">
            <summary>
            Number of actual records retrieved from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.TotalRecords">
            <summary>
            Gets the number of total records when paging is used. Gets updated once the query executes
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.DefaultOrderByColumns">
            <summary>
            Default order by columns used in case if needed, and order by is not specified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.Tables">
            <summary>
            Collection of the result tables
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.SupportsReader">
            <summary>
            Returns true if the query supports data reader
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.DataSource">
            <summary>
            Data source that provides the query data. If not set, the query queries the database directly
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.DataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.HasDataSource">
            <summary>
            Returns true if the query has specific data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.IsCombinedQuery">
            <summary>
            If true, this query is combined from several queries. When additional parameters are applied to it, it will be wrapped into a nested query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.ReturnsSingleColumn">
            <summary>
            Returns true if the query returns single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.ConnectionStringName">
            <summary>
            Query connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.AllowMaterialization">
            <summary>
            If true, the query allows materialization
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.BinaryData(System.Boolean)">
            <summary>
            Sets whether the binary data should be included to the result
            </summary>
            <param name="binary">Include binary data?</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSource(System.Data.DataSet)">
            <summary>
            Sets the given DataSet as the source of the data query
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSource(CMS.DataEngine.DataQuerySource)">
            <summary>
            Sets the given source as the source of the data query
            </summary>
            <param name="source">Data query source</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.From(System.String)">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="source">Source</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Source(System.Action{CMS.DataEngine.QuerySource})">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="sourceParameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.OrderByDefault">
            <summary>
            Sets the default order by for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.ExpandColumns">
            <summary>
            Expands the columns within this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WhereAnyColumnContains(System.String)">
            <summary>
            Adds condition to all items that contain given text in any of the string columns. Performs a SQL substring search on the data.
            </summary>
            <param name="text">Text to search</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WhereAnyColumn(CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Matches the given condition on any column with the same type as the given value type.
            </summary>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Union(`0,System.Boolean)">
            <summary>
            Gets the union of this data query with another query
            </summary>
            <param name="query">Query to union with</param>
            <param name="unionAll">If true, the union does not eliminate the duplicities (produces UNION ALL)</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.UnionAll(`0)">
            <summary>
            Gets the union of this data query with another query without eliminating the duplicities
            </summary>
            <param name="query">Query to union with</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Intersect(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Except(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="T:CMS.DataEngine.IMultiQuery">
            <summary>
            Multi query interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.SelectResultColumns">
            <summary>
            List of columns to use for results, by default returns all columns defined in the inner queries. Example: "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.SelectResultColumnsList">
            <summary>
            List of columns to use for results, by default returns all columns defined in the inner queries. Example: "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.UseTypeColumns">
            <summary>
            If true (default), the query uses type columns for the output, otherwise it uses only global columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.OrderByResultColumns">
            <summary>
            List of columns for the result order by. If not specified, the result is ordered by sources and global order by.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.Type(System.String,System.Action{`1})">
            <summary>
            Includes given type with optional parameters
            </summary>
            <param name="type">Type to include</param>
            <param name="parameters">Action to setup the inner type parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.Types(System.String[])">
            <summary>
            Includes the given types to the resulting query
            </summary>
            <param name="types">Types to include</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumn(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.NoDefaultColumns">
            <summary>
            Sets the query to return no columns at all
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IObjectQuery`2">
            <summary>
            Interface for the object query for a specific query type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IObjectQuery">
            <summary>
            Interface for the object query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectQuery.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectQuery.UseObjectTypeCondition">
            <summary>
            If true, the query uses the object type condition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.OnlyGlobal">
            <summary>
            Filters the data to include only global objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.ExceptGlobal">
            <summary>
            Filters the data to include only site objects, but not global objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.OnSite(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Filters the data to include only records on the given site. If site binding is defined, filters the global objects by the site ID
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">If true, includes the global objects in case the object type covers both site and global objects</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithID(System.Int32)">
            <summary>
            Sets the where condition for a specific object ID
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithCodeName(System.String)">
            <summary>
            Sets the where condition for a specific object code name
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithGuid(System.Guid)">
            <summary>
            Sets the where condition for a specific object GUID
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithObjectType(System.String)">
            <summary>
            Changes the query to use the given object type. Applies the object type condition to the query. The new object type must have the same class name as the original one.
            </summary>
            <param name="objectType">Object type for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.AsNested">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IMultiObjectQuery">
            <summary>
            Multi object query interface
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Query.QueryExtensions">
            <summary>
            Extensions to easily convert values to queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsColumn(System.String)">
            <summary>
            Converts string to a query column which can be used in a query
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsValue(System.Object,System.Boolean)">
            <summary>
            Converts object to a query value which can be used as a query parameter
            </summary>
            <param name="value">Value</param>
            <param name="expand">If true, the value expands as constant</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsExpression(System.String)">
            <summary>
            Converts string to a query expression which can be used in a query
            </summary>
            <param name="expression">Expression</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.GetFinalExecutingQuery(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the final executing query for a given query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSource`1">
            <summary>
            Data query source which gets the data for specific object type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSourceBase`1">
            <summary>
            Query source
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QuerySourceBase`1">
            <summary>
            Defines base class for the query source
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQuerySource">
            <summary>
            Query source interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQuerySource.SourceExpression">
            <summary>
            Source expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sourceExpression">Source expression</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.TranslateSource(System.String)">
            <summary>
            Translates the source to the final query expression
            </summary>
            <param name="sourceExpression">Source expression</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.GetJoinCondition(System.String,System.String)">
            <summary>
            Gets the join condition for the given columns
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join(System.String,CMS.DataEngine.IWhereCondition,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
            <param name="joinType">Type of the join</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join(System.String,System.String,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
            <param name="joinType">Type of the join</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join(System.String,System.String,System.String,CMS.DataEngine.IWhereCondition,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
            <param name="joinType">Type of the join</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin(System.String,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin(System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin(System.String,System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin(System.String,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin(System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin(System.String,System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin(System.String,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin(System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin(System.String,System.String,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join``1(System.String,System.String,CMS.DataEngine.JoinTypeEnum,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="joinType">Type of the join</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin``1(System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin``1(System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin``1(System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.op_Implicit(CMS.DataEngine.QuerySourceBase{`0})~System.String">
            <summary>
            Implicit operator for conversion from query source to string expression
            </summary>
            <param name="source">Source object</param>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceBase`1.SourceExpression">
            <summary>
            Source expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceBase`1.LeftSourceName">
            <summary>
            Left source name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceBase`1.RightSourceName">
            <summary>
            Left source name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSourceBase`1.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSourceBase`1.mObject">
            <summary>
            Object instance of specified type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.InitFromType``1">
            <summary>
            Initializes the query from the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.TypeUpdated">
            <summary>
            Updates the query class name based on the current status
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.TranslateSource(System.String)">
            <summary>
            Translates the source to the final query expression
            </summary>
            <param name="sourceExpression">Source expression</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.GetTableName(System.String)">
            <summary>
            Gets the table name for the given class name
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectSourceBase`1.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSourceBase`1.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSourceBase`1.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSource`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSource`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySource">
            <summary>
            Base class for Data query source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.DATABASE_PREFIX">
            <summary>
            Specifies database as a source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.MEMORY_PREFIX">
            <summary>
            Specifies memory as a source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.MATERIALIZED">
            <summary>
            Specifies source for a materialized query within a database
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.CMSDATABASE">
            <summary>
            Specifies default CMS database as a source
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetDataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetConnectionStringName">
            <summary>
            Gets the connection string name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetData(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Gets the data for data query
            </summary>
            <param name="parameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetCount(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Returns the number of rows in the result queried by this data source if GetData is called with the same parameters
            </summary>
            <param name="parameters">Source parameters</param>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySource.DataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySource.ConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySourceParameters">
            <summary>
            Parameters for the data query source
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySourceParameters.#ctor(CMS.DataEngine.IDataQuery,CMS.DataEngine.DataQuerySettings,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="query">Data query</param>
            <param name="settings">Query parameters</param>
            <param name="offset">Offset of the first record to retrieve</param>
            <param name="maxRecords">Max records to retrieve</param>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.Query">
            <summary>
            Executing query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.Settings">
            <summary>
            Query parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.Offset">
            <summary>
            Offset of the first record to retrieve
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.MaxRecords">
            <summary>
            Max records to retrieve
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.TotalRecords">
            <summary>
            Returns total records
            </summary>
        </member>
        <member name="T:CMS.DataEngine.JoinTypeEnum">
            <summary>
            Join type enumeration
            </summary>
        </member>
        <member name="F:CMS.DataEngine.JoinTypeEnum.Inner">
            <summary>
            Inner join
            </summary>
        </member>
        <member name="F:CMS.DataEngine.JoinTypeEnum.LeftOuter">
            <summary>
            Left outer join
            </summary>
        </member>
        <member name="F:CMS.DataEngine.JoinTypeEnum.RightOuter">
            <summary>
            Right outer join
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MemoryDataQuerySource">
            <summary>
            Data query source as DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.#ctor(System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.#ctor(System.Func{System.Data.DataSet})">
            <summary>
            Constructor
            </summary>
            <param name="getSourceData">Function to dynamically get the source data at the given moment</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.GetDataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.GetData(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Executes the query
            </summary>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.GetCount(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Returns the number of rows in the result queried by this data source if GetData is called with the same parameters
            </summary>
            <param name="parameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.FixWhere(System.String)">
            <summary>
            Fixes the where condition to be able to be used with DataTable select
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="P:CMS.DataEngine.MemoryDataQuerySource.SourceData">
            <summary>
            Source data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MemoryDataQuerySource.GetSourceData">
            <summary>
            Function to dynamically get the source data at the given moment
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataParameter">
            <summary>
            Container for a single query parameter.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.ToString">
            <summary>
            Converts the data parameter to string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetParameterRegEx">
            <summary>
            Gets the regular expression for a parameter
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.Expand(System.String)">
            <summary>
            Expands the given expression
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.ChangeParameterName(System.String,System.String)">
            <summary>
            Changes the parameter name in the given expression
            </summary>
            <param name="expression">Expression</param>
            <param name="newName">New parameter name</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetDeclaration">
            <summary>
            Gets the parameter declaration
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Type">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.ParamRegEx">
            <summary>
            Regular expression to located the parameter within text
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MultiObjectQuery">
            <summary>
            Multiple objects query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MultiObjectQueryBase`3">
            <summary>
            Base class for multiple objects query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MultiQueryBase`2">
            <summary>
            Base class for the query consisting of multiple queries
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQueryBase`1">
            <summary>
            Queries particular database data or defines parameters for data selection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySettingsBase`1">
            <summary>
            Defines parameters for the data selection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.WhereConditionBase`1">
            <summary>
            Where condition builder - Generic base class
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereConditionBase`1.mWhereCondition">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereConditionBase`1.mWhereBuilder">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereConditionBase`1.mReturnsNoResults">
            <summary>
            Returns true if query doesn't return any results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this where condition to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Creates the clone of the collection.
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ResetWhereOperator">
            <summary>
            Resets the where operator to the default value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="leftSide">Left side of the condition</param>
            <param name="op">Operator</param>
            <param name="rightSide">Right side of the condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.IncludeValue(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Includes the given value and transforms it to a representation that can be used within a query
            </summary>
            <param name="queryObj">Value to transform</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AddWhereConditionInternal(CMS.DataEngine.IWhereCondition,System.Boolean)">
            <summary>
            Adds the given where condition
            </summary>
            <param name="condition">Condition to add</param>
            <param name="negation">If true, the added where condition is negated</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AddWhereConditionInternal(System.String)">
            <summary>
            Adds the given where condition to the final where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetStartsWithPattern(System.String)">
            <summary>
            Gets the starts with pattern for the like expression
            </summary>
            <param name="text">Text to match</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetEndsWithPattern(System.String)">
            <summary>
            Gets the ends with pattern for the like expression
            </summary>
            <param name="text">Text to match</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetContainsPattern(System.String)">
            <summary>
            Gets the contains pattern for the like expression
            </summary>
            <param name="text">Text to match</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AnySettingsDefined">
            <summary>
            Returns true if the object has any settings defined that influence the resulting query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.CheckReturnsNoResults">
            <summary>
            Checks if where condition results in no data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.And">
            <summary>
            Changes the where operator to AND for subsequent where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.And(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the AND operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.And(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the AND operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Or">
            <summary>
            Changes the where operator to OR for next where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Or(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the OR operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Or(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the OR operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AddWhereCondition(System.String)">
            <summary>
            Adds the given where condition to the final where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotNull(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a not null expression value
            </summary>
            <param name="expression">Expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotNull(System.String)">
            <summary>
            Adds the where condition for a not null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEmpty(System.String)">
            <summary>
            Adds the where condition for a null or empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEmpty(System.String)">
            <summary>
            Adds the where condition for a non empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNull(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a null expression value
            </summary>
            <param name="expression">Expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNull(System.String)">
            <summary>
            Adds the where condition for a null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereTrue(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a true expression value (boolean expression equals true).
            </summary>
            <param name="expression">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereTrue(System.String)">
            <summary>
            Adds the where condition for a true column value (boolean column equals true).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereFalse(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a false expression value (boolean expression equals false).
            </summary>
            <param name="expression">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereFalse(System.String)">
            <summary>
            Adds the where condition for a false column value (boolean column equals false).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.HasCompatibleSource(CMS.DataEngine.IDataQuery)">
            <summary>
            Returns true if the given query is an external source
            </summary>
            <param name="query">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with EXISTS and the nested query "EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with NOT EXISTS and the nested query "NOT EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereExists(CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Adds where condition with EXISTS and the nested query "EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
            <param name="negation">If true, the expression is NOT EXISTS</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given where conditions to the query
            </summary>
            <param name="conditions">Nested where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNot(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the negation of the given where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.NewWhere">
            <summary>
            Clears the current where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.NoResults">
            <summary>
            Sets the where condition to exclude all data from result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Adds the given where condition to the query
            </summary>
            <param name="where">Where condition</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereContains(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column to contain some substring
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotContains(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column not to contain some substring
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereStartsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column to start with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotStartsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column not to start with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEndsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string expression to end with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEndsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column to end with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEndsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column not to end with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEndsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to end with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="leftSide">Column name</param>
            <param name="op">Operator</param>
            <param name="rightSide">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Adds the given where condition to the query. Matches the column value with an unary operator.
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Adds the given where condition to the query. Matches the column value with an unary operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEqualsOrNull(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value or null value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side to the given right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is not equal to the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column which is not equal to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessThan(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessOrEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less or equal than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterThan(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterOrEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater or equal than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessThan(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessOrEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less or equal than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterOrEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater or equal than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLike(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side and right side using LIKE operator.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotLike(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side and right side using NOT LIKE operator.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using NOT LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereID(System.String,System.Int32)">
            <summary>
            Adds the where condition to match the ID to the query. In case the column name is not provided or unknown, does not generate where condition. If given ID is invalid, adds the condition to match NULL.
            </summary>
            <param name="columnName">Column name</param>
            <param name="id">ID</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ReturnNoResults">
            <summary>
            Sets the query to return no results. This action is irreversible, once the query is set to return no results it cannot be changed. 
            This method is used by data engine to forbid access to data that are not allowed to be accessed (e.g. license limitations), without notifying the process about the fact.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetValidColumnName(System.String)">
            <summary>
            Returns column name in string format from query column expression (Ensures square brackets)
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.DisposeUsedObjects">
            <summary>
            Disposes the objects that were used as parameters for this query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereBuilder">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereOperator">
            <summary>
            Operator used for adding where condition. Default is AND
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereCondition">
            <summary>
            Where condition on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereIsComplex">
            <summary>
            Returns true if the given where condition contains compound conditions, e. g. "A > 1 AND B = 5"
            </summary>
            <remarks>
            Complex where condition will be surrounded by brackets if added to other where condition.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereIsEmpty">
            <summary>
            Returns true if the where condition is empty
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.ReturnsNoResults">
            <summary>
            Returns true if query doesn't return any results
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.ParentQuery">
            <summary>
            Parent query object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mOrderByColumns">
            <summary>
            Order by columns
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mSelectColumnsList">
            <summary>
            Columns to select
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mFilterColumns">
            <summary>
            Columns to provide extra filtering (which are not included into the output)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mGroupByColumns">
            <summary>
            Columns to group by
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mHavingCondition">
            <summary>
            Having condition
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mTopNRecords">
            <summary>
            TopN
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mOffset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mMaxRecords">
            <summary>
            Maximum number of records to select
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mSourceExpression">
            <summary>
            Source of the query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mDefaultSourceExpression">
            <summary>
            Default source of the query in case source is not defined
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mSelectDistinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this query parameters to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Creates the clone of the collection.
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.GetExpressions(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Gets the query expressions
            </summary>
            <param name="parameters">Query data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AnySettingsDefined">
            <summary>
            Returns true if the object has any settings defined that influence the resulting query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceSelectedColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceOrderByColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceColumnName(System.String,System.String,System.String)">
            <summary>
            Replaces the column name in the given list of columns
            </summary>
            <param name="columns">List of columns</param>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddHavingInternal(System.String)">
            <summary>
            Adds the given having condition to the final having condition
            </summary>
            <param name="having">Having condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddHavingInternal(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given having condition
            </summary>
            <param name="condition">Condition to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Then">
            <summary>
            Identity method to make the query expression more readable. Use before the OrderBy method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Take">
            <summary>
            Identity method to make the query expression more readable. Use before the Columns or Page method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Distinct(System.Boolean)">
            <summary>
            Sets the query to use distinct selection over the given columns
            </summary>
            <param name="distinct">If set to true, returns only distinct (different) values.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.FirstResult">
            <summary>
            Sets the query as a single object query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.TopN(System.Int32)">
            <summary>
            Selects only first top N number of records
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Column(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Column(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Columns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Columns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddFilterColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional filter column to the query
            </summary>
            <param name="col">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NoColumns">
            <summary>
            Sets the query to return no columns at all
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Page(System.Int32,System.Int32)">
            <summary>
            Specifies the page to select with given page index and page size. Page number is indexed from 0 (first page)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.PagedBy(System.Int32)">
            <summary>
            Sets up the query as a paged query with the given page size. Resets the page index to first page. Use in combination with NextPageAvailable and NextPage to iterate over the data in batches.
            </summary>
            <remarks>
            Note that if you iterate the results after calling this method, the results will cover only a single page. To iterate through all items page-by-page, use methods ForEachRow or ForEachObject.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NotPaged">
            <summary>
            Sets up the query to become not paged query and output all results at once.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NextPage">
            <summary>
            Adjusts the query to a next page, using the current page size. Use in combination with PagedBy and NextPageAvailable to iterate over the data in batches.
            </summary>
            <remarks>
            Number of records in one page can be specified by setting MaxRecords property or calling PagedBy() method.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NewGroupBy(System.String[])">
            <summary>
            Clears the current group by, reverting the source of data to the original. Note, that this method also resets the existing having condition which is closely bound to the group by.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.GroupBy(System.String[])">
            <summary>
            Specifies the columns to group by
            </summary>
            <param name="columns">List of columns to group by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NewHaving">
            <summary>
            Clears the current having condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Having(System.String,System.Boolean)">
            <summary>
            Specifies the having condition
            </summary>
            <param name="having">Having condition</param>
            <param name="replace">If true, the having condition replaces the original having condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Having(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given having conditions to the query.
            </summary>
            <param name="conditions">Having where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Having(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.WithComment(System.String)">
            <summary>
            Adds the comment to the given query
            </summary>
            <param name="comment">Comment to add</param>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.OrderByColumns">
            <summary>
            List of columns by which the result should be sorted, e.g. "NodeLevel, DocumentName DESC"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.SelectColumns">
            <summary>
            List of columns to return, by default returns all columns, e.g. "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.FilterColumns">
            <summary>
            List of columns used for extra filtering within the query, e.g. "CMS_C, CMS_RN"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.SelectColumnsList">
            <summary>
            List of columns to return, by default returns all columns, e.g. "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.GroupByColumns">
            <summary>
            List of columns to group by, by default doesn't group, e.g. "NodeLevel, NodeOwner"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HavingCondition">
            <summary>
            Where condition for the group by on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.TopNRecords">
            <summary>
            If set, selects only first top N number of records
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.SourceExpression">
            <summary>
            Source of the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.SelectDistinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.DefaultSourceExpression">
            <summary>
            Default source of the query in case source is not defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.Offset">
            <summary>
            Index of the first record to return (use for paging together with MaxRecords)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.MaxRecords">
            <summary>
            Maximum number of results to return (use for paging together with Offset)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.IsPagedQuery">
            <summary>
            Returns true if the query has the paging enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.IsSubQuery">
            <summary>
            If true, the query is a sub-query used in another query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.IsNested">
            <summary>
            Indicates that this query is part of multi query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.ForceOrderBy">
            <summary>
            If true, the order by should be forced in the process of execution
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HavingIsComplex">
            <summary>
            Returns true if the given having condition is a complex condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HavingIsEmpty">
            <summary>
            Returns true if the having condition is empty
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HasGroupBy">
            <summary>
            Returns true if the given query has group by set
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mResult">
            <summary>
            DataSet with the result
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mQueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mClassName">
            <summary>
            ClassName
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mQueryName">
            <summary>
            QueryName
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mDataLoaded">
            <summary>
            If true, the query was executed
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mQueryGenerated">
            <summary>
            If true, the query has been generated
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mTotalRecords">
            <summary>
            Total number of records available for the given query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQueryBase`1.mIncludeBinaryData">
            <summary>
            If true, the query includes binary data columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.#ctor(System.String,System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.#ctor(System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="queryName">Full query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Changed">
            <summary>
            Marks the object as changed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Reset">
            <summary>
            Flushes the results but leaves the generated query text unchanged.
            After the reset, query can be executed again to obtain new data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.DataSourceChanged">
            <summary>
            Marks the object as changed when data source changes
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetConnectionStringName">
            <summary>
            Gets the connection string name of the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetCompleteSettings(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the complete parameters for the query execution. The parameters are always a new instance of DataQuerySettings which can be further modified without any impact to the query itself.
            </summary>
            <param name="executingQuery">Executing query for which the parameters are retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.EnsureColumns(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Ensures columns within the given parameters
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetBinaryColumns">
            <summary>
            Gets the binary columns for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ResolveColumns(CMS.DataEngine.QueryColumnList,System.Boolean,System.Boolean)">
            <summary>
            Resolves the columns in the given list
            </summary>
            <param name="columns">List of columns to resolve</param>
            <param name="includeBinaryData">Include binary columns</param>
            <param name="forceResolve">If true, the resolving is forced (resolves even when not necessary)</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetAvailableColumns">
            <summary>
            Gets the list of all available columns for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.EnsureDefaultOrderBy(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Ensures the default order by within the given query parameters
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.EnsureDefaultSource(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Ensures default source within the given query parameters
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDefaultSource">
            <summary>
            Gets the default source for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetClassName">
            <summary>
            Gets the class name for current query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.SetClassName(System.String)">
            <summary>
            Gets the class name for current query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDefaultOrderBy">
            <summary>
            Gets the default order by columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetIDColumn">
            <summary>
            Gets the ID column for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies the properties to the target query.
            </summary>
            <param name="target">Target query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this query parameters to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetFullQueryText(System.Boolean)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded with their values, otherwise the parameter names are kept in the query.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.LoadTotalRecords">
            <summary>
            Loads the number of total records count from the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.LoadTotalRecordsNonPaged">
            <summary>
            Loads the number of total records for an unpaged query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.LoadTotalRecordsPaged">
            <summary>
            Loads the number of total records for a paged query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsColumn(System.String)">
            <summary>
            Converts the query to the query column using this query as nested
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsSubQuery">
            <summary>
            Modifies the query to be able to be used as a sub-query, e.g. for usage in WHERE A IN ([query]). Ensures single column result, and removes order by from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetExpression">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.HasResults">
            <summary>
            Returns true, if the query returns any results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsSingleColumn(System.String,System.Boolean)">
            <summary>
            Creates a single column query from the given query
            </summary>
            <param name="defaultColumn">Specific column to use in case query doesn't return single column yet</param>
            <param name="forceColumn">If true, the given column is forced to the output</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDefaultSingleColumn">
            <summary>
            Gets the default single column for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsIDQuery">
            <summary>
            Creates an ID query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsNested``1">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WrapByQuery``1">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsMaterializedList(System.String,System.Boolean)">
            <summary>
            Makes a materialized list from the given query
            </summary>
            <param name="columnName">Column name to output</param>
            <param name="distinct">If true, only distinct values are selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.As``1">
            <summary>
            Changes the type of the query to another type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Select``1(System.Func{System.Data.DataRow,``0})">
            <summary>
            Transforms the current result
            </summary>
            <param name="func">Select function</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetScalarResult``1(``0)">
            <summary>
            Gets the scalar
            </summary>
            <param name="defaultValue">Default value if result not found or not capable to convert to output type</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetListResult``1">
            <summary>
            Gets the result as a list of values from the first column that the query returns. Excludes null values from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ForEachPage(System.Action{`0},System.Int32)">
            <summary>
            Executes the given action for each page (DataSet) in the results. If the query is not set up as a paged query before calling this 
            method and <paramref name="pageSize"/> is not set, executes the action once with the current results.
            </summary>
            <param name="pageAction">Action which will be executed for each page</param>
            <param name="pageSize">Page size. 0 means no processing page-by-page. By default uses current paging settings. Page size of the query is set to the original value after this method finishes.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ForEachRow(System.Action{System.Data.DataRow},System.Int32)">
            <summary>
            Executes the given action for each item (DataRow) in the result. Processes the items in batches of the given size.
            </summary>
            <param name="rowAction">Row action</param>
            <param name="batchSize">Batch size. 0 means no batch processing. By default uses current paging settings.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetSourceExpression">
            <summary>
            Gets a source expression for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplySettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplySettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetClassStructureInfo">
            <summary>
            Gets the class structure info for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.NewEmptyQuery">
            <summary>
            Creates a new empty query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Execute">
            <summary>
            Executes the current query and returns it's results as a DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ExecuteReader(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the current query and returns it's results as a data reader
            </summary>
            <param name="commandBehavior">Command behavior</param>
            <param name="newConnection">If true, the reader should be executed using its own dedicated connection</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetData">
            <summary>
            Executes the query. Sets the total records number during execution.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDataSource">
            <summary>
            Executes the current over data source and returns it's results as a DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.PrepareDataQuerySourceParameters">
            <summary>
            Prepares the data source parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDB">
            <summary>
            Executes the current query and returns it's results as a DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDB(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the query
            </summary>
            <param name="commandBehavior">Command behavior</param>
            <param name="newConnection">If true, the reader should be executed using its own dedicated connection</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetQueryParameters(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the executing query parameters
            </summary>
            <param name="settings">Query settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetConnection">
            <summary>
            Gets the executing connection for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetPreparedQueryParameters">
            <summary>
            Returns query parameter container filled with the complete settings of current query.
            </summary>
            <remarks>
            Wraps distinct paged query as nested so the row number column required for paging doesn't thwart the distinct selection.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GenerateQueryText(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Generates the query text
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetBaseQueryText">
            <summary>
            Gets the base query texts for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.HasCompatibleSource(CMS.DataEngine.IDataQuery)">
            <summary>
            Returns true if the given query is an external source
            </summary>
            <param name="query">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.BinaryData(System.Boolean)">
            <summary>
            Sets whether the binary data should be included to the result
            </summary>
            <param name="binary">Include binary data?</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSource(System.Data.DataSet)">
            <summary>
            Sets the given DataSet as the source of the data query
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSource(CMS.DataEngine.DataQuerySource)">
            <summary>
            Sets the given source as the source of the data query
            </summary>
            <param name="source">Data query source</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.From(System.String)">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="source">Source</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Source(System.Action{CMS.DataEngine.QuerySource})">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="sourceParameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.OrderByDefault">
            <summary>
            Sets the default order by for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ExpandColumns">
            <summary>
            Expands the columns within this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WhereAnyColumnContains(System.String)">
            <summary>
            Adds condition to all items that contain given text in any of the string columns. Performs a SQL substring search on the data.
            </summary>
            <param name="text">Text to search</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WhereAnyColumn(CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Matches the given condition on any column with the same type as the given value type.
            </summary>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Union(`0,System.Boolean)">
            <summary>
            Gets the union of this data query with another query
            </summary>
            <param name="query">Query to union with</param>
            <param name="unionAll">If true, the union does not eliminate the duplicities (produces UNION ALL)</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.CombineWith(`0,System.String)">
            <summary>
            Combines the query with the given query
            </summary>
            <param name="query">Query to combine with</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.UnionAll(`0)">
            <summary>
            Gets the union of this data query with another query without eliminating the duplicities
            </summary>
            <param name="query">Query to union with</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Intersect(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Except(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.op_Implicit(CMS.DataEngine.DataQueryBase{`0})~System.Data.DataSet">
            <summary>
            Implicit operator for conversion from DataQuery class to DataSet
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.CustomQueryText">
            <summary>
            Custom query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Result">
            <summary>
            DataSet with the result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.QueryName">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.FullQueryName">
            <summary>
            Represents a full query name of the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.TotalRecords">
            <summary>
            Gets the number of total records when paging is used. Gets updated once the query executes
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Count">
            <summary>
            Number of total items in the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.IncludeBinaryData">
            <summary>
            If true, the query includes the object binary data. Default is true
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.DataSource">
            <summary>
            Data source that provides the query data. If not set, the query queries the database directly
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.DefaultOrderByColumns">
            <summary>
            Default order by columns used in case if needed, and order by is not specified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.NextPageAvailable">
            <summary>
            Returns true if the next page is available.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.SupportsReader">
            <summary>
            Returns true if the query supports data reader
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ReturnsSingleColumn">
            <summary>
            Returns true if the query returns single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ConnectionStringForced">
            <summary>
            If true, the connection string was set explicitly
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.AllowMaterialization">
            <summary>
            If true, the query allows materialization
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.DataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.HasDataSource">
            <summary>
            Returns true if the query has specific data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.IsCombinedQuery">
            <summary>
            If true, this query is combined from several queries. When additional parameters are applied to it, it will be wrapped into a nested query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Tables">
            <summary>
            Collection of the result tables
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureQueries(System.String[])">
            <summary>
            Ensures the queries for the given types
            </summary>
            <param name="types">Types to ensure</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureQueries(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures the queries for the given types
            </summary>
            <param name="types">Types to ensure</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureQuery(System.String)">
            <summary>
            Ensures the query with the given type
            </summary>
            <param name="type">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResolveType(System.String)">
            <summary>
            Resolves the given type into corresponding types
            </summary>
            <param name="type">Source type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.CreateQuery(System.String)">
            <summary>
            Creates query for the given type
            </summary>
            <param name="type">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.SetClassName(System.String)">
            <summary>
            Sets class name for current query
            </summary>
            <param name="value">New class name value</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetDataFromDB">
            <summary>
            Executes the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetReaderFromDB(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the query
            </summary>
            <param name="commandBehavior">Command behavior</param>
            <param name="newConnection">If true, the reader should be executed using its own dedicated connection</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetResults(CMS.DataEngine.IDataQuery,System.Int32@)">
            <summary>
            Gets results from executing query
            </summary>
            <param name="query">Executing query</param>
            <param name="totalRecords">Returns the total records number</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetMultiQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets a multi-query for execution
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetSingleInnerQuery">
            <summary>
            Attempts to get a single query if multi-query is defined only by a single query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetSingleQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Attempts to get a single query for the whole result based on the current state of the query object
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.NewDataParameters">
            <summary>
            Creates new data parameters for query execution
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetTypesWhereCondition(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the where condition which filters the default query data for specific types
            </summary>
            <param name="types">List of types for which create the where condition</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.NewDataSet">
            <summary>
            Creates a new DataSet for the query results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GenerateQueryText(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Generates the query text
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetFullQueryText(System.Boolean)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.PrepareInnerMultiQuery(`1)">
            <summary>
            Prepares the inner query for execution within multi query
            </summary>
            <param name="query">Query to prepare</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.PrepareInnerQuery(`1)">
            <summary>
            Prepares the inner query for execution
            </summary>
            <param name="query">Query to prepare</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ApplyProperties(`1)">
            <summary>
            Applies main query properties to the given query to ensure synchronized state before execution
            </summary>
            <param name="query">Query to prepare</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ApplyGlobalParameters(`1,CMS.DataEngine.DataQuerySettings,System.Boolean)">
            <summary>
            Applies global parameters to a single inner query
            </summary>
            <param name="query">Inner query</param>
            <param name="settings">Parameters for the query</param>
            <param name="includeParameters">If true, the parameters are also included into the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetAvailableColumns">
            <summary>
            Gets the list of all available columns for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AsSubQuery">
            <summary>
            Modifies the query to be able to be used as a sub-query, e.g. for usage in WHERE A IN ([query]). Ensures single column result, and removes order by from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AsSingleColumn(System.String,System.Boolean)">
            <summary>
            Creates a single column query from the given query
            </summary>
            <param name="defaultColumn">Specific column to use in case query doesn't return single column yet</param>
            <param name="forceColumn">If true, the given column is forced to the output</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetDefaultSingleColumn">
            <summary>
            Gets the default single column for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies the properties to the target query.
            </summary>
            <param name="target">Target query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.Type(System.String,System.Action{`1})">
            <summary>
            Includes given type with optional parameters
            </summary>
            <param name="type">Type to include</param>
            <param name="parameters">Action to setup the inner type parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.Types(System.String[])">
            <summary>
            Includes the given types to the resulting query
            </summary>
            <param name="types">Types to include</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumn(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.NoDefaultColumns">
            <summary>
            Sets the query to return no columns at all
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.Queries">
            <summary>
            Inner queries
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.QueriesList">
            <summary>
            Inner queries list
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.DefaultQuery">
            <summary>
            Default query used by the process when type queries are not used
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.UseDefaultQuery">
            <summary>
            Flag indicating if the default query should be forcibly used. Default false. This flag is automatically reverted to false in case initializer of particular type query is used through Type("sometype", q => q.Where(...)).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.UseTypeColumns">
            <summary>
            If true (default), the query uses type columns for the output, otherwise it uses only global columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.DefaultOrderByType">
            <summary>
            If true, the result is ordered by source type by default, then by source order. If false (default), the result is ordered by the source order, and items from different types may interleave.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.UseGlobalWhereOnResult">
            <summary>
            If true, the global where condition from the parent query is used outside the inner queries on the whole result. If false (default), the global where condition is used inside individual inner queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.SelectResultColumns">
            <summary>
            List of columns to use for results, by default returns all columns defined in the inner queries. Example: "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.SelectResultColumnsList">
            <summary>
            List of columns to use for results, by default returns all columns defined in the inner queries. Example: "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.OrderByResultColumns">
            <summary>
            List of columns for the result order by. If not specified, the result is ordered by sources and global order by.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.ReturnsSingleColumn">
            <summary>
            Returns true if the query returns single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.SelectedTypes">
            <summary>
            Returns the types of the inner queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.GetTypedResult">
            <summary>
            Gets typed result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.CreateQuery(System.String)">
            <summary>
            Creates query for the given type
            </summary>
            <param name="type">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.NewDataSet">
            <summary>
            Creates a new DataSet for the query results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ApplyProperties(`1)">
            <summary>
            Applies main query properties to the given query to ensure synchronized state before execution
            </summary>
            <param name="query">Query to prepare</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.AsNested">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ModifyAllInnerQueries(System.Action{`1})">
            <summary>
            Modifies all inner queries with the given parameters
            </summary>
            <param name="p">Parameters for inner queries</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ModifySingleInnerQuery(System.Action{`1})">
            <summary>
            Modifies single inner query with the given parameters. Operation is not supported if multi query doesn't represent a single query source
            </summary>
            <param name="p">Parameters for inner query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.OnlyGlobal">
            <summary>
            Filters the data to include only global objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ExceptGlobal">
            <summary>
            Filters the data to include only site objects, but not global objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.OnSite(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Filters the data to include only records on the given site. If site binding is defined, filters the global objects by the site ID
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">If true, includes the global objects in case the object type covers both site and global objects</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithID(System.Int32)">
            <summary>
            Sets the where condition for a specific object ID
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithCodeName(System.String)">
            <summary>
            Sets the where condition for a specific object code name
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithGuid(System.Guid)">
            <summary>
            Sets the where condition for a specific object GUID
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithObjectType(System.String)">
            <summary>
            Changes the query to use the given object type. Applies the object type condition to the query. The new object type must have the same class name as the original one.
            </summary>
            <param name="objectType">Object type for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.GetEnumerator">
            <summary>
            Gets the typed enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.TypedResult">
            <summary>
            Typed result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.UseObjectTypeCondition">
            <summary>
            If true, the query uses the object type condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.Expression">
            <summary>
            Query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.Provider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.IsOffline">
            <summary>
            Returns true if the given collection is offline (disconnected from the database)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSLateBoundTransaction">
            <summary>
            Class that manages the transaction scope, but doesn't start it until 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSLateBoundTransaction.mTransactionScope">
            <summary>
            Inner transaction scope
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.BeginTransaction">
            <summary>
            Begins the transaction
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.Complete">
            <summary>
            Commits the transaction if it was activated
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.Commit">
            <summary>
            Commits the transaction if it was activated
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.Dispose">
            <summary>
            Disposes the transaction
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabasePermission">
            <summary>
            Database permissions
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabasePermission.ModifyDatabase">
            <summary>
            Modify database - create tables, functions etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabasePermission.CreateDatabase">
            <summary>
            Create new database.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FullNameInfoObjectCollection">
            <summary>
            Collection of GeneralizedInfos indexed by full name of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="parentObjectType">Parent object type</param>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection.GetObjectName(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets the unique object name from the given object.
            </summary>
            <param name="infoObj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection.GetNameWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given object name.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="P:CMS.DataEngine.FullNameInfoObjectCollection.ParentObjectType">
            <summary>
            Parent object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FullNameInfoObjectCollection.NameTransformation">
            <summary>
            Transformation function for object to name translation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExternalColumnSettings`1">
            <summary>
            Object to encapsulate the settings of an externally stored column within a InfoObject.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StorageProvider">
            <summary>
            Storage provider to use. If not set, the default storage provider is used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StoreInExternalStorageSettingsKey">
            <summary>
            Gets or sets the name of the settings key which indicates whether to store column in external storage or not.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StoreColumnInDatabase">
            <summary>
            Indicates whether to store data also in DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StoragePath">
            <summary>
            Gets or sets the callback function which returns base path of the object for given column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.SetDataTransformation">
            <summary>
            Gets or sets a transformation function which is called when the data is saved to the external storage.
            Can be used for example to add default directives to layout code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.GetDataTransformation">
            <summary>
            Gets or sets a transformation function which is called when the data is retrieved from the external storage.
            Can be used for example to remove default directives to layout code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.DependencyColumns">
            <summary>
            Array of column names whose value change causes resaving of the external columns.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedAbstractInfo`1">
            <summary>
            Info object interface for abstract info
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.#ctor(CMS.DataEngine.AbstractInfo{`0},System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
            <param name="dummy">Dummy object to separate the protected constructor</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.#ctor(CMS.DataEngine.AbstractInfo{`0})">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.ResetChanges(System.Boolean)">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
            <param name="asUnchanged">If true, the changed columns won't contain anything. If false, the previous values are discarded, but all the columns will be marked as changed.</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.GetColumnType(System.String)">
            <summary>
            Gets the column type.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.GeneralizedAbstractInfo`1.HasChanged">
            <summary>
            Returns true if the object has changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralizedAbstractInfo`1.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CodeNameNotUniqueException">
            <summary>
            Exception to report not unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotUniqueException.#ctor(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotUniqueException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.CodeNameNotValidException">
            <summary>
            Exception to report not valid code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotValidException.#ctor(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotValidException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.QuerySource">
            <summary>
            Data query source which gets the data from specific SQL expression. That can be table name, view name, or more complex SQL expression.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySource.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sourceExpression">Source expression. Can be table name, view name, or more complex SQL expression.</param>
        </member>
        <member name="T:CMS.DataEngine.QueryUnaryOperator">
            <summary>
            Constants for DataQuery unary operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryUnaryOperator.IsNull">
            <summary>
            Is null "IS NULL"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryUnaryOperator.IsNotNull">
            <summary>
            Is not null "IS NOT NULL"
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderHelper">
            <summary>
            Helper methods for info providers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderHelper.mLoadHashTables">
            <summary>
            Load hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.ClearTables(System.Object,System.Boolean,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Clears the given tables.
            </summary>
            <param name="lockObj">Object used for the lock</param>
            <param name="logTasks">If true, the clear tasks are logged</param>
            <param name="dictionaries">Collection of the dictionaries to clear</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.ClearTables(System.Object,System.Boolean,CMS.DataEngine.IProviderDictionary[])">
            <summary>
            Clears the given tables.
            </summary>
            <param name="lockObj">Object used for the lock</param>
            <param name="logTasks">If true, the clear tasks are logged</param>
            <param name="dictionaries">List of the dictionaries to clear</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.LoadTables(CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Returns true if the given dictionary collection should be loaded.
            </summary>
            <param name="collection">Collection to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.LoadTables(CMS.DataEngine.IProviderDictionary[])">
            <summary>
            Returns true if the given dictionaries should be loaded.
            </summary>
            <param name="dictionaries">Dictionaries to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.UseHashtableWeakReferences(System.String,System.Boolean)">
            <summary>
            Returns true if the hashtable for the specified object type should use weak references. Reflects the AppSettings key "CMSUseHashtableWeakReferences" + objectType.Replace(".", ""), e.g. CMSUseHashtableWeakReferencesCMSUser.
            </summary>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.UseHashtable(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the hashtable for the specified object type should be used. Reflects the AppSettings key "CMSUseHashtable" + objectType.Replace(".", "") + tableName, e.g. CMSUseHashtableCMSUserID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="tableName">Table name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.LoadHashTables(System.String,CMS.DataEngine.LoadHashtableEnum)">
            <summary>
            Returns true if the hashtables for specified object type should be loaded with the data. Reflects the AppSettings key "CMSLoadHashtables" + objectType.Replace(".", ""), e.g. CMSLoadHashtablesCMSUser.
            </summary>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value in case the key is not present in the web.config file</param>
        </member>
        <member name="P:CMS.DataEngine.ProviderHelper.LoadHashTablesSettings">
            <summary>
            Load hashtables.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AggregationType">
            <summary>
            Constants for aggregation types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.None">
            <summary>
            No aggregation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Count">
            <summary>
            Number of the items
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Sum">
            <summary>
            Sum of the items
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Average">
            <summary>
            Average value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.NestedSelectQueryColumn">
            <summary>
            Query column defined by the nested query e.g. "(SELECT UserID FROM CMS_User WHERE ...) AS RelatedUserID"
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NestedSelectQueryColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NestedSelectQueryColumn.#ctor(CMS.DataEngine.IDataQuery)">
            <summary>
            Constructor
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="P:CMS.DataEngine.NestedSelectQueryColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="T:CMS.DataEngine.OrderDirection">
            <summary>
            Constants for DataQuery operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OrderDirection.Default">
            <summary>
            Default order direction, keeps the direction the way it is or ascending as default
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OrderDirection.Ascending">
            <summary>
            Ascending (A to Z, 0 to 9)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OrderDirection.Descending">
            <summary>
            Descending (Z to A, 9 to 0)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySettings">
            <summary>
            Defines parameters for the data query. Use DataQuery method UseParameters to apply this parameters to a query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQuery">
            <summary>
            Queries particular database data or defines parameters for data selection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.#ctor(System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="queryName">Full query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.#ctor(System.String,System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.Combine(System.Collections.Generic.IEnumerable{CMS.DataEngine.IDataQuery},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines several queries into a single result
            </summary>
            <param name="queries">Queries</param>
            <param name="operators">Operators between queries</param>
            <param name="connectionStringName">Specifies connection string against which the query will be executed. If connection string name is not specified, uses the default database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.Combine``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines several queries into a single result
            </summary>
            <param name="queries">Queries</param>
            <param name="operators">Operators between queries</param>
            <param name="connectionStringName">Specifies connection string against which the query will be executed. If connection string name is not specified, uses the default database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.SetupCombinedQuery(CMS.DataEngine.IDataQuery,System.Collections.Generic.IEnumerable{CMS.DataEngine.IDataQuery},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines several queries into a single result
            </summary>
            <param name="result">Result query</param>
            <param name="queries">Queries</param>
            <param name="operators">Operators between queries</param>
            <param name="connectionStringName">Specifies connection string against which the query will be executed. If connection string name is not specified, uses the default database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.FromList(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a materialized DataQuery from the given list of IDs
            </summary>
            <param name="ids">List of IDs</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectQuerySettings">
            <summary>
            Object query parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuerySettings.BinaryData(System.Boolean)">
            <summary>
            Sets whether the binary data should be included to the result
            </summary>
            <param name="binary">Include binary data?</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectQuerySettings.IncludeBinaryData">
            <summary>
            If true, the query includes the object binary data. Default is false
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDQuery`1">
            <summary>
            Predefined query returning IDs of the given object type, can be used as a nested query in IN and NOT IN statements
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectQuery`1">
            <summary>
            Queries particular database data or defines parameters for data selection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectQueryBase`2">
            <summary>
            Predefined query returning given object type. Uses the .selectall query internally.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectQueryBase`2.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectQueryBase`2.mObject">
            <summary>
            Object instance of specified type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.TypeUpdated">
            <summary>
            Updates the query class name based on the current status
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.InitFromType``1">
            <summary>
            Initializes the query from the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.NewEmptyQuery">
            <summary>
            Creates a new empty query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetTypedResult">
            <summary>
            Gets typed result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.InitIDQuery(System.String)">
            <summary>
            Initializes the ID query
            </summary>
            <param name="resultColumn">Resulting column</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetSiteWhereCondition(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Gets the site where condition for this query
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">Include global objects</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetDataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetSourceQuery">
            <summary>
            Gets the query that provides the source of data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetDataFromDB">
            <summary>
            Executes the query using data retrieval through the given info object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetReaderFromDB(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the query
            </summary>
            <param name="commandBehavior">Command behavior</param>
            <param name="newConnection">If true, the reader should be executed using its own dedicated connection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetResults(CMS.DataEngine.IDataQuery,System.Int32@)">
            <summary>
            Gets results from executing query
            </summary>
            <param name="query">Executing query</param>
            <param name="totalRecords">Returns the total records number</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetData">
            <summary>
            Gets data set returned by object query or custom data set. Data set can be modified by calling ObjectEvents.GetData event.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GenerateQueryText(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Generates query text from the executing query
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetFullQueryText(System.Boolean)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Creates the clone of the collection.
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.ForEachObject(System.Action{`1},System.Int32)">
            <summary>
            Executes the given action for each item (TObject) in the result. Processes the items in batches of the given size.
            </summary>
            <param name="objAction">Object action</param>
            <param name="batchSize">Batch size. 0 means no batch processing. By default uses current paging settings.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetClassStructureInfo">
            <summary>
            Gets the class structure info for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetClassName">
            <summary>
            Gets the class name for current query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetDefaultOrderBy">
            <summary>
            Gets the default order by columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetIDColumn">
            <summary>
            Gets the ID column for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.AsNested">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.OnlyGlobal">
            <summary>
            Filters the data to include only global objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.ExceptGlobal">
            <summary>
            Filters the data to include only site objects, but not global objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.OnSite(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Filters the data to include only records on the given site. If site binding is defined, filters the global objects by the site ID
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">If true, includes the global objects in case the object type covers both site and global objects</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithID(System.Int32)">
            <summary>
            Sets the where condition for a specific object ID
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithCodeName(System.String)">
            <summary>
            Sets the where condition for a specific object code name
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithGuid(System.Guid)">
            <summary>
            Sets the where condition for a specific object GUID
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithSource(`1[])">
            <summary>
            Sets the given DataSet as the source of the data query
            </summary>
            <param name="items">Source items</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithObjectType(System.String)">
            <summary>
            Changes the query to use the given object type. Applies the object type condition to the query. The new object type must have the same class name as the original one.
            </summary>
            <param name="objectType">Object type for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetEnumerator">
            <summary>
            Gets the typed enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.op_Implicit(CMS.DataEngine.ObjectQueryBase{`0,`1})~`1">
            <summary>
            Implicit operator for conversion from DataQuery class to TObject
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.op_Explicit(CMS.DataEngine.ObjectQueryBase{`0,`1})~CMS.DataEngine.InfoDataSet{`1}">
            <summary>
            Implicit operator for conversion from DataQuery class to DataSet
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.UseObjectQuery">
            <summary>
            If true, the object query is used as default, otherwise, standard DataQuery is used
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.UseObjectTypeCondition">
            <summary>
            If true, the query uses the object type condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.TypeInfo">
            <summary>
            Type info of the specified type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.TypedResult">
            <summary>
            Typed result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.FirstObject">
            <summary>
            DataSet with the result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Expression">
            <summary>
            Query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Provider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.InfoProvider">
            <summary>
            Info provider that the query uses to retrieve the data. If not set, the data is retrieved through related info object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.IsOffline">
            <summary>
            Returns true if the given collection is offline (disconnected from the database)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery`1.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="useObjectTypeCondition">If true, the query uses the object type condition. The condition applies only when object type is specified.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery`1.op_Explicit(CMS.DataEngine.ObjectQuery{`0})~CMS.DataEngine.InfoDataSet{`0}">
            <summary>
            Operator for conversion from typed ObjectQuery class to typed InfoDataSet
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="M:CMS.DataEngine.IDQuery`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resultColumn">Resulting column</param>
        </member>
        <member name="T:CMS.DataEngine.IDQuery">
            <summary>
            Predefined query returning IDs of the given object type, can be used as a nested query in IN and NOT IN statements
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectQuery">
            <summary>
            Predefined query returning given object type. Uses the .selectall query internally.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="useObjectTypeCondition">If true, the query uses the object type condition. The condition applies only when object type is specified.</param>
        </member>
        <member name="M:CMS.DataEngine.IDQuery.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="resultColumn">Resulting column</param>
            <param name="useObjectTypeCondition">If true, the query uses the object type condition. The condition applies only when object type is specified.</param>
        </member>
        <member name="T:CMS.DataEngine.QueryOperator">
            <summary>
            Constants for DataQuery operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.Equals">
            <summary>
            Equals "="
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.NotEquals">
            <summary>
            Not equals "&lt;&gt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.Like">
            <summary>
            Like "LIKE"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.NotLike">
            <summary>
            Not line "NOT LIKE"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.GreaterThan">
            <summary>
            Greater than "&gt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LargerThan">
            <summary>
            Larger than "&gt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LessThan">
            <summary>
            Less than "&lt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.GreaterOrEquals">
            <summary>
            Greater or equals "&gt;="
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LargerOrEquals">
            <summary>
            Larger or equals "&gt;="
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LessOrEquals">
            <summary>
            Less or equals "&lt;="
            </summary>
        </member>
        <member name="T:CMS.DataEngine.WhereBuilder">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.LIKE">
            <summary>
            SQL "LIKE" operator constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.NOT_LIKE">
            <summary>
            SQL "NOT LIKE" operator constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.EQUAL">
            <summary>
            SQL "=" operator constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.NOT_EQUAL">
            <summary>
            SQL "&lt;&gt;" operator constant.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetNegation(System.String)">
            <summary>
            Gets the negation of the given where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetIsNull(System.String,System.Boolean)">
            <summary>
            Gets the IS NULL expression
            </summary>
            <param name="columnName">Column name</param>
            <param name="negation">If true, negates the expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetIn(System.String,System.Boolean,System.String)">
            <summary>
            Gets the IN expression
            </summary>
            <param name="columnName">Column name</param>
            <param name="negation">If true, produces NOT IN</param>
            <param name="nested">Nested expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetExists(System.Boolean,System.String)">
            <summary>
            Gets the EXISTS expression
            </summary>
            <param name="negation">If true, produces NOT EXISTS</param>
            <param name="nested">Nested expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the binary operator based on the expression type
            </summary>
            <param name="ex">Expression type</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetOperator(CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the operator string
            </summary>
            <param name="op">Operator to convert</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetOperator(CMS.DataEngine.QueryOperator)">
            <summary>
            Gets the operator string
            </summary>
            <param name="op">Operator to convert</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetParameter(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets a new parameter
            </summary>
            <param name="name">Value name</param>
            <param name="value">Value</param>
            <param name="parameters">Collection of data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryOperator,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets the where condition for the given expressions. Note that in this variant string value is always represented as a value. To pass in column name, you need to use new QueryColumn("Name")
            </summary>
            <param name="leftSide">Left side</param>
            <param name="op">Operator</param>
            <param name="rightSide">Right side</param>
            <param name="parameters">Collection of data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(System.String,CMS.DataEngine.QueryOperator,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
            <param name="parameters">Collection of data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetNullComparison(System.String,CMS.DataEngine.QueryOperator)">
            <summary>
            Gets the null comparison for the given expression in format "[expression] IS NULL"
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.IncludeValue(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Includes the given value to the parameters if necessary
            </summary>
            <param name="paramName">Column name</param>
            <param name="value">Value</param>
            <param name="parameters">Parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.AddDataParameter(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Adds the data parameter to the query parameters
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetNestedWhereCondition(System.String)">
            <summary>
            Adds the where condition to the existing one
            </summary>
            <param name="where">Where condition to add</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.AddWhereCondition(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the where condition to the existing one
            </summary>
            <param name="where">Where condition to add</param>
            <param name="condition">Condition to add</param>
            <param name="op">Operator</param>
            <param name="nested">If true, the where condition is added as nested</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetEqualsOrNull(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets the equals or empty expression
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.RepresentsNull(System.Object)">
            <summary>
            Returns true if the given value represents database NULL
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.Default">
            <summary>
            Default where builder
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.OperatorOR">
            <summary>
            Returns the OR operator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.OperatorAND">
            <summary>
            Returns the AND operator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.NULL">
            <summary>
            Returns the NULL constant
            </summary>
        </member>
        <member name="T:CMS.DataEngine.WhereCondition">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Constructor
            </summary>
            <param name="conditions">Creates a where condition from the given where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.From(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Creates a new where condition from the given parameters
            </summary>
            <param name="where">Where condition parameters</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractProvider`1">
            <summary>
            Abstract provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProvider`1.mProviderObject">
            <summary>
            Provider object.
            </summary> 
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider`1.SetAsDefaultProvider">
            <summary>
            Sets this object as the default provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProvider`1.GetCurrentProvider">
            <summary>
            Gets the current provider instance
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProvider`1.ProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CustomProviderAttribute">
            <summary>
            Registers the custom provider within the system, replaces the default provider from which the defined one inherits.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CustomProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.CustomProviderAttribute.Init">
            <summary>
            Applies the attribute
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CustomProviderAttribute.Type">
            <summary>
            Document factory
            </summary>
        </member>
        <member name="T:CMS.IDataConnectionLibrary.ReadMe">
            <summary>
            Namespace CMS.IDataConnectionLibrary exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.DataEngine
            </summary>
        </member>
        <member name="T:CMS.FileManager.ReadMe">
            <summary>
            Namespace CMS.FileManager exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.DocumentEngine
            </summary>
        </member>
        <member name="T:CMS.Compatibility.ClassHelperCompatibility">
            <summary>
            Class helper backward compatibility
            </summary>
        </member>
        <member name="F:CMS.Compatibility.ClassHelperCompatibility.OnGetCustomClass">
            <summary>
            Fires when the custom class is required.
            </summary>
        </member>
        <member name="M:CMS.Compatibility.ClassHelperCompatibility.GetCustomClass(System.Object,CMS.Base.ClassEventArgs)">
            <summary>
            Gets the custom class object
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:CMS.Compatibility.ClassHelperCompatibility.GetClassEventHandler">
            <summary>
            Event handler to get the class object based on the given class name.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="T:CMS.TreeEngine.ReadMe">
            <summary>
            Namespace CMS.TreeEngine exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.DocumentEngine
            </summary>
        </member>
        <member name="T:CMS.ZipUtilities.ReadMe">
            <summary>
            Namespace CMS.ZipUtilities exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.IO
            </summary>
        </member>
        <member name="T:CMS.CMSHelper.ReadMe">
            <summary>
            Namespace CMS.CMSHelper exists only for backward compatibility reasons.
            </summary>
        </member>
        <member name="T:CMS.GlobalHelper.ReadMe">
            <summary>
            Namespace CMS.GlobalHelper exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.Helpers
            </summary>
        </member>
        <member name="T:CMS.SettingsProvider.ReadMe">
            <summary>
            Namespace CMS.SettingsProvider exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.Base
            </summary>
        </member>
        <member name="T:CMS.CMSFormControls.ReadMe">
            <summary>
            Namespace CMS.CMSFormControls exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.FormControls
            </summary>
        </member>
        <member name="T:CMS.CMSSynchronization.ReadMe">
            <summary>
            Namespace CMS.CMSSynchronization exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.Synchronization
            </summary>
        </member>
        <member name="T:CMS.CMSDatabaseHelper.ReadMe">
            <summary>
            Namespace CMS.CMSDatabaseHelper exists only for backward compatibility reasons. All its classes were moved to library and namespace CMS.DatabaseHelper
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfo">
            <summary>
            Describes Data Class configuration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE_SYSTEMTABLE">
            <summary>
            Object type for systemtable
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE_DOCUMENTTYPE">
            <summary>
            Object type for documenttype
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE_CUSTOMTABLE">
            <summary>
            Object type for customtable
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE_FORM">
            <summary>
            Object type for form
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.EXTERNAL_COLUMN_CODE">
            <summary>
             External column name for Form Layout
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFO">
            <summary>
            Type information for class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFOSYSTEMTABLE">
            <summary>
            Type information for system table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFODOCUMENTTYPE">
            <summary>
            Type information for document type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFOCUSTOMTABLE">
            <summary>
            Type information for custom tables.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFOFORM">
            <summary>
            Type information for forms.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.mSchemaDataSet">
            <summary>
            Source schema dataset.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor">
            <summary>
            Constructor - Creates an empty ClassInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor(System.Boolean)">
            <summary>
            Constructor, creates an empty DataClassInfo structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClassInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetChildWhereCondition(System.String,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetSKUMappings">
            <summary>
            Gets the string representing mappings between SKU and document fields. Format of the string is 'document field 1,SKU field 1;document field 2,SKU field 2;...'.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetDataSet">
            <summary>
            Returns an empty DataSet created by the class schema.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetClassXmlSchema">
            <summary>
            Returns class xml schema based on the class connection string and class table name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetVirtualFileRelativePath(System.String,System.String)">
            <summary>
            Returns virtual relative path for specific column
            </summary>
            <param name="externalColumnName">External column name</param>
            <param name="versionGuid">Version GUID. If not defined physical path is generated</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.CreateSchemaDataSet">
            <summary>
            Creates the class data set based on the class schema
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.RegisterExternalColumns">
            <summary>
            Returns path to externally stored layout codes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.LoadMappings">
            <summary>
            Loads mappings between SKU and document fields into dictionaries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.PreselectColumns(CMS.DataEngine.ClassCodeGenerationSettings)">
            <summary>
            Preselects the special columns according to the suffixes of the column name.
            (i.e. GUIDColumn will be the first column with GUID suffix, etc.)
            </summary>
            <param name="settings">CodeGenerationSettings object to which the column names will be assigned. The object will be modified.</param>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassXmlSchema">
            <summary>
            Class xml schema
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassSearchSettings">
            <summary>
            Class search settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassCodeGenerationSettings">
            <summary>
            Class code generation settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassFormLayoutType">
            <summary>
            Class form layout type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.DocumentMappings">
            <summary>
            Collection of mappings between the document fields and SKU fields (key = document field name, value = SKU field name)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.SKUMappings">
            <summary>
            Collection of mappings between the SKU fields and document fields (key = SKU field name, value = document field name)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.SchemaDataSet">
            <summary>
            Schema dataset.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassSearchSettingsInfos">
            <summary>
            Gets the SearchSettings infos object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassCodeGenerationSettingsInfo">
            <summary>
            Gets or sets the code generation settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfoProvider">
            <summary>
            Provides access to data class information.
            </summary>    
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.ALL_CLASSNAMES">
            <summary>
            Supplementary constant to specify all class names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.mFormLayoutsDirectory">
            <summary>
            Virtual directory where the FormLayouts are located.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.ZERO_TIME">
            <summary>
            Zero time constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.UseDataQueryForSchema">
            <summary>
            If true, the data query is used for getting the class schema from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetVirtualObject(System.String)">
            <summary>
            Returns DataClassInfo object for specified path.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.CheckDependencies(System.Int32)">
            <summary>
            Check dependencies for document type, return true if something is depend.
            </summary>
            <param name="classId">Class ID</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.CheckDatabaseDependencies(System.Int32)">
            <summary>
            Checks if some database objects are dependant on database representation of this class. 
            </summary>
            <param name="classId"></param>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.DeleteClassTable(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes the database table for the given class
            </summary>
            <param name="infoObj">Data class info object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetClassName(System.Int32)">
            <summary>
            Gets the specified DataClassName.
            </summary>
            <param name="classId">DataClassInfo property</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.LoadAllClasses">
            <summary>
            Loads all the classes into the hashtable.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetDataSet(System.String)">
            <summary>
            Gets an empty DataSet created by class XML schema.
            </summary>
            <param name="className">Class name</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class with the given class name is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetUniqueClassName(System.String)">
            <summary>
            Returns unique class name created from the given class name.
            </summary>
            <param name="className">Base class name</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetClasses(System.String,System.String,System.Int32,System.String)">
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetTableName(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Gets the table name of specified info object.
            </summary>
            <param name="infoObj">Info object</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class of the given object is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetClassStructureInfoFromDB(System.String)">
            <summary>
            Gets the XML schema for the given class
            </summary>
            <param name="className">Class name</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class with the given class name is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetDataClassInfo(System.String,System.Boolean)">
            <summary>
            Returns DataClassInfo with specified name.
            </summary>
            <param name="name">DataClassInfo name</param>
            <param name="throwIfNotFound">If true, the call throws an exception in case the data class was not found</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class with the given class name is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.SetDataClassInfoInternal(CMS.DataEngine.DataClassInfo)">
            <summary>
            Sets (updates or inserts) specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be set</param>        
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.DeleteDataClassInfoInternal(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be deleted</param>        
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoProvider.StoreFormLayoutsInExternalStorage">
            <summary>
            Gets or sets the value that indicates whether class layouts should be stored externally
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoProvider.FormLayoutsDirectory">
            <summary>
            Form layouts directory - Read only
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryInfo">
            <summary>
            Represents a query and its parameters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor, creates an empty Query structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor">
            <summary>
            Constructor, creates an empty Query structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates the Query object from the given DataRow data.
            </summary>
            <param name="dr">Data row with the Query info data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Loads the object data from given DataRow.
            </summary>
            <param name="dr">Data row with the data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadFromDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Container with the data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadClassName(CMS.Base.IDataContainer)">
            <summary>
            Loads the class name from the source data
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryName">
            <summary>
            Query name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryFullName">
            <summary>
            Query full name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.ObjectFullName">
            <summary>
            Object full name if defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryClassName">
            <summary>
            Query class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryType">
            <summary>
            Query type (SQL command or stored procedure).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.ClassID">
            <summary>
            Class id.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.ObjectDisplayName">
            <summary>
            Object name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.IsVirtual">
            <summary>
            If true, the query is a virtually built query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryListInfo">
            <summary>
            Info class providing the list of queries for the query selector
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryListInfo.OBJECT_TYPE_LIST">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryListInfo.mRealQueryText">
            <summary>
            Real query text for automatic queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryListInfo.#ctor">
            <summary>
            Constructor - Creates an empty CustomerListInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryListInfo.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryInfoProvider">
            <summary>
            Enables access to queries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.QueryIsExplicitlyDefined(System.String,System.String)">
            <summary>
            Returns true if the given query is explicitly defined
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.ClearDefaultQueries(CMS.DataEngine.DataClassInfo,System.Boolean,System.Boolean)">
            <summary>
            Clears the default queries for the given class name from hashtable
            </summary>
            <param name="dci">Data class object</param>
            <param name="dataClass">If true, generates DataClass queries</param>
            <param name="documentType">If true, generates document types queries</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears the hashtable.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetClassName(System.String)">
            <summary>
            Gets the class name from the query name.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryCacheDependencies(System.String)">
            <summary>
            Gets the cache dependencies for the query.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryType(System.Int32)">
            <summary>
            Gets the query type based on the given type ID
            </summary>
            <param name="queryTypeId">Query type ID</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryTypeID(CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Gets the query type ID based on the given type
            </summary>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfo(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfo(System.String,System.Boolean)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <param name="throwException">If true, exception is thrown if query does not exist</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfoInternal(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="queryName">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoProvider.UseAutomaticQueriesAsPrimary">
            <summary>
            If true, the automatic queries are used as the primary source of the queries
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CloneResult">
            <summary>
            Class encapsulating cloning result messages.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneResult.Warnings">
            <summary>
            Returns warning messages.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneResult.Errors">
            <summary>
            Returns error messages.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CloneSettings">
            <summary>
            Class encapsulating parameters for object cloning (used in InsertAsClone settings)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.Translations">
            <summary>
            Gets or sets the translation helper object (always at least empty instance, cannot return null) which provides translation Original object ID -> Cloned object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CustomParameters">
            <summary>
            Hashtable with custom parameters (for special cases such as BizForms, CustomTables, Webparts, etc.) where additional operations have to be done.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.Parameter">
            <summary>
            Custom parameter passed within the settings (for handlers usage, etc.).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CloneBase">
            <summary>
            Gets or sets the root object - the object the clonning procedure was called on (for example when cloning country with states, in the states the root object will be still the country).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ExcludedChildTypes">
            <summary>
            Gets or sets the list of child object types which should be clonned, if null than all child object types are clonned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ExcludedBindingTypes">
            <summary>
            Gets or sets the list of binding object types which should be clonned, if null than all child object types are clonned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ExcludedOtherBindingTypes">
            <summary>
            Gets or sets the list of other binding object types which should be clonned, if null than all child object types are clonned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CodeName">
            <summary>
            New code name. If null, automatically generated unique code name is generated.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.DisplayName">
            <summary>
            New display name. If null, automatically generated unique display name is generated.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.AssignToSiteID">
            <summary>
            If object has SiteBinding than a binding for given site is created after the object is cloned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeChildren">
            <summary>
            If true, child objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeBindings">
            <summary>
            If true, binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeOtherBindings">
            <summary>
            If true, other binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeSiteBindings">
            <summary>
            If true, site binding objects are included in the result. This setting is applied only when IncludeBindings is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeMetafiles">
            <summary>
            If true, metafiles of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.MaxRelativeLevel">
            <summary>
            Determines maximal level of the relationship (prent-child). -1 means all levels, 0 means no child objects, 1 means first level of children, etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ParentID">
            <summary>
            ID of the parent object to which the clonned object should be assigned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CloneToSiteID">
            <summary>
            ID of the site to clone the object to. Only for site objects. If this value is 0, object will be clonned under the site of the original object 
            unless the object type has SupportsGlobalObjects = true. In that case, 0 means that an object is cloned as a global object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.KeepOriginalSiteID">
            <summary>
            If true, CloneToSiteID is ignored and SiteID of the original object is kept.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.KeepFieldsTranslated">
            <summary>
            If true, cloned object will keep all the fields which use localization macros {$res.string$} without change. 
            If false, cloned object will replace the localization with its translation in the default culture.
            This setting does not influence DislpayName - this will be always replaced by its translation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.BeforeCloneInsertCallback">
            <summary>
            Handles actions before inserting the clone. Use to further modify given object according to settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.AfterCloneInsertCallback">
            <summary>
            Handles actions right after inserting the clone object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.AfterCloneStructureInsertCallback">
            <summary>
            Handles actions after processing main object and all the child, binging, sitebindigns, ... etc. objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CloneSettings.OnCloneInsert">
            <summary>
            Handles actions before/after inserting the clone. Use to further modify given object according to settings.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="cloneToBeInserted">BaseInfo object of the clone ready to be inserted</param>
        </member>
        <member name="T:CMS.DataEngine.CompareSettings">
            <summary>
            Class encapsulating parameters for comparing objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoredColumns">
            <summary>
            Hashtable indexed by objecttype, for each object type you can specify list of columns (List/string/) which will be excluded from equality check.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoredObjectTypes">
            <summary>
            Gets or sets the list of child object types which should be ignored.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreCase">
            <summary>
            If true, string comparison is case insensitive.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreIDColumn">
            <summary>
            If true, ID columns are not compared.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreGUIDColumn">
            <summary>
            If true, GUID columns are not compared.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreCodeNameColumn">
            <summary>
            If true, code name columns are not compared.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreTimeStampColumn">
            <summary>
            If true, code name columns are not compared.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreSiteIDColumn">
            <summary>
            If true, time stamp columns are not compared.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreParentIDColumn">
            <summary>
            If true, parent ID columns are not compared.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreChildren">
            <summary>
            If true, children collection is not checked.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreMetafiles">
            <summary>
            If true, metafiles collection is not checked.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreBindings">
            <summary>
            If true, bindings collection is not checked.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CompareSettings.IgnoreOtherBindings">
            <summary>
            If true, other bindings collection is not checked.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AdvancedConnectionSettings">
            <summary>
            Cache settings container.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AdvancedConnectionSettings.mCacheMinutes">
            <summary>
            Number of minutes for which the the data should be cached.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AdvancedConnectionSettings.mCacheDependency">
            <summary>
            Cache dependency for the cached items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AdvancedConnectionSettings.CacheMinutes">
            <summary>
            Number of minutes for which the the data should be cached.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AdvancedConnectionSettings.CacheDependency">
            <summary>
            Cache dependency for the cached item.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataConnection">
            <summary>
            Data connection interface that must be implemented by data providers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.GetExecutingConnection(System.String,System.Boolean)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Array of query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the number of affected rows.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Returns result of the query as a Data reader. Keeps the connection open.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Array of query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns a single value result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.NativeDBConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.NativeConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.IsOpen">
            <summary>
            Returns true if connection to the database is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.Open">
            <summary>
            Opens connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.Close">
            <summary>
            Closes connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction with specified isolation level.
            </summary>
            <param name="isolationLevel">Isolation level to use</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.CommitTransaction">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.RollbackTransaction">
            <summary>
            Rollbacks current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.IsTransaction">
            <summary>
            Indicates if transaction is running.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.CommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.UseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.NativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.Transaction">
            <summary>
            Transaction object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.ConnectionStringName">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.AdvancedSettings">
            <summary>
            Advanced connection settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.DisableQueryDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataProvider">
            <summary>
            Data provider interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataProvider.GetNewConnection(System.String)">
            <summary>
            Returns new data connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.IDataProvider.ProcessCommand(System.String,System.Object[])">
            <summary>
            Sends the specific command with arguments to the provider.
            </summary>
            <param name="commandName">Command name</param>
            <param name="commandArguments">Command arguments (parameters)</param>
        </member>
        <member name="P:CMS.DataEngine.IDataProvider.ConnectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataProvider.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISqlGenerator">
            <summary>
            Sql generator interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISqlGenerator.GetSystemViewSqlQuery(System.String,System.String@)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.ISqlGenerator.GetSqlQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="T:CMS.DataEngine.ITableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database for given data class.
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database for given data class.
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropView(System.String)">
            <summary>
            Drop specified view from database.
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetIndexes(System.String)">
            <summary>
            Returns DataSet with indexes of the given object. Returns columns IndexName, DropScript, CreateScript
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetTables(System.String)">
            <summary>
            Gets the tables in the database matching the condition
            </summary>
            <param name="where">Tables where condition</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetTableDependencies(System.String)">
            <summary>
            Gets list of object names which have foreign key constraint dependency.
            </summary>
            <param name="tableName">Table name</param>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database with specified primary key column with or without identity.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specfied table column information retrieved from database information schema. Returns columns ColumnName, DataType, DataSize, DataPrecision, Nullable, DefaultValue
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column in system (en) culture. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column in system (en) culture</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetColumnIndexes(System.String,System.String)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropColumnIndexes(System.String,System.String)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropDefaultConstraint(System.String,System.String)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterTableColumnWithDefaultValue(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Alter table column with default value.
            </summary>        
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="newColumnName">New column name, null if no new column is created</param>
            <param name="newColumnType">New column type, null if no new column is created</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
            <param name="newColumnDefaultValue">Column default value in system (en) culture</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetPKConstraintName(System.String)">
            <summary>
            Returns the name of the PK constraint.
            </summary>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.RecreatePKConstraint(System.String,System.String[])">
            <summary>
            Drops the current PK constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetTablePKName(System.String)">
            <summary>
            Returns name of the primary key. If more columns in PK, names are separated by semicolon ";".
            </summary>
            <param name="tableName">Name of the table to get PK column(s) from.</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetValueString(System.Object)">
            <summary>
            Returns the value string using the database culture. 
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetCode(System.String)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Creates specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Alters specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.ConnectionString">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseSize">
            <summary>
            Gets database size(including log size).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseVersion">
            <summary>
            Gets database version
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseServerName">
            <summary>
            Gets database server name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseServerVersion">
            <summary>
            Gets database server version.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DisableDebug">
            <summary>
            If true, the debug is disabled in this table manager
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ITransactionScope">
            <summary>
            Transaction scope interface
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITransactionScope.Commit">
            <summary>
            Commits the transaction (does the same as Complete).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryDataParameters">
            <summary>
            Container that holds a list of query parameters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.mLocalParameters">
            <summary>
            List of parameters defined locally in this instance
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.mExistingLocalParameters">
            <summary>
            Table of existing parameters [name -> DataParameter]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.mExtraLocalMacros">
            <summary>
            Extra query macros
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.ParamNameRegex">
            <summary>
            Regular expression to get all parameters from the given expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.#ctor(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Constructor
            </summary>
            <param name="parentParameters">Parent query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetParameter(System.String)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetUpdateQueryColumns">
            <summary>
            Gets the columns representation for the update query in the form of Column1 = @Column1, Column2 = @Column2, etc.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ToArray">
            <summary>
            Converts the data parameters to an array of parameters [[name, value, type], ...].
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddDateTime(System.String,System.DateTime)">
            <summary>
            Adds the date time parameter into the list (if the date time is DateTime.MinValue, adds DBNull.Value).
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddGuid(System.String,System.Guid)">
            <summary>
            Adds the guid parameter into the list (if the guid id Guid.Empty, adds DBNull.Value).
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddId(System.String,System.Int32)">
            <summary>
            Adds the ID parameter into the list (if the ID is not larger than 0, adds DBNull.Value).
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="condition">Condition, if false, the NULL value is set</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddUnique(System.String,System.Object,System.Boolean)">
            <summary>
            Adds the parameter into the list, if the parameter already exists, defines a unique name for it.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(System.String,System.Object,System.Type)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="type">Type of the parameter</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(CMS.DataEngine.DataParameter)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="param">Parameter to add</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(CMS.DataEngine.DataParameter,System.Boolean)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="param">Parameter to add</param>
            <param name="unique">If true, the parameter will be added with a unique name if already present</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetUniqueName(System.String,System.Boolean)">
            <summary>
            Gets a unique parameter name using the base name
            </summary>
            <param name="name">Base name</param>
            <param name="checkBaseName">If true, given base name is also checked for uniqueness</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String,System.Boolean)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="addParameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.IncludeParameters(CMS.DataEngine.QueryDataParameters,System.String,System.Boolean)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="addParameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ContainsSameParameter(CMS.DataEngine.DataParameter)">
            <summary>
            Returns true, if parameters contain the same parameter as the given one
            </summary>
            <param name="par">Parameter</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Expand(System.String)">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetCompleteQueryText(System.String)">
            <summary>
            Gets the complete query text updated with the parameters
            </summary>
            <param name="queryText">Query text template</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ResolveMacros(System.String)">
            <summary>
            Resolves macros within the given query text
            </summary>
            <param name="queryText">Query text template</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ResolveMacro(System.String,System.String,System.String)">
            <summary>
            Resolves the given macro within the given query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="name">Macro name</param>
            <param name="value">Macro value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddMacro(System.String,System.String,System.Boolean)">
            <summary>
            Adds the macro to the query data parameters
            </summary>
            <param name="name">Macro name</param>
            <param name="value">Macro value</param>
            <param name="addHashes">If true, hash chars are added to the macro automatically, e.g. "TABLE" is converted to "##TABLE##"</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ToString">
            <summary>
            Converts the data parameter to string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetMacroEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Equals(System.Object)">
            <summary>
            Returns true if the object equals another object
            </summary>
            <param name="obj">Object to compare to</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetHashCode">
            <summary>
            Provides a hashcode for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetDeclaration">
            <summary>
            Gets the declaration of parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.IsEmpty">
            <summary>
            Returns true if parameters are empty
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.ExtraLocalMacros">
            <summary>
            Extra query macros
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.LocalParameters">
            <summary>
            List of parameters defined locally in this instance
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.ExistingLocalParameters">
            <summary>
            Table of existing parameters [name -> DataParameter]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.ParentParameters">
            <summary>
            Parent query parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.FillDataSet">
            <summary>
            DataSet to be filled by the query. If not given, new DataSet is created
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.QueryBefore">
            <summary>
            Text included before the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.QueryAfter">
            <summary>
            Text included after the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Item(System.String)">
            <summary>
            Returns the parameter of the specified name.
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Item(System.Int32)">
            <summary>
            Returns the parameter on specified index.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Count">
            <summary>
            Number of the registered parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.MacroCount">
            <summary>
            Number of macros in the data parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Source">
            <summary>
            Source of the data
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryExecutionTypeEnum">
            <summary>
            Execution type of the query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteNonQuery">
            <summary>
            ExecuteNonQuery.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteQuery">
            <summary>
            ExecuteQuery.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteReader">
            <summary>
            ExecuteReader.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteScalar">
            <summary>
            ExecuteScalar.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryTypeEnum">
            <summary>
            Query type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryTypeEnum.SQLQuery">
            <summary>
            SQL query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryTypeEnum.StoredProcedure">
            <summary>
            Stored Procedure.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlOperationTypeEnum">
            <summary>
            Enumeration of the SQL operations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.UnknownQuery">
            <summary>
            Uknown query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectQuery">
            <summary>
            Selection query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.InsertQuery">
            <summary>
            Insertion query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.UpdateQuery">
            <summary>
            Update query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.DeleteQuery">
            <summary>
            Delete query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectDocuments">
            <summary>
            Document selection query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SearchTree">
            <summary>
            Tree search query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectAll">
            <summary>
            Selection all query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectVersions">
            <summary>
            Document versions selection query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectView">
            <summary>
            Selection query for view.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.DeleteAll">
            <summary>
            Deletion all query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectModifiedFrom">
            <summary>
            Selection query from specified date of modification.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.InsertWithIdentity">
            <summary>
            Insert record with the identity column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.UpdateAll">
            <summary>
            Updates multiple items based on the columns and where condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralSelect">
            <summary>
            General select query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralInsert">
            <summary>
            General insert query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralUpdate">
            <summary>
            General update query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralDelete">
            <summary>
            General delete query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralUpsert">
            <summary>
            General upsert (insert/update) query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsCategoryContainer">
            <summary>
            Object encapsulating all settings objects to be accessible via macro engine.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.#ctor(CMS.DataEngine.SettingsCategoryInfo,System.Int32,System.Boolean)">
            <summary>
            Creates new instance of SettingsCategoryContainer.
            </summary>
            <param name="category">Settings category to be encapsulated</param>
            <param name="siteId">ID of the site</param>
            <param name="keysAsObjects">Indicates whether settings keys are treated as normal children (InfoObjects) or simple values</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.SettingsCategoryInfo">
            <summary>
            Gets the encapsulated settings category info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.SiteID">
            <summary>
            Gets the site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.KeysAsObjects">
            <summary>
            Indicates whether settings keys are treated as normal children (InfoObjects) or simple values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.Item(System.String)">
            <summary>
            Gets the value of the column, setter is not implemented.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsCategoryInfo">
            <summary>
            Represents a Settings key.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsCategoryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsCategoryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.BuildObjectPath(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="parentColumName">Column of the parent ID</param>
            <param name="pathColumnName">Column name to build the path from</param>
            <param name="levelColumnName">Column name of the level</param>
            <param name="level">Level of the object within the tree hierarchy</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.#ctor">
            <summary>
            Constructor, creates an empty SettingsKeyInfo structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates the DataClassInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryID">
            <summary>
            Category ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryDisplayName">
            <summary>
            Category display name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryName">
            <summary>
            Category name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryOrder">
            <summary>
            Category order.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryParentID">
            <summary>
            Category parent ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIDPath">
            <summary>
            Category ID path within the category tree.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryLevel">
            <summary>
            Category level in the category tree.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryChildCount">
            <summary>
            Number of category child categories.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIconPath">
            <summary>
            Category icon path.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIsGroup">
            <summary>
            Indicates if category represents group. True -> It is a settings group, False -> It is a settings category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIsCustom">
            <summary>
            Indicates if category is custom. True -> It is a custom category, False -> It is a system category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryResourceID">
            <summary>
            Category resource identifier.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsCategoryInfoProvider">
            <summary>
            Class providing Settings category management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsCategoryInfoProvider.mRootCategory">
            <summary>
            Info object representing Settings root category.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetRootSettingsCategoryInfo">
            <summary>
            Gets root of categories. This is distinguished by CategoryLevel = 0. If more found -> use first.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoryInfo(System.Int32)">
            <summary>
            Returns the SettingsCategoryInfo structure for the specified category.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoryInfoByName(System.String)">
            <summary>
            Returns the SettingsCategoryInfo structure for the name.
            </summary>
            <param name="categoryName">CategoryName</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryInfo(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Sets (updates or inserts) specified category.
            </summary>
            <param name="category">Settings category to set</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.DeleteSettingsCategoryInfo(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Deletes specified category.
            </summary>
            <param name="categoryObj">Country object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.DeleteSettingsCategoryInfo(System.Int32)">
            <summary>
            Deletes specified category.
            </summary>
            <param name="categoryId">Country ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategories">
            <summary>
            Gets all settings categories.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategories(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all categories.
            </summary>    
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement to use</param>
            <param name="topN">Number of data rows which should be included in the result</param>
            <param name="columns">Table columns separated by comma which should be included in the result</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategories(System.Int32)">
            <summary>
            Gets DataSet with child setting categories of the specified parent setting category.
            </summary>
            <param name="parentCategoryId">ID of the parent setting category</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategories(System.String,System.String)">
            <summary>
            Gets DataSet with child setting categories of the specified parent setting category, filtered by where condition.
            </summary>
            <param name="parentCategoryName">Name of the parent setting category</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryUp(System.Int32)">
            <summary>
            Moves specified category up.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryDown(System.Int32)">
            <summary>
            Moves specified category down.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryChildCount(System.Int32)">
            <summary>
            Sets correct SettingsCategoryChildCount to the specified SettingsCategory.
            </summary>
            <param name="settingsCategoryID">ID of the SettingsCategory</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetLastSettingsCategoryOrder(System.Int32)">
            <summary>
            Returns last SettingsCategory order for specified parent SettingsCategory.
            </summary>
            <param name="parentCategoryID">Parent SettingsCategory ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.RefreshDataCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetCategoriesOnPathWhereCondition(System.String)">
            <summary>
            Gets where condition for all parent categories on path except root category.
            </summary>
            <param name="categoryIdPath">Category ID path</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetCategoriesOnPath(System.String)">
            <summary>
            Gets all the categories on the specified category ID path in the corresponding order.
            </summary>
            <param name="categoryIdPath">Category ID path</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.RefreshObjectsCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoriesInternal">
            <summary>
            Gets all settings categories.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoryInfoInternal(System.Int32)">
            <summary>
            Returns the SettingsCategoryInfo structure for the specified category.
            </summary>
            <param name="categoryId">Category id</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoryInfoByNameInternal(System.String)">
            <summary>
            Returns the SettingsCategoryInfo structure for the name.
            </summary>
            <param name="categoryName">CategoryName</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryInfoInternal(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Sets (updates or inserts) specified category.
            </summary>
            <param name="category">Settings category to set</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.DeleteSettingsCategoryInfoInternal(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Deletes specified category.
            </summary>
            <param name="categoryObj">Country object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoriesInternal(System.String,System.String)">
            <summary>
            Gets all categories.
            </summary>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement to use</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoriesInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all categories.
            </summary>
            <param name="orderBy">Order by statement to use</param>
            <param name="where">Where condition to filter data</param>
            <param name="topN">Number of data rows which should be included in the result</param>
            <param name="columns">Table columns which should be included in the result</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategoriesInternal(System.Int32)">
            <summary>
            Gets DataSet with child setting categories of the specified parent category.
            </summary>
            <param name="parentCategoryId">ID of the parent setting category</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategoriesInternal(System.String,System.String)">
            <summary>
            Gets DataSet with child setting categories of the specified parent category.
            </summary>
            <param name="parentCategoryName">Code name of the parent setting category</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryUpInternal(System.Int32)">
            <summary>
            Moves specified category up.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryDownInternal(System.Int32)">
            <summary>
            Moves specified category down.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryChildCountInternal(System.Int32)">
            <summary>
            Sets correct CategoryChildCount to the specified SettingsCategory.
            </summary>
            <param name="settingsCategoryID">ID of the SettingsCategory</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetLastSettingsCategoryOrderInternal(System.Int32)">
            <summary>
            Returns last order for specified parent SettingsCategory.
            </summary>
            <param name="parentCategoryID">Parent SettingsCategory ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.RefreshDataCountsInternal">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetParentPath(System.String)">
            <summary>
            Returns the parent path for the specified path (any kind of path with "/" as a separator)
            </summary>
            <param name="path">Original path</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfoProvider.RootCategory">
            <summary>
            Returns root settings category (this property is cached).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlHelper">
            <summary>
            Class to provide common SQL methods.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.NO_COLUMNS">
            <summary>
            Constant for no columns.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.NO_TOTALRECORDS">
            <summary>
            Value for total records input to not get the total amount of data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.NO_DATA_WHERE">
            <summary>
            Where condition representing no data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.MAX_PARAM_LENGTH">
            <summary>
            Maximum parameter length to log.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ORDERBY_DESC">
            <summary>
            Suffix for the descending order
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ORDERBY_ASC">
            <summary>
            Suffix for the ascending order
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.COLUMNS_ALL">
            <summary>
            Represents all columns within given query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SELECTION_PARSE_IDS">
            <summary>
            Table valued SQL function to parse IDs from the string
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SELECTION_PARSE_GUIDS">
            <summary>
            Table valued SQL function to parse GUIDs from the string
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SELECTION_PARSE_NAMES">
            <summary>
            Table valued SQL function to parse names from the string
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_SELECT">
            <summary>
            General select SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_INSERT">
            <summary>
            General insert SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_UPDATE">
            <summary>
            General update SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_UPSERT">
            <summary>
            General upsert (update/insert) SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_DELETE">
            <summary>
            General delete SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SELECT_NULL">
            <summary>
            Empty select statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.COLUMNS_ALIAS_PATTERN">
            <summary>
            Regex pattern for the column alias
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.TABLE_IS_FROM_CMS_DB">
            <summary>
            Name of the property to flag a table to be originated from database
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.TABLE_CONTAINS_EXTERNAL_DATA">
            <summary>
            Name of the property to flag a table which contains external data
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.MISSING_VALUE">
            <summary>
            Unknown value.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.DEFAULT_DB_SCHEMA">
            <summary>
            Default db schema.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.DefaultSQLInlineLimit">
            <summary>
            Default inline limit for SQL lists. When the number of values is below this number, the lists on SQL, e.g. IN (x, y, z), are evaluated as inline lists.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.IsWildCardRegEx">
            <summary>
            Regex matching the wildcard within alias path.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.RemoveWildCardRegEx">
            <summary>
            Regex for matching the escaped content within alias path.
            </summary>
            Groups:                                                       (esc.content)
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.CommentsRegEx">
            <summary>
            Regex matching comments within a SQL query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ColumnAliasRegEx">
            <summary>
            Regex matching column alias within a column expression
            </summary>
            Groups:                                                            (1: alias first               )                                   (2: alias last                   )
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.AllowPartialUpdates">
            <summary>
            Returns true if the data engine allows partial updates to database (updates only fields which values have changed)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetParamCacheString(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Gets the parameters string.
            </summary>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetParamString(CMS.DataEngine.QueryDataParameters,System.String,System.Int32@)">
            <summary>
            Gets the parameters string.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="separator">Separator</param>
            <param name="size">Size of all objects</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetResultsString(System.Object,System.Int32@)">
            <summary>
            Gets the results as a string for log.
            </summary>
            <param name="result">Result object</param>
            <param name="totalSize">Total size of the result</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetRowNumber(System.String,System.String)">
            <summary>
            Gets the row number expression
            </summary>
            <param name="orderBy">Order by expression</param>
            <param name="partitionBy">Partition by expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetRound(System.String,System.Int32)">
            <summary>
            Gets the round expression
            </summary>
            <param name="value">Value expression</param>
            <param name="places">Places to round to</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCast(System.String,System.String)">
            <summary>
            Get the CAST expression.
            </summary>
            <param name="value">Value to be casted</param>
            <param name="type">Type the value should be casted to</param>
            <example>
                <code>
                GetCast("ActivityValue", "FLOAT")
                </code>
            returns "CAST(ActivityValue AS INT)"
            </example>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetAggregation(System.String,CMS.DataEngine.AggregationType)">
            <summary>
            Gets the aggregation expression from the given expression
            </summary>
            <param name="expression">Expression</param>
            <param name="type">Aggregation type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetValueExpression(System.String)">
            <summary>
            Gets the value expression from the given expression
            </summary>
            <param name="expression">Expression to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetParameterName(System.String)">
            <summary>
            Gets the parameter name
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetJoinType(CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Gets the join expression
            </summary>
            <param name="joinType">Join type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetJoin(System.String,System.String,System.String,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Gets the join expression
            </summary>
            <param name="left">Left side source</param>
            <param name="right">Right side source</param>
            <param name="condition">Condition</param>
            <param name="joinType">Join type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureFullName(System.String,System.String)">
            <summary>
            Ensures full name of the given column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetComment(System.String,System.Boolean)">
            <summary>
            Gets a multiline SQL comment for simple input text (must not contain any open comment sequence)
            </summary>
            <remarks>
            Input text with comment sequence could cause an invalid SQL syntax.
            </remarks>
            <param name="text">Comment text</param>
            <param name="newLine">If true, new line is added before the comment</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveComments(System.String)">
            <summary>
            Removes single line and simple multiline comments from a SQL query
            </summary>
            <remarks>
            Multiline comments with nested comments won't be removed correctly and could cause an invalid SQL syntax
            </remarks>
            <param name="query">SQL query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.QueriesEqual(System.String@,System.String@,System.Boolean)">
            <summary>
            Returns true if two queries equal by their content. Ignores extra whitespaces and comments within the comparison
            </summary>
            <param name="query1">First query</param>
            <param name="query2">Second query</param>
            <param name="returnDifference">If true, the difference (remainders that don't match) are returned through original values</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.StandardizeQuery(System.String)">
            <summary>
            Standardizes a query so the spaces are standardized and comments are removed
            </summary>
            <param name="query">Query to standardize</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.UnionQueries(System.String[])">
            <summary>
            Returns the query created as an UNION ALL of given queries.
            </summary>
            <param name="queries">Queries to union</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.UnionQueries(System.String[],System.Boolean)">
            <summary>
            Returns the query created as an UNION of the given queries.
            </summary>
            <param name="queries">Queries to union</param>
            <param name="unionAll">Union all records (no distinct)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IntersectQueries(System.String[])">
            <summary>
            Returns the query created as an INTERSECT of the given queries.
            </summary>
            <param name="queries">Queries to intersect</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ExceptQueries(System.String[])">
            <summary>
            Returns the query created as an EXCEPT of the given queries.
            </summary>
            <param name="queries">Queries to except</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CombineQueries(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines the given queries with the operators
            </summary>
            <param name="queries">Queries to merge</param>
            <param name="operators">Operators between queries, for lower number of operators than necessary uses the last operator for the remaining queries. Use one operator in case you want all operators to be the same.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AppendQuery(System.String,System.String,System.String)">
            <summary>
            Combines the given queries with the operator
            </summary>
            <param name="op">Operator between queries</param>
            <param name="query">Original query</param>
            <param name="append">Query to append</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PreprocessQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Preprocesses the give query.
            </summary>
            <param name="query">Query to preprocess</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureOrderByColumns(System.String@,System.String@)">
            <summary>
            Ensures that the order by columns are provided within the list of columns as aliases, modifies the order by expression to the aliases of those columns
            </summary>
            <param name="orderBy">Order by expression</param>
            <param name="columns">List of selected columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PreparePagedQuery(System.String,CMS.DataEngine.QueryMacros,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prepares the query for paging, adds additional system columns and updates the columns list.
            </summary>
            <param name="queryText">Query text</param>
            <param name="macros">Query expressions</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get</param>
            <param name="getTotal">If true, the query should get the total number of records</param>
            <param name="subQuery">If true, the query is used as a sub-query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.HandleEmptyColumns(System.String@)">
            <summary>
            Handles the empty columns constant by replacing it with empty string
            </summary>
            <param name="columns">Columns to process</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PrepareWithQuery(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Prepares a nested query using WITH for further evaluation
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Top N</param>
            <param name="extraColumns">Columns to get</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWithQuery(System.String)">
            <summary>
            Gets a nested query using WITH for further evaluation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PrepareNestedQuery(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Prepares a nested query using WITH for further evaluation
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Top N</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetNestedQuery(System.String,System.String)">
            <summary>
            Gets a nested query using nested SELECT for further evaluation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSelectQuery(System.String,System.String)">
            <summary>
            Gets the general select query
            </summary>
            <param name="source">Query source</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetPagedQuery(System.String,System.String)">
            <summary>
            Gets the query by its name and validates the query for paging
            </summary>
            <param name="queryName">Query name</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ProcessPagedResults(System.Data.DataSet,System.Int32@)">
            <summary>
            Processes the page results - Removes the system columns and gets the total records number.
            </summary>
            <param name="ds">DataSet with the results</param>
            <param name="totalRecords">Returns the total records number</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCase(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Boolean)">
            <summary>
            Returns statement for the CASE expressions. 
            </summary>
            <param name="cases">IEnumerable with KeyValuePair where key is a boolean expression (where condition) and value is result expression</param>
            <param name="elseCase">Expression for the else case</param>
            <param name="escapeString">Determines whether escape cases' values or not</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetConvert(System.String,System.String)">
            <summary>
            Gets the convert expression.
            </summary>
            <param name="value">Value to be converted</param>
            <param name="type">Type the value should be converted to</param>
            <example>
                <code>
                    GetConvert("ActivityValue", "INT")
                </code>
            returns CONVERT(INT, ActivityValue)
            </example>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetIsNumeric(System.String)">
            <summary>
            Gets the ISNUMERIC expression.
            </summary>
            <example>
                <code>
                GetIsNumeric("ActivityValue")
                </code>
            returns ISNUMERIC(ActivityValue)
            </example>
            <param name="value">Value to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CheckPagedQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Checks if the given query is valid to be used as paged query
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCaseOrderBy(System.String[])">
            <summary>
            Returns order by statement based on case boolean expressions. First case has highest priority.
            </summary>
            <param name="cases">IEnumerable with boolean expressions (where conditions)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCaseOrderBy(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns order by statement based on case boolean expressions. First case has highest priority.
            </summary>
            <param name="cases">IEnumerable with boolean expressions (where conditions)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseList(System.String,System.Collections.IEnumerable,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Gets the SQL expression to get a parsed list of data
            </summary>
            <param name="method">SQL function to parse the list. This table-valued function gets the values as one long string, and parses them into a table.</param>
            <param name="values">List of values to parse</param>
            <param name="parameters">Data parameters used for the query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildDistinctList(System.Collections.IEnumerable)">
            <summary>
            Builds the list of values separated by colon. This method does not escape characters. Duplicities from input sequence are automatically removed.
            </summary>
            <example>
            Input:
            [1,2,3,4,3,3,7]
            
            produces the following output:
            
            "1,2,3,4,7"
            </example>
            <param name="values">List of values which will be joined</param>
            <returns>Items from <paramref name="values"/> list joined by colon</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildIntList(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Builds the list of integers separated by colon. Does not remove duplicities. Output of this method can be consumed by 
            SQL table-valued function [Func_Selection_ParseIDs] which parses string and returns table.
            </summary>
            <example>
            Input:
            [1,2,3,4,3,3,7]
            
            produces the following output:
            
            "1,2,3,4,3,3,7"
            </example>
            <param name="values">List of integers which will be joined</param>
            <returns>Items from <paramref name="values"/> list joined by colon</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildIntTable(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a table-valued parameter for database calls. Is intended for usage with CMS_Type_Integers database type.
            </summary>
            <remarks>
            Returns null, if the enumeration is empty. The database doesn't ever expect to get empty table, 
            it needs not to add the parameter at all. So when calling this method to add an parameter to a query, 
            check this for null at first and do not add the parameter at all in that case.
            
            For performance reuses returned SqlDataRecord, so it should be immediately consumed.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildIntTableInternal(System.Int32,System.Collections.Generic.IEnumerator{System.Int32})">
            <summary>
            Yields converted SqlDataRecords from <paramref name="current"/> and the rest in <paramref name="enumerator"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the condition matching values of the column between from and to
            </summary>
            <param name="column">Column name</param>
            <param name="from">From value</param>
            <param name="to">To value</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddWhereCondition(System.String,System.String,System.String)">
            <summary>
            Adds where condition to the expression.
            </summary>
            <param name="where">Where condition</param>
            <param name="condition">Condition to add</param>
            <param name="op">Operator, no spaces required. e.g. "OR"</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSiteIDWhereCondition(System.String,System.Int32)">
            <summary>
            Returns the where condition for the give site ID.
            </summary>
            <param name="siteIdColumn">Site ID column</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddWhereCondition(System.String,System.String)">
            <summary>
            Adds where condition to the expression using AND operator.
            </summary>
            <param name="where">Where condition</param>
            <param name="condition">Condition to add</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="useUnicode">Indicates if the preposition 'N' should be used for string values</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="useUnicode">Indicates if the preposition 'N' should be used for string values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereConditionStringValue``1(System.String,System.Boolean)">
            <summary>
            Gets where condition value.
            </summary>
            <param name="value">Where condition value</param>
            <param name="useUnicode">Indicates if the preposition 'N' should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Int32)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnNames">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnNames">Column name</param>
            <param name="values">Values</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnNames">Column name</param>
            <param name="values">Values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetAliasPathCondition(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the where condition for node alias path expression.
            </summary>
            <param name="aliasPath">Node alias path</param>
            <param name="exclude">Indicates if the path should be excluded</param>
            <param name="combined">Indicates if return condition is combined with another</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EscapeLikeQueryPatterns(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Escapes characters for query which use LIKE pattern.
            </summary>
            <param name="input">Input text</param>
            <param name="escapeUnderScore">Indicates whether underscore character should be escaped</param>
            <param name="escapePercentage">Indicates whether percentage character should be escaped</param>
            <param name="escapeSquareBrackets">Indicates whether square brackets characters should be escaped</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSafeQueryString(System.String)">
            <summary>
            Returns safe sql query string - escapes apostrophes and escapes wildcard characters _, %, [].
            </summary>
            <param name="input">String to escape</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSafeQueryString(System.String,System.Boolean)">
            <summary>
            Returns safe sql query string - escapes apostrophes and optionally escapes wildcard characters _, %, [].
            </summary>
            <param name="input">String to escape</param>
            <param name="escapeWildcards">Determines whether the wildcards characters should be escaped</param>        
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSqlValue(System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EscapeLikeText(System.String)">
            <summary>
            Escapes characters for query which use LIKE pattern (%, _, [, ] and ^).
            </summary>
            <param name="text">Original input</param>
            <returns>The escaped string that can be used as pattern in a LIKE expression</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EscapeQuotes(System.String)">
            <summary>
            Escapes single qoutes in string value used for SQL query (value's => value''s).
            </summary>
            <param name="text">Original input text</param>
            <returns>The escaped string that can be used as safe string in SQL query</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddColumnAlias(System.String,System.String,System.Boolean)">
            <summary>
            Adds the column alias to the given expression
            </summary>
            <param name="expression">Expression</param>
            <param name="alias">Alias</param>
            <param name="ensureBrackets">If true, the expression is encapsulated in brackets in case it is a complex expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCaseColumn(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Returns statement for column with case expressions. 
            This statement is used for evaluating a set of boolean expressions to determine the result. First case has highest priority.
            </summary>
            <param name="cases">IEnumerable with KeyValuePair where key is a boolean expression (where condition) and value is result expression</param>
            <param name="asColumnName">Specifies column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddColumns(System.String,System.String,System.Boolean)">
            <summary>
            Adds the columns.
            </summary>
            <param name="columns">Original columns</param>
            <param name="addColumns">Columns to add</param>
            <param name="treatEmptyAsAll">If true, empty source columns are treated as all columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.MergeColumns(System.String,System.String,System.Func{System.String,System.String},System.Boolean,System.Func{System.String,System.String})">
            <summary>
            Merges the sets of columns and makes sure that each column in the result is present only once.
            </summary>
            <param name="columns">Original column list</param>
            <param name="addColumns">List of columns to add</param>
            <param name="uniqueKey">Function which provides unique key for the merging process (if two column keys match, the merging process allows only first column)</param>
            <param name="extraColumns">Indicates if columns which are not part of '*' expression are merged to the existing list of columns</param>
            <param name="transformation">Column transformation</param>
            <returns>Returns the list separated by dashes for use in SQL query</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.MergeColumns(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.Boolean,System.Func{System.String,System.String})">
            <summary>
            Merges the sets of columns and makes sure that each column in the result is present only once.
            </summary>
            <param name="columns">Original column list</param>
            <param name="addColumns">List of columns to add</param>
            <param name="uniqueKey">Function which provides unique key for the merging process (if two column keys match, the merging process allows only first column)</param>
            <param name="extraColumns">Indicates if columns which are not part of '*' expression are merged to the existing list of columns</param>
            <param name="transformation">Column transformation</param>
            <returns>Returns the list separated by dashes for use in SQL query</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddColumnList(System.Collections.Generic.List{System.String},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean@,System.Func{System.String,System.String})">
            <summary>
            Adds the given list of columns to the existing list
            </summary>
            <param name="columns">List of columns</param>
            <param name="added">Added columns</param>
            <param name="addCols">Columns to add</param>
            <param name="noColumns">Returns the flag whether some columns were added</param>
            <param name="uniqueKey">Unique column key function to identify duplicate columns. If not specified, matches the whole column expression.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetColumnName(System.String)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumn(System.String,System.String@,System.String@)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
            <param name="expression">Column expression</param>
            <param name="alias">Returns column alias or null in case column does not have any alias</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.JoinColumnList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins the given column list. Columns are separated by comma.
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumnList(System.String)">
            <summary>
            Parses the given list of columns to a list (can handle also advanced columns containing functions like ISNULL(A, B) etc.).
            </summary>
            <param name="columns">List of columns separated with commas</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumnList(System.String,System.Boolean)">
            <summary>
            Parses the given list of columns to a list (can handle also advanced columns containing functions like ISNULL(A, B) etc.).
            </summary>
            <param name="columns">List of columns separated with commas</param>
            <param name="removeSquareBrackets">Indicates whether square brackets should be removed</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsEncapsulatedBySquareBrackets(System.String)">
            <summary>
            Returns true if column is encapsulated by square brackets, otherwise return false
            </summary>
            <param name="column">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveSquareBrackets(System.String)">
            <summary>
            Removes square brackets from column name
            </summary>
            <param name="column">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddSquareBrackets(System.String)">
            <summary>
            Adds square brackets to column name. Checks whether bracket are not already added
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetColumnListItem(System.String)">
            <summary>
            Transforms the item of the column list
            </summary>
            <param name="item">Item to translate</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureMissingColumns(System.Collections.Generic.IList{System.String})">
            <summary>
            Ensures the missing columns in the given lists of columns
            </summary>
            <param name="columnLists">Input lists of columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureMissingColumns(System.Collections.Generic.ICollection{System.Collections.Generic.List{System.String}})">
            <summary>
            Ensures the missing columns in the given lists of columns
            </summary>
            <param name="columnLists">Input lists of columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureMissingColumns(System.Collections.Generic.ICollection{CMS.DataEngine.QueryColumnList})">
            <summary>
            Ensures the missing columns in the given lists of columns
            </summary>
            <param name="columnLists">Input lists of columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsSingleColumn(System.String)">
            <summary>
            Returns true, if the query output is a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddOrderBy(System.String,System.String,CMS.DataEngine.OrderDirection)">
            <summary>
            Adds the order by to an existing one.
            </summary>
            <param name="orderBy">Original order by</param>
            <param name="add">Order by to add</param>
            <param name="dir">Order direction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureDescendingOrderByDirection(System.String)">
            <summary>
            Ensures descending order by direction
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureAscendingOrderByDirection(System.String)">
            <summary>
            Ensures ascending order by direction
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureOrderByDirection(System.String,CMS.DataEngine.OrderDirection)">
            <summary>
            Ensures the given order by direction
            </summary>
            <param name="columnName">Column name</param>
            <param name="dir">Order direction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseOrderBy(System.String)">
            <summary>
            Parses order by expression and returns list of columns
            </summary>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetOrderByColumnName(System.String)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetOrderByColumnName(System.String,System.String@)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
            <param name="suffix">Outputs the order by suffix for the column</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.OrderByContains(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the order by expression contains column sorted the specified way.
            </summary>
            <param name="orderBy">Order by expression to check</param>
            <param name="column">Column to check</param>
            <param name="ascending">Direction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ReverseOrderBy(System.String)">
            <summary>
            Reverses the order by string by toggling between ASC and DESC.
            </summary>
            <param name="orderBy">Original ORDER by</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetViewName(System.String,System.String)">
            <summary>
            Gets view name for specified table name.
            </summary>
            <param name="tableName">Table name</param>
            <param name="siteName">Name of the site</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveOwner(System.String)">
            <summary>
            Removes the owner from the given object name.
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSafeOwner(System.String)">
            <summary>
            Returns safe string representing DB owner.
            </summary>
            <param name="owner">DB Owner</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetDBSchema(System.String)">
            <summary>
            Returns DB object scheme from settings.
            </summary>
            <param name="siteName">Name of the site from which the setting is returned</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetDBSchemaOrDefault(System.String)">
            <summary>
            Returns DB object scheme from settings or default value.
            </summary>
            <param name="siteName">Name of the site from which the setting is returned</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsMissing(System.Object)">
            <summary>
            Returns true if the given value is missing or null.
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsMissingOrNull(System.Object)">
            <summary>
            Returns true if the given value is missing or null.
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Returns true if two objects are equal.
            </summary>
            <param name="obj1">Object 1</param>
            <param name="obj2">Object 2</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.MatchLikePattern(System.String,System.String)">
            <summary>
            Indicates whether string matches given SQL 'like' pattern. 
            </summary>
            <param name="value">Input string value</param>
            <param name="pattern">Like search patter</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CreateScalarTable``1(``0)">
            <summary>
            Creates a scalar table (with one row and one column) from the given value.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetData(System.Data.DataSet,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the data from the DataSet
            </summary>
            <param name="sourceData">Source data</param>
            <param name="parameters">Query data parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.RunningQueries">
            <summary>
            Counter of running queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.SchemaNameRegEx">
            <summary>
            Regular expression for removing schema from DB object name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SystemViewNames">
            <summary>
            System view name constants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_Tree_Joined">
            <summary>
            View_CMS_Tree_Joined.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_Tree_Joined_Linked">
            <summary>
            View_CMS_Tree_Joined_Linked.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_Tree_Joined_Regular">
            <summary>
            View_CMS_Tree_Joined_Regular.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_Tree_Joined_Versions">
            <summary>
            View_CMS_Tree_Joined_Versions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_User">
            <summary>
            View_CMS_User.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_Community_Member">
            <summary>
            View_Community_Member.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataConnectionFactory">
            <summary>
            Provides DataConnection object for specified data provider according to configuration settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataConnectionFactory.mProviderObject">
            <summary>
            Data provider object instance.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataConnectionFactory.mGeneratorObject">
            <summary>
            SQL generator object instance.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataConnectionFactory.mTableManagerObject">
            <summary>
            Table manager object instance.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataConnectionFactory.mProviderAssemblyName">
            <summary>
            Provider assembly name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataConnectionFactory.mDefaultDataProvider">
            <summary>
            If true, default data provider is used.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.NewTableManagerObject(System.String)">
            <summary>
            Creates a new table manager object with the given connection string
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.GetConnection">
            <summary>
            Returns a new database connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.GetConnection(System.String)">
            <summary>
            Returns a new database connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.GetNativeConnection(System.String,System.Boolean)">
            <summary>
            Returns a new database connection.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.ProcessCommand(System.String,System.Object[])">
            <summary>
            Sends the specific command with arguments to the provider.
            </summary>
            <param name="commandName">Command name</param>
            <param name="commandArguments">Command arguments (parameters)</param>
        </member>
        <member name="E:CMS.DataEngine.DataConnectionFactory.OnGetConnection">
            <summary>
            Event raised when the connection is required. Returns the connection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.DefaultDataProvider">
            <summary>
            If true, default data provider is used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.ProviderAssemblyName">
            <summary>
            Custom Provider library assembly.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.ProviderObject">
            <summary>
            Returns the provider object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.GeneratorObject">
            <summary>
            Returns the SQL generator object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.TableManagerObject">
            <summary>
            Returns the Table manager object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.ConnectionString">
            <summary>
            Returns the connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataConnectionFactory.GetConnectionEventHandler">
            <summary>
            Gets connection method delegate.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="T:CMS.DataEngine.InfoDataSet`1">
            <summary>
            CMS DataSet class. Enhancement to DataSet to provide strongly typed collection side-by-side with the data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDataSet`1">
            <summary>
            Base object DataSet class. Enhancement to DataSet to provide strongly typed collection side-by-side with the data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDataSet`1.mItems">
            <summary>
            Items in the DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataSet`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataSet`1.#ctor(System.Data.DataSet)">
            <summary>
            Constructor, creates new DataSet using data from the given DataSet
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataSet`1.NewCollection">
            <summary>
            Creates new collection of the objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataSet`1.GetObjectEnumerator">
            <summary>
            Gets the object enumerator for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataSet`1.GetEnumerator">
            <summary>
            Returns the strongly typed enumerator for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator for this collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataSet`1.Items">
            <summary>
            Items in the DataSet
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataSet`1.IsReadOnly">
            <summary>
            If true, the dataset is cached (not allowed to modify, must be cloned)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoDataSet`1.mObject">
            <summary>ct
            Info object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.#ctor(System.Data.DataSet)">
            <summary>
            Constructor, creates new DataSet using data from the given DataSet
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.#ctor(`0[])">
            <summary>
            Constructor
            </summary>
            <param name="items">Source items from which the DataSet will be created</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.NewCollection">
            <summary>
            Creates new collection of the objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.Clone">
            <summary>
            Clones the DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.GetNewObject(System.Data.DataRow)">
            <summary>
            Gets new instance of the object hosted in this DataSet
            </summary>
            <param name="dr">Data row with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.AddItems(`0[])">
            <summary>
            Adds the items to the data set
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.CreateEmptyDataSet">
            <summary>
            Creates the empty DataSet based on the current type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.GetEnumerator">
            <summary>
            Gets the strongly typed enumerator for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.CMS#DataEngine#IInfoDataSet#GetNewObject(System.Data.DataRow)">
            <summary>
            Gets new instance of the object hosted in this DataSet
            </summary>
            <param name="dr">Data row with the source data</param>
        </member>
        <member name="P:CMS.DataEngine.InfoDataSet`1.Object">
            <summary>
            Info object instance the provider is working with.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoDataSet`1.Items">
            <summary>
            Items in the DataSet
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CombinedInfoObjectCollection">
            <summary>
            Collection that combines several info object collections of specific type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CombinedObjectCollection`2">
            <summary>
            Collection that combines several object collections of specific type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CombinedObjectCollection`2.mCollections">
            <summary>
            List of inner collections.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedObjectCollection`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedObjectCollection`2.Add(`0)">
            <summary>
            Adds the collection to the combined collection.
            </summary>
            <param name="collection">Collection to add</param>
        </member>
        <member name="M:CMS.DataEngine.CombinedObjectCollection`2.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedObjectCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator over the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedObjectCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator over the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedInfoObjectCollection.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FilteredInfoObjectCollection">
            <summary>
            Provides filtering over the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FilteredInfoObjectCollection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.FilteredInfoObjectCollection.GetWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given filter.
            </summary>
            <param name="filterName">Filter name</param>
        </member>
        <member name="P:CMS.DataEngine.FilteredInfoObjectCollection.Item(System.String)">
            <summary>
            Name for the filtering.
            </summary>
            <param name="filterName">Filter name</param>
        </member>
        <member name="P:CMS.DataEngine.FilteredInfoObjectCollection.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="T:CMS.DataEngine.InfoCollectionSettings">
            <summary>
            Settings for the info object collection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseCollectionSettings">
            <summary>
            Settings for the base object collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Index">
            <summary>
            Index of the collection in repository
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.NiceName">
            <summary>
            Nice name of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Where">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.DynamicWhere">
            <summary>
            Dynamic where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.OrderBy">
            <summary>
            Order by clause
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.TopN">
            <summary>
            Top N items to get
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Columns">
            <summary>
            Columns to get from database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.NameColumn">
            <summary>
            Name column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCollectionSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCollectionSettings.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCollectionSettings.SiteID">
            <summary>
            Site ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCollectionSettings.CollectionFactory">
            <summary>
            Factory to provide new collection object
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractCMSQueryProvider`1">
            <summary>
            Abstract LINQ query provider for CMS objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessExpression(System.Linq.Expressions.Expression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the given expression.
            </summary>
            <param name="exp">Expression to process</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsUnary(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsComputeBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsLogicalBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsComparisonBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessBinding(System.Linq.Expressions.MemberBinding,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member binding.
            </summary>
            <param name="binding">Binding to process</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessElementInitializer(System.Linq.Expressions.ElementInit,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the element initializer.
            </summary>
            <param name="initializer">Initializer to process</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessUnary(System.Linq.Expressions.UnaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the unary expression.
            </summary>
            <param name="u">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessBinary(System.Linq.Expressions.BinaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the binary expression.
            </summary>
            <param name="b">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessTypeIs(System.Linq.Expressions.TypeBinaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the type IDs.
            </summary>
            <param name="b">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessConstant(System.Linq.Expressions.ConstantExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Constant expression.
            </summary>
            <param name="c">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessConditional(System.Linq.Expressions.ConditionalExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the conditional expression.
            </summary>
            <param name="c">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessParameter(System.Linq.Expressions.ParameterExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the parameter.
            </summary>
            <param name="p">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberAccess(System.Linq.Expressions.MemberExpression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member access.
            </summary>
            <param name="m">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMethodCall(System.Linq.Expressions.MethodCallExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the method call.
            </summary>
            <param name="m">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the list of expressions.
            </summary>
            <param name="original">List</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberAssignment(System.Linq.Expressions.MemberAssignment,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member assignment.
            </summary>
            <param name="assignment">Assignment</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member member binding.
            </summary>
            <param name="binding">Binding</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberListBinding(System.Linq.Expressions.MemberListBinding,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member list binding.
            </summary>
            <param name="binding">Binding</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding},CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the binding list.
            </summary>
            <param name="original">List</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit},CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Process list of element initializers.
            </summary>
            <param name="original">List</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessLambda(System.Linq.Expressions.LambdaExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the lambda expression.
            </summary>
            <param name="lambda">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessNew(System.Linq.Expressions.NewExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the new expression.
            </summary>
            <param name="nex">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberInit(System.Linq.Expressions.MemberInitExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes initialization of the member.
            </summary>
            <param name="init">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessListInit(System.Linq.Expressions.ListInitExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the initialization of the list.
            </summary>
            <param name="init">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessNewArray(System.Linq.Expressions.NewArrayExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the array.
            </summary>
            <param name="na">Array</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessInvocation(System.Linq.Expressions.InvocationExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Process the invocation of the method.
            </summary>
            <param name="iv">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="T:CMS.DataEngine.CMSQueryProvider`1">
            <summary>
            LINQ query provider for CMS objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.#ctor(System.Linq.IQueryable)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source of the data</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query from given expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query from given expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query.
            </summary>
            <param name="expression">Query expression</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query.
            </summary>
            <param name="expression">Query expression</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.CreateQueryInternal``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query from given expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.LinqToObjectsFallback``1(System.Linq.Expressions.Expression,System.Collections.IEnumerable,System.Linq.IQueryable{``0}@)">
            <summary>
            Fallback to LINQ to objects
            </summary>
            <param name="expression">Expression to execute</param>
            <param name="source">Source data</param>
            <param name="result">Returning the result</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ExecuteInternal(System.Linq.Expressions.Expression)">
            <summary>
            Gets the result of the expression
            </summary>
            <param name="expression">Expression to execute</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.LoadExpression(System.Linq.Expressions.Expression)">
            <summary>
            Loads the given expression.
            </summary>
            <param name="ex">Expression to load</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessUnary(System.Linq.Expressions.UnaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the unary expression.
            </summary>
            <param name="u">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessBinary(System.Linq.Expressions.BinaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the binary expression.
            </summary>
            <param name="b">Expression</param>
            <param name="s">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessConstant(System.Linq.Expressions.ConstantExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Constant expression.
            </summary>
            <param name="c">Expression</param>
            <param name="s">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessMemberAccess(System.Linq.Expressions.MemberExpression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member access.
            </summary>
            <param name="m">Expression</param>
            <param name="s">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp"></param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessMethodCall(System.Linq.Expressions.MethodCallExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the method call.
            </summary>
            <param name="m">Expression</param>
            <param name="settings">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Removes the quotes from the expression.
            </summary>
            <param name="e">Expression</param>
        </member>
        <member name="P:CMS.DataEngine.CMSQueryProvider`1.QuerySource">
            <summary>
            Data source object
            </summary>
        </member>
        <member name="T:CMS.DataEngine.EnumerableWrapper`1">
            <summary>
            Wrapper to make the given object purely enumerable
            </summary>
        </member>
        <member name="M:CMS.DataEngine.EnumerableWrapper`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.EnumerableWrapper`1.System#Collections#Generic#IEnumerable{TObject}#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.EnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.EnumerableWrapper`1.Source">
            <summary>
            Source data
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExpressionBuilderSettings">
            <summary>
            Object to encapsulate the expression builder settings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExpressionBuilderSettings.#ctor(CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Constructor
            </summary>
            <param name="parentSettings">Parent settings</param>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.Result">
            <summary>
            String builder where to collect results
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.MemberSeparator">
            <summary>
            Separator for member access
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.IsWhereCondition">
            <summary>
            If true, the built expression is a where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.IsColumnList">
            <summary>
            If true, the built expression is a column list
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MissingValue">
            <summary>
            Missing value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MissingValue.ToString">
            <summary>
            ToString, returns (missing).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryParameters">
            <summary>
            Query parameters container.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.Name">
            <summary>
            Query name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.Text">
            <summary>
            Query text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.Type">
            <summary>
            Query type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.RequiresTransaction">
            <summary>
            Requires transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.ConnectionStringName">
            <summary>
            Connection string name to use
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.Params">
            <summary>
            Query parameters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.ExecutionType">
            <summary>
            Execution type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.mAllowCache">
            <summary>
            If true, caching of the query is allowed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.UseNewConnection">
            <summary>
            If true, a new connection instance is created for this query execution
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.MaxRecords">
            <summary>
            Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParameters.Offset">
            <summary>
            Index of first record to get
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.#ctor(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">Requires transaction</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.#ctor(CMS.DataEngine.QueryInfo,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Constructor.
            </summary>
            <param name="qi">Query info</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.#ctor(System.String,System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,CMS.DataEngine.QueryMacros,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="queryName">Query name in format application.class.queryname</param>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="requiresTransaction">Requires transaction</param>
            <param name="macros">Query expressions</param>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.ResolveMacros">
            <summary>
            Resolves the query macros.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.AllowCache">
            <summary>
            If true, caching of the query is allowed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Macros">
            <summary>
            Query expressions
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Columns">
            <summary>
            Columns to get.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Where">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.OrderBy">
            <summary>
            Order by.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.TopN">
            <summary>
            Top N items.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectRelationshipsCollection">
            <summary>
            Collection of object relationships filtered by relationship name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectRelationshipsCollection.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">Parent storage</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectRelationshipsCollection.GetWhereCondition(System.String)">
            <summary>
            Gets the where condition for filtering.
            </summary>
            <param name="filterName">Filter name</param>
        </member>
        <member name="T:CMS.DataEngine.CollectionPropertyTransformation`1">
            <summary>
            Property transformation for a collection. Enumerates the properties of the collection objects and does transformation according to that property.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CollectionPropertyTransformation`1.mCachedResults">
            <summary>
            Cached results of the transformation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyTransformation`1.#ctor(CMS.DataEngine.InfoObjectCollection,System.Func{CMS.DataEngine.InfoObjectCollection,System.String,`0},System.Func{CMS.DataEngine.InfoObjectCollection,System.Collections.Generic.List{System.String}})">
            <summary>
            Constructor
            </summary>
            <param name="collection">Parent collection</param>
            <param name="transformation">Transformation function</param>
            <param name="propertiesTransformation">Transformation to get list of properties</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyTransformation`1.GetProperty(System.String)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyTransformation`1.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.CacheResults">
            <summary>
            If true, the results of the transformation are cached
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.CaseSensitive">
            <summary>
            If true, the transformation is case sensitive (default is case insensitive)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.ParentCollection">
            <summary>
            Parent collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.Transformation">
            <summary>
            Transformation function
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.PropertiesTransformation">
            <summary>
            Transformation function for list of properties
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Interface to access collections through string indexers by name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.Item(System.String)">
            <summary>
            Interface to access collections through string indexers by name
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CollectionPropertyWrapper">
            <summary>
            Base class for the collection property wrapper
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CollectionPropertyWrapper`1">
            <summary>
            Wrapper that transforms the collection to values of its object properties
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.#ctor(CMS.DataEngine.ObjectCollection{`0},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="collection">Collection to wrap</param>
            <param name="propertyName">Property to extract</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.GetProperty(`0)">
            <summary>
            Gets the property value for the given object
            </summary>
            <param name="obj">Obj from which to take the property</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the general enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Collection">
            <summary>
            Collection to wrap
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.PropertyName">
            <summary>
            Property name to extract
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Item(System.String)">
            <summary>
            Returns the property of an object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Item(System.Int32)">
            <summary>
            Gets or sets the object on specific index.
            </summary>
            <param name="index">Object index to get</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.CMS#Base#IIndexable#Item(System.Int32)">
            <summary>
            Integer indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectProperty">
            <summary>
            Object property wrapper
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectProperty.mValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.#ctor(System.Object)">
            <summary>
            Constructor - Anonymous object property
            </summary>
            <param name="value">Property value</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.#ctor(CMS.Base.IDataContainer,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="infoObj">Info object</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.ToString">
            <summary>
            Converts the object value to string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.InjectValue(System.Object)">
            <summary>
            Injects the specified value to the property without modifying the object
            </summary>
            <param name="value">Value to inject</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.op_Implicit(CMS.DataEngine.ObjectProperty)~System.String">
            <summary>
            Implicit operator for conversion from object property to string
            </summary>
            <param name="op">Object property</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectProperty.PropertyName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectProperty.Object">
            <summary>
            Parent object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectProperty.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SelectCondition">
            <summary>
            Provides the selection where condition for ABC IN (1, 2, 3, 4, 5, ...) for very large number of items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.ALL_INLINE">
            <summary>
            Constant for Inline limit property defining that all items should be processed inline
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mInlineLimit">
            <summary>
            Limit of the number of items for the inline evaluation.
            
            If there are more items than this limit, the where condition is returned in format:
            ColumnName IN (SELECT ItemName FROM Func_Selection_ParseNames(@List_949939be_1bf7_48d9_bbd6_57facb5c8001))
            
            Otherwise, inline format is used:
            ColumnName IN (Value1, Value2, ...)
            
            If set to -1, inline format is always used.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mWhereCondition">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mGroupGUID">
            <summary>
            Group GUID for the temp table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mParameters">
            <summary>
            Query parameters.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.#ctor">
            <summary>
            Constructor, prepares empty condition object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.#ctor(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Constructor, prepares empty condition object bound to specific query parameters.
            </summary>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.#ctor(System.String,System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Constructor, prepares the condition over IDs.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">ID values for the IN expression</param>
            <param name="negation">Indicates if the negation should be used in the condition (ABC NOT IN (1, 2, 3 ...))</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.Prepare(System.String,System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Prepares the condition over IDs.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">ID values for the IN expression</param>
            <param name="negation">Indicates if the negation should be used in the condition (ABC NOT IN (1, 2, 3 ...))</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.PrepareIDs(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Prepares the condition over IDs.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">ID values for the IN expression</param>
            <param name="negation">Indicates if the negation should be used in the condition (ABC NOT IN (1, 2, 3 ...))</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Constructor, prepares the condition over names (strings).
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">Name values for the IN expression</param>
            <param name="guids">If true, the values are GUIDs</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.Prepare(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean)">
            <summary>
            Prepares the condition over names (strings).
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">Name values for the IN expression</param>
            <param name="guids">If true, the values are GUIDs</param>
            <param name="negation">Indicates if the negation should be used in the condition (ABC NOT IN (1, 2, 3 ...))</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.Dispose">
            <summary>
            Disposes the object and removes the selection from the database if it was allocated in the temp table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.PrepareWhereCondition(System.String,System.String,System.String,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Prepares the where condition for the given list.
            </summary>
            <param name="usedColumn">Column to be used in the temp table</param>
            <param name="method">Method to use for preparation</param>
            <param name="columnName">Column name for the where condition</param>
            <param name="values">Values for the where condition</param>
            <param name="negation">Indicates if the negation should be used in the condition (ABC NOT IN (1, 2, 3 ...))</param>
        </member>
        <member name="P:CMS.DataEngine.SelectCondition.WhereCondition">
            <summary>
            Returns the resulting where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectCondition.IsEmpty">
            <summary>
            Returns true if the selection is empty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectCondition.InlineLimit">
            <summary>
            Limit of the number of items for the inline evaluation.
            
            If there are more items than this limit, the where condition is returned in format:
            ColumnName IN (SELECT ItemName FROM Func_Selection_ParseNames(@List_949939be_1bf7_48d9_bbd6_57facb5c8001))
            
            Otherwise, inline format is used:
            ColumnName IN (Value1, Value2, ...)
            
            If set to -1, inline format is always used.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SelectConditionList">
            <summary>
            List of select conditions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectConditionList.mList">
            <summary>
            Inner list of select conditions.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectConditionList.Dispose">
            <summary>
            Disposes the list.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectConditionList.Add(CMS.DataEngine.SelectCondition)">
            <summary>
            Adds the condition into the list.
            </summary>
            <param name="condition">Condition to add</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractProviderDictionary">
            <summary>
            Abstract provider dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProviderDictionary.COMMAND_CLEAR">
            <summary>
            Clear command.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProviderDictionary.COMMAND_INVALIDATE">
            <summary>
            Invalidate command.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProviderDictionary.MAX_GENERATION">
            <summary>
            Maximum number of the object generations to use for the loading.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProviderDictionary.ALL_GENERATIONS">
            <summary>
            Special constant for all generations of the objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProviderDictionary.mDictionaries">
            <summary>
            Hashtable of all dictionaries.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractProviderDictionary.mEnableHashTables">
            <summary>
            Enable hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.GetDictionaryDisplayName(CMS.DataEngine.IProviderDictionary)">
            <summary>
            Gets the dictionary display name
            </summary>
            <param name="dict">Dictionary</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.GetDisplayNameResourceKey(System.String)">
            <summary>
            Gets the display name resource key for the dictionary
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractProviderDictionary.Dictionaries">
            <summary>
            Hashtable of all dictionaries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProviderDictionary.EnableHashTables">
            <summary>
            Enable hashtables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProviderDictionary.ReloadDictionary">
            <summary>
            If true, the dictionary should be reloaded.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderGuidDictionary">
            <summary>
            Provider GUID indexed dictionary.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderInfoDictionary`1">
            <summary>
            Base info dictionary for info providers
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderDictionary`2">
            <summary>
            Provider dictionary.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IProviderDictionaryTemplate`1">
            <summary>
            Provider dictionary interface template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.Contains(System.Object,`0@)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.Contains(System.Object)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.Remove(System.Object)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.Add(System.Object,`0)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.ClearOlder(System.DateTime)">
            <summary>
            Removes the objects older that specified time.
            </summary>
            <param name="time">Minimum time to keep the object</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.ClearExpired">
            <summary>
            Clears all the expired items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTasks">If true, logs the web farm tasks</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.Invalidate(System.Boolean)">
            <summary>
            Invalidates the dictionary content.
            </summary>
            <param name="logTasks">If true, logs the web farm tasks</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionaryTemplate`1.GetRealCount">
            <summary>
            Gets the real count of the objects in the dictionary
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionaryTemplate`1.DataIsValid">
            <summary>
            Returns true if the dictionary content is valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionaryTemplate`1.LogWebFarmTasks">
            <summary>
            Gets / sets if the dictionary should log the web farm tasks
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionaryTemplate`1.ReloadDictionary">
            <summary>
            If true, the dictionary should be reloaded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionaryTemplate`1.Count">
            <summary>
            Items count.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mDictionary">
            <summary>
            Inner dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.DefaultWebFarmTaskType">
            <summary>
            Web farm task type to log
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mObjectLatency">
            <summary>
            Object latency of the hashtable.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mLogWebFarmTasks">
            <summary>
            Logs web farm tasks.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mDataIsValid">
            <summary>
            True if the dictionary content is valid.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mReloadDictionary">
            <summary>
            If true, the dictionary should be reloaded.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mEnabled">
            <summary>
            If true, the provider functionality is enabled.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionary`2.mParentCollection">
            <summary>
            Parent dictionary collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection,System.Collections.IEqualityComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
            <param name="comparer">Equality comparer for the items</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.CheckLogTask(`1)">
            <summary>
            Returns true if the logging of the tasks is enabled for the given object
            </summary>
            <param name="value">Object value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ConvertKey(System.Object)">
            <summary>
            Converts the key to a specific type
            </summary>
            <param name="key">Key to convert</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Contains(`0,`1@)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Contains(System.Object,`1@)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Contains(`0)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Contains(System.Object)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Remove(`0)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Delete(`0)">
            <summary>
            Removes the specified object and logs the web farm task.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Remove(`0,System.Boolean)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Remove(System.Object)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Update(`0,`1)">
            <summary>
            Updates the specified object and logs the web farm task.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Add(`0,`1,System.Boolean)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Add(System.Object,`1)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ClearOlder(System.DateTime)">
            <summary>
            Removes the objects older that specified time.
            </summary>
            <param name="time">Minimum time to keep the object</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ClearExpired">
            <summary>
            Clears all the expired items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Invalidate(System.Boolean)">
            <summary>
            Invalidates the dictionary content.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.LogWebFarmTask(`0,System.String)">
            <summary>
            Logs the web farm task for specified object key.
            </summary>
            <param name="key">Object key</param>
            <param name="taskType">Task type</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.LogWebFarmTask(System.String,System.String)">
            <summary>
            Logs the web farm task with specified task data.
            </summary>
            <param name="taskTextData">Task text data</param>
            <param name="taskType">Task type</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ReloadDictionaries(System.String,System.Boolean)">
            <summary>
            Reloads the dictionaries of specified object type.
            </summary>
            <param name="objectType">Object type</param>
            <param name="logTasks">If true, the web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.GetDictionaries(System.String)">
            <summary>
            Gets the Arraylist of dictionaries of specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Processes the given web farm task.
            </summary>
            <param name="taskTarget">Task target</param>
            <param name="taskTextData">Task text data</param>
            <param name="taskBinaryData">Task binary data</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.GetDictionaryName(System.String,System.String)">
            <summary>
            Gets the provider name.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.NextGenerationAvailable">
            <summary>
            Returns true if the next generation of the objects is available.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.LoadNextGeneration">
            <summary>
            Loads the next generation of the objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.GetRealCount">
            <summary>
            Gets the real count of the objects in the dictionary
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.RemoveInternal(`0)">
            <summary>
            Removes the key from the internal dictionary
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.TryGetInternal(`0,`1@)">
            <summary>
            Returns true if the internal dictionary contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ClearInternal">
            <summary>
            Clears the internal dictionary
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ContainsInternal(`0)">
            <summary>
            Returns true if the internal dictionary contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.RemovedValue">
            <summary>
            Value that is set to the specific key if the value is removed. If not set, the item is completely removed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Dictionary">
            <summary>
            Inner dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Values">
            <summary>
            Returns the values of the dictionary
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Item(`0)">
            <summary>
            Dictionary indexer.
            </summary>
            <param name="key">Object key</param>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ObjectLatency">
            <summary>
            Object latency in minutes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Count">
            <summary>
            Items count (all keys).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.IsEmpty">
            <summary>
            Returns true if the Dictionary is empty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.DataIsValid">
            <summary>
            Returns true if the dictionary content is valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Name">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.LogWebFarmTasks">
            <summary>
            Gets / sets if the dictionary should log web farm tasks
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ReloadDictionary">
            <summary>
            If true, the dictionary should be reloaded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Enabled">
            <summary>
            If true, the dictionary is enabled.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ParentCollection">
            <summary>
            Parent dictionary collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.UseWeakReferences">
            <summary>
            If true, the weak references are used for the items so the memory can be cleared upon request
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.CheckLogTask(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the logging of the tasks is enabled for the given object
            </summary>
            <param name="value">Object value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.Add(`0,CMS.DataEngine.BaseInfo,System.Boolean)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.TryGetInternal(`0,CMS.DataEngine.BaseInfo@)">
            <summary>
            Returns true if the internal dictionary contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="P:CMS.DataEngine.ProviderInfoDictionary`1.CheckValidity">
            <summary>
            If true (default), the dictionary checks the validity of the object upon its retrieval and doesn't return invalid objects. The object must support invalidation in order to support this.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IProviderDictionary">
            <summary>
            Provider dictionary interface.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.Name">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.ColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderGuidDictionary.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderGuidDictionary.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderGuidDictionary.ConvertKey(System.Object)">
            <summary>
            Converts the key to a specific type
            </summary>
            <param name="key">Key to convert</param>
        </member>
        <member name="T:CMS.DataEngine.ProviderIntDictionary">
            <summary>
            Provider integer indexed dictionary.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderIntDictionary.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderIntDictionary.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderIntDictionary.ConvertKey(System.Object)">
            <summary>
            Converts the key to a specific type
            </summary>
            <param name="key">Key to convert</param>
        </member>
        <member name="T:CMS.DataEngine.ProviderStringDictionary">
            <summary>
            Provider string indexed dictionary. Represent the case-insensitive object storage optimized for reading.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringDictionary.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringDictionary.CheckLogTask(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the logging of the tasks is enabled for the given object
            </summary>
            <param name="value">Object value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringDictionary.Add(System.String,CMS.DataEngine.BaseInfo,System.Boolean)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringDictionary.ConvertKey(System.Object)">
            <summary>
            Converts the key to a specific type
            </summary>
            <param name="key">Key to convert</param>
        </member>
        <member name="T:CMS.DataEngine.LoadHashtableEnum">
            <summary>
            Enumeration of the hashtable loading options.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LoadHashtableEnum.None">
            <summary>
            Do not load any objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LoadHashtableEnum.All">
            <summary>
            Load all objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LoadHashtableEnum.Generations">
            <summary>
            Load objects by generations. The property GenerationColumn must be set in order to use this type of loading.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LoadHashtableEnum.FirstGeneration">
            <summary>
            Load by generations. The property GenerationColumn must be set in order to use this type of loading.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderDictionaryCollection">
            <summary>
            Collection of the provider dictionaries.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mLoadedGeneration">
            <summary>
            Currently loaded generation of the objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mParameter">
            <summary>
            Custom parameter passed to a LoadGeneration method.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mName">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mLoadingType">
            <summary>
            Default loading type of the items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mCollections">
            <summary>
            Hashtable of all dictionary collections.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mById">
            <summary>
            ID dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mByCodeName">
            <summary>
            Code name dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mByFullName">
            <summary>
            Full name dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mByGuid">
            <summary>
            GUID dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mByGuidAndSite">
            <summary>
            GUID and site ID dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mStringValues">
            <summary>
            Values dictionary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderDictionaryCollection.mLoadCollectionsAfterClear">
            <summary>
            Indicates if collection should be filled with new data after clearing the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.#ctor(System.String,CMS.DataEngine.LoadHashtableEnum,CMS.DataEngine.ProviderDictionaryCollection.LoadGenerationEventHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="loadingType">Loading type</param>
            <param name="loadCallback">Callback function to load the objects</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.#ctor(System.String,CMS.DataEngine.LoadHashtableEnum,CMS.DataEngine.ProviderDictionaryCollection.LoadGenerationParamsEventHandler,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="loadingType">Loading type</param>
            <param name="loadCallback">Callback function with parameter to load the objects</param>
            <param name="parameter">Additional parameter passed to a load generation method</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.LoadDefaultItems">
            <summary>
            Loads the default items of the dictionaries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.NextGenerationAvailable">
            <summary>
            Returns true if the next generation of the objects is available.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.LoadAll">
            <summary>
            Ensures loading of all the items. Keeps the original loading type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.LoadNextGeneration">
            <summary>
            Loads the next generation of the dictionaries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.LoadGeneration(System.Int32)">
            <summary>
            Loads specific generation of the objects.
            </summary>
            <param name="generation">Generation to load</param>
        </member>
        <member name="E:CMS.DataEngine.ProviderDictionaryCollection.OnLoadGeneration">
            <summary>
            Event which is called when loading of specific generation is requested.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.ProviderDictionaryCollection.OnLoadGenerationParams">
            <summary>
            Event which is called when loading of specific generation is requested with additional custom parameter.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.AllGenerationsLoaded">
            <summary>
            Returns true if all generations were loaded
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.LoadedGeneration">
            <summary>
            Returns the number of the loaded generation of the objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.Collections">
            <summary>
            Hashtable of all dictionary collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.Parameter">
            <summary>
            Custom parameter passed to a LoadGeneration method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.Name">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ById">
            <summary>
            ID dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByCodeName">
            <summary>
            CodeName dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByFullName">
            <summary>
            FullName dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByGuid">
            <summary>
            Guid dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByGuidAndSite">
            <summary>
            Guid and site dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.StringValues">
            <summary>
            String values dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.LoadCollectionsAfterClear">
            <summary>
            Indicates if collection should be filled with new data after clearing the collection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderDictionaryCollection.LoadGenerationEventHandler">
            <summary>
            Returns the list of objects of the given generation.
            </summary>
            <param name="generation">Generation to load</param>
            <returns>Returns true if the generation was not empty</returns>
        </member>
        <member name="T:CMS.DataEngine.ProviderDictionaryCollection.LoadGenerationParamsEventHandler">
            <summary>
            Returns the list of objects of the given generation.
            </summary>
            <param name="generation">Generation to load</param>
            <param name="parameter">Additional parameter passed to a load generation method</param>
            <returns>Returns true if the generation was not empty</returns>
        </member>
        <member name="T:CMS.DataEngine.ProviderStringValueDictionary">
            <summary>
            Provider string indexed dictionary. Represent the case-insensitive object storage optimized for reading.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderStringValueDictionary`1">
            <summary>
            Provider string indexed dictionary. Represent the case-insensitive object storage optimized for reading.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringValueDictionary`1.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringValueDictionary`1.Contains(System.String,System.String@)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderStringValueDictionary.#ctor(System.String,System.String,CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="parentCollection">Parent dictionary collection</param>
        </member>
        <member name="T:CMS.DataEngine.ExportFormatEnum">
            <summary>
            Export format enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.XML">
            <summary>
            XML format
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.JSON">
            <summary>
            JSON format
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.ATOM10">
            <summary>
            Atom 1.0 format
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.RSS20">
            <summary>
            RSS 2.0 format
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LayoutTypeEnum">
            <summary>
            Layout type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LayoutTypeEnum.Ascx">
            <summary>
            ASCX layout (with ASPX code).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LayoutTypeEnum.Html">
            <summary>
            HTML layout (with resolved macros).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FeatureEnum">
            <summary>
            Feature types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Unknown">
            <summary>
            Unknown feature.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DocumentLevelPermissions">
            <summary>
            Document level permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.BizForms">
            <summary>
            BizForms.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.WorkflowVersioning">
            <summary>
            Workflow versioning.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.AdvancedWorkflow">
            <summary>
            Advanced workflow.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.MarketingAutomation">
            <summary>
            Marketing automation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Forums">
            <summary>
            Forums.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Newsletters">
            <summary>
            Newsletters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Multilingual">
            <summary>
            Multilingual.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Staging">
            <summary>
            Staging.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Ecommerce">
            <summary>
            Ecommerce.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Webfarm">
            <summary>
            Webfarm.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Polls">
            <summary>
            Polls.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.WebAnalytics">
            <summary>
            Web analytics.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Blogs">
            <summary>
            Blogs.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.EventManager">
            <summary>
            Event manager.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Administrators">
            <summary>
            Global administrators.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Editors">
            <summary>
            Editors.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SiteMembers">
            <summary>
            Site members.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Documents">
            <summary>
            Documents.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Subscribers">
            <summary>
            Subscribers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.BannedIP">
            <summary>
            Banned IP.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Groups">
            <summary>
            Community.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.CustomTables">
            <summary>
            Custom Tables.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Friends">
            <summary>
            Friends.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Notifications">
            <summary>
            Notifications.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.MessageBoards">
            <summary>
            Message boards.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.UserContributions">
            <summary>
            User contributions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.WindowsLiveID">
            <summary>
            Windows live id.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.OnlineUsers">
            <summary>
            On-line users.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Messaging">
            <summary>
            Messaging.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ADImportTool">
            <summary>
            Active directory import tool.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.OpenID">
            <summary>
            OpenID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.WebDav">
            <summary>
            WebDav.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DocumentLibrary">
            <summary>
            Document library.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ProjectManagement">
            <summary>
            Project management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Membership">
            <summary>
            Membership.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.FaceBookConnect">
            <summary>
            Facebook connect.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.LinkedIn">
            <summary>
            Linked in.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.IntegrationBus">
            <summary>
            System integration bus.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ObjectVersioning">
            <summary>
            Object versioning.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.HealthMonitoring">
            <summary>
            Health monitoring.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ContactManagement">
            <summary>
            Contact management
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.LeadScoring">
            <summary>
            Lead scoring
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ABTesting">
            <summary>
            A/B Testing
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.MVTesting">
            <summary>
            MV testing
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.CampaignAndConversions">
            <summary>
            Campaign and conversions
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ContentPersonalization">
            <summary>
            Content personalization
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Segmentation">
            <summary>
            Segmentation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.MultipleSMTPServers">
            <summary>
            Multiple SMTP servers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SchedulerWinService">
            <summary>
            Scheduler windows service
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.TranslationServices">
            <summary>
            Translation services
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Chat">
            <summary>
            Chat module.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DataCom">
            <summary>
            Data.com connector
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SalesForce">
            <summary>
            SalesForce connector
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.BannerManagement">
            <summary>
            Banner management
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DBSeparation">
            <summary>
            Contact management database separation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DeviceProfiles">
            <summary>
            Device profiles
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Wireframing">
            <summary>
            Wireframing
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.NewsletterABTesting">
            <summary>
            Newsletter A/B Testing
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.NewsletterTracking">
            <summary>
            Newsletter tracking (open e-mail, click through and bounces)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SocialMarketing">
            <summary>
            Publishing to Facebook and Twitter social networks
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SocialMarketingInsights">
            <summary>
            Providing access to social media analytics information
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Personas">
            <summary>
            Displaying content to visitors based on Personas
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SharePoint">
            <summary>
            SharePoint integration
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectActionEnum">
            <summary>
            Version action enums.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectActionEnum.Insert">
            <summary>
            Insert.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectActionEnum.Edit">
            <summary>
            Edit.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectActionEnum.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectPriorityEnum">
            <summary>
            Enumeration of priorities of objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectPriorityEnum.Low">
            <summary>
            Lowest priority
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectPriorityEnum.High">
            <summary>
            Highest priority
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectStatusEnum">
            <summary>
            Enumeration of the object status.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.New">
            <summary>
            New object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.Unchanged">
            <summary>
            Object that didn't change.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.Changed">
            <summary>
            Object that has changed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.ToBeDeleted">
            <summary>
            Object that is flagged to be deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.NewCultureVersion">
            <summary>
            New culture version.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.NewLink">
            <summary>
            New linked object (document).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.WasDeleted">
            <summary>
            Object that has been deleted from the database
            </summary>
        </member>
        <member name="T:CMS.DataEngine.OperationTypeEnum">
            <summary>
            Operation type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Synchronization">
            <summary>
            Synchronization, full data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Export">
            <summary>
            Export, full data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.ExportSelection">
            <summary>
            Export selection (only ID and code name column, no metafiles or relationships).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Versioning">
            <summary>
            Object version, complete data
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Integration">
            <summary>
            Data are the same as for the Synchronization. Used as a distinguisher for special cases.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.PermissionsEnum">
            <summary>
            Permissions enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Read">
            <summary>
            Read permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Modify">
            <summary>
            Modify permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Create">
            <summary>
            Creates permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Delete">
            <summary>
            Delete permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Destroy">
            <summary>
            Destroy permission.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.UpdateResultEnum">
            <summary>
            Result of the update operation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.NotProcessed">
            <summary>
            Not processed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.OK">
            <summary>
            Imported correctly.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.Error">
            <summary>
            Imported with errors.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.Skipped">
            <summary>
            The object was skipped.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.PostProcess">
            <summary>
            Imported, but post processing required.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.WorkflowStepTypeEnum">
            <summary>
            Workflow step types enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Undefined">
            <summary>
            Undefined workflow step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Start">
            <summary>
            General start step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.DocumentEdit">
            <summary>
            Special type of step for document edit step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Standard">
            <summary>
            Standard workflow step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Condition">
            <summary>
            Conditional step with else branch.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Multichoice">
            <summary>
            Step with several conditional choices. (If multiple conditions match, user must choose one.)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.MultichoiceFirstWin">
            <summary>
            Step with several conditional choices. (If multiple conditions match, first is used.)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Userchoice">
            <summary>
            Step with several conditional choices. (User must always choose.)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Wait">
            <summary>
            Wait step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Action">
            <summary>
            Step with custom action.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Finished">
            <summary>
            Step with custom action.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.DocumentPublished">
            <summary>
            Special type of step for document published step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.DocumentArchived">
            <summary>
            Special type of step for document archived step.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDNotTranslatedException">
            <summary>
            Thrown when identifier was required and was not translated
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDNotTranslatedException.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="columnName">Column name of not translated object</param>
            <param name="codeName">Code name of not translated object</param>
            <param name="className">Class name of not translated object</param>
            <param name="id">Identifier of not translated object</param>
        </member>
        <member name="M:CMS.DataEngine.IDNotTranslatedException.GetErrorMessage(System.String,System.String,System.String,System.Int32)">
            <summary>
            Builds exception error message.
            </summary>
            <param name="columnName">Column name of not translated object</param>
            <param name="codeName">Code name of not translated object</param>
            <param name="className">Class name of not translated object</param>
            <param name="id">Identifier of not translated object</param>
            <returns>Error message based on given parameters</returns>
        </member>
        <member name="M:CMS.DataEngine.IDNotTranslatedException.Clone">
            <summary>
            Returns clone of the exception
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.ClassName">
            <summary>
            Class name of not translated object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.CodeName">
            <summary>
            Code name of not translated object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.ColumnName">
            <summary>
            Column name of not translated object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.ID">
            <summary>
            Identifier of not translated object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.PermissionCheckException">
            <summary>
            Base class for the exceptions raised in permissions check.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.PermissionCheckException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleName">Name of the module the permission of which failed</param>
            <param name="permissionName">Name of the permission failed</param>
            <param name="siteName">Name of the site where the permission failed</param>
        </member>
        <member name="M:CMS.DataEngine.PermissionCheckException.Clone">
            <summary>
            Returns clone of the exception
            </summary>
        </member>
        <member name="P:CMS.DataEngine.PermissionCheckException.ModuleName">
            <summary>
            Name of the module the permission of which failed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.PermissionCheckException.PermissionFailed">
            <summary>
            Name of the permission failed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.PermissionCheckException.SiteName">
            <summary>
            Name of the site where the permission failed.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExportObjectSettings">
            <summary>
            Class encapsulating parameters for GeneralizedInfo serialization (export).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings">
            <summary>
            Class encapsulating parameters for GeneralizedInfo serialization (export).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.RequestStockKey">
            <summary>
            Returns key for request stock helper caching.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.BindingDuplicities">
            <summary>
            Gets duplicities for object bindings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.TranslationHelper">
            <summary>
            Translation helper to pass to the callback methods.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.Parameter">
            <summary>
            Custom object passed as a parameter to export settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.Operation">
            <summary>
            Operation type (Export / Synchronization / etc.). According to this parameter export determines which child / binding objects to include in the export.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.CreateHierarchy">
            <summary>
            If true, result will be hierarchical (children, bindings in lower level than parent etc.).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.HandleBoundObjects">
            <summary>
            If false, all bound objects (such as children or all types of bindings) are not being handled.
            If true, handling of these objects is determined by more specific settings (such as IncludeChildren, IncludeBindings, etc.)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeChildren">
            <summary>
            If true, child objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeBindings">
            <summary>
            If true, binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeOtherBindings">
            <summary>
            If true, other binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeSiteBindings">
            <summary>
            If true, site binding objects are included in the result. This setting is applied only when IncludeBindings is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeTranslations">
            <summary>
            If true, translation table is exported within the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessTranslations">
            <summary>
            If true, translation table is filled within ProcessTranslations metod.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeCategories">
            <summary>
            If true, parent category hierarchy of the object is included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeMetafiles">
            <summary>
            If true, metafiles of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeRelationships">
            <summary>
            If true, relationships of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeScheduledTasks">
            <summary>
            If true, scheduled tasks of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeProcesses">
            <summary>
            If true, automation processes of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ExcludedNames">
            <summary>
            Objects with codename or display name starting with these names will be filtered out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.MaxRelativeLevel">
            <summary>
            Determines maximal level of the relationship (prent-child). -1 means all levels, 0 means no child objects, 1 means first level of children, etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.DisableCollectionPaging">
            <summary>
            If true, the traversal process sets AllowPaging to false to all the collections it goes through.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.EnsureBinaryData">
            <summary>
            If true, all the collections are forced to load binary data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.DocLinkedDocuments">
            <summary>
            If true, linked documents are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.DocConnectedObjects">
            <summary>
            Gets or sets the list of collections from ConnectedObjects collection which will go into the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessObjectCallback">
            <summary>
            Method which is called to process info object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessItemCallback">
            <summary>
            Method which is called to process an item within collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessIDCallback">
            <summary>
            Method which is called to process any FK ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessStartCollectionCallback">
            <summary>
            Method which is called when new level in hierarchy is created.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessArraySeparatorCallback">
            <summary>
            Method which is called when a separator should be added to a result (needed for JSON).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ProcessEndCollectionCallback">
            <summary>
            Method which is called when a level in hierarchy is finished (end of the collection).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings.OnItem">
            <summary>
            Handles start of the item within the collectin
            </summary>
            <param name="settings">Export settings object</param>
            <param name="isEnd">Determines wheter its start or end of the item</param>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings.OnProcessStartCollection">
            <summary>
            Handles start of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Indicates whether it's array collection (important for export to JSON)</param>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings.OnProcessArraySeparator">
            <summary>
            Handles array separator of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings.OnProcessEndCollection">
            <summary>
            Handles end of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Indicates whether it's array collection (important for export to JSON)</param>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings.OnProcessObject">
            <summary>
            Handles export to required format.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="obj">Object (TreeNode / Info object) to process</param>
            <param name="currentLevel">Current level withing the object tree structure</param>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings.OnProcessID">
            <summary>
            Handles FK ID (can be used to fill translation helper for example).
            </summary>
            <param name="settings">Export settings object</param>
            <param name="obj">Object (TreeNode / Info object) to process</param>
            <param name="columnName">Column name of the dependency</param>
            <param name="objectType">Object type of the dependency</param>
            <param name="required">Determines whether the dependency is required (reflects required flag from TypeInfo).</param>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.RequestStockKey">
            <summary>
            Returns key for request stock helper caching.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Format">
            <summary>
            Format of the export data (xml/json/etc.).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Encoding">
            <summary>
            Gets or sets the encoding used for REST responses.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.RootName">
            <summary>
            Name of the root element of the resulting export (root of xml).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.LocalizeToLanguage">
            <summary>
            Culture code of the language to which the resulting response will be localized (if there are any localization macros - for example as a display name of the object).
            Null or empty string mean no localization is done to the response.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Binary">
            <summary>
            If true, binary data is exported as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.IncludeMetadata">
            <summary>
            If true, metadata are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.IncludeObjectData">
            <summary>
            If false, object data are not exported (true by default).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.FormatResult">
            <summary>
            If true, result is formatted for better readability.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Translate">
            <summary>
            If true, REST request was for translation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Where">
            <summary>
            Gets or sets WHERE condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.OrderBy">
            <summary>
            Gets or sets ORDER BY clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Columns">
            <summary>
            Gets or sets COLUMNS clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.TopN">
            <summary>
            Gets or sets TOP N clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.Offset">
            <summary>
            Gets or sets offset of the records.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.MaxRecords">
            <summary>
            Gets or sets maximum number of records.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocSiteName">
            <summary>
            Nodes site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocAliasPath">
            <summary>
            Path. It may contain % and _ as wild card characters for any number of unknown characters or one unknown character respectively (for MS SQL).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocCultureCode">
            <summary>
            Nodes culture code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocClassNames">
            <summary>
            List of classNames to select separated by semicolon (e.g.: "cms.article;cms.product").
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocVersion">
            <summary>
            Version of the document to return.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocCombineWithDefaultCulture">
            <summary>
            Specifies if return the default culture document when specified culture not found.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocSelectOnlyPublished">
            <summary>
            Select only published nodes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocCoupledData">
            <summary>
            If false, coupled data are not included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocDeleteAllCultures">
            <summary>
            If true, all cultures are deleted when document is being deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocDeleteProduct">
            <summary>
            If true, the associated product is deleted with the deleted document.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.DocDestroyHistory">
            <summary>
            If true, the history is deleted when the document is being deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.ExportItemURI">
            <summary>
            Gets or sets URI of the exported item (needed for ODATA export).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExportObjectSettings.JSONCallback">
            <summary>
            Gets or sets the callback JS code used a JSONP.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataExtensions">
            <summary>
            Extensions for the SettingsProvider classes
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CopyTo(CMS.Base.IDataContainer,CMS.Base.IDataContainer,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Copies the data of specified columns of the source object to the target object.
            </summary>
            <param name="obj">Source object</param>
            <param name="target">Target object</param>
            <param name="columns">List of columns to copy, if null, all columns will be copied</param>
            <param name="excludeColumns">List of columns to exclude</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CheckRequiredColumns(CMS.Base.ISimpleDataContainer,System.String[])">
            <summary>
            Returns true if given list of columns do not have null values in the object
            </summary>
            <param name="obj">Object</param>
            <param name="columns">List of columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetNamedEnumerator``1(CMS.Base.INamedEnumerable)">
            <summary>
            Name enumerator over a collection
            </summary>
            <param name="collection">Collection</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.As``1(System.Data.DataSet)">
            <summary>
            Converts the DataSet to a strongly typed one
            </summary>
            <param name="ds">Source data set</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.AsModifyable(System.Data.DataSet)">
            <summary>
            Ensures that the given DataSet is not cached, copies the data if it is
            </summary>
            <param name="ds">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the list of objects to a hash set of distinct values
            </summary>
            <param name="objects">List of objects to convert</param>
            <param name="comparer">Comparer</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the list of objects to a hash set of distinct values
            </summary>
            <param name="objects">List of objects to convert</param>
            <param name="transform">Function to transform the object to hash set item. When returns null, the object is not added to the result</param>
            <param name="comparer">Comparer</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToDictionaryById(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Converts the list of objects to a dictionary indexed by object ID
            </summary>
            <param name="objects">List of objects to convert</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToDictionaryById(System.Data.DataSet,System.String)">
            <summary>
            Converts the DataSet to a dictionary indexed by object ID
            </summary>
            <param name="ds">DataSet with the data</param>
            <param name="idColumn">ID column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.AsIndexable``2(CMS.Base.IGeneralIndexable)">
            <summary>
            Implicit conversion to indexable type with a specific values
            </summary>
            <param name="obj">Object to convert</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ContainsExternalData(System.Data.DataTable)">
            <summary>
            Returns true if the given table contains some external data (data not from CMS database) 
            </summary>
            <param name="dt">Data table</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.TrackExternalData(System.Data.DataTable)">
            <summary>
            Marks the given table as originated from the CMS database
            </summary>
            <param name="dt">Data table</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.IsFromCMSDatabase(System.Data.DataTable,System.Boolean)">
            <summary>
            Marks the given table as originated from the CMS database
            </summary>
            <param name="dt">Data table</param>
            <param name="isFromCmsDatabase">Sets the flag</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToXML(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Returns XML representation of current instance of IEnumerable.
            </summary>
            <param name="collection">Collection to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToXML(CMS.Base.IDataContainer,System.String,System.Boolean)">
            <summary>
            Returns XML representation of current instance of IDataContainer.
            </summary>
            <param name="data">IDataContainer to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Returns JSON representation of current instance of IEnumerable.
            </summary>
            <param name="collection">Collection to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(CMS.Base.IDataContainer,System.String,System.Boolean)">
            <summary>
            Returns JSON representation of current instance of IDataContainer.
            </summary>
            <param name="data">IDataContainer to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(System.Data.DataTable,System.Boolean)">
            <summary>
            Exports DataSet to JSON string.
            </summary>
            <param name="dt">DataTable to export</param>
            <param name="includeName">If true, name of the table is included in result</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(System.Data.DataSet,System.Boolean)">
            <summary>
            Exports DataSet to JSON string.
            </summary>
            <param name="ds">DataSet to export</param>
            <param name="includeName">If true, name of the dataset and names of the tables are included in the result</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.Compare(CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo,CMS.DataEngine.CompareSettings)">
            <summary>
            Compares two BaseInfo objects (data &amp; structure) according to comparison settings given.
            </summary>
            <param name="obj1">First object to compare</param>
            <param name="obj2">Second object to compare</param>
            <param name="settings">Comparison settings</param>
            <returns>True if the objects are same in data/structure defined in comparison settings</returns>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CompareRepositories(CMS.DataEngine.InfoObjectRepository,CMS.DataEngine.InfoObjectRepository,CMS.DataEngine.CompareSettings)">
            <summary>
            Compares two repositories, object by object (order in collections matters).
            </summary>
            <param name="repository1">First collection</param>
            <param name="repository2">Second collection</param>
            <param name="settings">Comparison settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CompareCollections(CMS.DataEngine.InfoObjectCollection,CMS.DataEngine.InfoObjectCollection,CMS.DataEngine.CompareSettings)">
            <summary>
            Compares two collections, object by object (order in collections matters).
            </summary>
            <param name="collection1">First collection</param>
            <param name="collection2">Second collection</param>
            <param name="settings">Comparison settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.WhenColumnValue(CMS.Base.IConditionalObjectFactory,System.String,System.String,System.Func{System.Object,System.Boolean})">
            <summary>
            Adds the condition for the column value to the factory
            </summary>
            <param name="fact">Factory to extend</param>
            <param name="className">Object class name</param>
            <param name="columnName">Column name</param>
            <param name="condition">Condition that must be matched, if null, the value converted to bool must match</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetValueFromArray(System.Object[],System.String,System.String)">
            <summary>
            Gets the column value from the data array
            </summary>
            <param name="data">Data</param>
            <param name="className">Class name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetTypeConditionValue(System.String,System.String)">
            <summary>
            Gets the column value from the type condition
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetColumnIndex(System.String,System.String)">
            <summary>
            Gets the column index for the given class
            </summary>
            <param name="className">Class name</param>
            <param name="colName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.With``1(``0,System.Action{``0})">
            <summary>
            Sets up the object using the given lambda expression
            </summary>
            <param name="obj">Object to set up</param>
            <param name="setup">Set up action</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.UseTransaction(CMS.Base.CMSEventArgs,CMS.DataEngine.CMSTransactionScope)">
            <summary>
            Ensures that the event uses transaction
            </summary>
            <param name="e">Event arguments</param>
            <param name="tr">Transaction to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CombineWith(CMS.DataEngine.AuthorizationResultEnum,System.Boolean)">
            <summary>
            Combines the authorization result enum with a bool result
            </summary>
            <param name="result">Original result</param>
            <param name="combineWith">Result to combine with</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CombineWith(CMS.DataEngine.AuthorizationResultEnum,CMS.DataEngine.AuthorizationResultEnum)">
            <summary>
            Combines the authorization result enum with a bool result
            </summary>
            <param name="result">Original result</param>
            <param name="combineWith">Result to combine with</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToBoolean(CMS.DataEngine.AuthorizationResultEnum)">
            <summary>
            Convert the authorization result to a boolean value representing allow / deny. Insignificant means deny.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToAuthorizationResultEnum(System.Boolean)">
            <summary>
            Convert the boolean value to a AuthorizationResultEnum, outputs Allowed or Denied based on the bool value.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="T:CMS.DataEngine.LogObjectChangeEventArgs">
            <summary>
            Object event arguments for log object change event
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeEventArgs.Settings">
            <summary>
            Log object change settings
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LogObjectChangeHandler">
            <summary>
            Log object change handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeHandler.#ctor(CMS.DataEngine.LogObjectChangeHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeHandler.StartEvent(CMS.DataEngine.LogObjectChangeSettings)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="settings">Log object change settings</param>
        </member>
        <member name="T:CMS.DataEngine.LogObjectChangeSettings">
            <summary>
            Class for log object change.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LogObjectChangeSettings.ENABLED_SERVERS">
            <summary>
            Constant used to specify all the enabled servers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeSettings.#ctor(CMS.DataEngine.GeneralizedInfo,CMS.DataEngine.TaskTypeEnum)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Object</param>
            <param name="taskType">Task type</param>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeSettings.GetDuplicityKey(System.String)">
            <summary>
            Gets the duplicity key.
            </summary>
            <param name="keyPrefix">Key prefix</param>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.InfoObj">
            <summary>
            Info object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.TaskType">
            <summary>
            Type of the task.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.LogStaging">
            <summary>
            Indicates if the staging task should be logged. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.LogIntegration">
            <summary>
            Indicates if the integration task should be logged. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.LogIntegrationSimpleTasks">
            <summary>
            Indicates if the simple integration task should be logged. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.IsTouchParent">
            <summary>
            Indicates if the log request originates from touching the parent object. Default false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.LogExportTask">
            <summary>
            Indicates id the export task should be logged. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.CreateVersion">
            <summary>
            Indicates if the version should be created. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.SiteID">
            <summary>
            Site ID of the servers.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.ServerID">
            <summary>
            ID of staging server (Or SynchronizationInfoProvider.ENABLED_SERVERS for all enabled servers)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.WorkerCall">
            <summary>
            Indicates if in context of worker call (asynchronous task logging). Default false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.RunAsynchronously">
            <summary>
            Indicates if task logging should be executed asynchronously (in separate thread). Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.DataChanged">
            <summary>
            If true, the data of the object involved has changed. Default true.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectEvents">
            <summary>
            Object events
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Update">
            <summary>
            Fires when object is updated
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Insert">
            <summary>
            Fires when object is inserted
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Delete">
            <summary>
            Fires when object is deleted
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.GetData">
            <summary>
            Fires when object data are being retrieved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.GetContent">
            <summary>
            Fires when search content is requested. You can modify content value which is saved to the search index.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.LogChange">
            <summary>
            Fires when object tasks are logged. You can disable tasks logging for staging, integration etc.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.CheckPermissions">
            <summary>
            Fires when permissions are checked on the object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.ChangeOrder">
            <summary>
            Fires when change order is requested on the object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Sort">
            <summary>
            Fires when sorting of a objects is requested
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.#ctor(CMS.DataEngine.ObjectHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.GetRecursionKey(CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Gets the recursion key of the class to identify recursion
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SimpleObjectHandler">
            <summary>
            Simple object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.#ctor(CMS.DataEngine.SimpleObjectHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.StartEvent(CMS.DataEngine.BaseInfo,System.String@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Object</param>
            <param name="content">Content that is processed by the handler</param>
        </member>
        <member name="T:CMS.DataEngine.ColumnsTranslationEventArgs">
            <summary>
            Columns translation event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnsTranslationEventArgs.TranslationHelper">
            <summary>
            Translation helper which keeps translations of objects ID columns. Use this object to register translations or translate column value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnsTranslationEventArgs.ObjectType">
            <summary>
            Object type which data is stored in the container.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnsTranslationEventArgs.Data">
            <summary>
            Data container with object data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnsTranslationEvents">
            <summary>
            Columns translation events handlers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ColumnsTranslationEvents.RegisterRecords">
            <summary>
            Fires when an objects data is registered for translation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ColumnsTranslationEvents.TranslateColumns">
            <summary>
            Fires when an object ID columns are translated.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnsTranslationHandler">
            <summary>
            Columns translation event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ColumnsTranslationHandler.StartEvent(CMS.DataEngine.TranslationHelper,System.String,CMS.Base.IDataContainer)">
            <summary>
            Initiates the data registration event handling.
            </summary>
            <param name="th">Translation helper</param>
            <param name="objectType">Object type</param>
            <param name="data">Data container</param>
        </member>
        <member name="T:CMS.DataEngine.DatabaseMappingAttribute">
            <summary>
            Specifies to which database column the property maps
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseMappingAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="executeInDb">If true, the member is executed on DB level, if false, then programmatically</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseMappingAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression defining the mapping of the attribute to database</param>
        </member>
        <member name="P:CMS.DataEngine.DatabaseMappingAttribute.Expression">
            <summary>
            Database column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseMappingAttribute.ExecuteInDB">
            <summary>
            If true, the member is executed on DB level, if false, then programmatically
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LoadDataEventHandler">
            <summary>
            Event which should load the data to the object when fired.
            </summary>
            <param name="infoObj">Object to load</param>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectFactory">
            <summary>
            Object factory producing info objects based on the object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectFactory.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectFactory.CreateNewObject">
            <summary>
            Creates new object of the given type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectFactory.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeTreeNode">
            <summary>
            Class for parsing XML tree with staging objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor which creates group tree node
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.#ctor(System.String,CMS.DataEngine.ObjectTreeLocation,System.Boolean)">
            <summary>
            Constructor which creates the tree node from location
            </summary>
            <param name="objectType">Object type</param>
            <param name="location">Tree location</param>
            <param name="parentSiteValue">Parent site value</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.AddObjectType(System.String,System.Action{CMS.DataEngine.ObjectTypeTreeNode},System.Boolean)">
            <summary>
            Creates a new empty object type tree. Returns identity
            </summary>
            <param name="objectType">Object type</param>
            <param name="setup">Sets up the newly created node</param>
            <param name="atStart">If true, the node is added to the start of the list</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.AddGroup(System.String,System.Boolean,System.Action{CMS.DataEngine.ObjectTypeTreeNode},System.Boolean)">
            <summary>
            Creates a new empty object type tree. Returns identity
            </summary>
            <param name="groupName">Name of the root group</param>
            <param name="main">If true, the group is main group</param>
            <param name="groupSetup">Sets up the newly created node</param>
            <param name="atStart">If true, the node is added to the start of the list</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.NewObjectTree(System.String)">
            <summary>
            Creates a new empty object type tree
            </summary>
            <param name="rootGroup">Name of the root group</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.GetObjectTypes(System.Boolean)">
            <summary>
            Returns all object types of given node or child tree separated by semicolon.
            </summary>
            <param name="childNodes">Indicates if child object types should be included</param>
            <returns>String of object types separated by semicolon</returns>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.RemoveNode(System.String,System.Boolean)">
            <summary>
            Find the node with matching object type.
            </summary>
            <param name="objectType">Object type to find</param>
            <param name="siteNode">Site node</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.FindNode(System.String,System.Boolean)">
            <summary>
            Find the node with matching object type.
            </summary>
            <param name="objectType">Object type to find</param>
            <param name="siteNode">Site node</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.FindNode(System.String,System.Boolean,CMS.DataEngine.ObjectTypeTreeNode@)">
            <summary>
            Find the node with matching object type.
            </summary>
            <param name="objectType">Object type to find</param>
            <param name="siteNode">Site node</param>
            <param name="parentNode">Parent node</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.EnsureNode(System.String)">
            <summary>
            Ensures node with the given relative path
            </summary>
            <param name="relativePath">Relative path</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.AddChild(CMS.DataEngine.ObjectTypeTreeNode,System.Boolean)">
            <summary>
            Adds the given child
            </summary>
            <param name="child">Child to add</param>
            <param name="atStart">If true, the node is added to the start of the list</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.GetChild(System.String)">
            <summary>
            Gets a child node by its name
            </summary>
            <param name="key">Child key</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.ParentNode">
            <summary>
            Parent node of actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.ChildNodes">
            <summary>
            List of child nodes of actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Group">
            <summary>
            Group where belongs actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.ObjectType">
            <summary>
            Object type of actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Module">
            <summary>
            Module where belongs actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Site">
            <summary>
            Indicates if actual node belongs to site.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Expand">
            <summary>
            Indicates if actual node is expanded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Main">
            <summary>
            Indicates if actual node is main.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Active">
            <summary>
            Indicates if actual node is Active.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Key">
            <summary>
            Node key
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.SortChildren">
            <summary>
            If true, children of this node are sorted
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeTreeNode.OnBeforeCreateNodeHandler">
            <summary>
            Delegate for handling the OnBeforeCreate action of the tree node.
            </summary>
            <param name="source">Source node</param>
        </member>
        <member name="T:CMS.DataEngine.SearchSettings">
            <summary>
            SearchSettings class provides methods for manipulation with SearchSettingsInfo objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.CONTAINERROOTNAME">
            <summary>
            Root element name of search settings data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.ITEMELEMENTNAME">
            <summary>
            Element name which determines items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.ITEMIDENTIFIER">
            <summary>
            Attribute name which identifies single item of index settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.SEARCHABLE">
            <summary>
            Searchable field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.TOKENIZED">
            <summary>
            Tokenized field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.IFIELDNAME">
            <summary>
            Field field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.CONTENT">
            <summary>
            Content field.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.LoadData(System.String)">
            <summary>
            Loads settings from xml data.
            </summary>
            <param name="data">String of xml data</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetData">
            <summary>
            Returns xml code of search index settings.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.SetSettingsInfo(CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Adds or overwrites search setting item in hashtable.
            </summary>
            <param name="ssi">Search setting item</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetSettingsInfo(System.String)">
            <summary>
            Returns search setting item by specified II (GUID).
            </summary>
            <param name="guid">String idenfificator</param>
            <returns>Returns search setting item or null if there is no such item</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetSettingsInfo(System.Guid)">
            <summary>
            Returns search setting item by specified II (GUID).
            </summary>
            <param name="guid">ID of search setting item</param>
            <returns>Returns search setting item or null if no item found</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetAllSettingsInfos">
            <summary>
            Returns all search settings as DataSet.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.DeleteSearchSettingsInfo(System.Guid)">
            <summary>
            Deletes search setting item.
            </summary>
            <param name="guid">ID of search setting item</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.DeleteSearchSettingsInfo(CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Deletes search index setting item.
            </summary>
            <param name="ssi">SearchIndexSettingsInfo</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.SearchesAnyOf(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if the search settings indexes any of the given columns
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.CopyTo(CMS.DataEngine.SearchSettings,System.Func{CMS.DataEngine.SearchSettingsInfo,System.Boolean})">
            <summary>
            Copies selected fields to another search settings object
            </summary>
            <param name="target">Target settings</param>
            <param name="func">Function to say which items to copy. If null, all items are copied</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettings.Items">
            <summary>
            Gets list of all settings items indexed by GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettings.ItemsByName">
            <summary>
            Gets list of all settings items indexed by name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchSettingsInfo">
            <summary>
            Search settings class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.GetValue(System.String)">
            <summary>
            Returns value specified by property name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets value to specified property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.ContainsColumn(System.String)">
            <summary>
            Indicates if specified property is included.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.ID">
            <summary>
            GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Name">
            <summary>
            Name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Content">
            <summary>
            Content column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Tokenized">
            <summary>
            Tokenized column of item.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Searchable">
            <summary>
            Searchvable column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.FieldName">
            <summary>
            Custom field name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.ColumnNames">
            <summary>
            Returns array of property names.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TranslationHelper">
            <summary>
            Class to provide objects translation interface ID - CodeName.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.AUTO_SITENAME">
            <summary>
            Automatic site name (Get by SiteIDs from DB).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.NO_SITE">
            <summary>
            No site condition for registering records.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.TRANSLATION_TABLE">
            <summary>
            Name of translation table
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.AUTO_SITEID">
            <summary>
            Automatic site ID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.AUTO_PARENTID">
            <summary>
            Automatic parent ID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.mTranslationTable">
            <summary>
            Translation table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.mDefaultValues">
            <summary>
            Default values for object types [objectType.ToLowerCSafe()] -> [value]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.mIDConversion">
            <summary>
            ID conversion table [objectType.ToLowerCSafe()] -> Hashtable [OldID -> [NewID, NewGroupID]]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.mUseDisplayNameAsCodeName">
            <summary>
            If true, display name is used instead of the code name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.mConnection">
            <summary>
            Connection object used to access data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.#ctor(System.Data.DataTable)">
            <summary>
            Constructor. Creates the helper initialized with given translation table.
            </summary>
            <param name="dt">Source data table</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.IsEmpty(CMS.DataEngine.TranslationHelper)">
            <summary>
            Determines whether the given translation helper contains any translations or not.
            </summary>
            <param name="th">TranslationHelper object to examine</param>
            <returns>TRUE if there are no translation records</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetEmptyTable">
            <summary>
            Returns empty translation table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.EnsureColumns(System.Data.DataTable)">
            <summary>
            Ensures the columns in the translation table.
            </summary>
            <param name="dt">Translation table</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.Clear">
            <summary>
            Clears the translation table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.HasRecords">
            <summary>
            Returns true if the helper contains some records.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecord(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Registers the record within given translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
            <param name="codeName">Object code name</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecord(System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Registers the record within given translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
            <param name="codeName">Object code name</param>
            <param name="siteName">Site name</param>
            <param name="parentId">Parent ID</param>
            <param name="info">Additional record info</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.Data.DataTable,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectType">Object type of the target objects</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="codeNameColumnName">Code name column name</param>
            <param name="parentIdColumnName">Parent ID column name</param>
            <param name="siteName">Site name</param>
            <param name="groupIdColumnName">Group ID column name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectType">Object type of the target objects</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.Data.DataTable,System.String,System.String,System.String,System.String[])">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectType">Object type of the target objects</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.Data.DataView,System.String,System.String,System.String,System.String[])">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectType">Object type of the target objects</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterDynamicRecords(System.Data.DataTable,System.String,System.String,System.String,System.String[])">
            <summary>
            Registers the dynamic records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectTypeColumn">Name of the column with dynamic object type value</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterDynamicRecords(System.Data.DataView,System.String,System.String,System.String,System.String[])">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectTypeColumn">Name of the column with dynamic object type value</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.String,System.Collections.Generic.IList{System.Int32},System.String,System.String[])">
            <summary>
            Registers the records from the given ID list.
            </summary>
            <param name="objectType">Object type of the target objects</param>
            <param name="objectIDs">List of IDs to register</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterCodeNames(System.String,System.Collections.Hashtable,System.String,System.String[])">
            <summary>
            Registers the code names from the given table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codenames">Code names table</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterGroupRecords(System.Collections.Generic.IList{System.Int32},System.String,System.String[])">
            <summary>
            Registers the group records to the translation table.
            </summary>
            <param name="groups">List of groups IDs</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded code names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterParentRecords(System.String,System.Collections.Generic.IList{System.Int32},System.String,System.String[])">
            <summary>
            Registers the parent records to the translation table.
            </summary>
            <param name="parentObjectType">Parent object type</param>
            <param name="parents">List of parent IDs</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded code names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.FilterExistingRecords(System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Filters the existing records from the given array.
            </summary>
            <param name="objectIDs">Existing IDs</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RecordExists(System.String,System.Int32)">
            <summary>
            Returns true if specified record exists in translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeName(System.String,System.Int32)">
            <summary>
            Returns the code name of the specified object.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetRecord(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the record by ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Code name</param>
            <param name="siteName">Site name</param>
            <param name="parentId">Parent ID</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetRecord(System.String,System.Int32)">
            <summary>
            Gets the record by ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeName(System.String,System.Int32,System.String)">
            <summary>
            Returns the code name of the specified object.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
            <param name="defaultValue">Value to return in case record not found</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RecordExists(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns true if specified record exists in translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Object code name</param>
            <param name="siteName">Site name</param>
            <param name="parentId">Parent ID</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetID(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the object ID for specified record.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Code name</param>
            <param name="siteName">Site name</param>
            <param name="parentId">Parent ID</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetID(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the object ID for specified record.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Code name</param>
            <param name="siteName">Site name</param>
            <param name="parentId">Object parent ID</param>
            <param name="groupId">Group ID</param>
            <param name="defaultValue">Value to return in case record not found</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.AddIDTranslation(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the ID translation to the translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old ID</param>
            <param name="newId">New ID</param>
            <param name="newGroupId">New group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetOriginalType(System.String)">
            <summary>
            Gets original object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.SetDefaultValue(System.String,System.Int32)">
            <summary>
            Sets default value.
            </summary>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RemoveDefaultValue(System.String)">
            <summary>
            Removes default value.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetDefaultValue(System.String)">
            <summary>
            Gets default value.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetNewID(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets the new ID for given old ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old ID</param>
            <param name="codeNameColumn">Code name column of the class</param>
            <param name="siteId">Site ID of the required object</param>
            <param name="siteIdColumn">Site ID column of the class</param>
            <param name="parentIdColumn">Parent ID column</param>
            <param name="groupIdColumn">Group ID column</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetNewID(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Gets the new ID for given old ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old ID</param>
            <param name="codeNameColumn">Code name column of the class</param>
            <param name="siteId">Site ID of the required object</param>
            <param name="siteIdColumn">Site ID column of the class</param>
            <param name="parentIdColumn">Parent ID column</param>
            <param name="groupIdColumn">Group ID column</param>
            <param name="useDefaultValue">Indicates if default value should be used for ID</param>
            <param name="outGroupId">Returns Group ID value</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumn(System.Data.DataRow,System.String,System.String,System.Int32)">
            <summary>
            Translates the DataRow column.
            </summary>
            <param name="dr">DataRow with the data</param>
            <param name="columnName">Column name</param>
            <param name="objectType">Object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateListColumn(CMS.DataEngine.GeneralizedInfo,System.String,System.String,System.Int32,System.Char)">
            <summary>
            Translates the column value with list of IDs of the given info object.
            </summary>
            <param name="infoObj">Object with the data</param>
            <param name="columnName">Column name to translate</param>
            <param name="objectType">Object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <param name="separator">ID separator</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumn(CMS.DataEngine.GeneralizedInfo,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Translates the column value of the given info object.
            </summary>
            <param name="infoObj">Object with the data</param>
            <param name="columnName">Column name to translate</param>
            <param name="objectType">Object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <param name="useDefaultValue">Indicates if default value should be used for new IDs</param>
            <param name="required">If false, the column is allowed to be set to null in case the translation is not found.</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumn(CMS.Base.IDataContainer,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Translates the column value of the given container.
            </summary>
            <param name="container">Container with the data</param>
            <param name="columnName">Column name to translate</param>
            <param name="objectType">Reference object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <param name="useDefaultValue">Indicates if default value should be used for new IDs</param>
            <param name="required">If false, the column is allowed to be set to null in case the translation is not found.</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.ChangeCodeName(System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Changes the object code name in the table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldCodeName">Old code name</param>
            <param name="siteName">Site name</param>
            <param name="parentId">Parent ID</param>
            <param name="groupId">Group ID</param>
            <param name="newCodeName">New code name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumns(CMS.DataEngine.GeneralizedInfo,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Translates all reference object columns.
            </summary>
            <param name="infoObj">Object with the data</param>
            <param name="siteId">Translate site ID</param>
            <param name="parentId">Translate parent ID</param>
            <param name="dependencies">Translate dependencies</param>
            <param name="targetSiteId">Target site ID for objects lookup which are site-related</param>
            <param name="excludeColumns">Columns to exclude</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.IsExcluded(System.String,System.String)">
            <summary>
            Returns true of the column is excluded.
            </summary>
            <param name="columnName">Column name to check</param>
            <param name="excludedColumns">Excluded column list separated by semicolon</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDFromDB(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Gets the object ID from the database.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Code name</param>
            <param name="codeNameColumn">Code name column name</param>
            <param name="siteId">Site ID</param>
            <param name="siteIdColumn">Site ID column</param>
            <param name="parentId">Parent ID</param>
            <param name="parentIdColumn">Parent ID column</param>
            <param name="groupId">Group ID</param>
            <param name="groupIdColumn">Group ID column</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeNameColumn(System.String)">
            <summary>
            Gets the code name column for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetParentIDColumn(System.String)">
            <summary>
            Gets the parent ID column for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetGroupIDColumn(System.String)">
            <summary>
            Gets the group ID column for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDColumn(System.String)">
            <summary>
            Gets the ID column for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetSiteIDColumn(System.String)">
            <summary>
            Gets the site id column for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetParentType(System.String)">
            <summary>
            Gets the parent object type for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeNamesFromDB(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Gets the code names from database and returns Hastable of couples [ID] -> [Codename]
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectIDs">Array of object IDs</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeNameFromDB(System.String,System.Int32,System.String)">
            <summary>
            Gets the object code name from the database.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
            <param name="codeNameColumn">Code name column name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetSafeClassName(System.String)">
            <summary>
            Gets the safe class name.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.TranslationTable">
            <summary>
            Returns the translation table.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.IDConversion">
            <summary>
            ID conversion table [objectType.ToLowerCSafe()] -> Hashtable [OldID -> NewID]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.UseDisplayNameAsCodeName">
            <summary>
            If true, display name is used instead of the code name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DefaultDataSettings">
            <summary>
            Settings for export of the default database data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.Where">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.OrderBy">
            <summary>
            Order by columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.ExcludedColumns">
            <summary>
            List of columns that should be excluded from the exported data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.ExcludedPrefixes">
            <summary>
            List of code display name prefixes that will be excluded from default data. By default everything starting with 'test' is excluded.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TypeInfoEvents">
            <summary>
            Object events for particular type info
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeInfoEvents.baseName">
            <summary>
            Base name for the events
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.CreateEvent``1(``0,System.String)">
            <summary>
            Creates an event
            </summary>
            <param name="parent">Event parent</param>
            <param name="name">Event name</param>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.SetParent(CMS.DataEngine.TypeInfoEvents)">
            <summary>
            Sets the parent for the events
            </summary>
            <param name="parentEvents">Parent events</param>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Update">
            <summary>
            Fires when object is updated
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Insert">
            <summary>
            Fires when object is inserted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Delete">
            <summary>
            Fires when object is deleted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.GetData">
            <summary>
            Fires when data are retrieved
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.GetContent">
            <summary>
            Fires when search content is requested. You can modify content value which is saved to the search index.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.LogChange">
            <summary>
            Fires when object tasks are logged. You can disable tasks logging for staging, integration etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.CheckPermissions">
            <summary>
            Fires when permissions are checked on the object
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Module">
            <summary>
            Represents the standard module.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.Module.mCommandsRegistered">
            <summary>
            If true commands were already registered
            </summary>
        </member>
        <member name="F:CMS.DataEngine.Module.mCommands">
            <summary>
            Dictionary of the commands [objectType -> CommandFunc]
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Module.#ctor(CMS.Core.ModuleMetadata)">
            <summary>
            Constructor
            </summary>
            <param name="metadata">Module metadata</param>
        </member>
        <member name="M:CMS.DataEngine.Module.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="moduleName">Module name</param>
        </member>
        <member name="M:CMS.DataEngine.Module.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hash tables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.Module.CheckLicense(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            Checks the license.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature</param>
            <param name="action">Action</param>
        </member>
        <member name="M:CMS.DataEngine.Module.GetObject(System.String)">
            <summary>
            Gets the object created from the given DataRow.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.Module.ProcessCommand(System.String,System.Object[])">
            <summary>
            Processes the specified command.
            </summary>
            <param name="commandName">Command name</param>
            <param name="parameters">Command parameters</param>
        </member>
        <member name="M:CMS.DataEngine.Module.EnsureCommands">
            <summary>
            Ensures the object types to be registered
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Module.RegisterCommands">
            <summary>
            Registers the object type of this module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Module.RegisterCommand(System.String,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the given command
            </summary>
            <param name="name">Command name</param>
            <param name="func">Command function</param>
        </member>
        <member name="M:CMS.DataEngine.Module.RegisterContext``1(System.String)">
            <summary>
            Registers the module context
            </summary>
            <param name="name">Context name</param>
        </member>
        <member name="T:CMS.DataEngine.ModuleCommands">
            <summary>
            Module commands.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetGroupInfoByGuid(System.Guid)">
            <summary>
            Gets the group by GUID.
            </summary>
            <param name="groupGuid">Group GUID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetGroupInfo(System.Int32)">
            <summary>
            Gets the Group info from Community module.
            </summary>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetGroupInfoByName(System.String,System.String)">
            <summary>
            Gets the Group info by group name and site name from Community module.
            </summary>
            <param name="groupName">Group code name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetUserGroups(System.Int32)">
            <summary>
            Gets the groups for the given user.
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetUserGroups(System.Int32,System.String)">
            <summary>
            Gets the groups for the given user.
            </summary>
            <param name="userId">User ID</param>
            <param name="columns">Columns to select</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetUserFriendshipRelations(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Gets the friends for the given user.
            </summary>
            <param name="userId">User ID</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityFriendshipExists(System.Int32,System.Int32)">
            <summary>
            Checks whether the friendship exists
            </summary>
            <param name="friendUserId">User requesting friendship</param>
            <param name="requestedId">User participating in friendship</param>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetCurrentGroupID">
            <summary>
            Gets the current group's ID. Returns 0 if current group does not exist.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetGroupProfilePath(System.String,System.String)">
            <summary>
            Gets group profile path.
            </summary>
            <param name="groupName">Group name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetGroupManagementPath(System.String,System.String)">
            <summary>
            Gets group management path.
            </summary>
            <param name="groupName">Group name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetMemberProfilePath(System.String,System.String)">
            <summary>
            Gets member profile path.
            </summary>
            <param name="memberName">Member name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityGetMemberManagementPath(System.String,System.String)">
            <summary>
            Gets member management path.
            </summary>
            <param name="memberName">Member name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunitySiteHasGroup(System.Int32)">
            <summary>
            Returns true if selected site contains at least one group.
            </summary>
            <param name="siteId">Site id</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityCheckGroupPermission(System.String,System.Int32)">
            <summary>
            Returns true if CurrentUser is authorized for the specified action in the group.
            </summary>
            <param name="permissionName">Permission to check</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CommunityIsMemberOfGroup(System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified user is member of the specified group.
            </summary>
            <param name="userId">ID of the user to check</param>
            <param name="groupId">ID of the group to check</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.EventsGetSiteEvent(System.Int32,System.String,System.String)">
            <summary>
            Returns Booking event by ID for specified site.
            </summary>
            <param name="eventId">Booking event ID</param>
            <param name="siteName">Site name</param>
            <param name="columns">Columns of booking event to be returned in DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ForumsGetDocumentForumsCount(System.Int32)">
            <summary>
            Gets the number of forums for current document.
            </summary>
            <param name="documentId">Document ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ForumsAddForumModerator(System.Int32,System.Int32)">
            <summary>
            Add moderator to forum.
            </summary>
            <param name="userId">User ID</param>
            <param name="forumId">Forum ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ForumsRemoveForumModerator(System.Int32,System.Int32)">
            <summary>
            Removes moderator to forum.
            </summary>
            <param name="userId">User ID</param>
            <param name="forumId">Forum ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ForumsGetForumPostInfo(System.Int32)">
            <summary>
            Returns forum post info (BaseInfo) of specified ID.
            </summary>
            <param name="forumPostId">ID of the forum</param>        
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ForumsGetForumInfo(System.Int32)">
            <summary>
            Returns ForumInfo(BaseInfo) of specified id.
            </summary>
            <param name="forumId">ID of the forum</param>        
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ForumsGetPostUrl(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns URL of the specified forum post.
            <param name="forumId">Forum id</param>
            <param name="postIdPath">Post id path</param>
            <param name="encodeQueryString">Indicates if the query string should be encoded</param>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.GetDefaultReportConnectionString">
            <summary>
            Item's default connection string 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ReportingRefreshDataCount">
            <summary>
            Refresh child count for all categories.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ReportingRefreshCategoryDataCount(CMS.DataEngine.BaseInfo)">
            <summary>
            Refresh children count for single category.
            </summary>
            <param name="infoObj">Category to update</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends the e-mail.
            </summary>
            <param name="emailAddress">E-mail address(es) of recipient(s). Use semicolon as a separator.</param>
            <param name="fromEmailAddress">E-mail address from which is the email sent</param>
            <param name="emailSubject">E-mail subject</param>
            <param name="emailBody">E-mail body</param>
            <param name="emailPlainTextBody">E-mail plain text body (optional)</param>
            <param name="siteName">Name of the site (optional)</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.CancelNewsletterSending">
            <summary>
            Stops current sending.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryGetMediaLibraryInfo(System.Int32)">
            <summary>
            Gets media library info object.
            </summary>
            <param name="libraryId">Media library ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryGetMediaFileUrl(System.String,System.String)">
            <summary>
            Returns media url according to site settings.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryGetMediaFileUrl(System.Guid,System.String)">
            <summary>
            Returns media url according to GUID and file name.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryDeleteMediaFile(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes media file from file system.
            </summary>
            <param name="siteID">Site id</param>
            <param name="libraryID">Library id</param>
            <param name="filePath">Sub path to file</param>
            <param name="onlyFile">Indicates if only file should be deleted</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryDeleteMediaFilePreview(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes media file preview from file system.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="filePath">File path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.NotificationsRaiseEvent(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Object,System.String[0:,0:])">
            <summary>
            Raises notification events according to the specified parameters.
            </summary>
            <param name="eventSource">Subscription event source</param>
            <param name="eventCode">Subscription event code</param>
            <param name="eventObjectId">Subscription event object ID</param>
            <param name="eventData1">Subscription event data 1</param>
            <param name="eventData2">Subscription event data 2</param>
            <param name="siteId">ID of the site where the event belongs</param>
            <param name="where">Additional WHERE conditoin</param>
            <param name="resolverData">Custom data for macro resolver (DataRow or DataClass object)</param>
            <param name="resolverSpecialMacros">Special macros (couples [name, value])</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardGetDocumentBoardsCount(System.Int32)">
            <summary>
            Gets the number of message boards for current document.
            </summary>
            <param name="documentId">Document ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardAddRoleToBoard(System.Int32,System.Int32)">
            <summary>
            Adds specified role to the board.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="boardId">BoardID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardRemoveRoleFromBoard(System.Int32,System.Int32)">
            <summary>
            Removes specified role from the board.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="boardId">BoardID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardAddModeratorToBoard(System.Int32,System.Int32)">
            <summary>
            Adds new BoardModeratorInfo object.
            </summary>        
            <param name="boardId">ID of the board moderator is being added to</param>
            <param name="userId">ID of the user representing board moderator</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardRemoveModeratorFromBoard(System.Int32,System.Int32)">
            <summary>
            Removes specified user from the board.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="boardId">BoardID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardGetMessageBoardInfo(System.Int32)">
            <summary>
            Gets message board info object with dependence on specified board id.
            </summary>
            <param name="messageBoardId">Message board id</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessageBoardGetBoardMessageInfo(System.Int32)">
            <summary>
            Gets board message info object specified by its ID.
            </summary>
            <param name="boardMessageId">Message board id</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessagingAddToContactList(System.Int32,System.Int32)">
            <summary>
            Adds user to contactlist.
            </summary>
            <param name="ownerId">ID of contactlist owner</param>
            <param name="contactId">ID of user to add to contactlist</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessagingAddToIgnoreList(System.Int32,System.Int32)">
            <summary>
            Adds user to ingnore list.
            </summary>
            <param name="ownerId">ID of ignore list owner</param>
            <param name="contactId">ID of user to add to ignore list</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessagingIsInContactList(System.Int32,System.Int32)">
            <summary>
            Returns true if the user is in the contact list.
            </summary>
            <param name="ownerId">ID of contact list owner</param>
            <param name="contactId">ID of user in contact list</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MessagingIsInIgnoreList(System.Int32,System.Int32)">
            <summary>
            Returns true if the user is in the ignore list.
            </summary>
            <param name="ownerId">ID of ignore list owner</param>
            <param name="contactId">ID of user to in ignore list</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.PollsAddRoleToPoll(System.Int32,System.Int32)">
            <summary>
            Assigns the role to poll.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="pollId">Poll ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.PollsRemoveRoleFromPoll(System.Int32,System.Int32)">
            <summary>
            Removes role from poll.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="pollId">Poll ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.PollsPollBelongsToGroup(System.Int32,System.Int32)">
            <summary>
            Returns TRUE if poll belongs to specified group.
            </summary>
            <param name="pollId">Poll ID</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.PollsGetPollInfo(System.Int32)">
            <summary>
            Returns poll info object (BaseInfo) specified by ID.
            </summary>
            <param name="pollId">Poll info ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.PollsGetPollAnswerInfo(System.Int32)">
            <summary>
            Returns answer info specified by ID.
            </summary>
            <param name="answerId">Answer info ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetABTestPageInfo(System.Object)">
            <summary>
             Returns the page info object for specified original pageinfo with dependence on corresponding AB  test.
            </summary>
            <param name="originalPageInfo">Page info object</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetMVTestSiteID(System.Int32)">
            <summary>
            Returns SiteID of given multivariate test id.
            </summary>
            <param name="testId">The multivariate test id</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingEnsureDefaultCombination(System.Int32)">
            <summary>
            Creates the default combination for a given page template (The default combination contains original versions of the page template webparts).
            </summary>
            <param name="pageTemplateId">The page template id</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingClearVariantCombinationHashTables">
            <summary>
            Clear MVT variants and combinations hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingUpdateContactFromExternalData(System.Object,System.Int32)">
            <summary>
            Updates contact information from  various sources (bizform record, user, customer, subscriber) - this requires fields
            of the source object to be mapped to contact. 
            </summary>
            <param name="source">Source object</param>
            <param name="contactId">Contact ID of contact to be updated</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingUpdateContactFromExternalData(System.Object,System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Updates contact information from  various sources (bizform record, user, customer, subscriber) - this requires fields
            of the source object to be mapped to contact.
            </summary>
            <param name="source">Source object</param>
            <param name="allowOverwrite">If TRUE existing contact data can be overwritten, if FALSE only empty properties
            can be filled, if null flag will be get from data class info</param>
            <param name="contactId">Contact ID of contact to be updated</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingUpdateContactFromExternalSource(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Updates specific contact values.
            </summary>
            <param name="source">List of updated contact values</param>
            <param name="allowOverwrite">Indicates if existing contact values should be overwritten</param>
            <param name="contactId">Contact ID to be updated</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetCurrentContactID">
            <summary>
            Returns current contact ID.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetCurrentContact">
            <summary>
            Returns current contact.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingCreateNewContact(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new contact and assignes given member.
            </summary>
            <param name="firstName">Contact first name</param>
            <param name="lastName">Contact last name</param>
            <param name="email">E-mail address</param>
            <param name="siteId">Site ID</param>
            <param name="relatedId">Related ID</param>
            <param name="type">Type of member (user, subscriber, customer)</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetUserLoginContactID(System.Object)">
            <summary>
            Returns contact ID for specified user info.
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingUpdateContactInformation(System.String)">
            <summary>
            Updates contact information - IP and User Agent for current user.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetContactGroupName(System.Int32)">
            <summary>
            Returns display name of the contact group specified by its ID.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetContactGroupMemberIDs(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets all (or top N) contact IDs in a given contact group for newsletters.
            If bounced e-mail monitoring is enabled, only contacts that have less bounces then bounce limit are returned.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
            <param name="topN">Top N</param>
            <param name="lastMemberId">Contacts with higher IDs will be returned</param>
            <param name="monitoringEnabled">Indicates if bounced e-mail monitoring is enabled</param>
            <param name="bounceLimit">Bounce e-mail limit</param>
            <param name="newsletterId">Newsletter ID - it allows to filter-out unsubscribed contact group members; optional</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetContactGroupMembers(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Gets all (or top N) contacts in a given contact group for newsletters.
            If bounced e-mail monitoring is enabled, only contacts that have less bounces then bounce limit are returned.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
            <param name="topN">Top N</param>
            <param name="lastMemberId">Contacts with higher IDs will be returned</param>
            <param name="monitoringEnabled">Indicates if bounced e-mail monitoring is enabled</param>
            <param name="bounceLimit">Bounce e-mail limit</param>
            <param name="newsletterId">Newsletter ID - it allows to filter-out unsubscribed contact group members; optional</param>
            <param name="columns">Allows to specify columns to be returned</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetContactForNewsletters(System.Int32,System.String)">
            <summary>
            Returns dataset with basic data of a contact specified by ID.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="columns">Columns to be returned separated by comma (,)</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetContacts(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset with basic data of contacts specified by where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Number of records to be selected</param>
            <param name="columns">Columns to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingIsContactUnsubscribed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if a contact has newsletter unsubscription activity for specified newsletter.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingSetContactBounces(System.Int32,System.Int32)">
            <summary>
            Sets the bounced e-mails counter to specified value for a contact.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="bounces">Number of bounced emails of the contact</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingAddContactBounce(System.Int32)">
            <summary>
            Increments number of bounces by one for specified contact.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingAddContactBounceByEmail(System.String)">
            <summary>
            Increments number of bounces by one for all contacts with specified email address across all sites.
            </summary>
            <param name="email">Email address</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingLogLandingPage(System.Int32)">
            <summary>
            Logs landing page as activity.
            </summary>
            <param name="contactId">Contact ID. Optional.</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingLogExternalSearch(System.Int32)">
            <summary>
            Logs external page as activity.
            </summary>
            <param name="contactId">Contact ID. Optional.</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingLogPageVisit(System.Int32)">
            <summary>
            Logs page visit as activity.
            </summary>
            <param name="contactId">Contact ID. Optional.</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingLogLogin(System.Object)">
            <summary>
            Logs login activity.
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingSelectContactForVisitor(System.Data.DataSet)">
            <summary>
            Returns single contact.
            </summary>
            <param name="contacts">DataSet of found contacts</param>
            <returns>Returns contact ID</returns>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingRemoveCustomer(System.Int32)">
            <summary>
            Removes customer references from all contact management objects.
            </summary>
            <param name="customerID">Customer being deleted</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingCreateRelation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns current contact ID.
            </summary>
            <param name="relatedId">RelatedID (subscriber ID, customer ID)</param>
            <param name="memberType">Member type converted to int</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingContactIsMonitored(System.Int32)">
            <summary>
            Returns TRUE if contact is monitored.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingMoveMVTests(System.String,System.String,System.Int32)">
            <summary>
            Moves all MVTests from the document under the oldAlias path to the document under the newAlias path.
            </summary>
            <param name="newAlias">Document's new alias path</param>
            <param name="oldAlias">Document's old alias path</param>
            <param name="siteID">Document's site ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.SynchronizationProcessTask(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.TaskTypeEnum,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Processes the given task.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="taskType">Type of the task</param>
            <param name="taskObjectType">Task object type</param>
            <param name="taskData">Document data for the synchronization task</param>
            <param name="taskBinaryData">Binary data for the synchronization task</param>
            <param name="processChilds">Process child objects</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.LogOnSiteKeywords(System.String,System.String,System.String)">
            <summary>
            Logs onsite search keywords.
            </summary>
            <param name="siteName">Site name</param>
            <param name="culture">Culture</param>
            <param name="keywords">Keywords to log</param>
        </member>
        <member name="T:CMS.DataEngine.ModuleManager">
            <summary>
            Manages the list of modules within application
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ModuleManager.mAllContexts">
            <summary>
            List of all the contexts.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ModuleManager.mReadOnlyObjects">
            <summary>
            Table of read only objects (for purposes of data direction).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.RemoveReadOnlyObject(System.String,System.Boolean)">
            <summary>
            Removes object structures.
            </summary>
            <param name="objectType">Object type</param>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.ClearReadOnlyObjects(System.Boolean)">
            <summary>
            Clears object structures.
            </summary>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetReadOnlyObjectByClassName(System.String)">
            <summary>
            Gets the cached object representation of the given class name.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetReadOnlyObject(System.String)">
            <summary>
            Gets the cached object instance of given type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetReadOnlyObject(System.String,System.Boolean)">
            <summary>
            Gets the cached object instance of given type.
            </summary>
            <param name="objectType">Object type</param>
            <param name="exceptionIfNotFound">If true, an exception is fired if the given object type is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObjectByClassName(System.String)">
            <summary>
            Gets a new default object representation of the given class name.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObject(System.String,System.Boolean)">
            <summary>
            Gets a new object of the given type.
            </summary>
            <param name="objectType">Object type</param>
            <param name="throwIfNotFound">If true, the method throws an exception in case the object type was not found</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObject(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Gets a new object of the given type created from the given DataRow.
            </summary>
            <param name="objectRow">Object DataRow</param>
            <param name="objectType">Object type</param>
            <param name="throwIfNotFound">If true, the method throws an exception in case the object type was not found</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.ProcessModuleCommand(System.String,System.String,System.Object[])">
            <summary>
            Processes the specified command.
            </summary>
            <param name="moduleName">Module name</param>
            <param name="commandName">Command name</param>
            <param name="parameters">Command parameters</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.CheckModuleLicense(System.String,System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            Processes the specified command.
            </summary>
            <param name="moduleName">Module name</param>
            <param name="domain">Domain name</param>
            <param name="feature">Feature</param>
            <param name="action">Action</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetModule(System.String)">
            <summary>
            Gets the module entry for specified module.
            </summary>
            <param name="name">Module name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.ClearHashtables">
            <summary>
            Clear all hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.ClearHashtables(System.Boolean)">
            <summary>
            Clears all the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetContextProperty(System.String,System.String)">
            <summary>
            Gets the value of context property.
            </summary>
            <param name="name">Context name</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="T:CMS.DataEngine.PredefinedObjectType">
            <summary>
            Predefined object type constants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUP_DOCUMENTS">
            <summary>
            Document object type - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUP_OBJECTS">
            <summary>
            All objects object type - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.COMMUNITY_CURRENT_GROUP">
            <summary>
            Current group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PAGETEMPLATE">
            <summary>
            Code name for page templates.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PAGETEMPLATESCOPE">
            <summary>
            Code name for page template scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WEBPARTCATEGORY">
            <summary>
            Code name for webpart categories.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PERSONALIZATION">
            <summary>
            Code name for personalization.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DASHBOARD">
            <summary>
            Code name for dashboard.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.TRANSFORMATION">
            <summary>
            Code name for transformations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SITE">
            <summary>
            Code name for sites.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.USER">
            <summary>
            Code name for users.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PERMISSION">
            <summary>
            Code name for permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CLASSPERMISSION">
            <summary>
            Code name for class (document type) permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CATEGORY">
            <summary>
            Code name for document global category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.USERCULTURE">
            <summary>
            User culture binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.RESOURCE">
            <summary>
            Code name for resources.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ROLE">
            <summary>
            Code name for roles.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUPROLE">
            <summary>
            Code name for group roles.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CUSTOM_TABLE_ITEM_PREFIX">
            <summary>
            Custom table item prefix for object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BIZFORM_ITEM_PREFIX">
            <summary>
            BizFrom item prefix for object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ALLOWEDCHILDCLASS">
            <summary>
            Allowed child class bindings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENT">
            <summary>
            Document.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTCATEGORY">
            <summary>
            Document-category relationship.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NODE">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUPNODE">
            <summary>
            Community group node.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTLOCALIZATION">
            <summary>
            Node culture specific data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.FORUM">
            <summary>
            Code name for forums.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.FORUMMODERATOR">
            <summary>
            Forum moderator.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.FORUMPOST">
            <summary>
            Code name for forum posts.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.MEDIALIBRARY">
            <summary>
            Code name for media library.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.MEDIAFILE">
            <summary>
            Code name for media file.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BIZFORMROLE">
            <summary>
            BizForm role binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ALTERNATIVEFORM">
            <summary>
            Alternative form constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUP">
            <summary>
            Code name for general group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.FRIEND">
            <summary>
            Code name for friends.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUPMEMBER">
            <summary>
            Code name of group members.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.EVENTATTENDEE">
            <summary>
            Code name for general group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACTLIST">
            <summary>
            Code name for contact list.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.IGNORELIST">
            <summary>
            Code name for ignore list.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BOARD">
            <summary>
            Code name for message board boards.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BOARDMODERATOR">
            <summary>
            Code name for board moderator.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BOARDMESSAGE">
            <summary>
            Code name for board message.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERISSUE">
            <summary>
            Code name for newsletter issues.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERISSUEVARIANT">
            <summary>
            Code name for newsletter A/B variants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERSUBSCRIBER">
            <summary>
            Code name for newsletter subscribers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERUSERSUBSCRIBER">
            <summary>
            Code name for newsletter user specific subscribers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERROLESUBSCRIBER">
            <summary>
            Code name for newsletter role specific subscribers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERTEMPLATE">
            <summary>
            Code name for newsletter email templates.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.POLL">
            <summary>
            Code name for polls.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.POLLANSWER">
            <summary>
            Code name for poll answers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NOTIFICATIONTEMPLATE">
            <summary>
            Notification template code name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.REPORTCATEGORY">
            <summary>
            Code name for report categories.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.REPORT">
            <summary>
            Code name for reports.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.REPORTSUBSCRIPTION">
            <summary>
            Code name for report subscription
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BLOGCOMMENT">
            <summary>
            Blog comment.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BLOGDOCUMENT">
            <summary>
            Blog document.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SKU">
            <summary>
            Code name for SKUs.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.OPTIONCATEGORY">
            <summary>
            Code name for sku option categories.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CUSTOMER">
            <summary>
            Code name for customers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ORDER">
            <summary>
            Code name for orders.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WORKFLOWSTEPROLE">
            <summary>
            Workflow step role binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WORKFLOWSTEPUSER">
            <summary>
            Workflow step user binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WORKFLOWUSER">
            <summary>
            Workflow user binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.VERSIONHISTORY">
            <summary>
            Code name for version history.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.AUTOMATIONSTATE">
            <summary>
            Code name for marketing automation process.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.MVTCOMBINATION">
            <summary>
            Code name for MVT combinations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTMVTCOMBINATION">
            <summary>
            Code name for document MVT combinations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.MVTVARIANT">
            <summary>
            Code name for MVT variants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTMVTVARIANT">
            <summary>
            Code name for document MVT variants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACT">
            <summary>
            Code name for the contact.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACTGROUP">
            <summary>
            Code name for the contact group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SCORE">
            <summary>
            Code name for the score.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTENTPERSONALIZATIONVARIANT">
            <summary>
            Code name for the content personalization variant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTCONTENTPERSONALIZATIONVARIANT">
            <summary>
            Code name for the document content personalization variant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ABTEST">
            <summary>
            Code name for tests.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ABVARIANT">
            <summary>
            Code name for tests' variants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ACTIVITY">
            <summary>
            Code name for Activity.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BIZFORM">
            <summary>
            Code name for BizForms.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PROJECTADHOCTASK">
            <summary>
            Code name for Ad-hoc task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.OBJECTSCHEDULEDTASK">
            <summary>
            Object's scheduled task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.OBJECTRELATIONSHIP">
            <summary>
            Object relationship.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.RELATIONSHIPNAME">
            <summary>
            Relationship name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PERSONA">
            <summary>
            Code name for persona.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyName">
            <summary>
            Represents the settings key name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyName.KeyName">
            <summary>
            Key name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyName.SiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.#ctor(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Key name in format "[key name]"</param>
            <param name="siteIdentifier">Site identifier</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.ToString">
            <summary>
            Returns the fully qualified key name in format "[site name].[key name]" or "[key name]" for global setting.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.op_Implicit(System.String)~CMS.DataEngine.SettingsKeyName">
            <summary>
            Implicitly converts the specified SettingsKeyName string representation to a SettingsKeyName instance.
            </summary>
            <param name="keyName">Settings key name string representation</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.op_Implicit(CMS.DataEngine.SettingsKeyName)~System.String">
            <summary>
            Implicitly converts the specified SettingsKeyName instance to it's string representation.
            </summary>
            <param name="settingsKeyName">Settings key name</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyName.IsGlobal">
            <summary>
            Gets a value that indicates if the settings key name is global (i.e. site name is not specified).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyActionEnum">
            <summary>
            Enumerates the possible actions when changing the settings key.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyActionEnum.Update">
            <summary>
            Specifies that the settings key had already existed and was updated.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyActionEnum.Insert">
            <summary>
            Specifies that the settings key was newly created.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyActionEnum.Delete">
            <summary>
            Specifies that the settings key was removed.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyChangedEventArgs">
            <summary>
            Class containing data for event raised when the settings key is successfuly changed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyChangedEventArgs.Empty">
            <summary>
            Represents a settings key changed event with no event data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyChangedEventArgs.#cctor">
            <summary>
            Initializes the <see cref="T:CMS.DataEngine.SettingsKeyChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.SettingsKeyChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyChangedEventArgs.#ctor(System.String,System.Object,System.Int32,System.String,CMS.DataEngine.SettingsKeyActionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.SettingsKeyChangedEventArgs"/> class.
            </summary>
            <param name="keyName">Name of the key</param>
            <param name="keyValue">The key value</param>
            <param name="siteId">ID of the site</param>
            <param name="siteName">Name of the site</param>
            <param name="action">Action that was performed on the settings key</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.KeyName">
            <summary>
            Gets the name of the key.
            </summary>
            <value>The name of the key.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.KeyValue">
            <summary>
            Gets the key value.
            </summary>
            <value>The key value.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.SiteID">
            <summary>
            Gets the site ID.
            </summary>
            <value>The site ID.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.SiteName">
            <summary>
            Gets the name of the site.
            </summary>
            <value>The name of the site.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.Action">
            <summary>
            Gets the action that was performed on the settings key.
            </summary>
            <value>The action that was performed on the settings key.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.FullKeyName">
            <summary>
            Gets the full name of the key with site name prefix.
            </summary>
            <value>The full name of the key.</value>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyInfo">
            <summary>
            Represents a Settings key.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetDependencyCacheKeys(System.String,System.String)">
            <summary>
            Gets the array of dependency cache keys for current object.
            </summary>
            <param name="key">Cache key</param>
            <param name="context">Cache context</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.#ctor">
            <summary>
            Constructor, creates an empty SettingsKeyInfo structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates the DataClassInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetDefaultDataExportColumns">
            <summary>
            Returns names of all columns that should be exported with default data as a comma separated string. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetDefaultData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the default object installation data
            </summary>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyID">
            <summary>
            Gets or sets the key ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyName">
            <summary>
            Gets or sets the key name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyDisplayName">
            <summary>
            Gets or sets the key display name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyDescription">
            <summary>
            Gets or sets the key description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyExplanationText">
            <summary>
            Gets or sets the key explanation text.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyValue">
            <summary>
            Gets or sets the key value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyType">
            <summary>
            Gets or sets the key type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyCategoryID">
            <summary>
            Gets or sets the key category ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.SiteID">
            <summary>
            Gets or sets the key site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyLastModified">
            <summary>
            Time stamp.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyGUID">
            <summary>
            Key GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyOrder">
            <summary>
            Gets or sets the key order.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyDefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyValidation">
            <summary>
            Gets or sets regular expression for validation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyEditingControlPath">
            <summary>
            Gets or sets the path to formcontrol which can be used to edit the settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyFormControlSettings">
            <summary>
            Gets or sets the form control settings serialized in XML.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyLoadGeneration">
            <summary>
            Gets or sets the key load generation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyIsGlobal">
            <summary>
            Indicates if the settings key is only global.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyIsCustom">
            <summary>
            Indicates whether the settings key is custom or system default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyIsHidden">
            <summary>
            Indicates whether the settings key is hidden or not. If it is set to true, such key will not be displayed in
            the settings section and users will not be able to edit value of such key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.LogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyInfoProvider">
            <summary>
            Provides access to settings keys.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfoProvider.mSettings">
            <summary>
            Contains settings keys for given sites.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfoProvider.mIntValues">
            <summary>
            Cached integer values.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfoProvider.mBoolValues">
            <summary>
            Cached boolean values.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfoProvider.GetURL">
            <summary>
            Executes when URL is requested from the settings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetSettingsKeyInfo(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Sets the specified settings key data.
            </summary>
            <param name="infoObj">Settings key info object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfo(System.Int32)">
            <summary>
            Returns the settings key with specified ID.
            </summary>
            <param name="keyId">Key ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfo(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the settings key info for key with the specified name. The name can be either KeyName (for global settings) or SiteName.KeyName (for local settings).
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfo(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the settings key info for key with the specified name.
            </summary>
            <param name="keyName">Key name to retrieve</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.DeleteSettingsKeyInfo(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Deletes the specified settings key.
            </summary>
            <param name="infoObj">Settings key</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SearchSettingsKey(CMS.DataEngine.SettingsKeyInfo,System.String,System.Boolean)">
            <summary>
            Searches display name and description of the specified key for the specified text.
            The display name and description are localized and HTML encoded prior to searching.
            </summary>
            <param name="key">Key to search</param>
            <param name="searchText">Text to search for</param>
            <param name="searchInDescription">Indicates if the key description should be included in the search</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.MoveSettingsKeyUp(System.String)">
            <summary>
            Moves specified key up.
            </summary>
            <param name="keyName">Key code name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.MoveSettingsKeyDown(System.String)">
            <summary>
            Moves specified key down.
            </summary>
            <param name="keyName">Key code name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeys">
            <summary>
            Returns all settings keys.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeys(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns keys by the given parameters
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeys(System.Int32,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a DataSet with all the keys for given site and category sorted by KeyDisplayName.
            If site is not specified, only the global settings are loaded.
            </summary>
            <param name="categoryId">Settings category ID</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.Init">
            <summary>
            Initializes the settings key provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetFilesUrlExtension(System.String)">
            <summary>
            Returns URL extension used for files friendly URLs for specified site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettings(System.Int32,System.String)">
            <summary>
            Gets the settings
            </summary>
            <param name="generation">Settings generation</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadGeneration(System.Int32,System.Object)">
            <summary>
            Loads the specified generation of the objects.
            </summary>
            <param name="generation">Generation to load</param>
            <param name="parameter">Site name as a parameter</param>
            <returns>Returns true if the generation was not empty</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(System.Data.DataSet,System.String)">
            <summary>
            Loads the settings from the given DataSet
            </summary>
            <param name="ds">DataSet with the settings</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadGenerationReader(System.Int32,System.Object)">
            <summary>
            Loads the specified generation of the objects.
            </summary>
            <param name="generation">Generation to load</param>
            <param name="parameter">Site name as a parameter</param>
            <returns>Returns true if the generation was not empty</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Loads the settings from the given data reader
            </summary>
            <param name="reader">Data reader</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(System.String)">
            <summary>
            Loads all keys from the database to memory.
            </summary>
            <param name="siteName">Site name to load</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.ClearCachedValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Clears the cached value of the specified settings key.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetValue(CMS.DataEngine.SettingsKeyName,System.Object,System.Boolean)">
            <summary>
            Sets the value of the given key if the key exists.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <param name="value">Key value</param>
            <param name="logSynchronization">If true, synchronization task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetValue(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Object,System.Boolean)">
            <summary>
            Sets the value of the given key if the key exists.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="value">Key value</param>
            <param name="logSynchronization">If true, synchronization task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns value of the specified key from the database or "" if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <returns>Returns "" if the key does not exist</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns value of the specified key from the database or "" if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <returns>Returns "" if the key does not exist</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueFromDB(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Gets the settings key value from DB.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueFromDB(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the settings key value from DB.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetURLValue(CMS.DataEngine.SettingsKeyName,System.String)">
            <summary>
            Gets the URL value from settings.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <param name="defaultUrl">Default URL</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetURLValue(System.String,CMS.DataEngine.SiteInfoIdentifier,System.String)">
            <summary>
            Gets the URL value from settings.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="defaultUrl">Default URL</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the integer value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the integer value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDoubleValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the double value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDoubleValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the double value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the boolean value of the specified key from the database or false if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the boolean value of the specified key from the database or false if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValue(System.String,System.String,System.Boolean)">
            <summary>
            Returns the boolean value of setting in web.config or value of specified key if setting is not present in web.config file. 
            </summary>
            <param name="configKey">Web.config key</param>
            <param name="keyName">Name of the setting</param>
            <param name="settingDefaultValue">Default value of the setting when web.config key is missing and database is not available</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.IsValueInherited(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Checks if the value of the specified settings value is inherited.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.IsValueInherited(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks if the value of the specified settings value is inherited.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.ClearCachedValues(System.Boolean)">
            <summary>
            Clears all the cached settings key values.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeysInternal">
            <summary>
            Returns all settings keys.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the boolean value of the specified key from the database or false if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValueInternal(System.String,System.String,System.Boolean)">
            <summary>
            Returns the boolean value of setting in web.config or value of specified key if setting is not present in web.config file. 
            </summary>
            <param name="configKey">Web.config key</param>
            <param name="keyName">Name of the setting</param>
            <param name="settingDefaultValue">Default value of the setting when web.config key is missing and database is not available</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the integer value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDoubleValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the double value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetURLValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.String)">
            <summary>
            Gets the URL value from settings.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="defaultUrl">Default URL</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Returns value of the specified key from the database.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="nullIfNotFound">Return null if the key does not exist</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueFromDBInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the settings key value from DB.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Object,System.Boolean)">
            <summary>
            Sets the value of the given key if the key exists.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="value">Key value</param>
            <param name="logSynchronization">If true, synchronization task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetSettingsKeyInfoInternal(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Sets the specified settings key data.
            </summary>
            <param name="infoObj">Settings key info object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.DeleteSettingsKeyInfoInternal(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Deletes the specified settings key.
            </summary>
            <param name="infoObj">Settings key</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SearchSettingsKeyInternal(CMS.DataEngine.SettingsKeyInfo,System.String,System.Boolean)">
            <summary>
            Searches display name and description of the specified key for the specified text.
            The display name and description are localized and HTML encoded prior to searching.
            </summary>
            <param name="key">Key to search</param>
            <param name="searchText">Text to search for</param>
            <param name="searchInDescription">Indicates if the key description should be included in the search</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfoInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the settings key info for key with the specified name.
            </summary>
            <param name="keyName">Key name to retrieve</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.IsValueInheritedInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks if the value of the specified settings value is inherited.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.ClearCachedValuesInternal(System.Boolean)">
            <summary>
            Clears all the cached settings key values.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(CMS.DataEngine.SettingsKeyName,System.Boolean)">
            <summary>
            Returns value of the specified key from the database.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <param name="nullIfNotFound">Return null if the key does not exist</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Returns value of the specified key from the database.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="nullIfNotFound">Return null if the key does not exist</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetStringValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns string value of the specified key from the database or "" if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetStringValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns string value of the specified key from the database or "" if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="E:CMS.DataEngine.SettingsKeyInfoProvider.OnSettingsKeyChanged">
            <summary>
            Occurs when the settings key is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.DeploymentMode">
            <summary>
            Gets or sets the value that indicates whether the virtual objects are in deployment mode (reflects CMSDeploymentMode hidden setting).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.VirtualObjectsAllowed">
            <summary>
            Gets the value that indicates whether virtual path provider is running or deployment mode is set
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.IntValues">
            <summary>
            Cached integer values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.BoolValues">
            <summary>
            Cached boolean values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.Settings">
            <summary>
            Returns hashtable of settings indexed by site name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SiteInfoIdentifier">
            <summary>
            Represents the site info object identifier.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.#ctor(System.Int32)">
            <summary>
            Creates a new site info identifier using the site ID.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.#ctor(System.String)">
            <summary>
            Creates a new site info identifier using the site name.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.op_Implicit(System.Int32)~CMS.DataEngine.SiteInfoIdentifier">
            <summary>
            Implicitly converts integer to SiteInfoIdentifier.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.op_Implicit(System.String)~CMS.DataEngine.SiteInfoIdentifier">
            <summary>
            Implicitly converts string to SiteInfoIdentifier.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="T:CMS.DataEngine.SettingsService">
            <summary>
            Settings service
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsService.IsAvailable">
            <summary>
            Returns true if the settings service is available
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsService.Item(System.String)">
            <summary>
            Gets the specific settings from the database
            </summary>
            <param name="keyName">Settings key</param>
        </member>
        <member name="T:CMS.DataEngine.ISearchIndexInfo">
            <summary>
            Index info interface.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexSettings">
            <summary>
            Search index settings for current object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexType">
            <summary>
            Gets or sets the index type (documents, forums, etc).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexBatchSize">
            <summary>
            Gets or sets the batch size for data loading.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexCodeName">
            <summary>
            Gets index code name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchIndexSettings">
            <summary>
            SearchIndexSettings handles management of index settings container.
            </summary>    
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettings.CONTAINERROOTNAME">
            <summary>
            Root element name of index settings data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettings.ITEMELEMENTNAME">
            <summary>
            Element name which determines items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettings.ITEMIDENTIFIER">
            <summary>
            Attribute name which identifies single item of index settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.LoadData(System.String)">
            <summary>
            Loads settings from xml data.
            </summary>
            <param name="data">String of xml data</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetData">
            <summary>
            Returns xml code of search index settings.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetSearchIndexSettingsInfo(System.String)">
            <summary>
            Returns search index setting item.
            </summary>
            <param name="guid">String id</param>
            <returns>Returns search setting item or null if there is no such item</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetSearchIndexSettingsInfo(System.Guid)">
            <summary>
            Returns search index setting item.
            </summary>
            <param name="guid">ID of search setting item</param>
            <returns>Returns search setting item or null if there is no such item</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.SetSearchIndexSettingsInfo(CMS.DataEngine.SearchIndexSettingsInfo)">
            <summary>
            Adds or updates item in search index settings.
            </summary>
            <param name="sisi">Search index object</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.DeleteSearchIndexSettingsInfo(System.Guid)">
            <summary>
            Deletes search index setting item.
            </summary>
            <param name="guid">ID of search setting item</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.DeleteSearchIndexSettingsInfo(CMS.DataEngine.SearchIndexSettingsInfo)">
            <summary>
            Deletes search index setting item.
            </summary>
            <param name="sisi">SearchIndexSettingsInfo</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetAll">
            <summary>
            Returns dataset with all index settings items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettings.Items">
            <summary>
            Gets list of all settings items.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchIndexSettingsInfo">
            <summary>
            Search Index Settings Info object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.TYPE_ALLOWED">
            <summary>
            Public constant for item of type allowed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.TYPE_EXLUDED">
            <summary>
            Public constant for item of type excluded.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.mData">
            <summary>
            Collection of the data contents.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.splitClassNames">
            <summary>
            Split class names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.splitPaths">
            <summary>
            Split paths.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.MatchClassNames(System.String)">
            <summary>
            Returns true if there is classname in this item which matches specified parameter.
            </summary>
            <param name="className">ClassName to be matched</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.MatchPath(System.String)">
            <summary>
            Returns true if there is path in this item which matches(subpath or exect match) specified parameter.
            </summary>
            <param name="path">Path to be matched</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ID">
            <summary>
            Gets or sets item identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.Type">
            <summary>
            Gets or sets type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ClassNames">
            <summary>
            Gets or sets class names of the custom tables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.WhereCondition">
            <summary>
            Gets or sets the where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.SiteName">
            <summary>
            Gets or sets the item sitename.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ForumNames">
            <summary>
            Gets or sets the forum names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.Path">
            <summary>
            Gets or sets path.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeForums">
            <summary>
            Enables or disables forums inclusion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeBlogs">
            <summary>
            Enables or disables blogs inclusion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeMessageCommunication">
            <summary>
            Enables or disables message communication inclusion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeCategories">
            <summary>
            Enables or disables categories inclusion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeAttachments">
            <summary>
            Enables or disables attachment content indexing. If true, all the attachments with supported file 
            type (for which there is an extractor and which is allowed in the Site Manager setting) the text is 
            extracted and included in the search index.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TaskTypeEnum">
            <summary>
            Synchronization task types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.All">
            <summary>
            All task types (used within integration module)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.Unknown">
            <summary>
            Unkown task type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.UpdateDocument">
            <summary>
            Update document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.PublishDocument">
            <summary>
            Publish document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteDocument">
            <summary>
            Delete document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteAllCultures">
            <summary>
            Delete all culture versions of specified document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.MoveDocument">
            <summary>
            Moves document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.ArchiveDocument">
            <summary>
            Archive document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.UpdateObject">
            <summary>
            Update object task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteObject">
            <summary>
            Delete object task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RejectDocument">
            <summary>
            Archive document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CreateObject">
            <summary>
            Creates object task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CreateDocument">
            <summary>
            Creates document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CreateMediaFolder">
            <summary>
            Creates media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CopyMediaFolder">
            <summary>
            Copy media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.MoveMediaFolder">
            <summary>
            Moves media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteMediaFolder">
            <summary>
            Delete media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteMediaRootFolder">
            <summary>
            Delete media library root folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RenameMediaFolder">
            <summary>
            Rename media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.AddToSite">
            <summary>
            Add object to site.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RemoveFromSite">
            <summary>
            Remove object from site.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.BreakACLInheritance">
            <summary>
            Break ACL inheritance.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RestoreACLInheritance">
            <summary>
            Restore ACL inheritance.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractDataProvider">
            <summary>
            Data provider class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataProvider.GetNewConnection(System.String)">
            <summary>
            Returns new data connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataProvider.ProcessCommand(System.String,System.Object[])">
            <summary>
            Sends the specific command with arguments to the provider.
            </summary>
            <param name="commandName">Command name</param>
            <param name="commandArguments">Command arguments (parameters)</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.ConnectionString">
            <summary>
            Connection string to use for the connections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.CurrentScopeConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractDataConnection">
            <summary>
            Represents SQL Server data connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionCreated">
            <summary>
            If true, the connection was created from this object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mLocalTransaction">
            <summary>
            SqlTransaction object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mUseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mCommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mOriginalThreadID">
            <summary>
            Original thread ID of the connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mAdvancedSettings">
            <summary>
            Advanced settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedConnectionsList">
            <summary>
            List of nested connections
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedOpenConnections">
            <summary>
            List of nested connections that were automatically opened
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedOpenTransactions">
            <summary>
            List of nested connections that were automatically opened with transaction
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedConnections">
            <summary>
            Nested connections indexed by the connection string [connectionString ->  IDbConnection]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mLastError">
            <summary>
            Last connection error
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionGuid">
            <summary>
            Connection GUID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Returns result of the query as a Data reader. Keeps the connection open.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns a single value result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CheckThreadSafety">
            <summary>
            Checks the thread safety of current operation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.NativeDBConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.NativeConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.IsOpen">
            <summary>
            Returns true if connection to the database is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Open">
            <summary>
            Opens connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Close">
            <summary>
            Closes connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CommitTransaction">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.RollbackTransaction">
            <summary>
            Rollbacks current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.IsTransaction">
            <summary>
            Indicates if transaction is running.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Dispose">
            <summary>
            Disposes the connection object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.LoadDefaultConnectionString">
            <summary>
            Loads the default connection string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.HandleError(System.String,System.Exception)">
            <summary>
            Handles the error. Returns false, if the error was not handled
            </summary>
            <param name="queryText">Query text</param>
            <param name="ex">Exception to handle</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.HandleDbError(System.String,System.Data.Common.DbException)">
            <summary>
            Handles the database error. Returns false, if the error was not handled
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Database exception</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ValidateTransaction(System.Data.IDbTransaction)">
            <summary>
            Validates the transaction
            </summary>
            <param name="tr">Transaction to validate</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.PrepareCommand(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Prepares the SQL command for the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="allowTransaction">Allow transaction for the command</param>
            <param name="closeConnection">Close connection</param>
            <param name="commitTransaction">Commit transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.AddParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{CMS.DataEngine.DataParameter})">
            <summary>
            Adds the given parameters to the SQL command
            </summary>
            <param name="cmd">SQL command</param>
            <param name="queryParams">Parameters to add</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateParameter(CMS.DataEngine.DataParameter)">
            <summary>
            Creates a SQL parameter from the given data parameter
            </summary>
            <param name="param">Source parameter</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.SetParameterType(System.Data.Common.DbParameter,System.Type)">
            <summary>
            Sets the parameter type to a destination type
            </summary>
            <param name="param">Parameter to set</param>
            <param name="type">Desired parameter type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateNativeConnection">
            <summary>
            Creates a new native connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateCommand(System.String)">
            <summary>
            Creates a new SQL command
            </summary>
            <param name="cmdText">Command text</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new command parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateDataAdapter">
            <summary>
            Creates a data adapter
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetNestedConnection(System.String,System.Boolean)">
            <summary>
            Gets the nested connection with the given connection string
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="newConnection">If true, a new connection is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetExecutingConnection(System.String,System.Boolean)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.LogConnectionOperation(System.String,System.Boolean,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs the connection operation to the query log.
            </summary>
            <param name="operation">Connection operation</param>
            <param name="allowBeforeQuery">If true, the operation is allowed before the query when the query is open</param>
            <param name="conn">Connection around the operation</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionGUID">
            <summary>
            Connection GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionCreated">
            <summary>
            If true, some connection was used
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.UseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.AdvancedSettings">
            <summary>
            Advanced settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalAdvancedSettings">
            <summary>
            Local advanced settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.NativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.NativeDBConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.Transaction">
            <summary>
            Transaction object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalTransaction">
            <summary>
            Transaction object of local instance.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.CommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalKeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.DisableQueryDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractSqlGenerator">
            <summary>
            SQL generator base
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractSqlGenerator.mExcludeColumns">
            <summary>
            Excluded columns of the document which are not included into the queries.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractSqlGenerator.mGenerateWithExpand">
            <summary>
            Gets or sets whether With (EXPAND) should be generated in views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetTreeJoinedBaseView(System.String,System.String,System.String@)">
            <summary>
            Generates the Tree_Joined view query joined on the given NodeID column
            </summary>
            <param name="viewName">View name</param>
            <param name="joinOn">NodeID column to use for JOIN</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetTreeJoinedView">
            <summary>
            Generates the query for the Tree_Joined view
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetTreeJoinedVersionsView">
            <summary>
            Generates the code for Tree_Joined_Versions view
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetCommunityMemberView">
            <summary>
            Generates the code for the Community_Member view
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetUserView">
            <summary>
            Generates the code for the User view
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSystemViewSqlQuery(System.String,System.String@)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSqlQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetGeneralQuery(CMS.DataEngine.SqlOperationTypeEnum)">
            <summary>
            Gets a general query of the given type
            </summary>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GenerateQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetClassWhere(System.String)">
            <summary>
            Gets the where condition for a given class name
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetPKWhereCondition(System.String)">
            <summary>
            Returns the where condition for given primary key (single or list separated by semicolon).
            </summary>
            <param name="pkName">Primary key name (list)</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.IsColumnExcluded(System.String,System.String)">
            <summary>
            Returns true if the column is excluded.
            </summary>
            <param name="excludedColumns">List of excluded columns (starting and ending with semicolon ";")</param>
            <param name="column">Column to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetColumnList(System.String,System.String,System.Boolean)">
            <summary>
            Generates the column list for the SQL query.
            </summary>
            <param name="className">Class name</param>
            <param name="excludedColumns">List of the excluded columns</param>
            <param name="fullName">Generate full name, including the table name?</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetColumnList(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Generates the column list for the SQL query.
            </summary>
            <param name="className">Class name</param>
            <param name="excludedColumns">List of the excluded columns</param>
            <param name="fullName">Generate full name, including the table name?</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractSqlGenerator.ExcludeColumns">
            <summary>
            Gets or sets the excluded columns of the document which are not included into the queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSqlGenerator.GenerateWithExpand">
            <summary>
            Gets or sets whether With (EXPAND) should be generated in views.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractTableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseServerName">
            <summary>
            Database server name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseServerVersion">
            <summary>
            Database server version
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetConnection">
            <summary>
            Gets the connection for the table management
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropView(System.String)">
            <summary>
            Drop specified view from database. Returns the schema of the dropped view
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ViewExists(System.String,System.String@)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
            <param name="schema">Returns the view schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetTables(System.String)">
            <summary>
            Gets the tables in the current database
            </summary>
            <param name="where">Tables where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetTableDependencies(System.String)">
            <summary>
            Gets list of object names which have foreign key constraint dependency.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetTablePKName(System.String)">
            <summary>
            Returns name of the primary key. If more columns in PK, names are separated by semicolon ";".
            </summary>
            <param name="tableName">Name of the table to get PK column(s) from.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetIndexes(System.String)">
            <summary>
            Returns DataSet with indexes of the given object. Returns columns IndexName, DropScript, CreateScript
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specified table column information retrieved from database information schema. Returns columns ColumnName, DataType, DataSize, DataPrecision, Nullable, DefaultValue
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column in system (en) culture. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column in system (en) culture</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetColumnIndexes(System.String,System.String)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropColumnIndexes(System.String,System.String)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropDefaultConstraint(System.String,System.String)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterTableColumnWithDefaultValue(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Alter table column with default value.
            </summary>        
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="newColumnName">New column name, null if no new column is created</param>
            <param name="newColumnType">New column type, null if no new column is created</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
            <param name="newColumnDefaultValue">Column default value in system (en) culture</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RenameColumn(System.String,System.String,System.String)">
            <summary>
            Changes name of the column.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnName">Current name of the column</param>
            <param name="newColumnName">New name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetConstraintName(System.String,System.String)">
            <summary>
            Returns constraint's name truncated to 128 chars (128 chars is limit of database column name).
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetPKConstraintName(System.String)">
            <summary>
            Returns the name of the primary key constraint.
            </summary>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RecreatePKConstraint(System.String,System.String[])">
            <summary>
            Drops the current primary key constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseInfo">
            <summary>
            Gets size related information about the database.
            </summary>
            <returns>DataSet with 2 tables containing related data</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseSize(System.String)">
            <summary>
            Gets database size (including log size) or N/A string if the size cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseVersion">
            <summary>
            Gets the database version
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseName">
            <summary>
            Gets database name or N/A string if the name cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseServerName">
            <summary>
            Gets database server name or N/A string if the name cannot be retrieved.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseServerVersion">
            <summary>
            Gets database server version info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetValueString(System.Object)">
            <summary>
            Returns the value string using the database culture. Does not include apostrophes for types that need them
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.EnsureDefaultValue(System.Boolean,System.String,System.String)">
            <summary>
            Add apostrophes around the column default value string according to column type.
            </summary>
            <param name="allowNull">Indicates whether NULL values are allowed</param>
            <param name="sqlType">SQL type of the table column</param>
            <param name="defValue">Default to add apostrophes to</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetCode(System.String)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Creates specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Alters specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseName">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseServerName">
            <summary>
            Name of database server.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseServerVersion">
            <summary>
            Version of database server.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseSize">
            <summary>
            Database size(including log size) in MB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseVersion">
            <summary>
            Database version
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.ConnectionString">
            <summary>
            Connection string to use for table management
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DisableDebug">
            <summary>
            If true, the debug is disabled in this table manager
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSConnectionScope">
            <summary>
            Connection scope. Ensures that all queries within given context use the same database connection.
            </summary>
            <remarks>
            To set the connection scope for the whole API (e.g. DataQuery), use the <see cref="T:CMS.DataEngine.CMSConnectionContext"/> class.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Empty constructor. Creates a new connection and ensures that all database connections during the live of this object will use that connection.
            </summary>
            <param name="newConnection">If true, creates a new connection</param>
            <param name="openConnection">If true, opens the connection</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor. Ensures that all database connections during the live of this object will use the given connection.
            </summary>
            <param name="connectionString">Connection string to use within all underlying database operations. If null new connection is created</param>
            <param name="openConnection">If true, opens the connection</param>
            <param name="defaultIfNotFound">If true, the default connection string is used if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(CMS.DataEngine.IDataConnection,System.Boolean)">
            <summary>
            Constructor. Ensures that all database connections during the live of this object will use the given connection.
            </summary>
            <param name="conn">Connection to use within all database operations. If null new connection is created</param>
            <param name="openConnection">If true, opens the connection</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Init(System.String,CMS.DataEngine.IDataConnection,System.Boolean,System.Boolean)">
            <summary>
            Initializes the context
            </summary>
            <param name="connectionStringName">Connection string or connection string name to use within all underlying database operations. If null, default connection is used.</param>
            <param name="conn">Connection to use</param>
            <param name="openConnection">Open the connection</param>
            <param name="defaultIfNotFound">If true, the default connection string is used if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.ResetConnection">
            <summary>
            Resets the connection to recover from error.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.ConnectionString">
            <summary>
            Connection string name that the thread should use to access the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.Connection">
            <summary>
            Connection of the current scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.DisableQueryDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.DisableDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSTransactionScope">
            <summary>
            Transaction scope. Ensures that all queries run within single transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mUseTransactionScope">
            <summary>
            If true, .NET transaction scope is used instead of standard transactions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mTransactionScope">
            <summary>
            Transaction scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mConnectionScope">
            <summary>
            Inner connection scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mCloseConnection">
            <summary>
            This scope closes the connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mCommitTransaction">
            <summary>
            This scope commits the transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mRollbackTransaction">
            <summary>
            This scope should rollback the transaction in case of errors.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.#ctor(CMS.DataEngine.IDataConnection)">
            <summary>
            Constructor. Opens the connection and begins the transaction.
            </summary>
            <param name="conn">Connection to use within all database operations</param>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Complete">
            <summary>
            Completes the transaction (does the same as Commit).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Commit">
            <summary>
            Commits the transaction (does the same as Complete).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.CommitAndBeginNew">
            <summary>
            Commits current transaction and begins new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.EnsureRequestScope">
            <summary>
            Ensures the transaction scope for current request.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.DisposeRequestScope">
            <summary>
            Disposes the scope for current request.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.CommitRequestScope">
            <summary>
            Commits the current transaction scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.Connection">
            <summary>
            Connection of the current scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.UseTransactionScope">
            <summary>
            If true, .NET transaction scope is used instead of standard transactions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.IsInTransaction">
            <summary>
            Returns true if the current code executes in a scope of open transaction
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassStructureInfo">
            <summary>
            Class information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.RegExSchemaColumns">
            <summary>
            Regular expression for the schema columns list.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.RegExSchemaTypes">
            <summary>
            Regular expression for the schema types list.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mClassInfos">
            <summary>
            Class structure infos [className] -> [ClassInfo]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mColumnNames">
            <summary>
            List of column names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassStructureInfo.mIDColumn">
            <summary>
            ID column name(s).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="className">Class name</param>
            <param name="xmlSchema">Class XML schema</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetIDColumn">
            <summary>
            Gets the ID column name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnNames">
            <summary>
            Gets the list of column names
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetNewData">
            <summary>
            Gets new data array for object of the given class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.SetAllMissing(System.Object[])">
            <summary>
            Sets all the items in the data to missing values.
            </summary>
            <param name="data">Data to set</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.CheckComplete(System.Object[])">
            <summary>
            Checks whether the given data is complete (has all columns set to some value).
            </summary>
            <param name="data">Data to check</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetNewDataSet">
            <summary>
            Gets new data structure for class data as a DataSet.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.TryGetValue(CMS.DataEngine.IDataClass,System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="obj">Object</param>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetValue(CMS.DataEngine.IDataClass,System.String)">
            <summary>
            Gets the value of the given object.
            </summary>
            <param name="obj">Object</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.SetValue(CMS.DataEngine.IDataClass,System.String,System.Object)">
            <summary>
            Sets the value of the given object.
            </summary>
            <param name="obj">Object to update</param>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnIndex(System.String)">
            <summary>
            Gets the column index.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnType(System.String)">
            <summary>
            Gets the column type.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the data class has the specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ConvertDataToParams(System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Returns the object data converted to the query parameters.
            </summary>
            <param name="data">Data</param>
            <param name="allowMissing">If true, the process allows missing values</param>
            <param name="nullForMissing">If true, missing values are replaced by NULLs</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.LoadColumns(System.String)">
            <summary>
            Loads the columns from given XML schema.
            </summary>
            <param name="xmlSchema">XML schema</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.RegisterColumn(System.String,System.Type)">
            <summary>
            Registers the given column within the structure info
            </summary>
            <param name="colName">Column name</param>
            <param name="colType">Column type</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.InitCollections">
            <summary>
            Initializes the inner collections for structure
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ResolveColumns(System.String,System.Boolean)">
            <summary>
            Resolves the given list of columns
            </summary>
            <param name="columns">Columns to resolve</param>
            <param name="binaryData">If true, binary data columns are included, otherwise excluded</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ResolveColumns(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Resolves the given list of columns
            </summary>
            <param name="columns">Columns to resolve</param>
            <param name="excludeColumns">Columns to exclude</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumns``1">
            <summary>
            Gets the list of columns of the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumns(System.Type)">
            <summary>
            Gets the list of columns of the given type
            </summary>
            <param name="type">Type to match</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetClassInfo(System.String)">
            <summary>
            Returns the class info for specified class.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Clear(System.Boolean)">
            <summary>
            Clear the class infos and properties lists of all object types.
            </summary>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Remove(System.String,System.Boolean)">
            <summary>
            Removes the specified class structure definition.
            </summary>
            <param name="className">ClassName to remove</param>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ResolveColumns(System.String,System.Collections.Generic.List{System.String},System.Func{System.Collections.Generic.List{System.String}})">
            <summary>
            Resolves the columns in the given expression
            </summary>
            <param name="columns">Columns to resolve</param>
            <param name="excludeColumns">Columns to exclude</param>
            <param name="getAllColumns">Function to provide all columns</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ResolveColumnsInternal(System.String,System.Collections.Generic.List{System.String},System.Func{System.Collections.Generic.List{System.String}})">
            <summary>
            Resolves the columns in the given expression
            </summary>
            <param name="columns">Columns to resolve</param>
            <param name="excludeColumns">Columns to exclude</param>
            <param name="getAllColumns">Function to provide all columns</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumns(System.String[])">
            <summary>
            Gets the columns for the listed class names
            </summary>
            <param name="classNames">List of class names to get</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetXmlSchema">
            <summary>
            Gets the XML schema of the DataSet represented by this structure
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ClassInfos">
            <summary>
            Class structure infos [className] -> [ClassInfo]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnsCount">
            <summary>
            Columns count.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnDefinitions">
            <summary>
            Column definitions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnIndexes">
            <summary>
            Column indexes dictionary [columnName] -> [columnIndex]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.BinaryColumns">
            <summary>
            List of binary column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.StringColumns">
            <summary>
            List of string column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.IDColumn">
            <summary>
            ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.DataClassInfo">
            <summary>
            Data class info object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.HasBinaryColumns">
            <summary>
            Returns true if this class has some binary columns
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ConnectionHelper">
            <summary>
            Connection helper class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.DEFAULT_CONNECTIONSTRING_NAME">
            <summary>
            Default connection string name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.mDomainConnectionStringsPrefixes">
            <summary>
            Table of connection string prefixes per domain [domain -> connectionString prefix]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.mConnectionString">
            <summary>
            Current connection string.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.mConnectionStringName">
            <summary>
            Current connection string name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.mConnectionStringPrefix">
            <summary>
            Current connection string prefix.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.mConnectionStrings">
            <summary>
            Dictionary of connection strings
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.DisposeConnectionAfterClose">
            <summary>
            If true, disposes connection after the connection is closed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.TransactionIsolationLevel">
            <summary>
            Isolation level for SQL operations with transactions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.DefaultCommandTimeout">
            <summary>
            Command timeout for the SQL commands.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.LongRunningCommandTimeout">
            <summary>
            Command timeout in seconds for the SQL queries which are known to possibly take more time than standard command timeout.
            Long running queries have to be explicitly wrapped with CMSConnectionScope with its CommandTimeout property set to this value.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.CheckThreadSafety">
            <summary>
            If true, the thread safety of the connection access is checked (the connection must be used only in thread where it was originally created).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.UseContextConnection">
            <summary>
            If true, single connection is used for the entire request.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.KeepContextConnectionOpen">
            <summary>
            If true, the connection is opened only once for the entire request and kept open until the end of the request.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.Init">
            <summary>
            Initializes the connection helper
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.Clear">
            <summary>
            Clears the connection helper cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionStringPrefix(System.String)">
            <summary>
            Gets the connection string name for the given domain
            </summary>
            <param name="domain">Domain name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnection(System.String)">
            <summary>
            Returns the connection.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionByName(System.String,System.Boolean)">
            <summary>
            Returns the connection.
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="defaultIfNotFound">If true, the default connection string is returned if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(System.String)">
            <summary>
            Gets the connection string
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(System.String,System.Boolean)">
            <summary>
            Gets the connection string
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="defaultIfNotFound">If true, the default connection string is returned if the given connection string is not found. Default connection string is represented by null in this context.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetFirstFoundConnectionString(System.String,System.String[])">
            <summary>
            Gets the first found connection string by the prefix, if none found, returns null
            </summary>
            <param name="baseConnectionString">Base connection string</param>
            <param name="prefixes">Connection string prefixes to try</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.UpdateAll(System.String,System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Runs the update all query of the given class name
            </summary>
            <param name="className">Class name</param>
            <param name="where">Where condition</param>
            <param name="parameters">Parameters with the data to update</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes query and returns result as a a single value.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes query and returns result as a a single value.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes query and returns the number of affected rows.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes query and returns the number of affected rows.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="query">Query to execute</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.Boolean)">
            <summary>
            Generates the connection string with the specified parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
            <param name="timeout">Connection timeout</param>
            <param name="htmlEncoded">Html encoded to be able to display it properly on the page</param>
            <param name="language">Connection language</param>
            <param name="azure">Specifies whether connection string is for Microsoft Azure</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.TestConnection(System.String)">
            <summary>
            Tests the given connection parameters.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.TestConnection(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String)">
            <summary>
            Tests the given connection parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetSqlConnectionString">
            <summary>
            Returns the connection string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.LoadConnectionString(System.String)">
            <summary>
            Returns the connection string.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetSqlConnectionString(System.String)">
            <summary>
            Returns the connection string.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetIsolationLevel(System.Object,System.Data.IsolationLevel)">
            <summary>
            Returns the isolation level evaluated from the string representation.
            </summary>
            <param name="value">String value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.InitRequestContext">
            <summary>
            Initializes the request context to use proper database based on current domain name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.SetConnectionContext(System.String)">
            <summary>
            Sets current context to the given connection string prefix, e.g. for prefix "External" the connection string "ExternalCMSConnectionString" will be used
            instead of the default "CMSConnectionString". To revert to default DB, use prefix null or empty string.
            </summary>
            <param name="connStringPrefix">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ConnectionStringChanged(System.String,System.String)">
            <summary>
            Returns true if the connections string have changed. It considers empty string and CMSConnectionString equal.
            </summary>
            <param name="oldConnStr">Old connection string</param>
            <param name="newConnStr">New connection string</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.IsDefaultConnectionString(System.String)">
            <summary>
            Returns true if the given connection string is a default connection string
            </summary>
            <param name="connStr">Connection string to check</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetQueryText(CMS.DataEngine.QueryInfo,CMS.DataEngine.QueryMacros)">
            <summary>
            Returns query text for given query
            </summary>
            <param name="query">Query object</param>
            <param name="macros">Query macros</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.IsLocalCMSDatabase(System.String)">
            <summary>
            Returns true, if the given connection string represents a connection to the local CMS database
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.OpenedTransactions">
            <summary>
            Number of the opened transactions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.OpenedConnections">
            <summary>
            Number of the opened connections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionStringName">
            <summary>
            Global connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionStringPrefix">
            <summary>
            Global connection string prefix
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionString">
            <summary>
            Global connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.IsConnectionStringInitialized">
            <summary>
            Indicates whether connection string is initialized or not.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionAvailable">
            <summary>
            Returns true if the connection is available.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper">
            <summary>
            Cache support for data and data objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the cached object from caches.
            </summary>
            <param name="key">Cache key</param>
            <param name="requestCache">Get object from request cache</param>
            <param name="standardCache">Get object from standard cache</param>
            <remarks>Changes the cache flags if the object is found in cache</remarks>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.Int32,CMS.DataEngine.DataCacheHelper.GetEventHandler1{CMS.DataEngine.BaseInfo,System.Int32},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.DataEngine.BaseInfo},System.String)">
            <summary>
            Gets the object by its ID using the cache.
            </summary>
            <param name="id">ID of the object</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler1{CMS.DataEngine.BaseInfo,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.DataEngine.BaseInfo},System.String)">
            <summary>
            Gets the object by its name using the cache.
            </summary>
            <param name="name">Name of the object</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.String,System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler2{CMS.DataEngine.BaseInfo,System.String,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.DataEngine.BaseInfo},System.String)">
            <summary>
            Gets the object by its name and site name using the cache.
            </summary>
            <param name="name">Name of the object</param>
            <param name="siteName">Site name</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.Guid,CMS.DataEngine.DataCacheHelper.GetEventHandler1{CMS.DataEngine.BaseInfo,System.Guid},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.DataEngine.BaseInfo},System.String)">
            <summary>
            Gets the object by its GUID using the cache.
            </summary>
            <param name="guid">Guid of the object</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedObject(System.Guid,System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler2{CMS.DataEngine.BaseInfo,System.Guid,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{CMS.DataEngine.BaseInfo},System.String)">
            <summary>
            Gets the object by its GUID using the cache.
            </summary>
            <param name="guid">Guid of the object</param>
            <param name="siteName">Site name</param>
            <param name="handler">Handler to retrieve the object from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCachedData(System.String,System.String,System.Int32,System.String,CMS.DataEngine.DataCacheHelper.GetEventHandler4{System.Data.DataSet,System.String,System.String,System.Int32,System.String},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{System.Data.DataSet},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <param name="where">Where condition</param>]
            <param name="orderBy">Order by clause</param>
            <param name="topN">Top N users</param>
            <param name="columns">Columns to get</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.StoreToCache``1(``0,System.String,System.Boolean,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Stores the object to the cache.
            </summary>
            <param name="result">Result to store</param>
            <param name="key">Cache key</param>
            <param name="standardCache">Store to standard cache</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Store to request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached``1(CMS.DataEngine.DataCacheHelper.GetEventHandler{``0},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached1``2(``1,CMS.DataEngine.DataCacheHelper.GetEventHandler1{``0,``1},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached2``3(``1,``2,CMS.DataEngine.DataCacheHelper.GetEventHandler2{``0,``1,``2},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached3``4(``1,``2,``3,CMS.DataEngine.DataCacheHelper.GetEventHandler3{``0,``1,``2,``3},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached4``5(``1,``2,``3,``4,CMS.DataEngine.DataCacheHelper.GetEventHandler4{``0,``1,``2,``3,``4},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached5``6(``1,``2,``3,``4,``5,CMS.DataEngine.DataCacheHelper.GetEventHandler5{``0,``1,``2,``3,``4,``5},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached6``7(``1,``2,``3,``4,``5,``6,CMS.DataEngine.DataCacheHelper.GetEventHandler6{``0,``1,``2,``3,``4,``5,``6},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached7``8(``1,``2,``3,``4,``5,``6,``7,CMS.DataEngine.DataCacheHelper.GetEventHandler7{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached8``9(``1,``2,``3,``4,``5,``6,``7,``8,CMS.DataEngine.DataCacheHelper.GetEventHandler8{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached9``10(``1,``2,``3,``4,``5,``6,``7,``8,``9,CMS.DataEngine.DataCacheHelper.GetEventHandler9{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="M:CMS.DataEngine.DataCacheHelper.GetCached10``11(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,CMS.DataEngine.DataCacheHelper.GetEventHandler10{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.String,System.Int32,System.Boolean,CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler{``0},System.String)">
            <summary>
            Gets the data using the cache.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <typeparam name="P10Type">Tenth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
            <param name="param10">Tenth parameter</param>
            <param name="handler">Handler to retrieve the data from the database</param>
            <param name="key">Cache key to use</param>
            <param name="cacheMinutes">Cache minutes</param>
            <param name="requestCache">Use request cache</param>
            <param name="dependencyCallback">Callback to get the cache dependency for the object</param>
            <param name="context">Context string</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetCacheDependencyEventHandler`1">
            <summary>
            Handler to get the cache dependency for particular object.
            </summary>
            <param name="obj">Cached object</param>
            <param name="key">Object key</param>
            <param name="context">Context string</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler`1">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler1`2">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <param name="param1">First parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler2`3">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler3`4">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler4`5">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler5`6">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler6`7">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler7`8">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler8`9">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler9`10">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataCacheHelper.GetEventHandler10`11">
            <summary>
            Generic event handler for the data retrieval.
            </summary>
            <typeparam name="ReturnType">Return type</typeparam>
            <typeparam name="P1Type">First parameter type</typeparam>
            <typeparam name="P2Type">Second parameter type</typeparam>
            <typeparam name="P3Type">Third parameter type</typeparam>
            <typeparam name="P4Type">Fourth parameter type</typeparam>
            <typeparam name="P5Type">Fifth parameter type</typeparam>
            <typeparam name="P6Type">Sixth parameter type</typeparam>
            <typeparam name="P7Type">Seventh parameter type</typeparam>
            <typeparam name="P8Type">Eight parameter type</typeparam>
            <typeparam name="P9Type">Nineth parameter type</typeparam>
            <typeparam name="P10Type">Tenth parameter type</typeparam>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
            <param name="param3">Third parameter</param>
            <param name="param4">Fourth parameter</param>
            <param name="param5">Fifth parameter</param>
            <param name="param6">Sixth parameter</param>
            <param name="param7">Seventh parameter</param>
            <param name="param8">Eight parameter</param>
            <param name="param9">Nineth parameter</param>
            <param name="param10">Tenth parameter</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassFactory">
            <summary>
            DataClass factory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Creates new DataClass of the given type
            </summary>
            <param name="structureInfo">Class structure info</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String)">
            <summary>
            Creates new DataClass of the given type
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,System.Int32)">
            <summary>
            Constructor. Gets a class name and parameters for selecting the item. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,System.Data.DataRow)">
            <summary>
            Constructor. Gets a class name and data row. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="dataRow">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,CMS.Base.IDataContainer)">
            <summary>
            Constructor. Gets a class name and data row. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="data">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.ChangeDefaultDataClassTypeTo``1">
            <summary>
            Changes the default data class type to specific class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.ResetDataClassType">
            <summary>
            Resets the default data class type to specific class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.LoadClassData(System.Data.DataRow,CMS.DataEngine.IDataClass)">
            <summary>
            Loads the data of the DataRow object to the class.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.LoadClassData(CMS.Base.IDataContainer,CMS.DataEngine.IDataClass)">
            <summary>
            Loads the data of the IDataContainer object to the class.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.CopyClassData(CMS.DataEngine.IDataClass,CMS.DataEngine.IDataClass)">
            <summary>
            Copies the data of the DataClass object to another.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.CopyOriginalData(CMS.DataEngine.IDataClass,CMS.DataEngine.IDataClass)">
            <summary>
            Copies the original data of the DataClass object to another.
            </summary>
            <param name="sourceData">Object with source data</param>
            <param name="destData">Destination object</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralConnection">
            <summary>
            Represents a general database connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mDataConnection">
            <summary>
            Data connection for specific provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralConnection.mConnectionGuid">
            <summary>
            Connection GUID to identify the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.CreateInstance(System.String)">
            <summary>
            Creates new instance of the connection object.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Dispose">
            <summary>
            Disposes the connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.IsOpen">
            <summary>
            Returns true if the connection is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetExecutingConnection(CMS.DataEngine.QueryParameters)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetExecutingConnection(System.String,System.Boolean)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(CMS.DataEngine.QueryParameters,System.Int32@)">
            <summary>
            Executes query and returns result as a DataSet. Returns the total number of result items.
            </summary>
            <param name="query">Query parameters</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.RunQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Runs the query against SQL DB.
            </summary>
            <param name="query">Query to run</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Runs the query.
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(CMS.DataEngine.QueryParameters,System.Data.CommandBehavior)">
            <summary>
            Runs the query and returns result as Data reader. Keeps the connection open.
            </summary>
            <param name="query">Query parameters</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(CMS.DataEngine.QueryParameters)">
            <summary>
            Runs the query and returns result as a single value.
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(CMS.DataEngine.QueryInfo,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="qi">Query info</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes query and returns the number of affected rows.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros,System.Data.CommandBehavior)">
            <summary>
            Executes query and returns result as a data reader. Keeps the connection open.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(CMS.DataEngine.QueryInfo,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros,System.Data.CommandBehavior)">
            <summary>
            Executes query and returns result as a data reader. Keeps the connection open.
            </summary>
            <param name="qi">Query info</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Runs the query and returns result as Data reader. Keeps the connection open.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="commandBehavior">Command behavior</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes query and returns result as a a single value.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insertion settings</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.LogQueryStart(System.String,System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs query start. Logs the query to the file and to current request log for debugging.
            </summary>
            <param name="queryName">Query name</param>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="conn">Connection for the query execution</param>
            <returns>Returns the new log item</returns>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.LogQueryEnd(System.Object)">
            <summary>
            Logs the end of the query processing.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DataConnection">
            <summary>
            Data connection for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.UserID">
            <summary>
            ID of the current user.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.ConnectionGuid">
            <summary>
            Connection GUID to identify the connection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.FireErrorOnExecute">
            <summary>
            If true, an error if fired on execution (for debug purposes).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.AdvancedSettings">
            <summary>
            Advanced settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DisableQueryDebug">
            <summary>
            If true, the debug of the executed queries is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.CacheMinutes">
            <summary>
            Cache minutes for which the selected data should be cached (only for SELECT queries).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.CacheDependency">
            <summary>
            Cache dependency for the cached items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.UseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.CommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataClass">
            <summary>
            DataClass interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Insert">
            <summary> 
            Inserts current record in the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Insert(System.Boolean)">
            <summary> 
            Inserts current record in the database
            </summary>
            <param name="getId">If true, ID of the new object is initialized</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Upsert(CMS.DataEngine.WhereCondition)">
            <summary>
            Updates or inserts the current record.
            </summary>
            <param name="existingWhere">Where condition for the existing object</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Update">
            <summary>
            Updates current record.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Delete">
            <summary>
            Deletes current record.
            </summary>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Delete(System.Boolean)">
            <summary>
            Deletes current record.
            </summary>
            <param name="preserveData">If true, object data are preserved (it is possible to manipulate with the object further)</param>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Clone">
            <summary>
            Returns the cloned DataClass object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.IsEmpty">
            <summary>
            Returns true if the object is empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetValue(System.Int32)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.SetValue(System.Int32,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.IDataClass.ItemChanged(System.Int32)">
            <summary>
            Returns true if the item on specified column index changed.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetOriginalValue(System.Int32)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetDataSet">
            <summary>
            Gets the DataSet from the object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Init(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Initializes an instance of data class after created by empty constructor
            </summary>
            <param name="structureInfo">Class structure info</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.CopyDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the class data to other data class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.CopyOriginalDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the original class data to other data class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.LoadData(CMS.Base.IDataContainer)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.LoadData(System.Data.DataRow)">
            <summary>
            Loads the object data from given DataRow.
            </summary>
            <param name="dr">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.LoadData(System.Object[])">
            <summary>
            Loads the object data form the given array
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.LoadData(System.Int32)">
            <summary>
            Loads the object data by the given primary key value
            </summary>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.Item(System.Int32)">
            <summary>
            Column indexer by index.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ClassName">
            <summary> 
            Name of the data class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.IDColumn">
            <summary>
            ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.StructureInfo">
            <summary>
            Class structure information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ColumnsCount">
            <summary>
            Number of the object columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.UseOriginalData">
            <summary>
            If true, original data is used instead of the actual data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.TrackChanges">
            <summary>
            If true, the object tracks changes to its values
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SimpleDataClass">
            <summary>
            Simple DataClass object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mData">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mOriginalData">
            <summary>
            Object original data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mIDWasChanged">
            <summary>
            True if there was a change to the ID value (change to the same value is also considered a change)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mStructureInfo">
            <summary>
            Class structure info.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mConnection">
            <summary>
            General connection object used to access data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mAllowPartialUpdate">
            <summary>
            If true, the object allows updates of only updated fields
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SimpleDataClass.mTrackChanges">
            <summary>
            If true, the object tracks changes to its values
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.Boolean)">
            <summary>
            Internally visible constructor
            </summary>
            <param name="dummy">Dummy parameter</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Init(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Initializes an instance of data class after created by empty constructor
            </summary>
            <param name="structureInfo">Class structure info</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Object info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Object info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetValue(System.String)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetValue(System.Int32)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnIndex">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Clone">
            <summary>
            Clones the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataSet">
            <summary>
            Gets the DataSet from the object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataRow">
            <summary>
            Gets the class Data row.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(CMS.Base.IDataContainer)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(System.Data.DataRow)">
            <summary>
            Loads the object data from given DataRow.
            </summary>
            <param name="dr">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(System.Object[])">
            <summary>
            Loads the object data form the given array
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SelectData(System.String,System.Int32)">
            <summary>
            Loads data row of the current class with specified value of column (typically ID).
            </summary>
            <param name="className">Class name</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(System.Int32)">
            <summary>
            Loads the object data by the given primary key value
            </summary>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.NullMissingData">
            <summary>
            Loads the null values into the missing fields.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadMissingData(System.Data.DataRow)">
            <summary>
            Loads the missing object data from given DataRow.
            </summary>
            <param name="dr">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Delete">
            <summary>
            Deletes current record.
            </summary>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Delete(System.Boolean)">
            <summary>
            Deletes current record.
            </summary>
            <param name="preserveData">If true, object data are preserved (it os possible to manipulate with the object further)</param>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDeleteParameters">
            <summary>
            Gets the parameters for the delete query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.AddIDWhere(CMS.DataEngine.DataQuery)">
            <summary>
            Adds ID where condition for this object 
            </summary>
            <param name="q">Data query to manipulate</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Insert">
            <summary> 
            Inserts current record in the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Insert(System.Boolean)">
            <summary> 
            Inserts current record in the database.
            </summary>
            <param name="getId">If true, ID of the new object is initialized</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.UpdateID(System.Data.DataSet)">
            <summary>
            Updates the ID of the record from the given query result
            </summary>
            <param name="result">Query result</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Update">
            <summary>
            Updates current record.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Upsert(CMS.DataEngine.WhereCondition)">
            <summary>
            Updates or inserts the current record.
            </summary>
            <param name="existingWhere">Where condition for the existing object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.IsEmpty">
            <summary>
            Returns true if the object is empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataQuery(System.String)">
            <summary>
            Gets the data query for this class
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.IncludeData(CMS.DataEngine.DataQuery,System.Boolean,System.Func{System.String,System.Boolean},System.String[])">
            <summary>
            Includes the object data to the query. Does not include primary key columns. Returns true if some data was included.
            </summary>
            <param name="q">Data query</param>
            <param name="includeColumns">If true, the columns are included to the query</param>
            <param name="valueFormats">Formats for the value expression, {0} represents the column name, {1} represents the parameter. If null, only value parameter is included</param>
            <param name="condition">Column condition</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.AddIDWhere(CMS.DataEngine.DataQuery,System.String)">
            <summary>
            Adds the ID where condition to the query
            </summary>
            <param name="q">Query</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ResetChanges(System.Boolean)">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
            <param name="asUnchanged">If true, the changed columns won't contain anything. If false, the previous values are discarded, but all the columns will be marked as changed.</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ItemChanged(System.Int32)">
            <summary>
            Returns true if the item on specified column index changed.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ChangedColumns">
            <summary>
            Returns list of column names whose values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetOriginalValue(System.Int32)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.EnsureOriginalData">
            <summary>
            Ensures the object original data to store the object state.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetData(System.Int32,System.Object)">
            <summary>
            Sets the specific data.
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the object data to another object.
            </summary>
            <param name="target">Target for the data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyOriginalDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the data of the DataClass object to another.
            </summary>
            <param name="target">Destination object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CheckTargetClass(CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Checks if target data class matches this data class
            </summary>
            <param name="target">Target data class</param>
            <param name="throwException">If true, the exception is thrown if classes don't match</param>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ClassName">
            <summary>
            Object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IDColumn">
            <summary>
            ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.StructureInfo">
            <summary>
            Class structure info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ColumnsCount">
            <summary>
            Number of the object columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Item(System.String)">
            <summary>
            Column indexer, gets or sets the value in specified column name.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Item(System.Int32)">
            <summary>
            Column indexer, gets or sets the value in specified column index.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates. When ID of the object is set, the object does a full update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.UseOriginalData">
            <summary>
            If true, original data is used instead of the actual data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.TrackChanges">
            <summary>
            If true, the object tracks changes to its values
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SpecialFunctions">
            <summary>
            Provides special functions for other classes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.ConvertDataRowsToParams(System.Data.DataRow[])">
            <summary>
            Converts source parameters to query data parameters with type convert (e.g.: "true" as boolean type etc.).
            </summary>
            <param name="sourceDataRows">Source array of DataRows</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.CopyDataToDataRow(CMS.Base.IDataContainer,System.Data.DataRow)">
            <summary>
            Copies data from the given DataClass to the given DataRow.
            </summary>
            <param name="dc">Source DataClass</param>
            <param name="dr">Target DataRow</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.CopyChangedDataToDataRow(CMS.Base.IAdvancedDataContainer,System.Data.DataRow)">
            <summary>
            Copies changed data for the changed columns from the given DataClass to the given DataRow.
            </summary>
            <param name="dc">Source DataClass</param>
            <param name="dr">Target DataRow</param>
        </member>
        <member name="M:CMS.DataEngine.SpecialFunctions.CopyOriginalDataToDataRow(CMS.Base.IAdvancedDataContainer,System.Data.DataRow)">
            <summary>
            Copies original data for the changed columns from the given DataClass to the given DataRow.
            </summary>
            <param name="dc">Source DataClass</param>
            <param name="dr">Target DataRow</param>
        </member>
        <member name="T:CMS.DataEngine.SqlGenerator">
            <summary>
            Generates SQL queries for given table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.mQueryTypes">
            <summary>
            Mapping of query names to query types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.mSystemQueries">
            <summary>
            Mapping of query names to query types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSystemViewSqlQuery(System.String,System.String@)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSqlQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">Codename of the site</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GenerateDefaultView(CMS.DataEngine.DataClassInfo,System.String)">
            <summary>
            Ensures view creation.
            </summary>
            <param name="dci">Data class info</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetAutomaticQuery(System.String)">
            <summary>
            Gets an automatically generated query
            </summary>
            <param name="queryFullName">Query full name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.CreateVirtualQuery(System.String,System.String,CMS.DataEngine.DataClassInfo,System.String)">
            <summary>
            Creates a virtual query object
            </summary>
            <param name="queryFullName">Query full name</param>
            <param name="queryName">Query name</param>
            <param name="dci">Class info</param>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetQueryType(System.String)">
            <summary>
            Gets query type due to specified query name.
            </summary>
            <param name="queryName">Name of the query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.IsSystemQuery(System.String)">
            <summary>
            Check if the specified query is system query.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="T:CMS.DataEngine.SQLServerAuthenticationModeEnum">
            <summary>
            Enumeration of the SQL authentication mode.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.SQLServerAuthentication">
            <summary>
            SQL Server authentication.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.WindowsAuthentication">
            <summary>
            Windows authentication.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.USE_INDEXED_VIEWS">
            <summary>
            If true, the indexed views are used and generated within the system
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.mDefaultTableManager">
            <summary>
            Default table manager
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.mDefaultSystemTableManager">
            <summary>
            Default system table manager (debug disabled)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.mTableManagers">
            <summary>
            Table managers
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableManager.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Schema of the indexed view</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Alters specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Schema of the indexed view</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropView(System.String)">
            <summary>
            Drop specified view from database.
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshCustomViews(System.String)">
            <summary>
            Refreshes all database views which should contain all columns of the specified system table (cms_user, cms_usersettings, com_sku, newsletter_subscriber, community_group).
            You need to call this method after the column of that system table is added or removed.        
            </summary>
            <param name="tableName">System table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshDocumentViews">
            <summary>
            Regenerates views [View_CMS_Tree_Joined], [View_CMS_Tree_Joined_Versions], [View_CMS_Tree_Joined_Attachments], [View_CMS_Tree_Joined_Versions_Attachments] and default views for all document types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableManager.IsGeneratedSystemView(System.String)">
            <summary>
            Returns true if the given view is generated view with dynamic code.
            </summary>
            <param name="viewName">View name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetIndexes(System.String)">
            <summary>
            Returns DataSet with indexes of the given object. Returns columns IndexName, DropScript, CreateScript
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTables(System.String)">
            <summary>
            Gets the tables in the current database
            </summary>
            <param name="where">Tables where condition</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTableDependencies(System.String)">
            <summary>
            Gets list of object names which have foreign key constraint dependency.
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database. Allows specify if identity will be set on primary key column.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTableByDefinition(System.String,System.String)">
            <summary>
            Creates a new database table based on the provided Schema.
            </summary>
            <param name="tableName">Table name</param>
            <param name="definition">Schema based on the form definition</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTableByDefinition(System.String,System.String,System.String@)">
            <summary>
            Creates a new database table based on the provided Schema.
            </summary>
            <param name="tableName">Table name</param>
            <param name="definition">Form definition</param>
            <param name="columns">List of columns except for primary key(s)</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.LoadVariablePrecision(CMS.DataEngine.DataType,System.Xml.XmlNode,System.Int32@)">
            <summary>
            Loads the variable precision from the field definition
            </summary>
            <param name="dataType">Data type</param>
            <param name="field">Field definition</param>
            <param name="columnPrec">Column precision</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.LoadVariableSize(CMS.DataEngine.DataType,System.Xml.XmlNode,System.Int32@)">
            <summary>
            Loads the variable size from the field definition
            </summary>
            <param name="dataType">Data type</param>
            <param name="field">Field definition</param>
            <param name="columnSize">Column size</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.UpdateTableByDefinition(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the structure of given table with new schema. It adds, modifies or removes the columns.
            </summary>
            <param name="tableName">Table name</param>
            <param name="definition">New form definition</param>
            <param name="excludeColumns">Column list to exclude. Column names separated by semicolon</param>
            <param name="loadOldXML">Indicates if old XML schema definition should be loaded</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetUniqueTableName(System.String)">
            <summary>
            Returns unique table name (automatically generated table name that not yet exist in the database).
            </summary>
            <param name="originalTableName">Original table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CopyTableBySchema(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copies given table as a new one from given table cheme (ensures unique table name for the new table).
            </summary>
            <param name="newTableName">Name of the table which will be created (has to be unique), leave null or empty to default unique name from original name</param>
            <param name="originalTableName">Name of the table you want to copy</param>
            <param name="originalTableScheme">Scheme based on the form definition of the original table</param>
            <param name="withData">If true, data are copied from source to target table as well</param>
            <returns>Table name of the newly created table.</returns>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specified table column information retrieved from database information schema. Returns columns ColumnName, DataType, DataSize, DataPrecision, Nullable, DefaultValue
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column in system (en) culture. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column in system (en) culture</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnIndexes(System.String,System.String)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropColumnIndexes(System.String,System.String)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropDefaultConstraint(System.String,System.String)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetPKConstraintName(System.String)">
            <summary>
            Returns the name of the PK constraint.
            </summary>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RecreatePKConstraint(System.String,System.String[])">
            <summary>
            Drops the current PK constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTablePKName(System.String)">
            <summary>
            Returns name of the primary key. If more columns in PK, names are separated by semicolon ";".
            </summary>
            <param name="tableName">Name of the table to get PK column(s) from.</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetValueString(System.Object)">
            <summary>
            Returns the float string using the database culture.
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.SelectFieldNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Selects single field node with the specified attribute value.
            </summary>
            <param name="formNode">Xml node with field nodes representing table columns</param>
            <param name="attributeName">Attribute name of the field node to be selected</param>
            <param name="attributeValue">Attribute value of the field node to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetCode(System.String)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Creates specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Alters specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="P:CMS.DataEngine.TableManager.ConnectionString">
            <summary>
            Current connection string for the table management
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DefaultSystemTableManagerObject">
            <summary>
            Default Table manager object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DefaultTableManagerObject">
            <summary>
            Default Table manager object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.TableManagerObject">
            <summary>
            Table manager object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.UpdateSystemFields">
            <summary>
            Determines whether system fields should be updated when updating table by schema.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseCultureInfo">
            <summary>
            Database culture info obtained from DatabaseCulture property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseSize">
            <summary>
            Gets database size(including log size) in MB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseServerName">
            <summary>
            Gets database server name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseServerVersion">
            <summary>
            Gets database server version.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DisableDebug">
            <summary>
            If true, the table manager disables debug for its queries
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineModule">
            <summary>
            Represents the Data Engine module.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.#ctor">
            <summary>
            Default constructor
            </summary> 
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.OnPreInit">
            <summary>
            Pre-initializes the module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.InitServices">
            <summary>
            Initializes the data engine services
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassFormVirtualObject">
            <summary>
            Data class form virtual file object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFormVirtualObject.#ctor(System.String,CMS.DataEngine.DataClassInfo)">
            <summary>
            Constructor
            </summary>
            <param name="virtualPath">Virtual path</param>
            <param name="currentObject">Object instance</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFormVirtualObject.GetVirtualFileObject(System.String)">
            <summary>
            Creates IVirtualFileObject for specified virtual path (GetVirtualFileObjectHandler callback method) 
            </summary>
            <param name="virtualPath">Virtual path</param>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.Content">
            <summary>
            Gets virtual file content for current object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.IsStoredExternally">
            <summary>
            Indicates whether file content is stored externally (e.g. file system)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.ObjectHash">
            <summary>
            Gets object hash string used for identification of compiled version in .NET cache
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.PhysicalFilePath">
            <summary>
            Gets the physical file path if exists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.VirtualPath">
            <summary>
            Current object virtual path
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.CurrentObject">
            <summary>
            Current object instance
            </summary>
        </member>
    </members>
</doc>
